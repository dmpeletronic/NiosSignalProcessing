
DMA_FFTNIOS.elf:     file format elf32-littlenios2
DMA_FFTNIOS.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000f470 memsz 0x0000f470 flags r-x
    LOAD off    0x00010490 vaddr 0x0000f490 paddr 0x00011048 align 2**12
         filesz 0x00001bb8 memsz 0x00001bb8 flags rw-
    LOAD off    0x00012c00 vaddr 0x00012c00 paddr 0x00012c00 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e9e8  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008f4  0000eb9c  0000eb9c  0000fb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bb8  0000f490  00011048  00010490  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  00012c00  00012c00  00012c00  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00012048  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e58  00000000  00000000  00012070  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000018df  00000000  00000000  00012ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002b099  00000000  00000000  000147a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008d6d  00000000  00000000  0003f840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000168bd  00000000  00000000  000485ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ddc  00000000  00000000  0005ee6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000240f  00000000  00000000  00060c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c656  00000000  00000000  00063057  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006f6b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0006f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007387a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  0007387d  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00073884  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00073885  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00073889  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007388d  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00073891  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0007389a  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000738a3  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  000738ac  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001a  00000000  00000000  000738b7  2**0
                  CONTENTS, READONLY
 28 .jdi          000046de  00000000  00000000  000738d1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000eb9c l    d  .rodata	00000000 .rodata
0000f490 l    d  .rwdata	00000000 .rwdata
00012c00 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 create_test_data.c
00000000 l    df *ABS*	00000000 descriptor_allocation.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 validate_results.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0000f490 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000018fc l     F .text	00000058 __sprint_r
0000f17e l     O .rodata	00000010 blanks.3452
0000f16e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003960 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000535c l     F .text	00000058 std
00005468 l     F .text	00000008 __fp_lock
00005470 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00011014 l     O .rwdata	00000004 charset
0000f1b0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000f2f8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00007d78 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000090c4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a1f0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000a9cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000aa70 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ab70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ac90 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ad70 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000aecc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b0f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011030 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000b394 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fe4c l     O .rwdata	00001060 jtag_uart
00010eac l     O .rwdata	00000030 lcd_sgdma
00010edc l     O .rwdata	00000030 sgdma_mm_to_st
00010f0c l     O .rwdata	00000030 sgdma_st_to_mm
00010f3c l     O .rwdata	000000c4 porta_serial
0000b4e0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000b720 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000b948 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0000c694 l     F .text	00000060 alt_get_errno
0000cb64 l     F .text	000000c0 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000ccd0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000cf90 l     F .text	0000009c altera_avalon_uart_irq
0000d02c l     F .text	000000e0 altera_avalon_uart_rxirq
0000d10c l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000d4f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000d720 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000d988 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000de40 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000df7c l     F .text	000000dc alt_file_locked
0000e1e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000e918 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000eacc l     F .text	00000040 alt_sim_halt
000069d8 g     F .text	00000094 _mprec_log10
00006ac4 g     F .text	00000088 __any_on
00008340 g     F .text	00000070 _isatty_r
0000f2d0 g     O .rodata	00000028 __mprec_tinytens
0000af2c g     F .text	0000006c alt_main
00001670 g     F .text	000000a0 _puts_r
00012c60 g     O .bss	00000100 alt_irq
000083b0 g     F .text	00000078 _lseek_r
00011048 g       *ABS*	00000000 __flash_rwdata_start
00009be4 g     F .text	00000088 __eqdf2
00012ef0 g       *ABS*	00000000 __alt_heap_start
000015f8 g     F .text	00000044 printf
0000c100 g     F .text	00000124 alt_avalon_sgdma_do_sync_transfer
00007e0c g     F .text	00000068 __sseek
000053c4 g     F .text	000000a4 __sinit
0000609c g     F .text	00000084 _setlocale_r
000054c4 g     F .text	00000068 __sfmoreglue
0000afb8 g     F .text	00000020 __malloc_unlock
00012c01 g     O .bss	00000001 rx_done
0000c77c g     F .text	000003e8 alt_avalon_sgdma_construct_descriptor_burst
00006454 g     F .text	000000e0 memmove
000054b4 g     F .text	00000010 _cleanup
00006b4c g     F .text	000000bc _Balloc
00009cf4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
0000c368 g     F .text	00000070 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00000020 g       *ABS*	00000000 __flash_exceptions_start
000082cc g     F .text	00000074 _fstat_r
00012c10 g     O .bss	00000004 errno
00001804 g     F .text	00000014 __srget
00012c24 g     O .bss	00000004 alt_argv
00019000 g       *ABS*	00000000 _gp
00000854 g     F .text	0000002c transmit_callback_function
0000fccc g     O .rwdata	00000180 alt_fd_list
00000e00 g     F .text	00000090 _getc_r
00000d68 g     F .text	00000098 getc
0000dab0 g     F .text	00000094 alt_find_dev
000063b4 g     F .text	000000a0 memcpy
000054a8 g     F .text	0000000c _cleanup_r
00009e8c g     F .text	000000f8 __floatsidf
0000df04 g     F .text	00000078 alt_io_redirect
00009e04 g     F .text	00000088 __ltdf2
0000eb9c g       *ABS*	00000000 __DTOR_END__
00001710 g     F .text	00000014 puts
0000e424 g     F .text	00000020 altera_nios2_irq_init
00006928 g     F .text	000000b0 __ratio
0000c44c g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0000bb60 g     F .text	00000224 altera_avalon_jtag_uart_read
00000ea4 g     F .text	00000014 malloc
0000163c g     F .text	00000034 _printf_r
0000a32c g     F .text	00000008 __udivsi3
0000abd0 g     F .text	000000c0 isatty
0000f1e0 g     O .rodata	000000c8 __mprec_tens
00006078 g     F .text	00000008 __locale_charset
0000e694 g     F .text	00000090 alt_icache_flush
00012c04 g     O .bss	00000004 __malloc_top_pad
00011010 g     O .rwdata	00000004 __mb_cur_max
00006080 g     F .text	0000000c _localeconv_r
00007244 g     F .text	0000003c __i2b
00005a5c g     F .text	0000049c __sfvwrite_r
0000c574 g     F .text	00000058 alt_avalon_sgdma_stop
00001818 g     F .text	00000070 _sbrk_r
00008428 g     F .text	00000078 _read_r
0000e444 g     F .text	00000078 alt_dcache_flush
0000fc98 g     O .rwdata	0000000c __lc_ctype
00011028 g     O .rwdata	00000004 alt_max_fd
0000a6d0 g     F .text	00000138 __unpack_d
000081a8 g     F .text	00000110 _fclose_r
00005328 g     F .text	00000034 fflush
00012c08 g     O .bss	00000004 __malloc_max_sbrked_mem
00009554 g     F .text	00000074 __adddf3
00006808 g     F .text	00000120 __b2d
00008b14 g     F .text	000005b0 __umoddi3
0000addc g     F .text	000000f0 lseek
00011004 g     O .rwdata	00000004 _global_impure_ptr
000075c0 g     F .text	000005f4 _realloc_r
00012ef0 g       *ABS*	00000000 __bss_end
0000dd48 g     F .text	000000f8 alt_iic_isr_register
0000bfc4 g     F .text	0000013c alt_avalon_sgdma_do_async_transfer
0000e318 g     F .text	0000010c alt_tick
00008538 g     F .text	000005dc __udivdi3
0000f2a8 g     O .rodata	00000028 __mprec_bigtens
000074a0 g     F .text	00000120 __s2b
0000a05c g     F .text	00000194 __floatunsidf
00006728 g     F .text	00000060 __mcmp
0000cec8 g     F .text	000000c8 altera_avalon_uart_init
00005490 g     F .text	00000018 __fp_lock_all
0000dd00 g     F .text	00000048 alt_ic_irq_enabled
0000e280 g     F .text	00000098 alt_alarm_stop
00012c2c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000fca4 g     O .rwdata	00000028 alt_dev_null
0000c5cc g     F .text	00000070 alt_avalon_sgdma_check_descriptor_status
0000aa2c g     F .text	00000044 alt_dcache_flush_all
000065f4 g     F .text	00000070 __hi0bits
00009f84 g     F .text	000000d8 __fixdfsi
00011048 g       *ABS*	00000000 __ram_rwdata_end
00011020 g     O .rwdata	00000008 alt_dev_list
0000b274 g     F .text	00000120 write
0000f490 g       *ABS*	00000000 __ram_rodata_end
0000aa9c g     F .text	000000d4 fstat
00007380 g     F .text	00000120 __pow5mult
00012c14 g     O .bss	00000004 __nlocale_changed
0000a334 g     F .text	00000008 __umodsi3
0000c3d8 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_stream_desc
0000c4d0 g     F .text	00000050 alt_avalon_sgdma_register_callback
00012ef0 g       *ABS*	00000000 end
0000d558 g     F .text	000001c8 altera_avalon_uart_write
0000b660 g     F .text	000000c0 altera_avalon_jtag_uart_init
00000880 g     F .text	0000002c receive_callback_function
0000eb98 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000cd40 g     F .text	00000090 alt_avalon_timer_sc_init
0000ce28 g     F .text	00000058 altera_avalon_uart_write_fd
0000a33c g     F .text	00000080 __clzsi2
0000ce80 g     F .text	00000048 altera_avalon_uart_close_fd
0000bd84 g     F .text	00000240 altera_avalon_jtag_uart_write
0000c224 g     F .text	00000070 alt_avalon_sgdma_construct_mem_to_mem_desc
000053b4 g     F .text	00000004 __sfp_lock_acquire
000062d0 g     F .text	000000e4 memchr
00001954 g     F .text	00001eac ___vfprintf_internal_r
0000c314 g     F .text	00000054 alt_avalon_sgdma_construct_stream_to_mem_desc
00005748 g     F .text	00000314 _free_r
0000e91c g     F .text	000001b0 __call_exitprocs
000017b8 g     F .text	0000004c __srget_r
00012c18 g     O .bss	00000004 __mlocale_changed
0001100c g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000004c _start
00012c30 g     O .bss	00000004 _alt_tick_rate
0000c63c g     F .text	00000058 alt_avalon_sgdma_open
00001740 g     F .text	00000078 rand
00006f10 g     F .text	0000014c __lshift
00012c34 g     O .bss	00000004 _alt_nticks
0000afd8 g     F .text	00000120 read
0000b428 g     F .text	000000b8 alt_sys_init
0000e7e4 g     F .text	00000134 __register_exitproc
00012c00 g     O .bss	00000001 tx_done
0000e240 g     F .text	00000040 alt_remap_uncached
0000705c g     F .text	000001e8 __multiply
0000b9f8 g     F .text	00000074 altera_avalon_jtag_uart_close
0000f490 g       *ABS*	00000000 __ram_rwdata_start
0000eb9c g       *ABS*	00000000 __ram_rodata_start
00012c38 g     O .bss	00000028 __malloc_current_mallinfo
00006c08 g     F .text	0000017c __d2b
0000b518 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000e5dc g     F .text	000000b8 alt_get_fd
0000a808 g     F .text	000000c8 __fpcmp_parts_d
00008138 g     F .text	00000070 _close_r
0000e770 g     F .text	00000074 memcmp
0000b5c8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00012ef0 g       *ABS*	00000000 __alt_stack_base
0000b610 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00003824 g     F .text	0000013c __swsetup_r
0000998c g     F .text	00000258 __divdf3
0000552c g     F .text	000000f0 __sfp
00006a6c g     F .text	00000058 __copybits
0000f890 g     O .rwdata	00000408 __malloc_av_
000053c0 g     F .text	00000004 __sinit_lock_release
000095c8 g     F .text	000003c4 __muldf3
00007ef0 g     F .text	00000060 __sread
0000e4bc g     F .text	00000120 alt_find_file
0000d8d4 g     F .text	000000b4 alt_dev_llist_insert
0000af98 g     F .text	00000020 __malloc_lock
0000b1b8 g     F .text	000000bc sbrk
0000c520 g     F .text	00000054 alt_avalon_sgdma_start
0000512c g     F .text	000001fc _fflush_r
00008084 g     F .text	000000b4 _calloc_r
000006f8 g     F .text	0000015c descriptor_allocation
00012c00 g       *ABS*	00000000 __bss_start
00006534 g     F .text	00000098 memset
000008ac g     F .text	0000030c main
00012c28 g     O .bss	00000004 alt_envp
00012c0c g     O .bss	00000004 __malloc_max_total_mem
0000b570 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00001724 g     F .text	0000001c srand
00011034 g     O .rwdata	00000008 alt_sgdma_list
00007e04 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
000082b8 g     F .text	00000014 fclose
00012d60 g     O .bss	00000190 _atexit0
00003b78 g     F .text	000015b4 _dtoa_r
00000eb8 g     F .text	00000740 _malloc_r
0001102c g     O .rwdata	00000004 alt_errno
00005fc0 g     F .text	000000b8 _fwalk
0000a26c g     F .text	00000060 __divsi3
0000f304 g     O .rodata	00000014 __thenan_df
0000561c g     F .text	0000012c _malloc_trim_r
0000eb9c g       *ABS*	00000000 __CTOR_END__
00007f50 g     F .text	000000bc strcmp
0000eb9c g       *ABS*	00000000 __flash_rodata_start
0000eb9c g       *ABS*	00000000 __DTOR_LIST__
00009c6c g     F .text	00000088 __nedf2
0000b3f4 g     F .text	00000034 alt_irq_init
0000b158 g     F .text	00000060 alt_release_fd
0000f318 g     O .rodata	00000100 __clz_tab
00012c1c g     O .bss	00000004 _PathLocale
0000e724 g     F .text	00000014 atexit
0000800c g     F .text	00000078 _write_r
00006120 g     F .text	0000001c setlocale
00011000 g     O .rwdata	00000004 _impure_ptr
00012c20 g     O .bss	00000004 alt_argc
0000da4c g     F .text	00000064 _do_dtors
00007bb4 g     F .text	000001c4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
00006788 g     F .text	00000080 __ulp
00007d94 g     F .text	00000040 __isinfd
00005478 g     F .text	00000018 __fp_unlock_all
00011018 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000608c g     F .text	00000010 localeconv
0000db74 g     F .text	00000050 alt_ic_isr_register
00011048 g       *ABS*	00000000 _edata
0000cdd0 g     F .text	00000058 altera_avalon_uart_read_fd
00012ef0 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000ba6c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000dc60 g     F .text	000000a0 alt_ic_irq_disable
00000bb8 g     F .text	000001b0 validate_results
0000c6f4 g     F .text	00000088 alt_avalon_sgdma_construct_descriptor
00007e74 g     F .text	0000007c __swrite
00011008 g     O .rwdata	00000004 __malloc_trim_threshold
0000e738 g     F .text	00000038 exit
00005ef8 g     F .text	000000c8 _fwalk_reent
00006d84 g     F .text	0000018c __mdiff
0000a2cc g     F .text	00000060 __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000053b8 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000d268 g     F .text	00000060 altera_avalon_uart_close
0000eb0c g     F .text	00000020 _exit
00007dd4 g     F .text	00000030 __isnand
0000d780 g     F .text	00000154 alt_alarm_start
000084a0 g     F .text	00000098 __muldi3
0000613c g     F .text	00000194 __smakebuf_r
00001888 g     F .text	00000074 strlen
00000200 g     F .text	000004f8 create_test_data
0000e058 g     F .text	00000188 open
00009d7c g     F .text	00000088 __gedf2
0000db44 g     F .text	00000030 alt_icache_flush_all
0001103c g     O .rwdata	00000004 alt_priority_mask
0000dbc4 g     F .text	0000009c alt_ic_irq_enable
00003800 g     F .text	00000024 __vfprintf_internal
0000d2c8 g     F .text	00000230 altera_avalon_uart_read
0000c294 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
000094d4 g     F .text	00000080 __subdf3
00006664 g     F .text	000000c4 __lo0bits
00011040 g     O .rwdata	00000008 alt_alarm_list
0000d9e8 g     F .text	00000064 _do_ctors
0000a8d0 g     F .text	000000fc close
0000acf0 g     F .text	00000080 alt_load
0000a3bc g     F .text	00000314 __pack_d
0000cc24 g     F .text	000000ac alt_avalon_sgdma_init
00000e90 g     F .text	00000014 free
000053bc g     F .text	00000004 __sinit_lock_acquire
00007280 g     F .text	00000100 __multadd
000065cc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18cb1804 	addi	r3,r3,11360
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18cb1804 	addi	r3,r3,11360
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d0:	d6a40014 	ori	gp,gp,36864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d8:	108b0014 	ori	r2,r2,11264

    movhi r3, %hi(__bss_end)
     1dc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e0:	18cbbc14 	ori	r3,r3,12016

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f4:	000acf00 	call	acf0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f8:	000af2c0 	call	af2c <alt_main>

000001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1fc:	003fff06 	br	1fc <alt_after_alt_main>

00000200 <create_test_data>:
alt_u32 create_test_data(alt_sgdma_descriptor * transmit_descriptors,
                      alt_sgdma_descriptor * receive_descriptors,
                      alt_u32 number_of_buffers,
                      alt_u32 minimum_buffer_length,
                      alt_u32 maximum_buffer_length)
{
     200:	deffec04 	addi	sp,sp,-80
     204:	dfc01315 	stw	ra,76(sp)
     208:	df001215 	stw	fp,72(sp)
     20c:	df001204 	addi	fp,sp,72
     210:	e13ffb15 	stw	r4,-20(fp)
     214:	e17ffc15 	stw	r5,-16(fp)
     218:	e1bffd15 	stw	r6,-12(fp)
     21c:	e1fffe15 	stw	r7,-8(fp)

  alt_u32 buffer_counter, contents_counter, temp_length;
  alt_u32 *transmit_ptr, *receive_ptr;
  alt_u8 *transmit_ptr_copy, *receive_ptr_copy;  // will use these to fill up the tx buffers and clear the rx buffers
  alt_u32 temp_data = 0;  
     220:	e03ff315 	stw	zero,-52(fp)
  char c;


  /*  Initialization of the buffer memories and the transmit+receive descriptors */
  for(buffer_counter = 0; buffer_counter < number_of_buffers; buffer_counter++)
     224:	e03ffa15 	stw	zero,-24(fp)
     228:	00012806 	br	6cc <create_test_data+0x4cc>
  {
    /*  Generate a random buffer length between within MINIMUM_BUFFER_LENGTH and MAXIMUM_BUFFER_LENGTH */
    if(minimum_buffer_length == maximum_buffer_length)  // if you don't want a random length set these equal
     22c:	e0fffe17 	ldw	r3,-8(fp)
     230:	e0800217 	ldw	r2,8(fp)
     234:	1880031e 	bne	r3,r2,244 <create_test_data+0x44>
    {  
      temp_length = minimum_buffer_length;
     238:	e0bffe17 	ldw	r2,-8(fp)
     23c:	e0bff815 	stw	r2,-32(fp)
     240:	00001706 	br	2a0 <create_test_data+0xa0>
    }
    else
    {
      if(minimum_buffer_length > maximum_buffer_length)
     244:	e0fffe17 	ldw	r3,-8(fp)
     248:	e0800217 	ldw	r2,8(fp)
     24c:	10c0092e 	bgeu	r2,r3,274 <create_test_data+0x74>
      {
         printf("Please set the maximum buffer length to be larger than\n");
     250:	01000074 	movhi	r4,1
     254:	213ae704 	addi	r4,r4,-5220
     258:	00017100 	call	1710 <puts>
         printf("the minimum buffer length (in includes_and_settigns.h)\n");
     25c:	01000074 	movhi	r4,1
     260:	213af504 	addi	r4,r4,-5164
     264:	00017100 	call	1710 <puts>
         return 1;
     268:	00800044 	movi	r2,1
     26c:	e0bfff15 	stw	r2,-4(fp)
     270:	00011b06 	br	6e0 <create_test_data+0x4e0>
      }
      temp_length = (rand() % (maximum_buffer_length - minimum_buffer_length)) + minimum_buffer_length;      
     274:	00017400 	call	1740 <rand>
     278:	1009883a 	mov	r4,r2
     27c:	e0c00217 	ldw	r3,8(fp)
     280:	e0bffe17 	ldw	r2,-8(fp)
     284:	1887c83a 	sub	r3,r3,r2
     288:	20c5203a 	divu	r2,r4,r3
     28c:	10c5383a 	mul	r2,r2,r3
     290:	2087c83a 	sub	r3,r4,r2
     294:	e0bffe17 	ldw	r2,-8(fp)
     298:	1885883a 	add	r2,r3,r2
     29c:	e0bff815 	stw	r2,-32(fp)
    }
    
    
    transmit_ptr = (alt_u32 *)malloc(temp_length);  // this descriptor will point at a buffer of length (temp_length)
     2a0:	e13ff817 	ldw	r4,-32(fp)
     2a4:	0000ea40 	call	ea4 <malloc>
     2a8:	e0bff715 	stw	r2,-36(fp)
    if(transmit_ptr == NULL)
     2ac:	e0bff717 	ldw	r2,-36(fp)
     2b0:	1004c03a 	cmpne	r2,r2,zero
     2b4:	1000061e 	bne	r2,zero,2d0 <create_test_data+0xd0>
    {
      printf("Allocating a transmit buffer region failed\n");
     2b8:	01000074 	movhi	r4,1
     2bc:	213b0304 	addi	r4,r4,-5108
     2c0:	00017100 	call	1710 <puts>
      return 1; 
     2c4:	00800044 	movi	r2,1
     2c8:	e0bfff15 	stw	r2,-4(fp)
     2cc:	00010406 	br	6e0 <create_test_data+0x4e0>
    }
    receive_ptr = (alt_u32 *)malloc(temp_length);  // since the same contents will be received the length is the same
     2d0:	e13ff817 	ldw	r4,-32(fp)
     2d4:	0000ea40 	call	ea4 <malloc>
     2d8:	e0bff615 	stw	r2,-40(fp)
    if(receive_ptr == NULL)
     2dc:	e0bff617 	ldw	r2,-40(fp)
     2e0:	1004c03a 	cmpne	r2,r2,zero
     2e4:	1000061e 	bne	r2,zero,300 <create_test_data+0x100>
    {
      printf("Allocating a receive buffer region failed\n");
     2e8:	01000074 	movhi	r4,1
     2ec:	213b0e04 	addi	r4,r4,-5064
     2f0:	00017100 	call	1710 <puts>
      return 1; 
     2f4:	00800044 	movi	r2,1
     2f8:	e0bfff15 	stw	r2,-4(fp)
     2fc:	0000f806 	br	6e0 <create_test_data+0x4e0>
    /* This will populate sequential data (modulo 256) in each transmit buffer a byte at a time.
     * The recieve buffers are also cleared with zeros so that each time this software is run
     * the data can be reverified.  Before this function returns a flush will be performed to
     * make sure none of these writes are still in the data cache.
     */
    transmit_ptr_copy = (alt_u8 *)transmit_ptr;
     300:	e0bff717 	ldw	r2,-36(fp)
     304:	e0bff515 	stw	r2,-44(fp)
    receive_ptr_copy = (alt_u8 *)receive_ptr;
     308:	e0bff617 	ldw	r2,-40(fp)
     30c:	e0bff415 	stw	r2,-48(fp)
    for(contents_counter = 0; contents_counter < temp_length; contents_counter++)
     310:	e03ff915 	stw	zero,-28(fp)
     314:	00000f06 	br	354 <create_test_data+0x154>
    {
      transmit_ptr_copy[contents_counter] = (alt_u8)(temp_data & 0xFF);
     318:	e0fff917 	ldw	r3,-28(fp)
     31c:	e0bff517 	ldw	r2,-44(fp)
     320:	1887883a 	add	r3,r3,r2
     324:	e0bff317 	ldw	r2,-52(fp)
     328:	18800005 	stb	r2,0(r3)
      receive_ptr_copy[contents_counter] = 0;
     32c:	e0fff917 	ldw	r3,-28(fp)
     330:	e0bff417 	ldw	r2,-48(fp)
     334:	1885883a 	add	r2,r3,r2
     338:	10000005 	stb	zero,0(r2)
      temp_data++;
     33c:	e0bff317 	ldw	r2,-52(fp)
     340:	10800044 	addi	r2,r2,1
     344:	e0bff315 	stw	r2,-52(fp)
     * the data can be reverified.  Before this function returns a flush will be performed to
     * make sure none of these writes are still in the data cache.
     */
    transmit_ptr_copy = (alt_u8 *)transmit_ptr;
    receive_ptr_copy = (alt_u8 *)receive_ptr;
    for(contents_counter = 0; contents_counter < temp_length; contents_counter++)
     348:	e0bff917 	ldw	r2,-28(fp)
     34c:	10800044 	addi	r2,r2,1
     350:	e0bff915 	stw	r2,-28(fp)
     354:	e0fff917 	ldw	r3,-28(fp)
     358:	e0bff817 	ldw	r2,-32(fp)
     35c:	18bfee36 	bltu	r3,r2,318 <create_test_data+0x118>
      temp_data++;
    }

    /* This will create a descriptor that is capable of transmitting data from an Avalon-MM buffer
     * to a packet enabled Avalon-ST FIFO component */
    alt_avalon_sgdma_construct_mem_to_stream_desc(&transmit_descriptors[buffer_counter],  // descriptor
     360:	e0bffa17 	ldw	r2,-24(fp)
     364:	1004917a 	slli	r2,r2,5
     368:	1007883a 	mov	r3,r2
     36c:	e0bffb17 	ldw	r2,-20(fp)
     370:	1889883a 	add	r4,r3,r2
     374:	e0bffa17 	ldw	r2,-24(fp)
     378:	1004917a 	slli	r2,r2,5
     37c:	1007883a 	mov	r3,r2
     380:	e0bffb17 	ldw	r2,-20(fp)
     384:	1885883a 	add	r2,r3,r2
     388:	11400804 	addi	r5,r2,32
     38c:	e0bff817 	ldw	r2,-32(fp)
     390:	11ffffcc 	andi	r7,r2,65535
     394:	d8000015 	stw	zero,0(sp)
     398:	d8000115 	stw	zero,4(sp)
     39c:	d8000215 	stw	zero,8(sp)
     3a0:	d8000315 	stw	zero,12(sp)
     3a4:	e1bff717 	ldw	r6,-36(fp)
     3a8:	000c3d80 	call	c3d8 <alt_avalon_sgdma_construct_mem_to_stream_desc>

		/* This will create a descriptor that is capable of transmitting data from an Avalon-ST FIFO
		* to an Avalon-MM buffer */


    alt_avalon_sgdma_construct_stream_to_mem_desc(&receive_descriptors[buffer_counter],  // descriptor
     3ac:	e0bffa17 	ldw	r2,-24(fp)
     3b0:	1004917a 	slli	r2,r2,5
     3b4:	1007883a 	mov	r3,r2
     3b8:	e0bffc17 	ldw	r2,-16(fp)
     3bc:	1889883a 	add	r4,r3,r2
     3c0:	e0bffa17 	ldw	r2,-24(fp)
     3c4:	1004917a 	slli	r2,r2,5
     3c8:	1007883a 	mov	r3,r2
     3cc:	e0bffc17 	ldw	r2,-16(fp)
     3d0:	1885883a 	add	r2,r3,r2
     3d4:	11400804 	addi	r5,r2,32
     3d8:	e0bff817 	ldw	r2,-32(fp)
     3dc:	11ffffcc 	andi	r7,r2,65535
     3e0:	d8000015 	stw	zero,0(sp)
     3e4:	e1bff617 	ldw	r6,-40(fp)
     3e8:	000c3140 	call	c314 <alt_avalon_sgdma_construct_stream_to_mem_desc>
		printf("\nWrite_burst: 0x%x", transmit_descriptors[buffer_counter].write_burst);
		printf("\nActual_bytes_transferred: %d", transmit_descriptors[buffer_counter].actual_bytes_transferred);
		printf("\nStatus: 0x%x", transmit_descriptors[buffer_counter].status);
		printf("\nControl: 0x%x", transmit_descriptors[buffer_counter].control);*/

		printf("\n\nDescriptor Receive %d", buffer_counter);
     3ec:	01000074 	movhi	r4,1
     3f0:	213b1904 	addi	r4,r4,-5020
     3f4:	e17ffa17 	ldw	r5,-24(fp)
     3f8:	00015f80 	call	15f8 <printf>
		printf("\nRead addr: 0x%x, pad: %d", receive_descriptors[buffer_counter].read_addr, receive_descriptors[buffer_counter].read_addr_pad);
     3fc:	e0bffa17 	ldw	r2,-24(fp)
     400:	1004917a 	slli	r2,r2,5
     404:	1007883a 	mov	r3,r2
     408:	e0bffc17 	ldw	r2,-16(fp)
     40c:	1887883a 	add	r3,r3,r2
     410:	19000003 	ldbu	r4,0(r3)
     414:	18800043 	ldbu	r2,1(r3)
     418:	1004923a 	slli	r2,r2,8
     41c:	1108b03a 	or	r4,r2,r4
     420:	18800083 	ldbu	r2,2(r3)
     424:	1004943a 	slli	r2,r2,16
     428:	1108b03a 	or	r4,r2,r4
     42c:	188000c3 	ldbu	r2,3(r3)
     430:	1004963a 	slli	r2,r2,24
     434:	1104b03a 	or	r2,r2,r4
     438:	100b883a 	mov	r5,r2
     43c:	e0bffa17 	ldw	r2,-24(fp)
     440:	1004917a 	slli	r2,r2,5
     444:	1007883a 	mov	r3,r2
     448:	e0bffc17 	ldw	r2,-16(fp)
     44c:	1887883a 	add	r3,r3,r2
     450:	19000103 	ldbu	r4,4(r3)
     454:	18800143 	ldbu	r2,5(r3)
     458:	1004923a 	slli	r2,r2,8
     45c:	1108b03a 	or	r4,r2,r4
     460:	18800183 	ldbu	r2,6(r3)
     464:	1004943a 	slli	r2,r2,16
     468:	1108b03a 	or	r4,r2,r4
     46c:	188001c3 	ldbu	r2,7(r3)
     470:	1004963a 	slli	r2,r2,24
     474:	1104b03a 	or	r2,r2,r4
     478:	100d883a 	mov	r6,r2
     47c:	01000074 	movhi	r4,1
     480:	213b1f04 	addi	r4,r4,-4996
     484:	00015f80 	call	15f8 <printf>
		printf("\nWrite add: 0x%x, pad: %d", receive_descriptors[buffer_counter].write_addr, receive_descriptors[buffer_counter].write_addr_pad);
     488:	e0bffa17 	ldw	r2,-24(fp)
     48c:	1004917a 	slli	r2,r2,5
     490:	1007883a 	mov	r3,r2
     494:	e0bffc17 	ldw	r2,-16(fp)
     498:	1887883a 	add	r3,r3,r2
     49c:	19000203 	ldbu	r4,8(r3)
     4a0:	18800243 	ldbu	r2,9(r3)
     4a4:	1004923a 	slli	r2,r2,8
     4a8:	1108b03a 	or	r4,r2,r4
     4ac:	18800283 	ldbu	r2,10(r3)
     4b0:	1004943a 	slli	r2,r2,16
     4b4:	1108b03a 	or	r4,r2,r4
     4b8:	188002c3 	ldbu	r2,11(r3)
     4bc:	1004963a 	slli	r2,r2,24
     4c0:	1104b03a 	or	r2,r2,r4
     4c4:	100b883a 	mov	r5,r2
     4c8:	e0bffa17 	ldw	r2,-24(fp)
     4cc:	1004917a 	slli	r2,r2,5
     4d0:	1007883a 	mov	r3,r2
     4d4:	e0bffc17 	ldw	r2,-16(fp)
     4d8:	1887883a 	add	r3,r3,r2
     4dc:	19000303 	ldbu	r4,12(r3)
     4e0:	18800343 	ldbu	r2,13(r3)
     4e4:	1004923a 	slli	r2,r2,8
     4e8:	1108b03a 	or	r4,r2,r4
     4ec:	18800383 	ldbu	r2,14(r3)
     4f0:	1004943a 	slli	r2,r2,16
     4f4:	1108b03a 	or	r4,r2,r4
     4f8:	188003c3 	ldbu	r2,15(r3)
     4fc:	1004963a 	slli	r2,r2,24
     500:	1104b03a 	or	r2,r2,r4
     504:	100d883a 	mov	r6,r2
     508:	01000074 	movhi	r4,1
     50c:	213b2604 	addi	r4,r4,-4968
     510:	00015f80 	call	15f8 <printf>
		printf("\nNext:      0x%x, pad: %d", receive_descriptors[buffer_counter].next, receive_descriptors[buffer_counter].next_pad);
     514:	e0bffa17 	ldw	r2,-24(fp)
     518:	1004917a 	slli	r2,r2,5
     51c:	1007883a 	mov	r3,r2
     520:	e0bffc17 	ldw	r2,-16(fp)
     524:	1887883a 	add	r3,r3,r2
     528:	19000403 	ldbu	r4,16(r3)
     52c:	18800443 	ldbu	r2,17(r3)
     530:	1004923a 	slli	r2,r2,8
     534:	1108b03a 	or	r4,r2,r4
     538:	18800483 	ldbu	r2,18(r3)
     53c:	1004943a 	slli	r2,r2,16
     540:	1108b03a 	or	r4,r2,r4
     544:	188004c3 	ldbu	r2,19(r3)
     548:	1004963a 	slli	r2,r2,24
     54c:	1104b03a 	or	r2,r2,r4
     550:	100b883a 	mov	r5,r2
     554:	e0bffa17 	ldw	r2,-24(fp)
     558:	1004917a 	slli	r2,r2,5
     55c:	1007883a 	mov	r3,r2
     560:	e0bffc17 	ldw	r2,-16(fp)
     564:	1887883a 	add	r3,r3,r2
     568:	19000503 	ldbu	r4,20(r3)
     56c:	18800543 	ldbu	r2,21(r3)
     570:	1004923a 	slli	r2,r2,8
     574:	1108b03a 	or	r4,r2,r4
     578:	18800583 	ldbu	r2,22(r3)
     57c:	1004943a 	slli	r2,r2,16
     580:	1108b03a 	or	r4,r2,r4
     584:	188005c3 	ldbu	r2,23(r3)
     588:	1004963a 	slli	r2,r2,24
     58c:	1104b03a 	or	r2,r2,r4
     590:	100d883a 	mov	r6,r2
     594:	01000074 	movhi	r4,1
     598:	213b2d04 	addi	r4,r4,-4940
     59c:	00015f80 	call	15f8 <printf>
		printf("\nBytes to transfer: %d", receive_descriptors[buffer_counter].bytes_to_transfer);
     5a0:	e0bffa17 	ldw	r2,-24(fp)
     5a4:	1004917a 	slli	r2,r2,5
     5a8:	1007883a 	mov	r3,r2
     5ac:	e0bffc17 	ldw	r2,-16(fp)
     5b0:	1885883a 	add	r2,r3,r2
     5b4:	10c00603 	ldbu	r3,24(r2)
     5b8:	10800643 	ldbu	r2,25(r2)
     5bc:	1004923a 	slli	r2,r2,8
     5c0:	10c4b03a 	or	r2,r2,r3
     5c4:	117fffcc 	andi	r5,r2,65535
     5c8:	01000074 	movhi	r4,1
     5cc:	213b3404 	addi	r4,r4,-4912
     5d0:	00015f80 	call	15f8 <printf>
		printf("\nRead_burst: 0x%x", receive_descriptors[buffer_counter].read_burst);
     5d4:	e0bffa17 	ldw	r2,-24(fp)
     5d8:	1004917a 	slli	r2,r2,5
     5dc:	1007883a 	mov	r3,r2
     5e0:	e0bffc17 	ldw	r2,-16(fp)
     5e4:	1885883a 	add	r2,r3,r2
     5e8:	10800683 	ldbu	r2,26(r2)
     5ec:	11403fcc 	andi	r5,r2,255
     5f0:	01000074 	movhi	r4,1
     5f4:	213b3a04 	addi	r4,r4,-4888
     5f8:	00015f80 	call	15f8 <printf>
		printf("\nWrite_burst: 0x%x", receive_descriptors[buffer_counter].write_burst);
     5fc:	e0bffa17 	ldw	r2,-24(fp)
     600:	1004917a 	slli	r2,r2,5
     604:	1007883a 	mov	r3,r2
     608:	e0bffc17 	ldw	r2,-16(fp)
     60c:	1885883a 	add	r2,r3,r2
     610:	108006c3 	ldbu	r2,27(r2)
     614:	11403fcc 	andi	r5,r2,255
     618:	01000074 	movhi	r4,1
     61c:	213b3f04 	addi	r4,r4,-4868
     620:	00015f80 	call	15f8 <printf>
		printf("\nActual_bytes_transferred: %d", receive_descriptors[buffer_counter].actual_bytes_transferred);
     624:	e0bffa17 	ldw	r2,-24(fp)
     628:	1004917a 	slli	r2,r2,5
     62c:	1007883a 	mov	r3,r2
     630:	e0bffc17 	ldw	r2,-16(fp)
     634:	1885883a 	add	r2,r3,r2
     638:	10c00703 	ldbu	r3,28(r2)
     63c:	10800743 	ldbu	r2,29(r2)
     640:	1004923a 	slli	r2,r2,8
     644:	10c4b03a 	or	r2,r2,r3
     648:	117fffcc 	andi	r5,r2,65535
     64c:	01000074 	movhi	r4,1
     650:	213b4404 	addi	r4,r4,-4848
     654:	00015f80 	call	15f8 <printf>
		printf("\nStatus: 0x%x", receive_descriptors[buffer_counter].status);
     658:	e0bffa17 	ldw	r2,-24(fp)
     65c:	1004917a 	slli	r2,r2,5
     660:	1007883a 	mov	r3,r2
     664:	e0bffc17 	ldw	r2,-16(fp)
     668:	1885883a 	add	r2,r3,r2
     66c:	10800783 	ldbu	r2,30(r2)
     670:	11403fcc 	andi	r5,r2,255
     674:	01000074 	movhi	r4,1
     678:	213b4c04 	addi	r4,r4,-4816
     67c:	00015f80 	call	15f8 <printf>
		printf("\nControl: 0x%x", receive_descriptors[buffer_counter].control);
     680:	e0bffa17 	ldw	r2,-24(fp)
     684:	1004917a 	slli	r2,r2,5
     688:	1007883a 	mov	r3,r2
     68c:	e0bffc17 	ldw	r2,-16(fp)
     690:	1885883a 	add	r2,r3,r2
     694:	108007c3 	ldbu	r2,31(r2)
     698:	11403fcc 	andi	r5,r2,255
     69c:	01000074 	movhi	r4,1
     6a0:	213b5004 	addi	r4,r4,-4800
     6a4:	00015f80 	call	15f8 <printf>
        c = getchar();
     6a8:	00800074 	movhi	r2,1
     6ac:	10840004 	addi	r2,r2,4096
     6b0:	10800017 	ldw	r2,0(r2)
     6b4:	11000117 	ldw	r4,4(r2)
     6b8:	0000d680 	call	d68 <getc>
     6bc:	e0bff205 	stb	r2,-56(fp)
  alt_u32 temp_data = 0;  
  char c;


  /*  Initialization of the buffer memories and the transmit+receive descriptors */
  for(buffer_counter = 0; buffer_counter < number_of_buffers; buffer_counter++)
     6c0:	e0bffa17 	ldw	r2,-24(fp)
     6c4:	10800044 	addi	r2,r2,1
     6c8:	e0bffa15 	stw	r2,-24(fp)
     6cc:	e0fffa17 	ldw	r3,-24(fp)
     6d0:	e0bffd17 	ldw	r2,-12(fp)
     6d4:	18bed536 	bltu	r3,r2,22c <create_test_data+0x2c>
		printf("\nControl: 0x%x", receive_descriptors[buffer_counter].control);
        c = getchar();

  }
  
  alt_dcache_flush_all();  // make sure all the transmit buffers and cleared receive buffers go out to main memory
     6d8:	000aa2c0 	call	aa2c <alt_dcache_flush_all>
  
  return 0;  // no failures creating data buffers
     6dc:	e03fff15 	stw	zero,-4(fp)
     6e0:	e0bfff17 	ldw	r2,-4(fp)
}
     6e4:	e037883a 	mov	sp,fp
     6e8:	dfc00117 	ldw	ra,4(sp)
     6ec:	df000017 	ldw	fp,0(sp)
     6f0:	dec00204 	addi	sp,sp,8
     6f4:	f800283a 	ret

000006f8 <descriptor_allocation>:
alt_u32 descriptor_allocation(alt_sgdma_descriptor ** transmit_descriptors,
                      alt_sgdma_descriptor ** transmit_descriptors_copy,
                      alt_sgdma_descriptor ** receive_descriptors,
                      alt_sgdma_descriptor ** receive_descriptors_copy,
                      alt_u32 number_of_buffers)
{
     6f8:	defff704 	addi	sp,sp,-36
     6fc:	dfc00815 	stw	ra,32(sp)
     700:	df000715 	stw	fp,28(sp)
     704:	df000704 	addi	fp,sp,28
     708:	e13ffb15 	stw	r4,-20(fp)
     70c:	e17ffc15 	stw	r5,-16(fp)
     710:	e1bffd15 	stw	r6,-12(fp)
     714:	e1fffe15 	stw	r7,-8(fp)
   * - Third put this memory location into the pointer copy   *
   *   to be freed before the program exits                   *
   * - Forth slide the tempory pointer until it lies on a 32  *
   *   byte boundary (descriptor master is 256 bits wide)     * 
   ************************************************************/  
  temp_ptr_1 = malloc((number_of_buffers + 2) * ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE);
     718:	e0800217 	ldw	r2,8(fp)
     71c:	1004917a 	slli	r2,r2,5
     720:	11001004 	addi	r4,r2,64
     724:	0000ea40 	call	ea4 <malloc>
     728:	e0bffa15 	stw	r2,-24(fp)
  if(temp_ptr_1 == NULL)
     72c:	e0bffa17 	ldw	r2,-24(fp)
     730:	1004c03a 	cmpne	r2,r2,zero
     734:	1000061e 	bne	r2,zero,750 <descriptor_allocation+0x58>
  {
    printf("Failed to allocate memory for the transmit descriptors\n");
     738:	01000074 	movhi	r4,1
     73c:	213b5404 	addi	r4,r4,-4784
     740:	00017100 	call	1710 <puts>
    return 1; 
     744:	00800044 	movi	r2,1
     748:	e0bfff15 	stw	r2,-4(fp)
     74c:	00003b06 	br	83c <descriptor_allocation+0x144>
  }
  *transmit_descriptors_copy = (alt_sgdma_descriptor *)temp_ptr_1;
     750:	e0fffa17 	ldw	r3,-24(fp)
     754:	e0bffc17 	ldw	r2,-16(fp)
     758:	10c00015 	stw	r3,0(r2)
  
  while((((alt_u32)temp_ptr_1) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
     75c:	00000306 	br	76c <descriptor_allocation+0x74>
  {
    temp_ptr_1++;  // slide the pointer until 32 byte boundary is found
     760:	e0bffa17 	ldw	r2,-24(fp)
     764:	10800044 	addi	r2,r2,1
     768:	e0bffa15 	stw	r2,-24(fp)
    printf("Failed to allocate memory for the transmit descriptors\n");
    return 1; 
  }
  *transmit_descriptors_copy = (alt_sgdma_descriptor *)temp_ptr_1;
  
  while((((alt_u32)temp_ptr_1) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
     76c:	e0bffa17 	ldw	r2,-24(fp)
     770:	108007cc 	andi	r2,r2,31
     774:	1004c03a 	cmpne	r2,r2,zero
     778:	103ff91e 	bne	r2,zero,760 <descriptor_allocation+0x68>
  {
    temp_ptr_1++;  // slide the pointer until 32 byte boundary is found
  }
  *transmit_descriptors = (alt_sgdma_descriptor *)temp_ptr_1;
     77c:	e0fffa17 	ldw	r3,-24(fp)
     780:	e0bffb17 	ldw	r2,-20(fp)
     784:	10c00015 	stw	r3,0(r2)
/**************************************************************/


  /* Clear out the null descriptor owned by hardware bit.  These locations
   * came from the heap so we don't know what state the bytes are in (owned bit could be high).*/
  transmit_descriptors[number_of_buffers]->control = 0;
     788:	e0800217 	ldw	r2,8(fp)
     78c:	1085883a 	add	r2,r2,r2
     790:	1085883a 	add	r2,r2,r2
     794:	1007883a 	mov	r3,r2
     798:	e0bffb17 	ldw	r2,-20(fp)
     79c:	1885883a 	add	r2,r3,r2
     7a0:	10800017 	ldw	r2,0(r2)
     7a4:	100007c5 	stb	zero,31(r2)
   * - Third put this memory location into the pointer copy   *
   *   to be freed before the program exits                   *
   * - Forth slide the tempory pointer until it lies on a 32  *
   *   byte boundary (descriptor master is 256 bits wide)     * 
   ************************************************************/  
  temp_ptr_2 = malloc((number_of_buffers + 2) * ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE);
     7a8:	e0800217 	ldw	r2,8(fp)
     7ac:	1004917a 	slli	r2,r2,5
     7b0:	11001004 	addi	r4,r2,64
     7b4:	0000ea40 	call	ea4 <malloc>
     7b8:	e0bff915 	stw	r2,-28(fp)
  if(temp_ptr_2 == NULL)
     7bc:	e0bff917 	ldw	r2,-28(fp)
     7c0:	1004c03a 	cmpne	r2,r2,zero
     7c4:	1000061e 	bne	r2,zero,7e0 <descriptor_allocation+0xe8>
  {
    printf("Failed to allocate memory for the receive descriptors\n");
     7c8:	01000074 	movhi	r4,1
     7cc:	213b6204 	addi	r4,r4,-4728
     7d0:	00017100 	call	1710 <puts>
    return 1; 
     7d4:	00800044 	movi	r2,1
     7d8:	e0bfff15 	stw	r2,-4(fp)
     7dc:	00001706 	br	83c <descriptor_allocation+0x144>
  }
  *receive_descriptors_copy = (alt_sgdma_descriptor *)temp_ptr_2;
     7e0:	e0fff917 	ldw	r3,-28(fp)
     7e4:	e0bffe17 	ldw	r2,-8(fp)
     7e8:	10c00015 	stw	r3,0(r2)
  
  while((((alt_u32)temp_ptr_2) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
     7ec:	00000306 	br	7fc <descriptor_allocation+0x104>
  {
    temp_ptr_2++;  // slide the pointer until 32 byte boundary is found
     7f0:	e0bff917 	ldw	r2,-28(fp)
     7f4:	10800044 	addi	r2,r2,1
     7f8:	e0bff915 	stw	r2,-28(fp)
    printf("Failed to allocate memory for the receive descriptors\n");
    return 1; 
  }
  *receive_descriptors_copy = (alt_sgdma_descriptor *)temp_ptr_2;
  
  while((((alt_u32)temp_ptr_2) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
     7fc:	e0bff917 	ldw	r2,-28(fp)
     800:	108007cc 	andi	r2,r2,31
     804:	1004c03a 	cmpne	r2,r2,zero
     808:	103ff91e 	bne	r2,zero,7f0 <descriptor_allocation+0xf8>
  {
    temp_ptr_2++;  // slide the pointer until 32 byte boundary is found
  }
  *receive_descriptors = (alt_sgdma_descriptor *)temp_ptr_2;
     80c:	e0fff917 	ldw	r3,-28(fp)
     810:	e0bffd17 	ldw	r2,-12(fp)
     814:	10c00015 	stw	r3,0(r2)
/**************************************************************/
  
  /* Clear out the null descriptor owned by hardware bit.  These locations
   * came from the heap so we don't know what state the bytes are in (owned bit could be high).*/
  receive_descriptors[number_of_buffers]->control = 0;
     818:	e0800217 	ldw	r2,8(fp)
     81c:	1085883a 	add	r2,r2,r2
     820:	1085883a 	add	r2,r2,r2
     824:	1007883a 	mov	r3,r2
     828:	e0bffd17 	ldw	r2,-12(fp)
     82c:	1885883a 	add	r2,r3,r2
     830:	10800017 	ldw	r2,0(r2)
     834:	100007c5 	stb	zero,31(r2)


  return 0;  // no failures in allocation
     838:	e03fff15 	stw	zero,-4(fp)
     83c:	e0bfff17 	ldw	r2,-4(fp)
}
     840:	e037883a 	mov	sp,fp
     844:	dfc00117 	ldw	ra,4(sp)
     848:	df000017 	ldw	fp,0(sp)
     84c:	dec00204 	addi	sp,sp,8
     850:	f800283a 	ret

00000854 <transmit_callback_function>:
/* These will gate the data checking near the end of main */
volatile alt_u8 tx_done = 0;
volatile alt_u8 rx_done = 0;

void transmit_callback_function(void * context)
{
     854:	defffe04 	addi	sp,sp,-8
     858:	df000115 	stw	fp,4(sp)
     85c:	df000104 	addi	fp,sp,4
     860:	e13fff15 	stw	r4,-4(fp)
  tx_done++;  /* main will be polling for this value being 1 */
     864:	d0a70003 	ldbu	r2,-25600(gp)
     868:	10800044 	addi	r2,r2,1
     86c:	d0a70005 	stb	r2,-25600(gp)
}
     870:	e037883a 	mov	sp,fp
     874:	df000017 	ldw	fp,0(sp)
     878:	dec00104 	addi	sp,sp,4
     87c:	f800283a 	ret

00000880 <receive_callback_function>:

void receive_callback_function(void * context)
{
     880:	defffe04 	addi	sp,sp,-8
     884:	df000115 	stw	fp,4(sp)
     888:	df000104 	addi	fp,sp,4
     88c:	e13fff15 	stw	r4,-4(fp)
  rx_done++;  /* main will be polling for this value being 1 */
     890:	d0a70043 	ldbu	r2,-25599(gp)
     894:	10800044 	addi	r2,r2,1
     898:	d0a70045 	stb	r2,-25599(gp)
}
     89c:	e037883a 	mov	sp,fp
     8a0:	df000017 	ldw	fp,0(sp)
     8a4:	dec00104 	addi	sp,sp,4
     8a8:	f800283a 	ret

000008ac <main>:


int main()
{
     8ac:	defff404 	addi	sp,sp,-48
     8b0:	dfc00b15 	stw	ra,44(sp)
     8b4:	df000a15 	stw	fp,40(sp)
     8b8:	df000a04 	addi	fp,sp,40
    alt_sgdma_descriptor *transmit_descriptors, *transmit_descriptors_copy;
	alt_sgdma_descriptor *receive_descriptors, *receive_descriptors_copy;
	char c;


	printf("\nHello from NIOS. Press s to continue..\n");
     8bc:	01000074 	movhi	r4,1
     8c0:	213b7004 	addi	r4,r4,-4672
     8c4:	00017100 	call	1710 <puts>

	while(1){
		c = getchar();
     8c8:	00800074 	movhi	r2,1
     8cc:	10840004 	addi	r2,r2,4096
     8d0:	10800017 	ldw	r2,0(r2)
     8d4:	11000117 	ldw	r4,4(r2)
     8d8:	0000d680 	call	d68 <getc>
     8dc:	e0bff705 	stb	r2,-36(fp)
		if(c=='s') break;
     8e0:	e0bff707 	ldb	r2,-36(fp)
     8e4:	10801ce0 	cmpeqi	r2,r2,115
     8e8:	1000011e 	bne	r2,zero,8f0 <main+0x44>
	}
     8ec:	003ff606 	br	8c8 <main+0x1c>
	printf("Starting\n");
     8f0:	01000074 	movhi	r4,1
     8f4:	213b7a04 	addi	r4,r4,-4632
     8f8:	00017100 	call	1710 <puts>

  /* Open a SG-DMA for MM-->ST and ST-->MM (two SG-DMAs are present) */
  transmit_DMA = alt_avalon_sgdma_open("/dev/sgdma_mm_to_st");
     8fc:	01000074 	movhi	r4,1
     900:	213b7d04 	addi	r4,r4,-4620
     904:	000c63c0 	call	c63c <alt_avalon_sgdma_open>
     908:	e0bff915 	stw	r2,-28(fp)
  receive_DMA = alt_avalon_sgdma_open("/dev/sgdma_st_to_mm");
     90c:	01000074 	movhi	r4,1
     910:	213b8204 	addi	r4,r4,-4600
     914:	000c63c0 	call	c63c <alt_avalon_sgdma_open>
     918:	e0bff815 	stw	r2,-32(fp)
  printf("SGDMAs opened\n");
     91c:	01000074 	movhi	r4,1
     920:	213b8704 	addi	r4,r4,-4580
     924:	00017100 	call	1710 <puts>
  

/**************************************************************
   * Making sure the SG-DMAs were opened correctly            *
   ************************************************************/
  printf("Verifing pointers\n");
     928:	01000074 	movhi	r4,1
     92c:	213b8b04 	addi	r4,r4,-4564
     930:	00017100 	call	1710 <puts>
  if(transmit_DMA == NULL)
     934:	e0bff917 	ldw	r2,-28(fp)
     938:	1004c03a 	cmpne	r2,r2,zero
     93c:	10000a1e 	bne	r2,zero,968 <main+0xbc>
  {
    printf("Could not open the transmit SG-DMA\n");
     940:	01000074 	movhi	r4,1
     944:	213b9004 	addi	r4,r4,-4544
     948:	00017100 	call	1710 <puts>
    c=getchar();
     94c:	00800074 	movhi	r2,1
     950:	10840004 	addi	r2,r2,4096
     954:	10800017 	ldw	r2,0(r2)
     958:	11000117 	ldw	r4,4(r2)
     95c:	0000d680 	call	d68 <getc>
     960:	e0bff705 	stb	r2,-36(fp)
     964:	00000306 	br	974 <main+0xc8>

  }else
	printf("Transmit not null\n");
     968:	01000074 	movhi	r4,1
     96c:	213b9904 	addi	r4,r4,-4508
     970:	00017100 	call	1710 <puts>

  if(receive_DMA == NULL)
     974:	e0bff817 	ldw	r2,-32(fp)
     978:	1004c03a 	cmpne	r2,r2,zero
     97c:	10000a1e 	bne	r2,zero,9a8 <main+0xfc>
  {
    printf("Could not open the receive SG-DMA\n");
     980:	01000074 	movhi	r4,1
     984:	213b9e04 	addi	r4,r4,-4488
     988:	00017100 	call	1710 <puts>
    c=getchar();
     98c:	00800074 	movhi	r2,1
     990:	10840004 	addi	r2,r2,4096
     994:	10800017 	ldw	r2,0(r2)
     998:	11000117 	ldw	r4,4(r2)
     99c:	0000d680 	call	d68 <getc>
     9a0:	e0bff705 	stb	r2,-36(fp)
     9a4:	00000306 	br	9b4 <main+0x108>

  }else
	  printf("Receive not null\n");
     9a8:	01000074 	movhi	r4,1
     9ac:	213ba704 	addi	r4,r4,-4452
     9b0:	00017100 	call	1710 <puts>
/**************************************************************
   * Allocating descriptor table space from main memory.      * 
   * Pointers are passed by reference since they will be      *
   * modified by this function.                               *
   ************************************************************/
  printf("Allocating descriptors\n");
     9b4:	01000074 	movhi	r4,1
     9b8:	213bac04 	addi	r4,r4,-4432
     9bc:	00017100 	call	1710 <puts>
  return_code = descriptor_allocation(&transmit_descriptors,
     9c0:	e13ffb04 	addi	r4,fp,-20
     9c4:	e17ffc04 	addi	r5,fp,-16
     9c8:	e1bffd04 	addi	r6,fp,-12
     9cc:	e1fffe04 	addi	r7,fp,-8
     9d0:	00803e84 	movi	r2,250
     9d4:	d8800015 	stw	r2,0(sp)
     9d8:	00006f80 	call	6f8 <descriptor_allocation>
     9dc:	e0bffa15 	stw	r2,-24(fp)
                                &transmit_descriptors_copy,
                                &receive_descriptors,
                                &receive_descriptors_copy,
                                NUMBER_OF_BUFFERS);
  printf("Verifing descriptors\n");
     9e0:	01000074 	movhi	r4,1
     9e4:	213bb204 	addi	r4,r4,-4408
     9e8:	00017100 	call	1710 <puts>
  if(return_code == 1)
     9ec:	e0bffa17 	ldw	r2,-24(fp)
     9f0:	10800058 	cmpnei	r2,r2,1
     9f4:	1000061e 	bne	r2,zero,a10 <main+0x164>
  {
    printf("Allocating the descriptor memory failed... exiting\n");
     9f8:	01000074 	movhi	r4,1
     9fc:	213bb804 	addi	r4,r4,-4384
     a00:	00017100 	call	1710 <puts>
    return 1; 
     a04:	00800044 	movi	r2,1
     a08:	e0bfff15 	stw	r2,-4(fp)
     a0c:	00006406 	br	ba0 <main+0x2f4>
  }else
	  printf("Descriptors allocated\n");
     a10:	01000074 	movhi	r4,1
     a14:	213bc504 	addi	r4,r4,-4332
     a18:	00017100 	call	1710 <puts>


/**************************************************************
   * Allocating data buffers and populating them with data    *
   ************************************************************/
  return_code = create_test_data(transmit_descriptors,
     a1c:	e13ffb17 	ldw	r4,-20(fp)
     a20:	e17ffd17 	ldw	r5,-12(fp)
     a24:	00817704 	movi	r2,1500
     a28:	d8800015 	stw	r2,0(sp)
     a2c:	01803e84 	movi	r6,250
     a30:	01c01004 	movi	r7,64
     a34:	00002000 	call	200 <create_test_data>
     a38:	e0bffa15 	stw	r2,-24(fp)
                                 receive_descriptors,
                                 NUMBER_OF_BUFFERS,
                                 MINIMUM_BUFFER_LENGTH,
                                 MAXIMUM_BUFFER_LENGTH);
  if(return_code == 1)
     a3c:	e0bffa17 	ldw	r2,-24(fp)
     a40:	10800058 	cmpnei	r2,r2,1
     a44:	1000061e 	bne	r2,zero,a60 <main+0x1b4>
  {
    printf("Allocating the data buffers failed... exiting\n");
     a48:	01000074 	movhi	r4,1
     a4c:	213bcb04 	addi	r4,r4,-4308
     a50:	00017100 	call	1710 <puts>
    return 1; 
     a54:	00800044 	movi	r2,1
     a58:	e0bfff15 	stw	r2,-4(fp)
     a5c:	00005006 	br	ba0 <main+0x2f4>
  }else
	printf("Data created\n");
     a60:	01000074 	movhi	r4,1
     a64:	213bd704 	addi	r4,r4,-4260
     a68:	00017100 	call	1710 <puts>

/**************************************************************
   * Register the ISRs that will get called when each (full)  *
   * transfer completes                                       *
   ************************************************************/ 
  alt_avalon_sgdma_register_callback(transmit_DMA,
     a6c:	e13ff917 	ldw	r4,-28(fp)
     a70:	01400034 	movhi	r5,0
     a74:	29421504 	addi	r5,r5,2132
     a78:	01800604 	movi	r6,24
     a7c:	000f883a 	mov	r7,zero
     a80:	000c4d00 	call	c4d0 <alt_avalon_sgdma_register_callback>
                                    &transmit_callback_function,
                                    (ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK | ALTERA_AVALON_SGDMA_CONTROL_IE_CHAIN_COMPLETED_MSK),
                                    NULL);
  alt_avalon_sgdma_register_callback(receive_DMA,
     a84:	e13ff817 	ldw	r4,-32(fp)
     a88:	01400034 	movhi	r5,0
     a8c:	29422004 	addi	r5,r5,2176
     a90:	01800604 	movi	r6,24
     a94:	000f883a 	mov	r7,zero
     a98:	000c4d00 	call	c4d0 <alt_avalon_sgdma_register_callback>
                                    &receive_callback_function,
                                    (ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK | ALTERA_AVALON_SGDMA_CONTROL_IE_CHAIN_COMPLETED_MSK),
                                    NULL);
  printf("Callbacks initializated\n");
     a9c:	01000074 	movhi	r4,1
     aa0:	213bdb04 	addi	r4,r4,-4244
     aa4:	00017100 	call	1710 <puts>


/**************************************************************
   * Starting both the transmit and receive transfers         *
   ************************************************************/
  printf("Starting up the SGDMA engines\n");
     aa8:	01000074 	movhi	r4,1
     aac:	213be104 	addi	r4,r4,-4220
     ab0:	00017100 	call	1710 <puts>

  /* Prime the SGDMA engines with the descriptor lists (first one, it's a linked list) */
  if(alt_avalon_sgdma_do_async_transfer(transmit_DMA, &transmit_descriptors[0]) != 0)
     ab4:	e17ffb17 	ldw	r5,-20(fp)
     ab8:	e13ff917 	ldw	r4,-28(fp)
     abc:	000bfc40 	call	bfc4 <alt_avalon_sgdma_do_async_transfer>
     ac0:	1005003a 	cmpeq	r2,r2,zero
     ac4:	1000061e 	bne	r2,zero,ae0 <main+0x234>
  {
    printf("Writing the head of the transmit descriptor list to the DMA failed\n");
     ac8:	01000074 	movhi	r4,1
     acc:	213be904 	addi	r4,r4,-4188
     ad0:	00017100 	call	1710 <puts>
    return 1;
     ad4:	00800044 	movi	r2,1
     ad8:	e0bfff15 	stw	r2,-4(fp)
     adc:	00003006 	br	ba0 <main+0x2f4>
  }
  printf("Transmit started\n");
     ae0:	01000074 	movhi	r4,1
     ae4:	213bfa04 	addi	r4,r4,-4120
     ae8:	00017100 	call	1710 <puts>
  if(alt_avalon_sgdma_do_async_transfer(receive_DMA, &receive_descriptors[0]) != 0)
     aec:	e17ffd17 	ldw	r5,-12(fp)
     af0:	e13ff817 	ldw	r4,-32(fp)
     af4:	000bfc40 	call	bfc4 <alt_avalon_sgdma_do_async_transfer>
     af8:	1005003a 	cmpeq	r2,r2,zero
     afc:	1000061e 	bne	r2,zero,b18 <main+0x26c>
  {
    printf("Writing the head of the receive descriptor list to the DMA failed\n");
     b00:	01000074 	movhi	r4,1
     b04:	213bff04 	addi	r4,r4,-4100
     b08:	00017100 	call	1710 <puts>
    return 1;
     b0c:	00800044 	movi	r2,1
     b10:	e0bfff15 	stw	r2,-4(fp)
     b14:	00002206 	br	ba0 <main+0x2f4>
  }
  printf("Receive started\n");
     b18:	01000074 	movhi	r4,1
     b1c:	213c1004 	addi	r4,r4,-4032
     b20:	00017100 	call	1710 <puts>


/**************************************************************
   * Blocking until the SGDMA interrupts fire                 *
   ************************************************************/
  while(tx_done == 0) {}
     b24:	d0a70003 	ldbu	r2,-25600(gp)
     b28:	10803fcc 	andi	r2,r2,255
     b2c:	1005003a 	cmpeq	r2,r2,zero
     b30:	103ffc1e 	bne	r2,zero,b24 <main+0x278>
    printf("The transmit SGDMA has completed\n");
     b34:	01000074 	movhi	r4,1
     b38:	213c1404 	addi	r4,r4,-4016
     b3c:	00017100 	call	1710 <puts>
  while(rx_done == 0) {}
     b40:	d0a70043 	ldbu	r2,-25599(gp)
     b44:	10803fcc 	andi	r2,r2,255
     b48:	1005003a 	cmpeq	r2,r2,zero
     b4c:	103ffc1e 	bne	r2,zero,b40 <main+0x294>
    printf("The receive SGDMA has completed\n");
     b50:	01000074 	movhi	r4,1
     b54:	213c1d04 	addi	r4,r4,-3980
     b58:	00017100 	call	1710 <puts>


/**************************************************************
   * Verify the returned data and free up the data buffers    *
   ************************************************************/
  validate_results(transmit_descriptors,
     b5c:	e13ffb17 	ldw	r4,-20(fp)
     b60:	e17ffd17 	ldw	r5,-12(fp)
     b64:	01803e84 	movi	r6,250
     b68:	0000bb80 	call	bb8 <validate_results>


/**************************************************************
   * Stop the SGDMAs and free up the descriptor memory        *
   ************************************************************/
  alt_avalon_sgdma_stop(transmit_DMA);
     b6c:	e13ff917 	ldw	r4,-28(fp)
     b70:	000c5740 	call	c574 <alt_avalon_sgdma_stop>
  alt_avalon_sgdma_stop(receive_DMA);
     b74:	e13ff817 	ldw	r4,-32(fp)
     b78:	000c5740 	call	c574 <alt_avalon_sgdma_stop>

  free(transmit_descriptors_copy);
     b7c:	e13ffc17 	ldw	r4,-16(fp)
     b80:	0000e900 	call	e90 <free>
  free(receive_descriptors_copy);
     b84:	e13ffe17 	ldw	r4,-8(fp)
     b88:	0000e900 	call	e90 <free>
/**************************************************************/


  printf("Exiting...%c", 4); // 4 will terminate the console
     b8c:	01000074 	movhi	r4,1
     b90:	213c2504 	addi	r4,r4,-3948
     b94:	01400104 	movi	r5,4
     b98:	00015f80 	call	15f8 <printf>

  return 0;
     b9c:	e03fff15 	stw	zero,-4(fp)
     ba0:	e0bfff17 	ldw	r2,-4(fp)
}
     ba4:	e037883a 	mov	sp,fp
     ba8:	dfc00117 	ldw	ra,4(sp)
     bac:	df000017 	ldw	fp,0(sp)
     bb0:	dec00204 	addi	sp,sp,8
     bb4:	f800283a 	ret

00000bb8 <validate_results>:
 * location previously allocated.                                                 *
 **********************************************************************************/
void validate_results(alt_sgdma_descriptor * transmit_descriptors,
                      alt_sgdma_descriptor * receive_descriptors,
                      alt_u32 number_of_buffers)
{
     bb8:	defff304 	addi	sp,sp,-52
     bbc:	dfc00c15 	stw	ra,48(sp)
     bc0:	df000b15 	stw	fp,44(sp)
     bc4:	df000b04 	addi	fp,sp,44
     bc8:	e13ffd15 	stw	r4,-12(fp)
     bcc:	e17ffe15 	stw	r5,-8(fp)
     bd0:	e1bfff15 	stw	r6,-4(fp)
  alt_u32 buffer_counter, contents_counter, temp_length, failure = 0;
     bd4:	e03ff915 	stw	zero,-28(fp)
  alt_u32 * transmit_ptr, * receive_ptr;
  alt_u8 temp_transmit, temp_receive;

  /* loop through each descriptor */  
  for(buffer_counter = 0; buffer_counter < number_of_buffers; buffer_counter++)
     bd8:	e03ffc15 	stw	zero,-16(fp)
     bdc:	00005406 	br	d30 <validate_results+0x178>
  {
    transmit_ptr = transmit_descriptors[buffer_counter].read_addr;
     be0:	e0bffc17 	ldw	r2,-16(fp)
     be4:	1004917a 	slli	r2,r2,5
     be8:	1007883a 	mov	r3,r2
     bec:	e0bffd17 	ldw	r2,-12(fp)
     bf0:	1887883a 	add	r3,r3,r2
     bf4:	19000003 	ldbu	r4,0(r3)
     bf8:	18800043 	ldbu	r2,1(r3)
     bfc:	1004923a 	slli	r2,r2,8
     c00:	1108b03a 	or	r4,r2,r4
     c04:	18800083 	ldbu	r2,2(r3)
     c08:	1004943a 	slli	r2,r2,16
     c0c:	1108b03a 	or	r4,r2,r4
     c10:	188000c3 	ldbu	r2,3(r3)
     c14:	1004963a 	slli	r2,r2,24
     c18:	1104b03a 	or	r2,r2,r4
     c1c:	e0bff815 	stw	r2,-32(fp)
    receive_ptr = receive_descriptors[buffer_counter].write_addr;
     c20:	e0bffc17 	ldw	r2,-16(fp)
     c24:	1004917a 	slli	r2,r2,5
     c28:	1007883a 	mov	r3,r2
     c2c:	e0bffe17 	ldw	r2,-8(fp)
     c30:	1887883a 	add	r3,r3,r2
     c34:	19000203 	ldbu	r4,8(r3)
     c38:	18800243 	ldbu	r2,9(r3)
     c3c:	1004923a 	slli	r2,r2,8
     c40:	1108b03a 	or	r4,r2,r4
     c44:	18800283 	ldbu	r2,10(r3)
     c48:	1004943a 	slli	r2,r2,16
     c4c:	1108b03a 	or	r4,r2,r4
     c50:	188002c3 	ldbu	r2,11(r3)
     c54:	1004963a 	slli	r2,r2,24
     c58:	1104b03a 	or	r2,r2,r4
     c5c:	e0bff715 	stw	r2,-36(fp)
    temp_length = transmit_descriptors[buffer_counter].bytes_to_transfer;
     c60:	e0bffc17 	ldw	r2,-16(fp)
     c64:	1004917a 	slli	r2,r2,5
     c68:	1007883a 	mov	r3,r2
     c6c:	e0bffd17 	ldw	r2,-12(fp)
     c70:	1885883a 	add	r2,r3,r2
     c74:	10c00603 	ldbu	r3,24(r2)
     c78:	10800643 	ldbu	r2,25(r2)
     c7c:	1004923a 	slli	r2,r2,8
     c80:	10c4b03a 	or	r2,r2,r3
     c84:	10bfffcc 	andi	r2,r2,65535
     c88:	e0bffa15 	stw	r2,-24(fp)
    
    /* loop through each buffer to check the contents on each byte */
    for(contents_counter = 0; contents_counter < temp_length; contents_counter++)
     c8c:	e03ffb15 	stw	zero,-20(fp)
     c90:	00001d06 	br	d08 <validate_results+0x150>
    {
      temp_transmit = IORD_8DIRECT((alt_u32)transmit_ptr, contents_counter);
     c94:	e0bff817 	ldw	r2,-32(fp)
     c98:	1007883a 	mov	r3,r2
     c9c:	e0bffb17 	ldw	r2,-20(fp)
     ca0:	1885883a 	add	r2,r3,r2
     ca4:	10800023 	ldbuio	r2,0(r2)
     ca8:	e0bff645 	stb	r2,-39(fp)
      temp_receive = IORD_8DIRECT((alt_u32)receive_ptr, contents_counter);
     cac:	e0bff717 	ldw	r2,-36(fp)
     cb0:	1007883a 	mov	r3,r2
     cb4:	e0bffb17 	ldw	r2,-20(fp)
     cb8:	1885883a 	add	r2,r3,r2
     cbc:	10800023 	ldbuio	r2,0(r2)
     cc0:	e0bff605 	stb	r2,-40(fp)
      if(temp_transmit != temp_receive)
     cc4:	e0fff643 	ldbu	r3,-39(fp)
     cc8:	e0bff603 	ldbu	r2,-40(fp)
     ccc:	18800b26 	beq	r3,r2,cfc <validate_results+0x144>
      {
        printf("Error, sent %u, received %u, buffer: %u, index: %u\n", (unsigned int)temp_transmit, (unsigned int)temp_receive, (unsigned int)(buffer_counter+1), (unsigned int)contents_counter); 
     cd0:	e17ff643 	ldbu	r5,-39(fp)
     cd4:	e1bff603 	ldbu	r6,-40(fp)
     cd8:	e0bffc17 	ldw	r2,-16(fp)
     cdc:	11c00044 	addi	r7,r2,1
     ce0:	e0bffb17 	ldw	r2,-20(fp)
     ce4:	d8800015 	stw	r2,0(sp)
     ce8:	01000074 	movhi	r4,1
     cec:	213c2904 	addi	r4,r4,-3932
     cf0:	00015f80 	call	15f8 <printf>
        failure = 1;
     cf4:	00800044 	movi	r2,1
     cf8:	e0bff915 	stw	r2,-28(fp)
    transmit_ptr = transmit_descriptors[buffer_counter].read_addr;
    receive_ptr = receive_descriptors[buffer_counter].write_addr;
    temp_length = transmit_descriptors[buffer_counter].bytes_to_transfer;
    
    /* loop through each buffer to check the contents on each byte */
    for(contents_counter = 0; contents_counter < temp_length; contents_counter++)
     cfc:	e0bffb17 	ldw	r2,-20(fp)
     d00:	10800044 	addi	r2,r2,1
     d04:	e0bffb15 	stw	r2,-20(fp)
     d08:	e0fffb17 	ldw	r3,-20(fp)
     d0c:	e0bffa17 	ldw	r2,-24(fp)
     d10:	18bfe036 	bltu	r3,r2,c94 <validate_results+0xdc>
        failure = 1;
      }
    }
    
    /* Done with these two, time to clean up after ourselves. */
    free(transmit_ptr);
     d14:	e13ff817 	ldw	r4,-32(fp)
     d18:	0000e900 	call	e90 <free>
    free(receive_ptr);    
     d1c:	e13ff717 	ldw	r4,-36(fp)
     d20:	0000e900 	call	e90 <free>
  alt_u32 buffer_counter, contents_counter, temp_length, failure = 0;
  alt_u32 * transmit_ptr, * receive_ptr;
  alt_u8 temp_transmit, temp_receive;

  /* loop through each descriptor */  
  for(buffer_counter = 0; buffer_counter < number_of_buffers; buffer_counter++)
     d24:	e0bffc17 	ldw	r2,-16(fp)
     d28:	10800044 	addi	r2,r2,1
     d2c:	e0bffc15 	stw	r2,-16(fp)
     d30:	e0fffc17 	ldw	r3,-16(fp)
     d34:	e0bfff17 	ldw	r2,-4(fp)
     d38:	18bfa936 	bltu	r3,r2,be0 <validate_results+0x28>
    /* Done with these two, time to clean up after ourselves. */
    free(transmit_ptr);
    free(receive_ptr);    
  }

  if(failure == 0)
     d3c:	e0bff917 	ldw	r2,-28(fp)
     d40:	1004c03a 	cmpne	r2,r2,zero
     d44:	1000031e 	bne	r2,zero,d54 <validate_results+0x19c>
  {
    printf("The entire data transfer finished error free.\n");
     d48:	01000074 	movhi	r4,1
     d4c:	213c3604 	addi	r4,r4,-3880
     d50:	00017100 	call	1710 <puts>
  }

}
     d54:	e037883a 	mov	sp,fp
     d58:	dfc00117 	ldw	ra,4(sp)
     d5c:	df000017 	ldw	fp,0(sp)
     d60:	dec00204 	addi	sp,sp,8
     d64:	f800283a 	ret

00000d68 <getc>:
     d68:	defffd04 	addi	sp,sp,-12
     d6c:	dc400115 	stw	r17,4(sp)
     d70:	04400074 	movhi	r17,1
     d74:	8c440004 	addi	r17,r17,4096
     d78:	88c00017 	ldw	r3,0(r17)
     d7c:	dc000015 	stw	r16,0(sp)
     d80:	dfc00215 	stw	ra,8(sp)
     d84:	2021883a 	mov	r16,r4
     d88:	18000326 	beq	r3,zero,d98 <getc+0x30>
     d8c:	18800e17 	ldw	r2,56(r3)
     d90:	1809883a 	mov	r4,r3
     d94:	10000e26 	beq	r2,zero,dd0 <getc+0x68>
     d98:	80800117 	ldw	r2,4(r16)
     d9c:	800b883a 	mov	r5,r16
     da0:	10bfffc4 	addi	r2,r2,-1
     da4:	80800115 	stw	r2,4(r16)
     da8:	10000f16 	blt	r2,zero,de8 <getc+0x80>
     dac:	80c00017 	ldw	r3,0(r16)
     db0:	18800003 	ldbu	r2,0(r3)
     db4:	18c00044 	addi	r3,r3,1
     db8:	80c00015 	stw	r3,0(r16)
     dbc:	dfc00217 	ldw	ra,8(sp)
     dc0:	dc400117 	ldw	r17,4(sp)
     dc4:	dc000017 	ldw	r16,0(sp)
     dc8:	dec00304 	addi	sp,sp,12
     dcc:	f800283a 	ret
     dd0:	00053c40 	call	53c4 <__sinit>
     dd4:	80800117 	ldw	r2,4(r16)
     dd8:	800b883a 	mov	r5,r16
     ddc:	10bfffc4 	addi	r2,r2,-1
     de0:	80800115 	stw	r2,4(r16)
     de4:	103ff10e 	bge	r2,zero,dac <getc+0x44>
     de8:	89000017 	ldw	r4,0(r17)
     dec:	dfc00217 	ldw	ra,8(sp)
     df0:	dc400117 	ldw	r17,4(sp)
     df4:	dc000017 	ldw	r16,0(sp)
     df8:	dec00304 	addi	sp,sp,12
     dfc:	00017b81 	jmpi	17b8 <__srget_r>

00000e00 <_getc_r>:
     e00:	defffd04 	addi	sp,sp,-12
     e04:	dc400115 	stw	r17,4(sp)
     e08:	dc000015 	stw	r16,0(sp)
     e0c:	dfc00215 	stw	ra,8(sp)
     e10:	2021883a 	mov	r16,r4
     e14:	2823883a 	mov	r17,r5
     e18:	20000226 	beq	r4,zero,e24 <_getc_r+0x24>
     e1c:	20800e17 	ldw	r2,56(r4)
     e20:	10000f26 	beq	r2,zero,e60 <_getc_r+0x60>
     e24:	88800117 	ldw	r2,4(r17)
     e28:	8009883a 	mov	r4,r16
     e2c:	880b883a 	mov	r5,r17
     e30:	10bfffc4 	addi	r2,r2,-1
     e34:	88800115 	stw	r2,4(r17)
     e38:	10001016 	blt	r2,zero,e7c <_getc_r+0x7c>
     e3c:	88c00017 	ldw	r3,0(r17)
     e40:	18800003 	ldbu	r2,0(r3)
     e44:	18c00044 	addi	r3,r3,1
     e48:	88c00015 	stw	r3,0(r17)
     e4c:	dfc00217 	ldw	ra,8(sp)
     e50:	dc400117 	ldw	r17,4(sp)
     e54:	dc000017 	ldw	r16,0(sp)
     e58:	dec00304 	addi	sp,sp,12
     e5c:	f800283a 	ret
     e60:	00053c40 	call	53c4 <__sinit>
     e64:	88800117 	ldw	r2,4(r17)
     e68:	8009883a 	mov	r4,r16
     e6c:	880b883a 	mov	r5,r17
     e70:	10bfffc4 	addi	r2,r2,-1
     e74:	88800115 	stw	r2,4(r17)
     e78:	103ff00e 	bge	r2,zero,e3c <_getc_r+0x3c>
     e7c:	dfc00217 	ldw	ra,8(sp)
     e80:	dc400117 	ldw	r17,4(sp)
     e84:	dc000017 	ldw	r16,0(sp)
     e88:	dec00304 	addi	sp,sp,12
     e8c:	00017b81 	jmpi	17b8 <__srget_r>

00000e90 <free>:
     e90:	00800074 	movhi	r2,1
     e94:	10840004 	addi	r2,r2,4096
     e98:	200b883a 	mov	r5,r4
     e9c:	11000017 	ldw	r4,0(r2)
     ea0:	00057481 	jmpi	5748 <_free_r>

00000ea4 <malloc>:
     ea4:	00800074 	movhi	r2,1
     ea8:	10840004 	addi	r2,r2,4096
     eac:	200b883a 	mov	r5,r4
     eb0:	11000017 	ldw	r4,0(r2)
     eb4:	0000eb81 	jmpi	eb8 <_malloc_r>

00000eb8 <_malloc_r>:
     eb8:	defff604 	addi	sp,sp,-40
     ebc:	28c002c4 	addi	r3,r5,11
     ec0:	00800584 	movi	r2,22
     ec4:	dc800215 	stw	r18,8(sp)
     ec8:	dfc00915 	stw	ra,36(sp)
     ecc:	df000815 	stw	fp,32(sp)
     ed0:	ddc00715 	stw	r23,28(sp)
     ed4:	dd800615 	stw	r22,24(sp)
     ed8:	dd400515 	stw	r21,20(sp)
     edc:	dd000415 	stw	r20,16(sp)
     ee0:	dcc00315 	stw	r19,12(sp)
     ee4:	dc400115 	stw	r17,4(sp)
     ee8:	dc000015 	stw	r16,0(sp)
     eec:	2025883a 	mov	r18,r4
     ef0:	10c01236 	bltu	r2,r3,f3c <_malloc_r+0x84>
     ef4:	04400404 	movi	r17,16
     ef8:	8940142e 	bgeu	r17,r5,f4c <_malloc_r+0x94>
     efc:	00800304 	movi	r2,12
     f00:	0007883a 	mov	r3,zero
     f04:	90800015 	stw	r2,0(r18)
     f08:	1805883a 	mov	r2,r3
     f0c:	dfc00917 	ldw	ra,36(sp)
     f10:	df000817 	ldw	fp,32(sp)
     f14:	ddc00717 	ldw	r23,28(sp)
     f18:	dd800617 	ldw	r22,24(sp)
     f1c:	dd400517 	ldw	r21,20(sp)
     f20:	dd000417 	ldw	r20,16(sp)
     f24:	dcc00317 	ldw	r19,12(sp)
     f28:	dc800217 	ldw	r18,8(sp)
     f2c:	dc400117 	ldw	r17,4(sp)
     f30:	dc000017 	ldw	r16,0(sp)
     f34:	dec00a04 	addi	sp,sp,40
     f38:	f800283a 	ret
     f3c:	00bffe04 	movi	r2,-8
     f40:	18a2703a 	and	r17,r3,r2
     f44:	883fed16 	blt	r17,zero,efc <_malloc_r+0x44>
     f48:	897fec36 	bltu	r17,r5,efc <_malloc_r+0x44>
     f4c:	9009883a 	mov	r4,r18
     f50:	000af980 	call	af98 <__malloc_lock>
     f54:	00807dc4 	movi	r2,503
     f58:	14402b2e 	bgeu	r2,r17,1008 <_malloc_r+0x150>
     f5c:	8806d27a 	srli	r3,r17,9
     f60:	18003f1e 	bne	r3,zero,1060 <_malloc_r+0x1a8>
     f64:	880cd0fa 	srli	r6,r17,3
     f68:	300490fa 	slli	r2,r6,3
     f6c:	02c00074 	movhi	r11,1
     f70:	5afe2404 	addi	r11,r11,-1904
     f74:	12cb883a 	add	r5,r2,r11
     f78:	2c000317 	ldw	r16,12(r5)
     f7c:	580f883a 	mov	r7,r11
     f80:	2c00041e 	bne	r5,r16,f94 <_malloc_r+0xdc>
     f84:	00000a06 	br	fb0 <_malloc_r+0xf8>
     f88:	1800860e 	bge	r3,zero,11a4 <_malloc_r+0x2ec>
     f8c:	84000317 	ldw	r16,12(r16)
     f90:	2c000726 	beq	r5,r16,fb0 <_malloc_r+0xf8>
     f94:	80800117 	ldw	r2,4(r16)
     f98:	00ffff04 	movi	r3,-4
     f9c:	10c8703a 	and	r4,r2,r3
     fa0:	2447c83a 	sub	r3,r4,r17
     fa4:	008003c4 	movi	r2,15
     fa8:	10fff70e 	bge	r2,r3,f88 <_malloc_r+0xd0>
     fac:	31bfffc4 	addi	r6,r6,-1
     fb0:	32400044 	addi	r9,r6,1
     fb4:	02800074 	movhi	r10,1
     fb8:	52be2604 	addi	r10,r10,-1896
     fbc:	54000217 	ldw	r16,8(r10)
     fc0:	8280a026 	beq	r16,r10,1244 <_malloc_r+0x38c>
     fc4:	80800117 	ldw	r2,4(r16)
     fc8:	00ffff04 	movi	r3,-4
     fcc:	10ca703a 	and	r5,r2,r3
     fd0:	2c4dc83a 	sub	r6,r5,r17
     fd4:	008003c4 	movi	r2,15
     fd8:	11808316 	blt	r2,r6,11e8 <_malloc_r+0x330>
     fdc:	52800315 	stw	r10,12(r10)
     fe0:	52800215 	stw	r10,8(r10)
     fe4:	30002916 	blt	r6,zero,108c <_malloc_r+0x1d4>
     fe8:	8147883a 	add	r3,r16,r5
     fec:	18800117 	ldw	r2,4(r3)
     ff0:	9009883a 	mov	r4,r18
     ff4:	10800054 	ori	r2,r2,1
     ff8:	18800115 	stw	r2,4(r3)
     ffc:	000afb80 	call	afb8 <__malloc_unlock>
    1000:	80c00204 	addi	r3,r16,8
    1004:	003fc006 	br	f08 <_malloc_r+0x50>
    1008:	02c00074 	movhi	r11,1
    100c:	5afe2404 	addi	r11,r11,-1904
    1010:	8ac5883a 	add	r2,r17,r11
    1014:	14000317 	ldw	r16,12(r2)
    1018:	580f883a 	mov	r7,r11
    101c:	8806d0fa 	srli	r3,r17,3
    1020:	14006c26 	beq	r2,r16,11d4 <_malloc_r+0x31c>
    1024:	80c00117 	ldw	r3,4(r16)
    1028:	00bfff04 	movi	r2,-4
    102c:	81800317 	ldw	r6,12(r16)
    1030:	1886703a 	and	r3,r3,r2
    1034:	80c7883a 	add	r3,r16,r3
    1038:	18800117 	ldw	r2,4(r3)
    103c:	81400217 	ldw	r5,8(r16)
    1040:	9009883a 	mov	r4,r18
    1044:	10800054 	ori	r2,r2,1
    1048:	18800115 	stw	r2,4(r3)
    104c:	31400215 	stw	r5,8(r6)
    1050:	29800315 	stw	r6,12(r5)
    1054:	000afb80 	call	afb8 <__malloc_unlock>
    1058:	80c00204 	addi	r3,r16,8
    105c:	003faa06 	br	f08 <_malloc_r+0x50>
    1060:	00800104 	movi	r2,4
    1064:	10c0052e 	bgeu	r2,r3,107c <_malloc_r+0x1c4>
    1068:	00800504 	movi	r2,20
    106c:	10c07836 	bltu	r2,r3,1250 <_malloc_r+0x398>
    1070:	198016c4 	addi	r6,r3,91
    1074:	300490fa 	slli	r2,r6,3
    1078:	003fbc06 	br	f6c <_malloc_r+0xb4>
    107c:	8804d1ba 	srli	r2,r17,6
    1080:	11800e04 	addi	r6,r2,56
    1084:	300490fa 	slli	r2,r6,3
    1088:	003fb806 	br	f6c <_malloc_r+0xb4>
    108c:	00807fc4 	movi	r2,511
    1090:	1140bb36 	bltu	r2,r5,1380 <_malloc_r+0x4c8>
    1094:	2806d0fa 	srli	r3,r5,3
    1098:	573ffe04 	addi	fp,r10,-8
    109c:	00800044 	movi	r2,1
    10a0:	180890fa 	slli	r4,r3,3
    10a4:	1807d0ba 	srai	r3,r3,2
    10a8:	e1c00117 	ldw	r7,4(fp)
    10ac:	5909883a 	add	r4,r11,r4
    10b0:	21400217 	ldw	r5,8(r4)
    10b4:	10c4983a 	sll	r2,r2,r3
    10b8:	81000315 	stw	r4,12(r16)
    10bc:	81400215 	stw	r5,8(r16)
    10c0:	388eb03a 	or	r7,r7,r2
    10c4:	2c000315 	stw	r16,12(r5)
    10c8:	24000215 	stw	r16,8(r4)
    10cc:	e1c00115 	stw	r7,4(fp)
    10d0:	4807883a 	mov	r3,r9
    10d4:	4800cd16 	blt	r9,zero,140c <_malloc_r+0x554>
    10d8:	1807d0ba 	srai	r3,r3,2
    10dc:	00800044 	movi	r2,1
    10e0:	10c8983a 	sll	r4,r2,r3
    10e4:	39004436 	bltu	r7,r4,11f8 <_malloc_r+0x340>
    10e8:	21c4703a 	and	r2,r4,r7
    10ec:	10000a1e 	bne	r2,zero,1118 <_malloc_r+0x260>
    10f0:	2109883a 	add	r4,r4,r4
    10f4:	00bfff04 	movi	r2,-4
    10f8:	4884703a 	and	r2,r9,r2
    10fc:	3906703a 	and	r3,r7,r4
    1100:	12400104 	addi	r9,r2,4
    1104:	1800041e 	bne	r3,zero,1118 <_malloc_r+0x260>
    1108:	2109883a 	add	r4,r4,r4
    110c:	3904703a 	and	r2,r7,r4
    1110:	4a400104 	addi	r9,r9,4
    1114:	103ffc26 	beq	r2,zero,1108 <_malloc_r+0x250>
    1118:	480490fa 	slli	r2,r9,3
    111c:	4819883a 	mov	r12,r9
    1120:	023fff04 	movi	r8,-4
    1124:	589b883a 	add	r13,r11,r2
    1128:	6807883a 	mov	r3,r13
    112c:	014003c4 	movi	r5,15
    1130:	1c000317 	ldw	r16,12(r3)
    1134:	1c00041e 	bne	r3,r16,1148 <_malloc_r+0x290>
    1138:	0000a706 	br	13d8 <_malloc_r+0x520>
    113c:	3000ab0e 	bge	r6,zero,13ec <_malloc_r+0x534>
    1140:	84000317 	ldw	r16,12(r16)
    1144:	1c00a426 	beq	r3,r16,13d8 <_malloc_r+0x520>
    1148:	80800117 	ldw	r2,4(r16)
    114c:	1204703a 	and	r2,r2,r8
    1150:	144dc83a 	sub	r6,r2,r17
    1154:	29bff90e 	bge	r5,r6,113c <_malloc_r+0x284>
    1158:	81000317 	ldw	r4,12(r16)
    115c:	80c00217 	ldw	r3,8(r16)
    1160:	89400054 	ori	r5,r17,1
    1164:	8445883a 	add	r2,r16,r17
    1168:	20c00215 	stw	r3,8(r4)
    116c:	19000315 	stw	r4,12(r3)
    1170:	81400115 	stw	r5,4(r16)
    1174:	1187883a 	add	r3,r2,r6
    1178:	31000054 	ori	r4,r6,1
    117c:	50800315 	stw	r2,12(r10)
    1180:	50800215 	stw	r2,8(r10)
    1184:	19800015 	stw	r6,0(r3)
    1188:	11000115 	stw	r4,4(r2)
    118c:	12800215 	stw	r10,8(r2)
    1190:	12800315 	stw	r10,12(r2)
    1194:	9009883a 	mov	r4,r18
    1198:	000afb80 	call	afb8 <__malloc_unlock>
    119c:	80c00204 	addi	r3,r16,8
    11a0:	003f5906 	br	f08 <_malloc_r+0x50>
    11a4:	8109883a 	add	r4,r16,r4
    11a8:	20800117 	ldw	r2,4(r4)
    11ac:	80c00217 	ldw	r3,8(r16)
    11b0:	81400317 	ldw	r5,12(r16)
    11b4:	10800054 	ori	r2,r2,1
    11b8:	20800115 	stw	r2,4(r4)
    11bc:	28c00215 	stw	r3,8(r5)
    11c0:	19400315 	stw	r5,12(r3)
    11c4:	9009883a 	mov	r4,r18
    11c8:	000afb80 	call	afb8 <__malloc_unlock>
    11cc:	80c00204 	addi	r3,r16,8
    11d0:	003f4d06 	br	f08 <_malloc_r+0x50>
    11d4:	80800204 	addi	r2,r16,8
    11d8:	14000317 	ldw	r16,12(r2)
    11dc:	143f911e 	bne	r2,r16,1024 <_malloc_r+0x16c>
    11e0:	1a400084 	addi	r9,r3,2
    11e4:	003f7306 	br	fb4 <_malloc_r+0xfc>
    11e8:	88c00054 	ori	r3,r17,1
    11ec:	8445883a 	add	r2,r16,r17
    11f0:	80c00115 	stw	r3,4(r16)
    11f4:	003fdf06 	br	1174 <_malloc_r+0x2bc>
    11f8:	e4000217 	ldw	r16,8(fp)
    11fc:	00bfff04 	movi	r2,-4
    1200:	80c00117 	ldw	r3,4(r16)
    1204:	802d883a 	mov	r22,r16
    1208:	18aa703a 	and	r21,r3,r2
    120c:	ac401636 	bltu	r21,r17,1268 <_malloc_r+0x3b0>
    1210:	ac49c83a 	sub	r4,r21,r17
    1214:	008003c4 	movi	r2,15
    1218:	1100130e 	bge	r2,r4,1268 <_malloc_r+0x3b0>
    121c:	88800054 	ori	r2,r17,1
    1220:	8447883a 	add	r3,r16,r17
    1224:	80800115 	stw	r2,4(r16)
    1228:	20800054 	ori	r2,r4,1
    122c:	18800115 	stw	r2,4(r3)
    1230:	e0c00215 	stw	r3,8(fp)
    1234:	9009883a 	mov	r4,r18
    1238:	000afb80 	call	afb8 <__malloc_unlock>
    123c:	80c00204 	addi	r3,r16,8
    1240:	003f3106 	br	f08 <_malloc_r+0x50>
    1244:	39c00117 	ldw	r7,4(r7)
    1248:	573ffe04 	addi	fp,r10,-8
    124c:	003fa006 	br	10d0 <_malloc_r+0x218>
    1250:	00801504 	movi	r2,84
    1254:	10c06736 	bltu	r2,r3,13f4 <_malloc_r+0x53c>
    1258:	8804d33a 	srli	r2,r17,12
    125c:	11801b84 	addi	r6,r2,110
    1260:	300490fa 	slli	r2,r6,3
    1264:	003f4106 	br	f6c <_malloc_r+0xb4>
    1268:	d0a70117 	ldw	r2,-25596(gp)
    126c:	d0e00317 	ldw	r3,-32756(gp)
    1270:	053fffc4 	movi	r20,-1
    1274:	10800404 	addi	r2,r2,16
    1278:	88a7883a 	add	r19,r17,r2
    127c:	1d000326 	beq	r3,r20,128c <_malloc_r+0x3d4>
    1280:	98c3ffc4 	addi	r3,r19,4095
    1284:	00bc0004 	movi	r2,-4096
    1288:	18a6703a 	and	r19,r3,r2
    128c:	9009883a 	mov	r4,r18
    1290:	980b883a 	mov	r5,r19
    1294:	00018180 	call	1818 <_sbrk_r>
    1298:	1009883a 	mov	r4,r2
    129c:	15000426 	beq	r2,r20,12b0 <_malloc_r+0x3f8>
    12a0:	854b883a 	add	r5,r16,r21
    12a4:	1029883a 	mov	r20,r2
    12a8:	11405a2e 	bgeu	r2,r5,1414 <_malloc_r+0x55c>
    12ac:	87000c26 	beq	r16,fp,12e0 <_malloc_r+0x428>
    12b0:	e4000217 	ldw	r16,8(fp)
    12b4:	80c00117 	ldw	r3,4(r16)
    12b8:	00bfff04 	movi	r2,-4
    12bc:	1884703a 	and	r2,r3,r2
    12c0:	14400336 	bltu	r2,r17,12d0 <_malloc_r+0x418>
    12c4:	1449c83a 	sub	r4,r2,r17
    12c8:	008003c4 	movi	r2,15
    12cc:	113fd316 	blt	r2,r4,121c <_malloc_r+0x364>
    12d0:	9009883a 	mov	r4,r18
    12d4:	000afb80 	call	afb8 <__malloc_unlock>
    12d8:	0007883a 	mov	r3,zero
    12dc:	003f0a06 	br	f08 <_malloc_r+0x50>
    12e0:	05c00074 	movhi	r23,1
    12e4:	bdcb0e04 	addi	r23,r23,11320
    12e8:	b8800017 	ldw	r2,0(r23)
    12ec:	988d883a 	add	r6,r19,r2
    12f0:	b9800015 	stw	r6,0(r23)
    12f4:	d0e00317 	ldw	r3,-32756(gp)
    12f8:	00bfffc4 	movi	r2,-1
    12fc:	18808e26 	beq	r3,r2,1538 <_malloc_r+0x680>
    1300:	2145c83a 	sub	r2,r4,r5
    1304:	3085883a 	add	r2,r6,r2
    1308:	b8800015 	stw	r2,0(r23)
    130c:	20c001cc 	andi	r3,r4,7
    1310:	18005f1e 	bne	r3,zero,1490 <_malloc_r+0x5d8>
    1314:	000b883a 	mov	r5,zero
    1318:	a4c5883a 	add	r2,r20,r19
    131c:	1083ffcc 	andi	r2,r2,4095
    1320:	00c40004 	movi	r3,4096
    1324:	1887c83a 	sub	r3,r3,r2
    1328:	28e7883a 	add	r19,r5,r3
    132c:	9009883a 	mov	r4,r18
    1330:	980b883a 	mov	r5,r19
    1334:	00018180 	call	1818 <_sbrk_r>
    1338:	1007883a 	mov	r3,r2
    133c:	00bfffc4 	movi	r2,-1
    1340:	18807a26 	beq	r3,r2,152c <_malloc_r+0x674>
    1344:	1d05c83a 	sub	r2,r3,r20
    1348:	9885883a 	add	r2,r19,r2
    134c:	10c00054 	ori	r3,r2,1
    1350:	b8800017 	ldw	r2,0(r23)
    1354:	a021883a 	mov	r16,r20
    1358:	a0c00115 	stw	r3,4(r20)
    135c:	9885883a 	add	r2,r19,r2
    1360:	b8800015 	stw	r2,0(r23)
    1364:	e5000215 	stw	r20,8(fp)
    1368:	b7003626 	beq	r22,fp,1444 <_malloc_r+0x58c>
    136c:	018003c4 	movi	r6,15
    1370:	35404b36 	bltu	r6,r21,14a0 <_malloc_r+0x5e8>
    1374:	00800044 	movi	r2,1
    1378:	a0800115 	stw	r2,4(r20)
    137c:	003fcd06 	br	12b4 <_malloc_r+0x3fc>
    1380:	2808d27a 	srli	r4,r5,9
    1384:	2000371e 	bne	r4,zero,1464 <_malloc_r+0x5ac>
    1388:	2808d0fa 	srli	r4,r5,3
    138c:	200690fa 	slli	r3,r4,3
    1390:	1ad1883a 	add	r8,r3,r11
    1394:	41800217 	ldw	r6,8(r8)
    1398:	41805b26 	beq	r8,r6,1508 <_malloc_r+0x650>
    139c:	30800117 	ldw	r2,4(r6)
    13a0:	00ffff04 	movi	r3,-4
    13a4:	10c4703a 	and	r2,r2,r3
    13a8:	2880022e 	bgeu	r5,r2,13b4 <_malloc_r+0x4fc>
    13ac:	31800217 	ldw	r6,8(r6)
    13b0:	41bffa1e 	bne	r8,r6,139c <_malloc_r+0x4e4>
    13b4:	32000317 	ldw	r8,12(r6)
    13b8:	39c00117 	ldw	r7,4(r7)
    13bc:	82000315 	stw	r8,12(r16)
    13c0:	81800215 	stw	r6,8(r16)
    13c4:	07000074 	movhi	fp,1
    13c8:	e73e2404 	addi	fp,fp,-1904
    13cc:	34000315 	stw	r16,12(r6)
    13d0:	44000215 	stw	r16,8(r8)
    13d4:	003f3e06 	br	10d0 <_malloc_r+0x218>
    13d8:	63000044 	addi	r12,r12,1
    13dc:	608000cc 	andi	r2,r12,3
    13e0:	10005d26 	beq	r2,zero,1558 <_malloc_r+0x6a0>
    13e4:	18c00204 	addi	r3,r3,8
    13e8:	003f5106 	br	1130 <_malloc_r+0x278>
    13ec:	8089883a 	add	r4,r16,r2
    13f0:	003f6d06 	br	11a8 <_malloc_r+0x2f0>
    13f4:	00805504 	movi	r2,340
    13f8:	10c02036 	bltu	r2,r3,147c <_malloc_r+0x5c4>
    13fc:	8804d3fa 	srli	r2,r17,15
    1400:	11801dc4 	addi	r6,r2,119
    1404:	300490fa 	slli	r2,r6,3
    1408:	003ed806 	br	f6c <_malloc_r+0xb4>
    140c:	48c000c4 	addi	r3,r9,3
    1410:	003f3106 	br	10d8 <_malloc_r+0x220>
    1414:	05c00074 	movhi	r23,1
    1418:	bdcb0e04 	addi	r23,r23,11320
    141c:	b8800017 	ldw	r2,0(r23)
    1420:	988d883a 	add	r6,r19,r2
    1424:	b9800015 	stw	r6,0(r23)
    1428:	293fb21e 	bne	r5,r4,12f4 <_malloc_r+0x43c>
    142c:	2083ffcc 	andi	r2,r4,4095
    1430:	103fb01e 	bne	r2,zero,12f4 <_malloc_r+0x43c>
    1434:	e4000217 	ldw	r16,8(fp)
    1438:	9d45883a 	add	r2,r19,r21
    143c:	10800054 	ori	r2,r2,1
    1440:	80800115 	stw	r2,4(r16)
    1444:	b8c00017 	ldw	r3,0(r23)
    1448:	d0a70217 	ldw	r2,-25592(gp)
    144c:	10c0012e 	bgeu	r2,r3,1454 <_malloc_r+0x59c>
    1450:	d0e70215 	stw	r3,-25592(gp)
    1454:	d0a70317 	ldw	r2,-25588(gp)
    1458:	10ff962e 	bgeu	r2,r3,12b4 <_malloc_r+0x3fc>
    145c:	d0e70315 	stw	r3,-25588(gp)
    1460:	003f9406 	br	12b4 <_malloc_r+0x3fc>
    1464:	00800104 	movi	r2,4
    1468:	11001e36 	bltu	r2,r4,14e4 <_malloc_r+0x62c>
    146c:	2804d1ba 	srli	r2,r5,6
    1470:	11000e04 	addi	r4,r2,56
    1474:	200690fa 	slli	r3,r4,3
    1478:	003fc506 	br	1390 <_malloc_r+0x4d8>
    147c:	00815504 	movi	r2,1364
    1480:	10c01d2e 	bgeu	r2,r3,14f8 <_malloc_r+0x640>
    1484:	01801f84 	movi	r6,126
    1488:	0080fc04 	movi	r2,1008
    148c:	003eb706 	br	f6c <_malloc_r+0xb4>
    1490:	00800204 	movi	r2,8
    1494:	10cbc83a 	sub	r5,r2,r3
    1498:	2169883a 	add	r20,r4,r5
    149c:	003f9e06 	br	1318 <_malloc_r+0x460>
    14a0:	00bffe04 	movi	r2,-8
    14a4:	a93ffd04 	addi	r4,r21,-12
    14a8:	2088703a 	and	r4,r4,r2
    14ac:	b10b883a 	add	r5,r22,r4
    14b0:	00c00144 	movi	r3,5
    14b4:	28c00215 	stw	r3,8(r5)
    14b8:	28c00115 	stw	r3,4(r5)
    14bc:	b0800117 	ldw	r2,4(r22)
    14c0:	1080004c 	andi	r2,r2,1
    14c4:	2084b03a 	or	r2,r4,r2
    14c8:	b0800115 	stw	r2,4(r22)
    14cc:	313fdd2e 	bgeu	r6,r4,1444 <_malloc_r+0x58c>
    14d0:	b1400204 	addi	r5,r22,8
    14d4:	9009883a 	mov	r4,r18
    14d8:	00057480 	call	5748 <_free_r>
    14dc:	e4000217 	ldw	r16,8(fp)
    14e0:	003fd806 	br	1444 <_malloc_r+0x58c>
    14e4:	00800504 	movi	r2,20
    14e8:	11001536 	bltu	r2,r4,1540 <_malloc_r+0x688>
    14ec:	210016c4 	addi	r4,r4,91
    14f0:	200690fa 	slli	r3,r4,3
    14f4:	003fa606 	br	1390 <_malloc_r+0x4d8>
    14f8:	8804d4ba 	srli	r2,r17,18
    14fc:	11801f04 	addi	r6,r2,124
    1500:	300490fa 	slli	r2,r6,3
    1504:	003e9906 	br	f6c <_malloc_r+0xb4>
    1508:	2009d0ba 	srai	r4,r4,2
    150c:	01400074 	movhi	r5,1
    1510:	297e2404 	addi	r5,r5,-1904
    1514:	00c00044 	movi	r3,1
    1518:	28800117 	ldw	r2,4(r5)
    151c:	1906983a 	sll	r3,r3,r4
    1520:	10c4b03a 	or	r2,r2,r3
    1524:	28800115 	stw	r2,4(r5)
    1528:	003fa306 	br	13b8 <_malloc_r+0x500>
    152c:	0027883a 	mov	r19,zero
    1530:	00c00044 	movi	r3,1
    1534:	003f8606 	br	1350 <_malloc_r+0x498>
    1538:	d1200315 	stw	r4,-32756(gp)
    153c:	003f7306 	br	130c <_malloc_r+0x454>
    1540:	00801504 	movi	r2,84
    1544:	11001936 	bltu	r2,r4,15ac <_malloc_r+0x6f4>
    1548:	2804d33a 	srli	r2,r5,12
    154c:	11001b84 	addi	r4,r2,110
    1550:	200690fa 	slli	r3,r4,3
    1554:	003f8e06 	br	1390 <_malloc_r+0x4d8>
    1558:	480b883a 	mov	r5,r9
    155c:	6807883a 	mov	r3,r13
    1560:	288000cc 	andi	r2,r5,3
    1564:	18fffe04 	addi	r3,r3,-8
    1568:	297fffc4 	addi	r5,r5,-1
    156c:	10001526 	beq	r2,zero,15c4 <_malloc_r+0x70c>
    1570:	18800217 	ldw	r2,8(r3)
    1574:	10fffa26 	beq	r2,r3,1560 <_malloc_r+0x6a8>
    1578:	2109883a 	add	r4,r4,r4
    157c:	393f1e36 	bltu	r7,r4,11f8 <_malloc_r+0x340>
    1580:	203f1d26 	beq	r4,zero,11f8 <_malloc_r+0x340>
    1584:	21c4703a 	and	r2,r4,r7
    1588:	10000226 	beq	r2,zero,1594 <_malloc_r+0x6dc>
    158c:	6013883a 	mov	r9,r12
    1590:	003ee106 	br	1118 <_malloc_r+0x260>
    1594:	2109883a 	add	r4,r4,r4
    1598:	3904703a 	and	r2,r7,r4
    159c:	63000104 	addi	r12,r12,4
    15a0:	103ffc26 	beq	r2,zero,1594 <_malloc_r+0x6dc>
    15a4:	6013883a 	mov	r9,r12
    15a8:	003edb06 	br	1118 <_malloc_r+0x260>
    15ac:	00805504 	movi	r2,340
    15b0:	11000836 	bltu	r2,r4,15d4 <_malloc_r+0x71c>
    15b4:	2804d3fa 	srli	r2,r5,15
    15b8:	11001dc4 	addi	r4,r2,119
    15bc:	200690fa 	slli	r3,r4,3
    15c0:	003f7306 	br	1390 <_malloc_r+0x4d8>
    15c4:	0104303a 	nor	r2,zero,r4
    15c8:	388e703a 	and	r7,r7,r2
    15cc:	e1c00115 	stw	r7,4(fp)
    15d0:	003fe906 	br	1578 <_malloc_r+0x6c0>
    15d4:	00815504 	movi	r2,1364
    15d8:	1100032e 	bgeu	r2,r4,15e8 <_malloc_r+0x730>
    15dc:	01001f84 	movi	r4,126
    15e0:	00c0fc04 	movi	r3,1008
    15e4:	003f6a06 	br	1390 <_malloc_r+0x4d8>
    15e8:	2804d4ba 	srli	r2,r5,18
    15ec:	11001f04 	addi	r4,r2,124
    15f0:	200690fa 	slli	r3,r4,3
    15f4:	003f6606 	br	1390 <_malloc_r+0x4d8>

000015f8 <printf>:
    15f8:	defffb04 	addi	sp,sp,-20
    15fc:	dfc00115 	stw	ra,4(sp)
    1600:	d9400215 	stw	r5,8(sp)
    1604:	d9800315 	stw	r6,12(sp)
    1608:	d9c00415 	stw	r7,16(sp)
    160c:	00800074 	movhi	r2,1
    1610:	10840004 	addi	r2,r2,4096
    1614:	10c00017 	ldw	r3,0(r2)
    1618:	200b883a 	mov	r5,r4
    161c:	d8800204 	addi	r2,sp,8
    1620:	19000217 	ldw	r4,8(r3)
    1624:	100d883a 	mov	r6,r2
    1628:	d8800015 	stw	r2,0(sp)
    162c:	00038000 	call	3800 <__vfprintf_internal>
    1630:	dfc00117 	ldw	ra,4(sp)
    1634:	dec00504 	addi	sp,sp,20
    1638:	f800283a 	ret

0000163c <_printf_r>:
    163c:	defffc04 	addi	sp,sp,-16
    1640:	dfc00115 	stw	ra,4(sp)
    1644:	d9800215 	stw	r6,8(sp)
    1648:	d9c00315 	stw	r7,12(sp)
    164c:	280d883a 	mov	r6,r5
    1650:	21400217 	ldw	r5,8(r4)
    1654:	d8c00204 	addi	r3,sp,8
    1658:	180f883a 	mov	r7,r3
    165c:	d8c00015 	stw	r3,0(sp)
    1660:	00019540 	call	1954 <___vfprintf_internal_r>
    1664:	dfc00117 	ldw	ra,4(sp)
    1668:	dec00404 	addi	sp,sp,16
    166c:	f800283a 	ret

00001670 <_puts_r>:
    1670:	defff604 	addi	sp,sp,-40
    1674:	dc400715 	stw	r17,28(sp)
    1678:	2023883a 	mov	r17,r4
    167c:	2809883a 	mov	r4,r5
    1680:	dfc00915 	stw	ra,36(sp)
    1684:	dcc00815 	stw	r19,32(sp)
    1688:	2827883a 	mov	r19,r5
    168c:	00018880 	call	1888 <strlen>
    1690:	89400217 	ldw	r5,8(r17)
    1694:	00c00074 	movhi	r3,1
    1698:	18fc4304 	addi	r3,r3,-3828
    169c:	01c00044 	movi	r7,1
    16a0:	12000044 	addi	r8,r2,1
    16a4:	d8c00515 	stw	r3,20(sp)
    16a8:	d9c00615 	stw	r7,24(sp)
    16ac:	d8c00304 	addi	r3,sp,12
    16b0:	01c00084 	movi	r7,2
    16b4:	8809883a 	mov	r4,r17
    16b8:	d80d883a 	mov	r6,sp
    16bc:	d8c00015 	stw	r3,0(sp)
    16c0:	dcc00315 	stw	r19,12(sp)
    16c4:	da000215 	stw	r8,8(sp)
    16c8:	d9c00115 	stw	r7,4(sp)
    16cc:	d8800415 	stw	r2,16(sp)
    16d0:	0005a5c0 	call	5a5c <__sfvwrite_r>
    16d4:	00ffffc4 	movi	r3,-1
    16d8:	10000626 	beq	r2,zero,16f4 <_puts_r+0x84>
    16dc:	1805883a 	mov	r2,r3
    16e0:	dfc00917 	ldw	ra,36(sp)
    16e4:	dcc00817 	ldw	r19,32(sp)
    16e8:	dc400717 	ldw	r17,28(sp)
    16ec:	dec00a04 	addi	sp,sp,40
    16f0:	f800283a 	ret
    16f4:	00c00284 	movi	r3,10
    16f8:	1805883a 	mov	r2,r3
    16fc:	dfc00917 	ldw	ra,36(sp)
    1700:	dcc00817 	ldw	r19,32(sp)
    1704:	dc400717 	ldw	r17,28(sp)
    1708:	dec00a04 	addi	sp,sp,40
    170c:	f800283a 	ret

00001710 <puts>:
    1710:	00800074 	movhi	r2,1
    1714:	10840004 	addi	r2,r2,4096
    1718:	200b883a 	mov	r5,r4
    171c:	11000017 	ldw	r4,0(r2)
    1720:	00016701 	jmpi	1670 <_puts_r>

00001724 <srand>:
    1724:	00800074 	movhi	r2,1
    1728:	10840004 	addi	r2,r2,4096
    172c:	11400017 	ldw	r5,0(r2)
    1730:	0007883a 	mov	r3,zero
    1734:	28c02a15 	stw	r3,168(r5)
    1738:	29002915 	stw	r4,164(r5)
    173c:	f800283a 	ret

00001740 <rand>:
    1740:	defffe04 	addi	sp,sp,-8
    1744:	00800074 	movhi	r2,1
    1748:	10840004 	addi	r2,r2,4096
    174c:	dc000015 	stw	r16,0(sp)
    1750:	14000017 	ldw	r16,0(r2)
    1754:	dfc00115 	stw	ra,4(sp)
    1758:	00932574 	movhi	r2,19605
    175c:	109fcb44 	addi	r2,r2,32557
    1760:	82002917 	ldw	r8,164(r16)
    1764:	82402a17 	ldw	r9,168(r16)
    1768:	00d614b4 	movhi	r3,22610
    176c:	18fd0b44 	addi	r3,r3,-3027
    1770:	4009883a 	mov	r4,r8
    1774:	180f883a 	mov	r7,r3
    1778:	100d883a 	mov	r6,r2
    177c:	480b883a 	mov	r5,r9
    1780:	00084a00 	call	84a0 <__muldi3>
    1784:	02000044 	movi	r8,1
    1788:	1209883a 	add	r4,r2,r8
    178c:	2095803a 	cmpltu	r10,r4,r2
    1790:	50d5883a 	add	r10,r10,r3
    1794:	81002915 	stw	r4,164(r16)
    1798:	01200034 	movhi	r4,32768
    179c:	213fffc4 	addi	r4,r4,-1
    17a0:	2284703a 	and	r2,r4,r10
    17a4:	82802a15 	stw	r10,168(r16)
    17a8:	dfc00117 	ldw	ra,4(sp)
    17ac:	dc000017 	ldw	r16,0(sp)
    17b0:	dec00204 	addi	sp,sp,8
    17b4:	f800283a 	ret

000017b8 <__srget_r>:
    17b8:	defffe04 	addi	sp,sp,-8
    17bc:	dc000015 	stw	r16,0(sp)
    17c0:	dfc00115 	stw	ra,4(sp)
    17c4:	2821883a 	mov	r16,r5
    17c8:	0007bb40 	call	7bb4 <__srefill_r>
    17cc:	013fffc4 	movi	r4,-1
    17d0:	1000071e 	bne	r2,zero,17f0 <__srget_r+0x38>
    17d4:	80800117 	ldw	r2,4(r16)
    17d8:	81000017 	ldw	r4,0(r16)
    17dc:	10bfffc4 	addi	r2,r2,-1
    17e0:	20c00044 	addi	r3,r4,1
    17e4:	80800115 	stw	r2,4(r16)
    17e8:	21000003 	ldbu	r4,0(r4)
    17ec:	80c00015 	stw	r3,0(r16)
    17f0:	2005883a 	mov	r2,r4
    17f4:	dfc00117 	ldw	ra,4(sp)
    17f8:	dc000017 	ldw	r16,0(sp)
    17fc:	dec00204 	addi	sp,sp,8
    1800:	f800283a 	ret

00001804 <__srget>:
    1804:	00800074 	movhi	r2,1
    1808:	10840004 	addi	r2,r2,4096
    180c:	200b883a 	mov	r5,r4
    1810:	11000017 	ldw	r4,0(r2)
    1814:	00017b81 	jmpi	17b8 <__srget_r>

00001818 <_sbrk_r>:
    1818:	defffd04 	addi	sp,sp,-12
    181c:	dc000015 	stw	r16,0(sp)
    1820:	04000074 	movhi	r16,1
    1824:	840b0404 	addi	r16,r16,11280
    1828:	dc400115 	stw	r17,4(sp)
    182c:	80000015 	stw	zero,0(r16)
    1830:	2023883a 	mov	r17,r4
    1834:	2809883a 	mov	r4,r5
    1838:	dfc00215 	stw	ra,8(sp)
    183c:	000b1b80 	call	b1b8 <sbrk>
    1840:	1007883a 	mov	r3,r2
    1844:	00bfffc4 	movi	r2,-1
    1848:	18800626 	beq	r3,r2,1864 <_sbrk_r+0x4c>
    184c:	1805883a 	mov	r2,r3
    1850:	dfc00217 	ldw	ra,8(sp)
    1854:	dc400117 	ldw	r17,4(sp)
    1858:	dc000017 	ldw	r16,0(sp)
    185c:	dec00304 	addi	sp,sp,12
    1860:	f800283a 	ret
    1864:	80800017 	ldw	r2,0(r16)
    1868:	103ff826 	beq	r2,zero,184c <_sbrk_r+0x34>
    186c:	88800015 	stw	r2,0(r17)
    1870:	1805883a 	mov	r2,r3
    1874:	dfc00217 	ldw	ra,8(sp)
    1878:	dc400117 	ldw	r17,4(sp)
    187c:	dc000017 	ldw	r16,0(sp)
    1880:	dec00304 	addi	sp,sp,12
    1884:	f800283a 	ret

00001888 <strlen>:
    1888:	208000cc 	andi	r2,r4,3
    188c:	2011883a 	mov	r8,r4
    1890:	1000161e 	bne	r2,zero,18ec <strlen+0x64>
    1894:	20c00017 	ldw	r3,0(r4)
    1898:	017fbff4 	movhi	r5,65279
    189c:	297fbfc4 	addi	r5,r5,-257
    18a0:	01e02074 	movhi	r7,32897
    18a4:	39e02004 	addi	r7,r7,-32640
    18a8:	1945883a 	add	r2,r3,r5
    18ac:	11c4703a 	and	r2,r2,r7
    18b0:	00c6303a 	nor	r3,zero,r3
    18b4:	1886703a 	and	r3,r3,r2
    18b8:	18000c1e 	bne	r3,zero,18ec <strlen+0x64>
    18bc:	280d883a 	mov	r6,r5
    18c0:	380b883a 	mov	r5,r7
    18c4:	21000104 	addi	r4,r4,4
    18c8:	20800017 	ldw	r2,0(r4)
    18cc:	1187883a 	add	r3,r2,r6
    18d0:	1946703a 	and	r3,r3,r5
    18d4:	0084303a 	nor	r2,zero,r2
    18d8:	10c4703a 	and	r2,r2,r3
    18dc:	103ff926 	beq	r2,zero,18c4 <strlen+0x3c>
    18e0:	20800007 	ldb	r2,0(r4)
    18e4:	10000326 	beq	r2,zero,18f4 <strlen+0x6c>
    18e8:	21000044 	addi	r4,r4,1
    18ec:	20800007 	ldb	r2,0(r4)
    18f0:	103ffd1e 	bne	r2,zero,18e8 <strlen+0x60>
    18f4:	2205c83a 	sub	r2,r4,r8
    18f8:	f800283a 	ret

000018fc <__sprint_r>:
    18fc:	30800217 	ldw	r2,8(r6)
    1900:	defffe04 	addi	sp,sp,-8
    1904:	dc000015 	stw	r16,0(sp)
    1908:	dfc00115 	stw	ra,4(sp)
    190c:	3021883a 	mov	r16,r6
    1910:	0007883a 	mov	r3,zero
    1914:	1000061e 	bne	r2,zero,1930 <__sprint_r+0x34>
    1918:	1805883a 	mov	r2,r3
    191c:	30000115 	stw	zero,4(r6)
    1920:	dfc00117 	ldw	ra,4(sp)
    1924:	dc000017 	ldw	r16,0(sp)
    1928:	dec00204 	addi	sp,sp,8
    192c:	f800283a 	ret
    1930:	0005a5c0 	call	5a5c <__sfvwrite_r>
    1934:	1007883a 	mov	r3,r2
    1938:	1805883a 	mov	r2,r3
    193c:	80000115 	stw	zero,4(r16)
    1940:	80000215 	stw	zero,8(r16)
    1944:	dfc00117 	ldw	ra,4(sp)
    1948:	dc000017 	ldw	r16,0(sp)
    194c:	dec00204 	addi	sp,sp,8
    1950:	f800283a 	ret

00001954 <___vfprintf_internal_r>:
    1954:	defea404 	addi	sp,sp,-1392
    1958:	dd815815 	stw	r22,1376(sp)
    195c:	dc015215 	stw	r16,1352(sp)
    1960:	d9c15115 	stw	r7,1348(sp)
    1964:	dfc15b15 	stw	ra,1388(sp)
    1968:	df015a15 	stw	fp,1384(sp)
    196c:	ddc15915 	stw	r23,1380(sp)
    1970:	dd415715 	stw	r21,1372(sp)
    1974:	dd015615 	stw	r20,1368(sp)
    1978:	dcc15515 	stw	r19,1364(sp)
    197c:	dc815415 	stw	r18,1360(sp)
    1980:	dc415315 	stw	r17,1356(sp)
    1984:	282d883a 	mov	r22,r5
    1988:	3021883a 	mov	r16,r6
    198c:	d9014f15 	stw	r4,1340(sp)
    1990:	00060800 	call	6080 <_localeconv_r>
    1994:	10800017 	ldw	r2,0(r2)
    1998:	d9c15117 	ldw	r7,1348(sp)
    199c:	d8814915 	stw	r2,1316(sp)
    19a0:	d8814f17 	ldw	r2,1340(sp)
    19a4:	10000226 	beq	r2,zero,19b0 <___vfprintf_internal_r+0x5c>
    19a8:	10800e17 	ldw	r2,56(r2)
    19ac:	10020d26 	beq	r2,zero,21e4 <___vfprintf_internal_r+0x890>
    19b0:	b080030b 	ldhu	r2,12(r22)
    19b4:	1080020c 	andi	r2,r2,8
    19b8:	10020e26 	beq	r2,zero,21f4 <___vfprintf_internal_r+0x8a0>
    19bc:	b0800417 	ldw	r2,16(r22)
    19c0:	10020c26 	beq	r2,zero,21f4 <___vfprintf_internal_r+0x8a0>
    19c4:	b200030b 	ldhu	r8,12(r22)
    19c8:	00800284 	movi	r2,10
    19cc:	40c0068c 	andi	r3,r8,26
    19d0:	18802f1e 	bne	r3,r2,1a90 <___vfprintf_internal_r+0x13c>
    19d4:	b080038f 	ldh	r2,14(r22)
    19d8:	10002d16 	blt	r2,zero,1a90 <___vfprintf_internal_r+0x13c>
    19dc:	b240038b 	ldhu	r9,14(r22)
    19e0:	b2800717 	ldw	r10,28(r22)
    19e4:	b2c00917 	ldw	r11,36(r22)
    19e8:	d9014f17 	ldw	r4,1340(sp)
    19ec:	dc402904 	addi	r17,sp,164
    19f0:	d8804004 	addi	r2,sp,256
    19f4:	00c10004 	movi	r3,1024
    19f8:	423fff4c 	andi	r8,r8,65533
    19fc:	800d883a 	mov	r6,r16
    1a00:	880b883a 	mov	r5,r17
    1a04:	da002c0d 	sth	r8,176(sp)
    1a08:	da402c8d 	sth	r9,178(sp)
    1a0c:	da803015 	stw	r10,192(sp)
    1a10:	dac03215 	stw	r11,200(sp)
    1a14:	d8802d15 	stw	r2,180(sp)
    1a18:	d8c02e15 	stw	r3,184(sp)
    1a1c:	d8802915 	stw	r2,164(sp)
    1a20:	d8c02b15 	stw	r3,172(sp)
    1a24:	d8002f15 	stw	zero,188(sp)
    1a28:	00019540 	call	1954 <___vfprintf_internal_r>
    1a2c:	d8814b15 	stw	r2,1324(sp)
    1a30:	10000416 	blt	r2,zero,1a44 <___vfprintf_internal_r+0xf0>
    1a34:	d9014f17 	ldw	r4,1340(sp)
    1a38:	880b883a 	mov	r5,r17
    1a3c:	000512c0 	call	512c <_fflush_r>
    1a40:	1002321e 	bne	r2,zero,230c <___vfprintf_internal_r+0x9b8>
    1a44:	d8802c0b 	ldhu	r2,176(sp)
    1a48:	1080100c 	andi	r2,r2,64
    1a4c:	10000326 	beq	r2,zero,1a5c <___vfprintf_internal_r+0x108>
    1a50:	b080030b 	ldhu	r2,12(r22)
    1a54:	10801014 	ori	r2,r2,64
    1a58:	b080030d 	sth	r2,12(r22)
    1a5c:	d8814b17 	ldw	r2,1324(sp)
    1a60:	dfc15b17 	ldw	ra,1388(sp)
    1a64:	df015a17 	ldw	fp,1384(sp)
    1a68:	ddc15917 	ldw	r23,1380(sp)
    1a6c:	dd815817 	ldw	r22,1376(sp)
    1a70:	dd415717 	ldw	r21,1372(sp)
    1a74:	dd015617 	ldw	r20,1368(sp)
    1a78:	dcc15517 	ldw	r19,1364(sp)
    1a7c:	dc815417 	ldw	r18,1360(sp)
    1a80:	dc415317 	ldw	r17,1356(sp)
    1a84:	dc015217 	ldw	r16,1352(sp)
    1a88:	dec15c04 	addi	sp,sp,1392
    1a8c:	f800283a 	ret
    1a90:	0005883a 	mov	r2,zero
    1a94:	0007883a 	mov	r3,zero
    1a98:	dd401904 	addi	r21,sp,100
    1a9c:	d8814215 	stw	r2,1288(sp)
    1aa0:	802f883a 	mov	r23,r16
    1aa4:	d8c14315 	stw	r3,1292(sp)
    1aa8:	d8014b15 	stw	zero,1324(sp)
    1aac:	d8014815 	stw	zero,1312(sp)
    1ab0:	d8014415 	stw	zero,1296(sp)
    1ab4:	d8014715 	stw	zero,1308(sp)
    1ab8:	dd400c15 	stw	r21,48(sp)
    1abc:	d8000e15 	stw	zero,56(sp)
    1ac0:	d8000d15 	stw	zero,52(sp)
    1ac4:	b8800007 	ldb	r2,0(r23)
    1ac8:	10001926 	beq	r2,zero,1b30 <___vfprintf_internal_r+0x1dc>
    1acc:	00c00944 	movi	r3,37
    1ad0:	10c01726 	beq	r2,r3,1b30 <___vfprintf_internal_r+0x1dc>
    1ad4:	b821883a 	mov	r16,r23
    1ad8:	00000106 	br	1ae0 <___vfprintf_internal_r+0x18c>
    1adc:	10c00326 	beq	r2,r3,1aec <___vfprintf_internal_r+0x198>
    1ae0:	84000044 	addi	r16,r16,1
    1ae4:	80800007 	ldb	r2,0(r16)
    1ae8:	103ffc1e 	bne	r2,zero,1adc <___vfprintf_internal_r+0x188>
    1aec:	85e7c83a 	sub	r19,r16,r23
    1af0:	98000e26 	beq	r19,zero,1b2c <___vfprintf_internal_r+0x1d8>
    1af4:	dc800e17 	ldw	r18,56(sp)
    1af8:	dc400d17 	ldw	r17,52(sp)
    1afc:	008001c4 	movi	r2,7
    1b00:	94e5883a 	add	r18,r18,r19
    1b04:	8c400044 	addi	r17,r17,1
    1b08:	adc00015 	stw	r23,0(r21)
    1b0c:	dc800e15 	stw	r18,56(sp)
    1b10:	acc00115 	stw	r19,4(r21)
    1b14:	dc400d15 	stw	r17,52(sp)
    1b18:	14428b16 	blt	r2,r17,2548 <___vfprintf_internal_r+0xbf4>
    1b1c:	ad400204 	addi	r21,r21,8
    1b20:	d9014b17 	ldw	r4,1324(sp)
    1b24:	24c9883a 	add	r4,r4,r19
    1b28:	d9014b15 	stw	r4,1324(sp)
    1b2c:	802f883a 	mov	r23,r16
    1b30:	b8800007 	ldb	r2,0(r23)
    1b34:	10013c26 	beq	r2,zero,2028 <___vfprintf_internal_r+0x6d4>
    1b38:	bdc00044 	addi	r23,r23,1
    1b3c:	d8000405 	stb	zero,16(sp)
    1b40:	b8c00007 	ldb	r3,0(r23)
    1b44:	04ffffc4 	movi	r19,-1
    1b48:	d8014c15 	stw	zero,1328(sp)
    1b4c:	d8014a15 	stw	zero,1320(sp)
    1b50:	d8c14d15 	stw	r3,1332(sp)
    1b54:	bdc00044 	addi	r23,r23,1
    1b58:	d9414d17 	ldw	r5,1332(sp)
    1b5c:	00801604 	movi	r2,88
    1b60:	28fff804 	addi	r3,r5,-32
    1b64:	10c06036 	bltu	r2,r3,1ce8 <___vfprintf_internal_r+0x394>
    1b68:	18c5883a 	add	r2,r3,r3
    1b6c:	1085883a 	add	r2,r2,r2
    1b70:	00c00034 	movhi	r3,0
    1b74:	18c6e104 	addi	r3,r3,7044
    1b78:	10c5883a 	add	r2,r2,r3
    1b7c:	11000017 	ldw	r4,0(r2)
    1b80:	2000683a 	jmp	r4
    1b84:	00002af8 	rdprs	zero,zero,171
    1b88:	00001ce8 	cmpgeui	zero,zero,115
    1b8c:	00001ce8 	cmpgeui	zero,zero,115
    1b90:	00002ae4 	muli	zero,zero,171
    1b94:	00001ce8 	cmpgeui	zero,zero,115
    1b98:	00001ce8 	cmpgeui	zero,zero,115
    1b9c:	00001ce8 	cmpgeui	zero,zero,115
    1ba0:	00001ce8 	cmpgeui	zero,zero,115
    1ba4:	00001ce8 	cmpgeui	zero,zero,115
    1ba8:	00001ce8 	cmpgeui	zero,zero,115
    1bac:	000028c4 	movi	zero,163
    1bb0:	00002ad4 	movui	zero,171
    1bb4:	00001ce8 	cmpgeui	zero,zero,115
    1bb8:	000028dc 	xori	zero,zero,163
    1bbc:	00002b70 	cmpltui	zero,zero,173
    1bc0:	00001ce8 	cmpgeui	zero,zero,115
    1bc4:	00002b5c 	xori	zero,zero,173
    1bc8:	00002b24 	muli	zero,zero,172
    1bcc:	00002b24 	muli	zero,zero,172
    1bd0:	00002b24 	muli	zero,zero,172
    1bd4:	00002b24 	muli	zero,zero,172
    1bd8:	00002b24 	muli	zero,zero,172
    1bdc:	00002b24 	muli	zero,zero,172
    1be0:	00002b24 	muli	zero,zero,172
    1be4:	00002b24 	muli	zero,zero,172
    1be8:	00002b24 	muli	zero,zero,172
    1bec:	00001ce8 	cmpgeui	zero,zero,115
    1bf0:	00001ce8 	cmpgeui	zero,zero,115
    1bf4:	00001ce8 	cmpgeui	zero,zero,115
    1bf8:	00001ce8 	cmpgeui	zero,zero,115
    1bfc:	00001ce8 	cmpgeui	zero,zero,115
    1c00:	00001ce8 	cmpgeui	zero,zero,115
    1c04:	00001ce8 	cmpgeui	zero,zero,115
    1c08:	00001ce8 	cmpgeui	zero,zero,115
    1c0c:	00001ce8 	cmpgeui	zero,zero,115
    1c10:	00001ce8 	cmpgeui	zero,zero,115
    1c14:	00002340 	call	234 <create_test_data+0x34>
    1c18:	000029ac 	andhi	zero,zero,166
    1c1c:	00001ce8 	cmpgeui	zero,zero,115
    1c20:	000029ac 	andhi	zero,zero,166
    1c24:	00001ce8 	cmpgeui	zero,zero,115
    1c28:	00001ce8 	cmpgeui	zero,zero,115
    1c2c:	00001ce8 	cmpgeui	zero,zero,115
    1c30:	00001ce8 	cmpgeui	zero,zero,115
    1c34:	00002b10 	cmplti	zero,zero,172
    1c38:	00001ce8 	cmpgeui	zero,zero,115
    1c3c:	00001ce8 	cmpgeui	zero,zero,115
    1c40:	000023f4 	movhi	zero,143
    1c44:	00001ce8 	cmpgeui	zero,zero,115
    1c48:	00001ce8 	cmpgeui	zero,zero,115
    1c4c:	00001ce8 	cmpgeui	zero,zero,115
    1c50:	00001ce8 	cmpgeui	zero,zero,115
    1c54:	00001ce8 	cmpgeui	zero,zero,115
    1c58:	00002440 	call	244 <create_test_data+0x44>
    1c5c:	00001ce8 	cmpgeui	zero,zero,115
    1c60:	00001ce8 	cmpgeui	zero,zero,115
    1c64:	00002a60 	cmpeqi	zero,zero,169
    1c68:	00001ce8 	cmpgeui	zero,zero,115
    1c6c:	00001ce8 	cmpgeui	zero,zero,115
    1c70:	00001ce8 	cmpgeui	zero,zero,115
    1c74:	00001ce8 	cmpgeui	zero,zero,115
    1c78:	00001ce8 	cmpgeui	zero,zero,115
    1c7c:	00001ce8 	cmpgeui	zero,zero,115
    1c80:	00001ce8 	cmpgeui	zero,zero,115
    1c84:	00001ce8 	cmpgeui	zero,zero,115
    1c88:	00001ce8 	cmpgeui	zero,zero,115
    1c8c:	00001ce8 	cmpgeui	zero,zero,115
    1c90:	00002a34 	movhi	zero,168
    1c94:	0000234c 	andi	zero,zero,141
    1c98:	000029ac 	andhi	zero,zero,166
    1c9c:	000029ac 	andhi	zero,zero,166
    1ca0:	000029ac 	andhi	zero,zero,166
    1ca4:	00002998 	cmpnei	zero,zero,166
    1ca8:	0000234c 	andi	zero,zero,141
    1cac:	00001ce8 	cmpgeui	zero,zero,115
    1cb0:	00001ce8 	cmpgeui	zero,zero,115
    1cb4:	00002920 	cmpeqi	zero,zero,164
    1cb8:	00001ce8 	cmpgeui	zero,zero,115
    1cbc:	000028f0 	cmpltui	zero,zero,163
    1cc0:	00002400 	call	240 <create_test_data+0x40>
    1cc4:	00002950 	cmplti	zero,zero,165
    1cc8:	0000293c 	xorhi	zero,zero,164
    1ccc:	00001ce8 	cmpgeui	zero,zero,115
    1cd0:	00002bcc 	andi	zero,zero,175
    1cd4:	00001ce8 	cmpgeui	zero,zero,115
    1cd8:	0000244c 	andi	zero,zero,145
    1cdc:	00001ce8 	cmpgeui	zero,zero,115
    1ce0:	00001ce8 	cmpgeui	zero,zero,115
    1ce4:	00002ac4 	movi	zero,171
    1ce8:	d9014d17 	ldw	r4,1332(sp)
    1cec:	2000ce26 	beq	r4,zero,2028 <___vfprintf_internal_r+0x6d4>
    1cf0:	01400044 	movi	r5,1
    1cf4:	d9800f04 	addi	r6,sp,60
    1cf8:	d9c14015 	stw	r7,1280(sp)
    1cfc:	d9414515 	stw	r5,1300(sp)
    1d00:	d9814115 	stw	r6,1284(sp)
    1d04:	280f883a 	mov	r7,r5
    1d08:	d9000f05 	stb	r4,60(sp)
    1d0c:	d8000405 	stb	zero,16(sp)
    1d10:	d8014615 	stw	zero,1304(sp)
    1d14:	d8c14c17 	ldw	r3,1328(sp)
    1d18:	1880008c 	andi	r2,r3,2
    1d1c:	1005003a 	cmpeq	r2,r2,zero
    1d20:	d8815015 	stw	r2,1344(sp)
    1d24:	1000031e 	bne	r2,zero,1d34 <___vfprintf_internal_r+0x3e0>
    1d28:	d9014517 	ldw	r4,1300(sp)
    1d2c:	21000084 	addi	r4,r4,2
    1d30:	d9014515 	stw	r4,1300(sp)
    1d34:	d9414c17 	ldw	r5,1328(sp)
    1d38:	2940210c 	andi	r5,r5,132
    1d3c:	d9414e15 	stw	r5,1336(sp)
    1d40:	28002d1e 	bne	r5,zero,1df8 <___vfprintf_internal_r+0x4a4>
    1d44:	d9814a17 	ldw	r6,1320(sp)
    1d48:	d8814517 	ldw	r2,1300(sp)
    1d4c:	30a1c83a 	sub	r16,r6,r2
    1d50:	0400290e 	bge	zero,r16,1df8 <___vfprintf_internal_r+0x4a4>
    1d54:	00800404 	movi	r2,16
    1d58:	1404580e 	bge	r2,r16,2ebc <___vfprintf_internal_r+0x1568>
    1d5c:	dc800e17 	ldw	r18,56(sp)
    1d60:	dc400d17 	ldw	r17,52(sp)
    1d64:	1027883a 	mov	r19,r2
    1d68:	07000074 	movhi	fp,1
    1d6c:	e73c5f84 	addi	fp,fp,-3714
    1d70:	050001c4 	movi	r20,7
    1d74:	00000306 	br	1d84 <___vfprintf_internal_r+0x430>
    1d78:	843ffc04 	addi	r16,r16,-16
    1d7c:	ad400204 	addi	r21,r21,8
    1d80:	9c00130e 	bge	r19,r16,1dd0 <___vfprintf_internal_r+0x47c>
    1d84:	94800404 	addi	r18,r18,16
    1d88:	8c400044 	addi	r17,r17,1
    1d8c:	af000015 	stw	fp,0(r21)
    1d90:	acc00115 	stw	r19,4(r21)
    1d94:	dc800e15 	stw	r18,56(sp)
    1d98:	dc400d15 	stw	r17,52(sp)
    1d9c:	a47ff60e 	bge	r20,r17,1d78 <___vfprintf_internal_r+0x424>
    1da0:	d9014f17 	ldw	r4,1340(sp)
    1da4:	b00b883a 	mov	r5,r22
    1da8:	d9800c04 	addi	r6,sp,48
    1dac:	d9c15115 	stw	r7,1348(sp)
    1db0:	00018fc0 	call	18fc <__sprint_r>
    1db4:	d9c15117 	ldw	r7,1348(sp)
    1db8:	10009e1e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    1dbc:	843ffc04 	addi	r16,r16,-16
    1dc0:	dc800e17 	ldw	r18,56(sp)
    1dc4:	dc400d17 	ldw	r17,52(sp)
    1dc8:	dd401904 	addi	r21,sp,100
    1dcc:	9c3fed16 	blt	r19,r16,1d84 <___vfprintf_internal_r+0x430>
    1dd0:	9425883a 	add	r18,r18,r16
    1dd4:	8c400044 	addi	r17,r17,1
    1dd8:	008001c4 	movi	r2,7
    1ddc:	af000015 	stw	fp,0(r21)
    1de0:	ac000115 	stw	r16,4(r21)
    1de4:	dc800e15 	stw	r18,56(sp)
    1de8:	dc400d15 	stw	r17,52(sp)
    1dec:	1441f516 	blt	r2,r17,25c4 <___vfprintf_internal_r+0xc70>
    1df0:	ad400204 	addi	r21,r21,8
    1df4:	00000206 	br	1e00 <___vfprintf_internal_r+0x4ac>
    1df8:	dc800e17 	ldw	r18,56(sp)
    1dfc:	dc400d17 	ldw	r17,52(sp)
    1e00:	d8800407 	ldb	r2,16(sp)
    1e04:	10000b26 	beq	r2,zero,1e34 <___vfprintf_internal_r+0x4e0>
    1e08:	00800044 	movi	r2,1
    1e0c:	94800044 	addi	r18,r18,1
    1e10:	8c400044 	addi	r17,r17,1
    1e14:	a8800115 	stw	r2,4(r21)
    1e18:	d8c00404 	addi	r3,sp,16
    1e1c:	008001c4 	movi	r2,7
    1e20:	a8c00015 	stw	r3,0(r21)
    1e24:	dc800e15 	stw	r18,56(sp)
    1e28:	dc400d15 	stw	r17,52(sp)
    1e2c:	1441da16 	blt	r2,r17,2598 <___vfprintf_internal_r+0xc44>
    1e30:	ad400204 	addi	r21,r21,8
    1e34:	d9015017 	ldw	r4,1344(sp)
    1e38:	20000b1e 	bne	r4,zero,1e68 <___vfprintf_internal_r+0x514>
    1e3c:	d8800444 	addi	r2,sp,17
    1e40:	94800084 	addi	r18,r18,2
    1e44:	8c400044 	addi	r17,r17,1
    1e48:	a8800015 	stw	r2,0(r21)
    1e4c:	00c00084 	movi	r3,2
    1e50:	008001c4 	movi	r2,7
    1e54:	a8c00115 	stw	r3,4(r21)
    1e58:	dc800e15 	stw	r18,56(sp)
    1e5c:	dc400d15 	stw	r17,52(sp)
    1e60:	1441c216 	blt	r2,r17,256c <___vfprintf_internal_r+0xc18>
    1e64:	ad400204 	addi	r21,r21,8
    1e68:	d9414e17 	ldw	r5,1336(sp)
    1e6c:	00802004 	movi	r2,128
    1e70:	2880b126 	beq	r5,r2,2138 <___vfprintf_internal_r+0x7e4>
    1e74:	d8c14617 	ldw	r3,1304(sp)
    1e78:	19e1c83a 	sub	r16,r3,r7
    1e7c:	0400260e 	bge	zero,r16,1f18 <___vfprintf_internal_r+0x5c4>
    1e80:	00800404 	movi	r2,16
    1e84:	1403c90e 	bge	r2,r16,2dac <___vfprintf_internal_r+0x1458>
    1e88:	1027883a 	mov	r19,r2
    1e8c:	07000074 	movhi	fp,1
    1e90:	e73c5b84 	addi	fp,fp,-3730
    1e94:	050001c4 	movi	r20,7
    1e98:	00000306 	br	1ea8 <___vfprintf_internal_r+0x554>
    1e9c:	843ffc04 	addi	r16,r16,-16
    1ea0:	ad400204 	addi	r21,r21,8
    1ea4:	9c00130e 	bge	r19,r16,1ef4 <___vfprintf_internal_r+0x5a0>
    1ea8:	94800404 	addi	r18,r18,16
    1eac:	8c400044 	addi	r17,r17,1
    1eb0:	af000015 	stw	fp,0(r21)
    1eb4:	acc00115 	stw	r19,4(r21)
    1eb8:	dc800e15 	stw	r18,56(sp)
    1ebc:	dc400d15 	stw	r17,52(sp)
    1ec0:	a47ff60e 	bge	r20,r17,1e9c <___vfprintf_internal_r+0x548>
    1ec4:	d9014f17 	ldw	r4,1340(sp)
    1ec8:	b00b883a 	mov	r5,r22
    1ecc:	d9800c04 	addi	r6,sp,48
    1ed0:	d9c15115 	stw	r7,1348(sp)
    1ed4:	00018fc0 	call	18fc <__sprint_r>
    1ed8:	d9c15117 	ldw	r7,1348(sp)
    1edc:	1000551e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    1ee0:	843ffc04 	addi	r16,r16,-16
    1ee4:	dc800e17 	ldw	r18,56(sp)
    1ee8:	dc400d17 	ldw	r17,52(sp)
    1eec:	dd401904 	addi	r21,sp,100
    1ef0:	9c3fed16 	blt	r19,r16,1ea8 <___vfprintf_internal_r+0x554>
    1ef4:	9425883a 	add	r18,r18,r16
    1ef8:	8c400044 	addi	r17,r17,1
    1efc:	008001c4 	movi	r2,7
    1f00:	af000015 	stw	fp,0(r21)
    1f04:	ac000115 	stw	r16,4(r21)
    1f08:	dc800e15 	stw	r18,56(sp)
    1f0c:	dc400d15 	stw	r17,52(sp)
    1f10:	14418216 	blt	r2,r17,251c <___vfprintf_internal_r+0xbc8>
    1f14:	ad400204 	addi	r21,r21,8
    1f18:	d9014c17 	ldw	r4,1328(sp)
    1f1c:	2080400c 	andi	r2,r4,256
    1f20:	10004a1e 	bne	r2,zero,204c <___vfprintf_internal_r+0x6f8>
    1f24:	d9414117 	ldw	r5,1284(sp)
    1f28:	91e5883a 	add	r18,r18,r7
    1f2c:	8c400044 	addi	r17,r17,1
    1f30:	008001c4 	movi	r2,7
    1f34:	a9400015 	stw	r5,0(r21)
    1f38:	a9c00115 	stw	r7,4(r21)
    1f3c:	dc800e15 	stw	r18,56(sp)
    1f40:	dc400d15 	stw	r17,52(sp)
    1f44:	14416716 	blt	r2,r17,24e4 <___vfprintf_internal_r+0xb90>
    1f48:	a8c00204 	addi	r3,r21,8
    1f4c:	d9814c17 	ldw	r6,1328(sp)
    1f50:	3080010c 	andi	r2,r6,4
    1f54:	10002826 	beq	r2,zero,1ff8 <___vfprintf_internal_r+0x6a4>
    1f58:	d8814a17 	ldw	r2,1320(sp)
    1f5c:	d9014517 	ldw	r4,1300(sp)
    1f60:	1121c83a 	sub	r16,r2,r4
    1f64:	0400240e 	bge	zero,r16,1ff8 <___vfprintf_internal_r+0x6a4>
    1f68:	00800404 	movi	r2,16
    1f6c:	14044f0e 	bge	r2,r16,30ac <___vfprintf_internal_r+0x1758>
    1f70:	dc400d17 	ldw	r17,52(sp)
    1f74:	1027883a 	mov	r19,r2
    1f78:	07000074 	movhi	fp,1
    1f7c:	e73c5f84 	addi	fp,fp,-3714
    1f80:	050001c4 	movi	r20,7
    1f84:	00000306 	br	1f94 <___vfprintf_internal_r+0x640>
    1f88:	843ffc04 	addi	r16,r16,-16
    1f8c:	18c00204 	addi	r3,r3,8
    1f90:	9c00110e 	bge	r19,r16,1fd8 <___vfprintf_internal_r+0x684>
    1f94:	94800404 	addi	r18,r18,16
    1f98:	8c400044 	addi	r17,r17,1
    1f9c:	1f000015 	stw	fp,0(r3)
    1fa0:	1cc00115 	stw	r19,4(r3)
    1fa4:	dc800e15 	stw	r18,56(sp)
    1fa8:	dc400d15 	stw	r17,52(sp)
    1fac:	a47ff60e 	bge	r20,r17,1f88 <___vfprintf_internal_r+0x634>
    1fb0:	d9014f17 	ldw	r4,1340(sp)
    1fb4:	b00b883a 	mov	r5,r22
    1fb8:	d9800c04 	addi	r6,sp,48
    1fbc:	00018fc0 	call	18fc <__sprint_r>
    1fc0:	10001c1e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    1fc4:	843ffc04 	addi	r16,r16,-16
    1fc8:	dc800e17 	ldw	r18,56(sp)
    1fcc:	dc400d17 	ldw	r17,52(sp)
    1fd0:	d8c01904 	addi	r3,sp,100
    1fd4:	9c3fef16 	blt	r19,r16,1f94 <___vfprintf_internal_r+0x640>
    1fd8:	9425883a 	add	r18,r18,r16
    1fdc:	8c400044 	addi	r17,r17,1
    1fe0:	008001c4 	movi	r2,7
    1fe4:	1f000015 	stw	fp,0(r3)
    1fe8:	1c000115 	stw	r16,4(r3)
    1fec:	dc800e15 	stw	r18,56(sp)
    1ff0:	dc400d15 	stw	r17,52(sp)
    1ff4:	1440cb16 	blt	r2,r17,2324 <___vfprintf_internal_r+0x9d0>
    1ff8:	d8814a17 	ldw	r2,1320(sp)
    1ffc:	d9414517 	ldw	r5,1300(sp)
    2000:	1140010e 	bge	r2,r5,2008 <___vfprintf_internal_r+0x6b4>
    2004:	2805883a 	mov	r2,r5
    2008:	d9814b17 	ldw	r6,1324(sp)
    200c:	308d883a 	add	r6,r6,r2
    2010:	d9814b15 	stw	r6,1324(sp)
    2014:	90013b1e 	bne	r18,zero,2504 <___vfprintf_internal_r+0xbb0>
    2018:	d9c14017 	ldw	r7,1280(sp)
    201c:	dd401904 	addi	r21,sp,100
    2020:	d8000d15 	stw	zero,52(sp)
    2024:	003ea706 	br	1ac4 <___vfprintf_internal_r+0x170>
    2028:	d8800e17 	ldw	r2,56(sp)
    202c:	10053f1e 	bne	r2,zero,352c <___vfprintf_internal_r+0x1bd8>
    2030:	d8000d15 	stw	zero,52(sp)
    2034:	b080030b 	ldhu	r2,12(r22)
    2038:	1080100c 	andi	r2,r2,64
    203c:	103e8726 	beq	r2,zero,1a5c <___vfprintf_internal_r+0x108>
    2040:	00bfffc4 	movi	r2,-1
    2044:	d8814b15 	stw	r2,1324(sp)
    2048:	003e8406 	br	1a5c <___vfprintf_internal_r+0x108>
    204c:	d9814d17 	ldw	r6,1332(sp)
    2050:	00801944 	movi	r2,101
    2054:	11806e16 	blt	r2,r6,2210 <___vfprintf_internal_r+0x8bc>
    2058:	d9414717 	ldw	r5,1308(sp)
    205c:	00c00044 	movi	r3,1
    2060:	1943430e 	bge	r3,r5,2d70 <___vfprintf_internal_r+0x141c>
    2064:	d8814117 	ldw	r2,1284(sp)
    2068:	94800044 	addi	r18,r18,1
    206c:	8c400044 	addi	r17,r17,1
    2070:	a8800015 	stw	r2,0(r21)
    2074:	008001c4 	movi	r2,7
    2078:	a8c00115 	stw	r3,4(r21)
    207c:	dc800e15 	stw	r18,56(sp)
    2080:	dc400d15 	stw	r17,52(sp)
    2084:	1441ca16 	blt	r2,r17,27b0 <___vfprintf_internal_r+0xe5c>
    2088:	a8c00204 	addi	r3,r21,8
    208c:	d9014917 	ldw	r4,1316(sp)
    2090:	00800044 	movi	r2,1
    2094:	94800044 	addi	r18,r18,1
    2098:	8c400044 	addi	r17,r17,1
    209c:	18800115 	stw	r2,4(r3)
    20a0:	008001c4 	movi	r2,7
    20a4:	19000015 	stw	r4,0(r3)
    20a8:	dc800e15 	stw	r18,56(sp)
    20ac:	dc400d15 	stw	r17,52(sp)
    20b0:	1441b616 	blt	r2,r17,278c <___vfprintf_internal_r+0xe38>
    20b4:	1cc00204 	addi	r19,r3,8
    20b8:	d9014217 	ldw	r4,1288(sp)
    20bc:	d9414317 	ldw	r5,1292(sp)
    20c0:	000d883a 	mov	r6,zero
    20c4:	000f883a 	mov	r7,zero
    20c8:	0009c6c0 	call	9c6c <__nedf2>
    20cc:	10017426 	beq	r2,zero,26a0 <___vfprintf_internal_r+0xd4c>
    20d0:	d9414717 	ldw	r5,1308(sp)
    20d4:	d9814117 	ldw	r6,1284(sp)
    20d8:	8c400044 	addi	r17,r17,1
    20dc:	2c85883a 	add	r2,r5,r18
    20e0:	14bfffc4 	addi	r18,r2,-1
    20e4:	28bfffc4 	addi	r2,r5,-1
    20e8:	30c00044 	addi	r3,r6,1
    20ec:	98800115 	stw	r2,4(r19)
    20f0:	008001c4 	movi	r2,7
    20f4:	98c00015 	stw	r3,0(r19)
    20f8:	dc800e15 	stw	r18,56(sp)
    20fc:	dc400d15 	stw	r17,52(sp)
    2100:	14418e16 	blt	r2,r17,273c <___vfprintf_internal_r+0xde8>
    2104:	9cc00204 	addi	r19,r19,8
    2108:	d9414817 	ldw	r5,1312(sp)
    210c:	d8800804 	addi	r2,sp,32
    2110:	8c400044 	addi	r17,r17,1
    2114:	9165883a 	add	r18,r18,r5
    2118:	98800015 	stw	r2,0(r19)
    211c:	008001c4 	movi	r2,7
    2120:	99400115 	stw	r5,4(r19)
    2124:	dc800e15 	stw	r18,56(sp)
    2128:	dc400d15 	stw	r17,52(sp)
    212c:	1440ed16 	blt	r2,r17,24e4 <___vfprintf_internal_r+0xb90>
    2130:	98c00204 	addi	r3,r19,8
    2134:	003f8506 	br	1f4c <___vfprintf_internal_r+0x5f8>
    2138:	d9814a17 	ldw	r6,1320(sp)
    213c:	d8814517 	ldw	r2,1300(sp)
    2140:	30a1c83a 	sub	r16,r6,r2
    2144:	043f4b0e 	bge	zero,r16,1e74 <___vfprintf_internal_r+0x520>
    2148:	00800404 	movi	r2,16
    214c:	1404340e 	bge	r2,r16,3220 <___vfprintf_internal_r+0x18cc>
    2150:	1027883a 	mov	r19,r2
    2154:	07000074 	movhi	fp,1
    2158:	e73c5b84 	addi	fp,fp,-3730
    215c:	050001c4 	movi	r20,7
    2160:	00000306 	br	2170 <___vfprintf_internal_r+0x81c>
    2164:	843ffc04 	addi	r16,r16,-16
    2168:	ad400204 	addi	r21,r21,8
    216c:	9c00130e 	bge	r19,r16,21bc <___vfprintf_internal_r+0x868>
    2170:	94800404 	addi	r18,r18,16
    2174:	8c400044 	addi	r17,r17,1
    2178:	af000015 	stw	fp,0(r21)
    217c:	acc00115 	stw	r19,4(r21)
    2180:	dc800e15 	stw	r18,56(sp)
    2184:	dc400d15 	stw	r17,52(sp)
    2188:	a47ff60e 	bge	r20,r17,2164 <___vfprintf_internal_r+0x810>
    218c:	d9014f17 	ldw	r4,1340(sp)
    2190:	b00b883a 	mov	r5,r22
    2194:	d9800c04 	addi	r6,sp,48
    2198:	d9c15115 	stw	r7,1348(sp)
    219c:	00018fc0 	call	18fc <__sprint_r>
    21a0:	d9c15117 	ldw	r7,1348(sp)
    21a4:	103fa31e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    21a8:	843ffc04 	addi	r16,r16,-16
    21ac:	dc800e17 	ldw	r18,56(sp)
    21b0:	dc400d17 	ldw	r17,52(sp)
    21b4:	dd401904 	addi	r21,sp,100
    21b8:	9c3fed16 	blt	r19,r16,2170 <___vfprintf_internal_r+0x81c>
    21bc:	9425883a 	add	r18,r18,r16
    21c0:	8c400044 	addi	r17,r17,1
    21c4:	008001c4 	movi	r2,7
    21c8:	af000015 	stw	fp,0(r21)
    21cc:	ac000115 	stw	r16,4(r21)
    21d0:	dc800e15 	stw	r18,56(sp)
    21d4:	dc400d15 	stw	r17,52(sp)
    21d8:	14416116 	blt	r2,r17,2760 <___vfprintf_internal_r+0xe0c>
    21dc:	ad400204 	addi	r21,r21,8
    21e0:	003f2406 	br	1e74 <___vfprintf_internal_r+0x520>
    21e4:	d9014f17 	ldw	r4,1340(sp)
    21e8:	00053c40 	call	53c4 <__sinit>
    21ec:	d9c15117 	ldw	r7,1348(sp)
    21f0:	003def06 	br	19b0 <___vfprintf_internal_r+0x5c>
    21f4:	d9014f17 	ldw	r4,1340(sp)
    21f8:	b00b883a 	mov	r5,r22
    21fc:	d9c15115 	stw	r7,1348(sp)
    2200:	00038240 	call	3824 <__swsetup_r>
    2204:	d9c15117 	ldw	r7,1348(sp)
    2208:	103dee26 	beq	r2,zero,19c4 <___vfprintf_internal_r+0x70>
    220c:	003f8c06 	br	2040 <___vfprintf_internal_r+0x6ec>
    2210:	d9014217 	ldw	r4,1288(sp)
    2214:	d9414317 	ldw	r5,1292(sp)
    2218:	000d883a 	mov	r6,zero
    221c:	000f883a 	mov	r7,zero
    2220:	0009be40 	call	9be4 <__eqdf2>
    2224:	1000f21e 	bne	r2,zero,25f0 <___vfprintf_internal_r+0xc9c>
    2228:	00800074 	movhi	r2,1
    222c:	10bc5b04 	addi	r2,r2,-3732
    2230:	94800044 	addi	r18,r18,1
    2234:	8c400044 	addi	r17,r17,1
    2238:	a8800015 	stw	r2,0(r21)
    223c:	00c00044 	movi	r3,1
    2240:	008001c4 	movi	r2,7
    2244:	a8c00115 	stw	r3,4(r21)
    2248:	dc800e15 	stw	r18,56(sp)
    224c:	dc400d15 	stw	r17,52(sp)
    2250:	1442fa16 	blt	r2,r17,2e3c <___vfprintf_internal_r+0x14e8>
    2254:	a8c00204 	addi	r3,r21,8
    2258:	d8800517 	ldw	r2,20(sp)
    225c:	d9014717 	ldw	r4,1308(sp)
    2260:	11015c0e 	bge	r2,r4,27d4 <___vfprintf_internal_r+0xe80>
    2264:	dc400d17 	ldw	r17,52(sp)
    2268:	d9814917 	ldw	r6,1316(sp)
    226c:	00800044 	movi	r2,1
    2270:	94800044 	addi	r18,r18,1
    2274:	8c400044 	addi	r17,r17,1
    2278:	18800115 	stw	r2,4(r3)
    227c:	008001c4 	movi	r2,7
    2280:	19800015 	stw	r6,0(r3)
    2284:	dc800e15 	stw	r18,56(sp)
    2288:	dc400d15 	stw	r17,52(sp)
    228c:	14431016 	blt	r2,r17,2ed0 <___vfprintf_internal_r+0x157c>
    2290:	18c00204 	addi	r3,r3,8
    2294:	d8814717 	ldw	r2,1308(sp)
    2298:	143fffc4 	addi	r16,r2,-1
    229c:	043f2b0e 	bge	zero,r16,1f4c <___vfprintf_internal_r+0x5f8>
    22a0:	00800404 	movi	r2,16
    22a4:	1402a20e 	bge	r2,r16,2d30 <___vfprintf_internal_r+0x13dc>
    22a8:	dc400d17 	ldw	r17,52(sp)
    22ac:	1027883a 	mov	r19,r2
    22b0:	07000074 	movhi	fp,1
    22b4:	e73c5b84 	addi	fp,fp,-3730
    22b8:	050001c4 	movi	r20,7
    22bc:	00000306 	br	22cc <___vfprintf_internal_r+0x978>
    22c0:	18c00204 	addi	r3,r3,8
    22c4:	843ffc04 	addi	r16,r16,-16
    22c8:	9c029c0e 	bge	r19,r16,2d3c <___vfprintf_internal_r+0x13e8>
    22cc:	94800404 	addi	r18,r18,16
    22d0:	8c400044 	addi	r17,r17,1
    22d4:	1f000015 	stw	fp,0(r3)
    22d8:	1cc00115 	stw	r19,4(r3)
    22dc:	dc800e15 	stw	r18,56(sp)
    22e0:	dc400d15 	stw	r17,52(sp)
    22e4:	a47ff60e 	bge	r20,r17,22c0 <___vfprintf_internal_r+0x96c>
    22e8:	d9014f17 	ldw	r4,1340(sp)
    22ec:	b00b883a 	mov	r5,r22
    22f0:	d9800c04 	addi	r6,sp,48
    22f4:	00018fc0 	call	18fc <__sprint_r>
    22f8:	103f4e1e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    22fc:	dc800e17 	ldw	r18,56(sp)
    2300:	dc400d17 	ldw	r17,52(sp)
    2304:	d8c01904 	addi	r3,sp,100
    2308:	003fee06 	br	22c4 <___vfprintf_internal_r+0x970>
    230c:	d8802c0b 	ldhu	r2,176(sp)
    2310:	00ffffc4 	movi	r3,-1
    2314:	d8c14b15 	stw	r3,1324(sp)
    2318:	1080100c 	andi	r2,r2,64
    231c:	103dcc1e 	bne	r2,zero,1a50 <___vfprintf_internal_r+0xfc>
    2320:	003dce06 	br	1a5c <___vfprintf_internal_r+0x108>
    2324:	d9014f17 	ldw	r4,1340(sp)
    2328:	b00b883a 	mov	r5,r22
    232c:	d9800c04 	addi	r6,sp,48
    2330:	00018fc0 	call	18fc <__sprint_r>
    2334:	103f3f1e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    2338:	dc800e17 	ldw	r18,56(sp)
    233c:	003f2e06 	br	1ff8 <___vfprintf_internal_r+0x6a4>
    2340:	d9414c17 	ldw	r5,1328(sp)
    2344:	29400414 	ori	r5,r5,16
    2348:	d9414c15 	stw	r5,1328(sp)
    234c:	d9814c17 	ldw	r6,1328(sp)
    2350:	3080080c 	andi	r2,r6,32
    2354:	10014f1e 	bne	r2,zero,2894 <___vfprintf_internal_r+0xf40>
    2358:	d8c14c17 	ldw	r3,1328(sp)
    235c:	1880040c 	andi	r2,r3,16
    2360:	1002ea1e 	bne	r2,zero,2f0c <___vfprintf_internal_r+0x15b8>
    2364:	d9014c17 	ldw	r4,1328(sp)
    2368:	2080100c 	andi	r2,r4,64
    236c:	1002e726 	beq	r2,zero,2f0c <___vfprintf_internal_r+0x15b8>
    2370:	3880000f 	ldh	r2,0(r7)
    2374:	39c00104 	addi	r7,r7,4
    2378:	d9c14015 	stw	r7,1280(sp)
    237c:	1023d7fa 	srai	r17,r2,31
    2380:	1021883a 	mov	r16,r2
    2384:	88037216 	blt	r17,zero,3150 <___vfprintf_internal_r+0x17fc>
    2388:	01000044 	movi	r4,1
    238c:	98000416 	blt	r19,zero,23a0 <___vfprintf_internal_r+0xa4c>
    2390:	d8c14c17 	ldw	r3,1328(sp)
    2394:	00bfdfc4 	movi	r2,-129
    2398:	1886703a 	and	r3,r3,r2
    239c:	d8c14c15 	stw	r3,1328(sp)
    23a0:	8444b03a 	or	r2,r16,r17
    23a4:	1002261e 	bne	r2,zero,2c40 <___vfprintf_internal_r+0x12ec>
    23a8:	9802251e 	bne	r19,zero,2c40 <___vfprintf_internal_r+0x12ec>
    23ac:	20803fcc 	andi	r2,r4,255
    23b0:	10029b26 	beq	r2,zero,2e20 <___vfprintf_internal_r+0x14cc>
    23b4:	d8c01904 	addi	r3,sp,100
    23b8:	dd000f04 	addi	r20,sp,60
    23bc:	d8c14115 	stw	r3,1284(sp)
    23c0:	d8c14117 	ldw	r3,1284(sp)
    23c4:	dcc14515 	stw	r19,1300(sp)
    23c8:	a0c5c83a 	sub	r2,r20,r3
    23cc:	11c00a04 	addi	r7,r2,40
    23d0:	99c0010e 	bge	r19,r7,23d8 <___vfprintf_internal_r+0xa84>
    23d4:	d9c14515 	stw	r7,1300(sp)
    23d8:	dcc14615 	stw	r19,1304(sp)
    23dc:	d8800407 	ldb	r2,16(sp)
    23e0:	103e4c26 	beq	r2,zero,1d14 <___vfprintf_internal_r+0x3c0>
    23e4:	d8814517 	ldw	r2,1300(sp)
    23e8:	10800044 	addi	r2,r2,1
    23ec:	d8814515 	stw	r2,1300(sp)
    23f0:	003e4806 	br	1d14 <___vfprintf_internal_r+0x3c0>
    23f4:	d9814c17 	ldw	r6,1328(sp)
    23f8:	31800414 	ori	r6,r6,16
    23fc:	d9814c15 	stw	r6,1328(sp)
    2400:	d8c14c17 	ldw	r3,1328(sp)
    2404:	1880080c 	andi	r2,r3,32
    2408:	1001271e 	bne	r2,zero,28a8 <___vfprintf_internal_r+0xf54>
    240c:	d9414c17 	ldw	r5,1328(sp)
    2410:	2880040c 	andi	r2,r5,16
    2414:	1002b61e 	bne	r2,zero,2ef0 <___vfprintf_internal_r+0x159c>
    2418:	d9814c17 	ldw	r6,1328(sp)
    241c:	3080100c 	andi	r2,r6,64
    2420:	1002b326 	beq	r2,zero,2ef0 <___vfprintf_internal_r+0x159c>
    2424:	3c00000b 	ldhu	r16,0(r7)
    2428:	0009883a 	mov	r4,zero
    242c:	39c00104 	addi	r7,r7,4
    2430:	0023883a 	mov	r17,zero
    2434:	d9c14015 	stw	r7,1280(sp)
    2438:	d8000405 	stb	zero,16(sp)
    243c:	003fd306 	br	238c <___vfprintf_internal_r+0xa38>
    2440:	d9014c17 	ldw	r4,1328(sp)
    2444:	21000414 	ori	r4,r4,16
    2448:	d9014c15 	stw	r4,1328(sp)
    244c:	d9414c17 	ldw	r5,1328(sp)
    2450:	2880080c 	andi	r2,r5,32
    2454:	1001081e 	bne	r2,zero,2878 <___vfprintf_internal_r+0xf24>
    2458:	d8c14c17 	ldw	r3,1328(sp)
    245c:	1880040c 	andi	r2,r3,16
    2460:	1002b01e 	bne	r2,zero,2f24 <___vfprintf_internal_r+0x15d0>
    2464:	d9014c17 	ldw	r4,1328(sp)
    2468:	2080100c 	andi	r2,r4,64
    246c:	1002ad26 	beq	r2,zero,2f24 <___vfprintf_internal_r+0x15d0>
    2470:	3c00000b 	ldhu	r16,0(r7)
    2474:	01000044 	movi	r4,1
    2478:	39c00104 	addi	r7,r7,4
    247c:	0023883a 	mov	r17,zero
    2480:	d9c14015 	stw	r7,1280(sp)
    2484:	d8000405 	stb	zero,16(sp)
    2488:	003fc006 	br	238c <___vfprintf_internal_r+0xa38>
    248c:	d9014f17 	ldw	r4,1340(sp)
    2490:	b00b883a 	mov	r5,r22
    2494:	d9800c04 	addi	r6,sp,48
    2498:	00018fc0 	call	18fc <__sprint_r>
    249c:	103ee51e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    24a0:	dc800e17 	ldw	r18,56(sp)
    24a4:	d8c01904 	addi	r3,sp,100
    24a8:	d9814c17 	ldw	r6,1328(sp)
    24ac:	3080004c 	andi	r2,r6,1
    24b0:	1005003a 	cmpeq	r2,r2,zero
    24b4:	103ea51e 	bne	r2,zero,1f4c <___vfprintf_internal_r+0x5f8>
    24b8:	00800044 	movi	r2,1
    24bc:	dc400d17 	ldw	r17,52(sp)
    24c0:	18800115 	stw	r2,4(r3)
    24c4:	d8814917 	ldw	r2,1316(sp)
    24c8:	94800044 	addi	r18,r18,1
    24cc:	8c400044 	addi	r17,r17,1
    24d0:	18800015 	stw	r2,0(r3)
    24d4:	008001c4 	movi	r2,7
    24d8:	dc800e15 	stw	r18,56(sp)
    24dc:	dc400d15 	stw	r17,52(sp)
    24e0:	14421e0e 	bge	r2,r17,2d5c <___vfprintf_internal_r+0x1408>
    24e4:	d9014f17 	ldw	r4,1340(sp)
    24e8:	b00b883a 	mov	r5,r22
    24ec:	d9800c04 	addi	r6,sp,48
    24f0:	00018fc0 	call	18fc <__sprint_r>
    24f4:	103ecf1e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    24f8:	dc800e17 	ldw	r18,56(sp)
    24fc:	d8c01904 	addi	r3,sp,100
    2500:	003e9206 	br	1f4c <___vfprintf_internal_r+0x5f8>
    2504:	d9014f17 	ldw	r4,1340(sp)
    2508:	b00b883a 	mov	r5,r22
    250c:	d9800c04 	addi	r6,sp,48
    2510:	00018fc0 	call	18fc <__sprint_r>
    2514:	103ec026 	beq	r2,zero,2018 <___vfprintf_internal_r+0x6c4>
    2518:	003ec606 	br	2034 <___vfprintf_internal_r+0x6e0>
    251c:	d9014f17 	ldw	r4,1340(sp)
    2520:	b00b883a 	mov	r5,r22
    2524:	d9800c04 	addi	r6,sp,48
    2528:	d9c15115 	stw	r7,1348(sp)
    252c:	00018fc0 	call	18fc <__sprint_r>
    2530:	d9c15117 	ldw	r7,1348(sp)
    2534:	103ebf1e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    2538:	dc800e17 	ldw	r18,56(sp)
    253c:	dc400d17 	ldw	r17,52(sp)
    2540:	dd401904 	addi	r21,sp,100
    2544:	003e7406 	br	1f18 <___vfprintf_internal_r+0x5c4>
    2548:	d9014f17 	ldw	r4,1340(sp)
    254c:	b00b883a 	mov	r5,r22
    2550:	d9800c04 	addi	r6,sp,48
    2554:	d9c15115 	stw	r7,1348(sp)
    2558:	00018fc0 	call	18fc <__sprint_r>
    255c:	d9c15117 	ldw	r7,1348(sp)
    2560:	103eb41e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    2564:	dd401904 	addi	r21,sp,100
    2568:	003d6d06 	br	1b20 <___vfprintf_internal_r+0x1cc>
    256c:	d9014f17 	ldw	r4,1340(sp)
    2570:	b00b883a 	mov	r5,r22
    2574:	d9800c04 	addi	r6,sp,48
    2578:	d9c15115 	stw	r7,1348(sp)
    257c:	00018fc0 	call	18fc <__sprint_r>
    2580:	d9c15117 	ldw	r7,1348(sp)
    2584:	103eab1e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    2588:	dc800e17 	ldw	r18,56(sp)
    258c:	dc400d17 	ldw	r17,52(sp)
    2590:	dd401904 	addi	r21,sp,100
    2594:	003e3406 	br	1e68 <___vfprintf_internal_r+0x514>
    2598:	d9014f17 	ldw	r4,1340(sp)
    259c:	b00b883a 	mov	r5,r22
    25a0:	d9800c04 	addi	r6,sp,48
    25a4:	d9c15115 	stw	r7,1348(sp)
    25a8:	00018fc0 	call	18fc <__sprint_r>
    25ac:	d9c15117 	ldw	r7,1348(sp)
    25b0:	103ea01e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    25b4:	dc800e17 	ldw	r18,56(sp)
    25b8:	dc400d17 	ldw	r17,52(sp)
    25bc:	dd401904 	addi	r21,sp,100
    25c0:	003e1c06 	br	1e34 <___vfprintf_internal_r+0x4e0>
    25c4:	d9014f17 	ldw	r4,1340(sp)
    25c8:	b00b883a 	mov	r5,r22
    25cc:	d9800c04 	addi	r6,sp,48
    25d0:	d9c15115 	stw	r7,1348(sp)
    25d4:	00018fc0 	call	18fc <__sprint_r>
    25d8:	d9c15117 	ldw	r7,1348(sp)
    25dc:	103e951e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    25e0:	dc800e17 	ldw	r18,56(sp)
    25e4:	dc400d17 	ldw	r17,52(sp)
    25e8:	dd401904 	addi	r21,sp,100
    25ec:	003e0406 	br	1e00 <___vfprintf_internal_r+0x4ac>
    25f0:	d9000517 	ldw	r4,20(sp)
    25f4:	0102520e 	bge	zero,r4,2f40 <___vfprintf_internal_r+0x15ec>
    25f8:	d9814717 	ldw	r6,1308(sp)
    25fc:	21807a16 	blt	r4,r6,27e8 <___vfprintf_internal_r+0xe94>
    2600:	d8814117 	ldw	r2,1284(sp)
    2604:	91a5883a 	add	r18,r18,r6
    2608:	8c400044 	addi	r17,r17,1
    260c:	a8800015 	stw	r2,0(r21)
    2610:	008001c4 	movi	r2,7
    2614:	a9800115 	stw	r6,4(r21)
    2618:	dc800e15 	stw	r18,56(sp)
    261c:	dc400d15 	stw	r17,52(sp)
    2620:	1442f616 	blt	r2,r17,31fc <___vfprintf_internal_r+0x18a8>
    2624:	a8c00204 	addi	r3,r21,8
    2628:	d9414717 	ldw	r5,1308(sp)
    262c:	2161c83a 	sub	r16,r4,r5
    2630:	043f9d0e 	bge	zero,r16,24a8 <___vfprintf_internal_r+0xb54>
    2634:	00800404 	movi	r2,16
    2638:	1402130e 	bge	r2,r16,2e88 <___vfprintf_internal_r+0x1534>
    263c:	dc400d17 	ldw	r17,52(sp)
    2640:	1027883a 	mov	r19,r2
    2644:	07000074 	movhi	fp,1
    2648:	e73c5b84 	addi	fp,fp,-3730
    264c:	050001c4 	movi	r20,7
    2650:	00000306 	br	2660 <___vfprintf_internal_r+0xd0c>
    2654:	18c00204 	addi	r3,r3,8
    2658:	843ffc04 	addi	r16,r16,-16
    265c:	9c020d0e 	bge	r19,r16,2e94 <___vfprintf_internal_r+0x1540>
    2660:	94800404 	addi	r18,r18,16
    2664:	8c400044 	addi	r17,r17,1
    2668:	1f000015 	stw	fp,0(r3)
    266c:	1cc00115 	stw	r19,4(r3)
    2670:	dc800e15 	stw	r18,56(sp)
    2674:	dc400d15 	stw	r17,52(sp)
    2678:	a47ff60e 	bge	r20,r17,2654 <___vfprintf_internal_r+0xd00>
    267c:	d9014f17 	ldw	r4,1340(sp)
    2680:	b00b883a 	mov	r5,r22
    2684:	d9800c04 	addi	r6,sp,48
    2688:	00018fc0 	call	18fc <__sprint_r>
    268c:	103e691e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    2690:	dc800e17 	ldw	r18,56(sp)
    2694:	dc400d17 	ldw	r17,52(sp)
    2698:	d8c01904 	addi	r3,sp,100
    269c:	003fee06 	br	2658 <___vfprintf_internal_r+0xd04>
    26a0:	d8814717 	ldw	r2,1308(sp)
    26a4:	143fffc4 	addi	r16,r2,-1
    26a8:	043e970e 	bge	zero,r16,2108 <___vfprintf_internal_r+0x7b4>
    26ac:	00800404 	movi	r2,16
    26b0:	1400180e 	bge	r2,r16,2714 <___vfprintf_internal_r+0xdc0>
    26b4:	1029883a 	mov	r20,r2
    26b8:	07000074 	movhi	fp,1
    26bc:	e73c5b84 	addi	fp,fp,-3730
    26c0:	054001c4 	movi	r21,7
    26c4:	00000306 	br	26d4 <___vfprintf_internal_r+0xd80>
    26c8:	9cc00204 	addi	r19,r19,8
    26cc:	843ffc04 	addi	r16,r16,-16
    26d0:	a400120e 	bge	r20,r16,271c <___vfprintf_internal_r+0xdc8>
    26d4:	94800404 	addi	r18,r18,16
    26d8:	8c400044 	addi	r17,r17,1
    26dc:	9f000015 	stw	fp,0(r19)
    26e0:	9d000115 	stw	r20,4(r19)
    26e4:	dc800e15 	stw	r18,56(sp)
    26e8:	dc400d15 	stw	r17,52(sp)
    26ec:	ac7ff60e 	bge	r21,r17,26c8 <___vfprintf_internal_r+0xd74>
    26f0:	d9014f17 	ldw	r4,1340(sp)
    26f4:	b00b883a 	mov	r5,r22
    26f8:	d9800c04 	addi	r6,sp,48
    26fc:	00018fc0 	call	18fc <__sprint_r>
    2700:	103e4c1e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    2704:	dc800e17 	ldw	r18,56(sp)
    2708:	dc400d17 	ldw	r17,52(sp)
    270c:	dcc01904 	addi	r19,sp,100
    2710:	003fee06 	br	26cc <___vfprintf_internal_r+0xd78>
    2714:	07000074 	movhi	fp,1
    2718:	e73c5b84 	addi	fp,fp,-3730
    271c:	9425883a 	add	r18,r18,r16
    2720:	8c400044 	addi	r17,r17,1
    2724:	008001c4 	movi	r2,7
    2728:	9f000015 	stw	fp,0(r19)
    272c:	9c000115 	stw	r16,4(r19)
    2730:	dc800e15 	stw	r18,56(sp)
    2734:	dc400d15 	stw	r17,52(sp)
    2738:	147e720e 	bge	r2,r17,2104 <___vfprintf_internal_r+0x7b0>
    273c:	d9014f17 	ldw	r4,1340(sp)
    2740:	b00b883a 	mov	r5,r22
    2744:	d9800c04 	addi	r6,sp,48
    2748:	00018fc0 	call	18fc <__sprint_r>
    274c:	103e391e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    2750:	dc800e17 	ldw	r18,56(sp)
    2754:	dc400d17 	ldw	r17,52(sp)
    2758:	dcc01904 	addi	r19,sp,100
    275c:	003e6a06 	br	2108 <___vfprintf_internal_r+0x7b4>
    2760:	d9014f17 	ldw	r4,1340(sp)
    2764:	b00b883a 	mov	r5,r22
    2768:	d9800c04 	addi	r6,sp,48
    276c:	d9c15115 	stw	r7,1348(sp)
    2770:	00018fc0 	call	18fc <__sprint_r>
    2774:	d9c15117 	ldw	r7,1348(sp)
    2778:	103e2e1e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    277c:	dc800e17 	ldw	r18,56(sp)
    2780:	dc400d17 	ldw	r17,52(sp)
    2784:	dd401904 	addi	r21,sp,100
    2788:	003dba06 	br	1e74 <___vfprintf_internal_r+0x520>
    278c:	d9014f17 	ldw	r4,1340(sp)
    2790:	b00b883a 	mov	r5,r22
    2794:	d9800c04 	addi	r6,sp,48
    2798:	00018fc0 	call	18fc <__sprint_r>
    279c:	103e251e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    27a0:	dc800e17 	ldw	r18,56(sp)
    27a4:	dc400d17 	ldw	r17,52(sp)
    27a8:	dcc01904 	addi	r19,sp,100
    27ac:	003e4206 	br	20b8 <___vfprintf_internal_r+0x764>
    27b0:	d9014f17 	ldw	r4,1340(sp)
    27b4:	b00b883a 	mov	r5,r22
    27b8:	d9800c04 	addi	r6,sp,48
    27bc:	00018fc0 	call	18fc <__sprint_r>
    27c0:	103e1c1e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    27c4:	dc800e17 	ldw	r18,56(sp)
    27c8:	dc400d17 	ldw	r17,52(sp)
    27cc:	d8c01904 	addi	r3,sp,100
    27d0:	003e2e06 	br	208c <___vfprintf_internal_r+0x738>
    27d4:	d9414c17 	ldw	r5,1328(sp)
    27d8:	2880004c 	andi	r2,r5,1
    27dc:	1005003a 	cmpeq	r2,r2,zero
    27e0:	103dda1e 	bne	r2,zero,1f4c <___vfprintf_internal_r+0x5f8>
    27e4:	003e9f06 	br	2264 <___vfprintf_internal_r+0x910>
    27e8:	d8c14117 	ldw	r3,1284(sp)
    27ec:	9125883a 	add	r18,r18,r4
    27f0:	8c400044 	addi	r17,r17,1
    27f4:	008001c4 	movi	r2,7
    27f8:	a8c00015 	stw	r3,0(r21)
    27fc:	a9000115 	stw	r4,4(r21)
    2800:	dc800e15 	stw	r18,56(sp)
    2804:	dc400d15 	stw	r17,52(sp)
    2808:	14426616 	blt	r2,r17,31a4 <___vfprintf_internal_r+0x1850>
    280c:	a8c00204 	addi	r3,r21,8
    2810:	d9414917 	ldw	r5,1316(sp)
    2814:	00800044 	movi	r2,1
    2818:	94800044 	addi	r18,r18,1
    281c:	8c400044 	addi	r17,r17,1
    2820:	18800115 	stw	r2,4(r3)
    2824:	008001c4 	movi	r2,7
    2828:	19400015 	stw	r5,0(r3)
    282c:	dc800e15 	stw	r18,56(sp)
    2830:	dc400d15 	stw	r17,52(sp)
    2834:	2021883a 	mov	r16,r4
    2838:	14425016 	blt	r2,r17,317c <___vfprintf_internal_r+0x1828>
    283c:	19400204 	addi	r5,r3,8
    2840:	d9814717 	ldw	r6,1308(sp)
    2844:	8c400044 	addi	r17,r17,1
    2848:	dc400d15 	stw	r17,52(sp)
    284c:	3107c83a 	sub	r3,r6,r4
    2850:	d9014117 	ldw	r4,1284(sp)
    2854:	90e5883a 	add	r18,r18,r3
    2858:	28c00115 	stw	r3,4(r5)
    285c:	8105883a 	add	r2,r16,r4
    2860:	28800015 	stw	r2,0(r5)
    2864:	008001c4 	movi	r2,7
    2868:	dc800e15 	stw	r18,56(sp)
    286c:	147f1d16 	blt	r2,r17,24e4 <___vfprintf_internal_r+0xb90>
    2870:	28c00204 	addi	r3,r5,8
    2874:	003db506 	br	1f4c <___vfprintf_internal_r+0x5f8>
    2878:	3c000017 	ldw	r16,0(r7)
    287c:	3c400117 	ldw	r17,4(r7)
    2880:	39800204 	addi	r6,r7,8
    2884:	01000044 	movi	r4,1
    2888:	d9814015 	stw	r6,1280(sp)
    288c:	d8000405 	stb	zero,16(sp)
    2890:	003ebe06 	br	238c <___vfprintf_internal_r+0xa38>
    2894:	3c000017 	ldw	r16,0(r7)
    2898:	3c400117 	ldw	r17,4(r7)
    289c:	38800204 	addi	r2,r7,8
    28a0:	d8814015 	stw	r2,1280(sp)
    28a4:	003eb706 	br	2384 <___vfprintf_internal_r+0xa30>
    28a8:	3c000017 	ldw	r16,0(r7)
    28ac:	3c400117 	ldw	r17,4(r7)
    28b0:	39000204 	addi	r4,r7,8
    28b4:	d9014015 	stw	r4,1280(sp)
    28b8:	0009883a 	mov	r4,zero
    28bc:	d8000405 	stb	zero,16(sp)
    28c0:	003eb206 	br	238c <___vfprintf_internal_r+0xa38>
    28c4:	38c00017 	ldw	r3,0(r7)
    28c8:	39c00104 	addi	r7,r7,4
    28cc:	d8c14a15 	stw	r3,1320(sp)
    28d0:	1800d10e 	bge	r3,zero,2c18 <___vfprintf_internal_r+0x12c4>
    28d4:	00c7c83a 	sub	r3,zero,r3
    28d8:	d8c14a15 	stw	r3,1320(sp)
    28dc:	d9014c17 	ldw	r4,1328(sp)
    28e0:	b8c00007 	ldb	r3,0(r23)
    28e4:	21000114 	ori	r4,r4,4
    28e8:	d9014c15 	stw	r4,1328(sp)
    28ec:	003c9806 	br	1b50 <___vfprintf_internal_r+0x1fc>
    28f0:	d9814c17 	ldw	r6,1328(sp)
    28f4:	3080080c 	andi	r2,r6,32
    28f8:	1001f026 	beq	r2,zero,30bc <___vfprintf_internal_r+0x1768>
    28fc:	d9014b17 	ldw	r4,1324(sp)
    2900:	38800017 	ldw	r2,0(r7)
    2904:	39c00104 	addi	r7,r7,4
    2908:	d9c14015 	stw	r7,1280(sp)
    290c:	2007d7fa 	srai	r3,r4,31
    2910:	d9c14017 	ldw	r7,1280(sp)
    2914:	11000015 	stw	r4,0(r2)
    2918:	10c00115 	stw	r3,4(r2)
    291c:	003c6906 	br	1ac4 <___vfprintf_internal_r+0x170>
    2920:	b8c00007 	ldb	r3,0(r23)
    2924:	00801b04 	movi	r2,108
    2928:	18824f26 	beq	r3,r2,3268 <___vfprintf_internal_r+0x1914>
    292c:	d9414c17 	ldw	r5,1328(sp)
    2930:	29400414 	ori	r5,r5,16
    2934:	d9414c15 	stw	r5,1328(sp)
    2938:	003c8506 	br	1b50 <___vfprintf_internal_r+0x1fc>
    293c:	d9814c17 	ldw	r6,1328(sp)
    2940:	b8c00007 	ldb	r3,0(r23)
    2944:	31800814 	ori	r6,r6,32
    2948:	d9814c15 	stw	r6,1328(sp)
    294c:	003c8006 	br	1b50 <___vfprintf_internal_r+0x1fc>
    2950:	d8814c17 	ldw	r2,1328(sp)
    2954:	3c000017 	ldw	r16,0(r7)
    2958:	00c01e04 	movi	r3,120
    295c:	10800094 	ori	r2,r2,2
    2960:	d8814c15 	stw	r2,1328(sp)
    2964:	39c00104 	addi	r7,r7,4
    2968:	01400074 	movhi	r5,1
    296c:	297c4404 	addi	r5,r5,-3824
    2970:	00800c04 	movi	r2,48
    2974:	0023883a 	mov	r17,zero
    2978:	01000084 	movi	r4,2
    297c:	d9c14015 	stw	r7,1280(sp)
    2980:	d8c14d15 	stw	r3,1332(sp)
    2984:	d9414415 	stw	r5,1296(sp)
    2988:	d8800445 	stb	r2,17(sp)
    298c:	d8c00485 	stb	r3,18(sp)
    2990:	d8000405 	stb	zero,16(sp)
    2994:	003e7d06 	br	238c <___vfprintf_internal_r+0xa38>
    2998:	d8814c17 	ldw	r2,1328(sp)
    299c:	b8c00007 	ldb	r3,0(r23)
    29a0:	10801014 	ori	r2,r2,64
    29a4:	d8814c15 	stw	r2,1328(sp)
    29a8:	003c6906 	br	1b50 <___vfprintf_internal_r+0x1fc>
    29ac:	d9414c17 	ldw	r5,1328(sp)
    29b0:	2880020c 	andi	r2,r5,8
    29b4:	1001df26 	beq	r2,zero,3134 <___vfprintf_internal_r+0x17e0>
    29b8:	39800017 	ldw	r6,0(r7)
    29bc:	38800204 	addi	r2,r7,8
    29c0:	d8814015 	stw	r2,1280(sp)
    29c4:	d9814215 	stw	r6,1288(sp)
    29c8:	39c00117 	ldw	r7,4(r7)
    29cc:	d9c14315 	stw	r7,1292(sp)
    29d0:	d9014217 	ldw	r4,1288(sp)
    29d4:	d9414317 	ldw	r5,1292(sp)
    29d8:	0007d940 	call	7d94 <__isinfd>
    29dc:	10021726 	beq	r2,zero,323c <___vfprintf_internal_r+0x18e8>
    29e0:	d9014217 	ldw	r4,1288(sp)
    29e4:	d9414317 	ldw	r5,1292(sp)
    29e8:	000d883a 	mov	r6,zero
    29ec:	000f883a 	mov	r7,zero
    29f0:	0009e040 	call	9e04 <__ltdf2>
    29f4:	1002ca16 	blt	r2,zero,3520 <___vfprintf_internal_r+0x1bcc>
    29f8:	d9414d17 	ldw	r5,1332(sp)
    29fc:	008011c4 	movi	r2,71
    2a00:	11420a16 	blt	r2,r5,322c <___vfprintf_internal_r+0x18d8>
    2a04:	01800074 	movhi	r6,1
    2a08:	31bc4904 	addi	r6,r6,-3804
    2a0c:	d9814115 	stw	r6,1284(sp)
    2a10:	d9014c17 	ldw	r4,1328(sp)
    2a14:	00c000c4 	movi	r3,3
    2a18:	00bfdfc4 	movi	r2,-129
    2a1c:	2088703a 	and	r4,r4,r2
    2a20:	180f883a 	mov	r7,r3
    2a24:	d8c14515 	stw	r3,1300(sp)
    2a28:	d9014c15 	stw	r4,1328(sp)
    2a2c:	d8014615 	stw	zero,1304(sp)
    2a30:	003e6a06 	br	23dc <___vfprintf_internal_r+0xa88>
    2a34:	38800017 	ldw	r2,0(r7)
    2a38:	00c00044 	movi	r3,1
    2a3c:	39c00104 	addi	r7,r7,4
    2a40:	d9c14015 	stw	r7,1280(sp)
    2a44:	d9000f04 	addi	r4,sp,60
    2a48:	180f883a 	mov	r7,r3
    2a4c:	d8c14515 	stw	r3,1300(sp)
    2a50:	d9014115 	stw	r4,1284(sp)
    2a54:	d8800f05 	stb	r2,60(sp)
    2a58:	d8000405 	stb	zero,16(sp)
    2a5c:	003cac06 	br	1d10 <___vfprintf_internal_r+0x3bc>
    2a60:	01400074 	movhi	r5,1
    2a64:	297c4f04 	addi	r5,r5,-3780
    2a68:	d9414415 	stw	r5,1296(sp)
    2a6c:	d9814c17 	ldw	r6,1328(sp)
    2a70:	3080080c 	andi	r2,r6,32
    2a74:	1000f926 	beq	r2,zero,2e5c <___vfprintf_internal_r+0x1508>
    2a78:	3c000017 	ldw	r16,0(r7)
    2a7c:	3c400117 	ldw	r17,4(r7)
    2a80:	38800204 	addi	r2,r7,8
    2a84:	d8814015 	stw	r2,1280(sp)
    2a88:	d9414c17 	ldw	r5,1328(sp)
    2a8c:	2880004c 	andi	r2,r5,1
    2a90:	1005003a 	cmpeq	r2,r2,zero
    2a94:	1000b31e 	bne	r2,zero,2d64 <___vfprintf_internal_r+0x1410>
    2a98:	8444b03a 	or	r2,r16,r17
    2a9c:	1000b126 	beq	r2,zero,2d64 <___vfprintf_internal_r+0x1410>
    2aa0:	d9814d17 	ldw	r6,1332(sp)
    2aa4:	29400094 	ori	r5,r5,2
    2aa8:	00800c04 	movi	r2,48
    2aac:	01000084 	movi	r4,2
    2ab0:	d9414c15 	stw	r5,1328(sp)
    2ab4:	d8800445 	stb	r2,17(sp)
    2ab8:	d9800485 	stb	r6,18(sp)
    2abc:	d8000405 	stb	zero,16(sp)
    2ac0:	003e3206 	br	238c <___vfprintf_internal_r+0xa38>
    2ac4:	01800074 	movhi	r6,1
    2ac8:	31bc4404 	addi	r6,r6,-3824
    2acc:	d9814415 	stw	r6,1296(sp)
    2ad0:	003fe606 	br	2a6c <___vfprintf_internal_r+0x1118>
    2ad4:	00800ac4 	movi	r2,43
    2ad8:	d8800405 	stb	r2,16(sp)
    2adc:	b8c00007 	ldb	r3,0(r23)
    2ae0:	003c1b06 	br	1b50 <___vfprintf_internal_r+0x1fc>
    2ae4:	d8814c17 	ldw	r2,1328(sp)
    2ae8:	b8c00007 	ldb	r3,0(r23)
    2aec:	10800054 	ori	r2,r2,1
    2af0:	d8814c15 	stw	r2,1328(sp)
    2af4:	003c1606 	br	1b50 <___vfprintf_internal_r+0x1fc>
    2af8:	d8800407 	ldb	r2,16(sp)
    2afc:	1000461e 	bne	r2,zero,2c18 <___vfprintf_internal_r+0x12c4>
    2b00:	00800804 	movi	r2,32
    2b04:	d8800405 	stb	r2,16(sp)
    2b08:	b8c00007 	ldb	r3,0(r23)
    2b0c:	003c1006 	br	1b50 <___vfprintf_internal_r+0x1fc>
    2b10:	d9814c17 	ldw	r6,1328(sp)
    2b14:	b8c00007 	ldb	r3,0(r23)
    2b18:	31800214 	ori	r6,r6,8
    2b1c:	d9814c15 	stw	r6,1328(sp)
    2b20:	003c0b06 	br	1b50 <___vfprintf_internal_r+0x1fc>
    2b24:	0007883a 	mov	r3,zero
    2b28:	01000244 	movi	r4,9
    2b2c:	188002a4 	muli	r2,r3,10
    2b30:	b8c00007 	ldb	r3,0(r23)
    2b34:	d9814d17 	ldw	r6,1332(sp)
    2b38:	bdc00044 	addi	r23,r23,1
    2b3c:	d8c14d15 	stw	r3,1332(sp)
    2b40:	d9414d17 	ldw	r5,1332(sp)
    2b44:	3085883a 	add	r2,r6,r2
    2b48:	10fff404 	addi	r3,r2,-48
    2b4c:	28bff404 	addi	r2,r5,-48
    2b50:	20bff62e 	bgeu	r4,r2,2b2c <___vfprintf_internal_r+0x11d8>
    2b54:	d8c14a15 	stw	r3,1320(sp)
    2b58:	003bff06 	br	1b58 <___vfprintf_internal_r+0x204>
    2b5c:	d9414c17 	ldw	r5,1328(sp)
    2b60:	b8c00007 	ldb	r3,0(r23)
    2b64:	29402014 	ori	r5,r5,128
    2b68:	d9414c15 	stw	r5,1328(sp)
    2b6c:	003bf806 	br	1b50 <___vfprintf_internal_r+0x1fc>
    2b70:	b8c00007 	ldb	r3,0(r23)
    2b74:	00800a84 	movi	r2,42
    2b78:	bdc00044 	addi	r23,r23,1
    2b7c:	18831526 	beq	r3,r2,37d4 <___vfprintf_internal_r+0x1e80>
    2b80:	d8c14d15 	stw	r3,1332(sp)
    2b84:	18bff404 	addi	r2,r3,-48
    2b88:	00c00244 	movi	r3,9
    2b8c:	18827836 	bltu	r3,r2,3570 <___vfprintf_internal_r+0x1c1c>
    2b90:	000d883a 	mov	r6,zero
    2b94:	308002a4 	muli	r2,r6,10
    2b98:	b9800007 	ldb	r6,0(r23)
    2b9c:	d9414d17 	ldw	r5,1332(sp)
    2ba0:	bdc00044 	addi	r23,r23,1
    2ba4:	d9814d15 	stw	r6,1332(sp)
    2ba8:	d9014d17 	ldw	r4,1332(sp)
    2bac:	1145883a 	add	r2,r2,r5
    2bb0:	11bff404 	addi	r6,r2,-48
    2bb4:	20bff404 	addi	r2,r4,-48
    2bb8:	18bff62e 	bgeu	r3,r2,2b94 <___vfprintf_internal_r+0x1240>
    2bbc:	3027883a 	mov	r19,r6
    2bc0:	303be50e 	bge	r6,zero,1b58 <___vfprintf_internal_r+0x204>
    2bc4:	04ffffc4 	movi	r19,-1
    2bc8:	003be306 	br	1b58 <___vfprintf_internal_r+0x204>
    2bcc:	d8000405 	stb	zero,16(sp)
    2bd0:	39800017 	ldw	r6,0(r7)
    2bd4:	39c00104 	addi	r7,r7,4
    2bd8:	d9c14015 	stw	r7,1280(sp)
    2bdc:	d9814115 	stw	r6,1284(sp)
    2be0:	3001c926 	beq	r6,zero,3308 <___vfprintf_internal_r+0x19b4>
    2be4:	98000e16 	blt	r19,zero,2c20 <___vfprintf_internal_r+0x12cc>
    2be8:	d9014117 	ldw	r4,1284(sp)
    2bec:	000b883a 	mov	r5,zero
    2bf0:	980d883a 	mov	r6,r19
    2bf4:	00062d00 	call	62d0 <memchr>
    2bf8:	10025926 	beq	r2,zero,3560 <___vfprintf_internal_r+0x1c0c>
    2bfc:	d8c14117 	ldw	r3,1284(sp)
    2c00:	10cfc83a 	sub	r7,r2,r3
    2c04:	99c19e16 	blt	r19,r7,3280 <___vfprintf_internal_r+0x192c>
    2c08:	d9c14515 	stw	r7,1300(sp)
    2c0c:	38000916 	blt	r7,zero,2c34 <___vfprintf_internal_r+0x12e0>
    2c10:	d8014615 	stw	zero,1304(sp)
    2c14:	003df106 	br	23dc <___vfprintf_internal_r+0xa88>
    2c18:	b8c00007 	ldb	r3,0(r23)
    2c1c:	003bcc06 	br	1b50 <___vfprintf_internal_r+0x1fc>
    2c20:	d9014117 	ldw	r4,1284(sp)
    2c24:	00018880 	call	1888 <strlen>
    2c28:	d8814515 	stw	r2,1300(sp)
    2c2c:	100f883a 	mov	r7,r2
    2c30:	103ff70e 	bge	r2,zero,2c10 <___vfprintf_internal_r+0x12bc>
    2c34:	d8014515 	stw	zero,1300(sp)
    2c38:	d8014615 	stw	zero,1304(sp)
    2c3c:	003de706 	br	23dc <___vfprintf_internal_r+0xa88>
    2c40:	20c03fcc 	andi	r3,r4,255
    2c44:	00800044 	movi	r2,1
    2c48:	18802d26 	beq	r3,r2,2d00 <___vfprintf_internal_r+0x13ac>
    2c4c:	18800e36 	bltu	r3,r2,2c88 <___vfprintf_internal_r+0x1334>
    2c50:	00800084 	movi	r2,2
    2c54:	1880fa26 	beq	r3,r2,3040 <___vfprintf_internal_r+0x16ec>
    2c58:	01000074 	movhi	r4,1
    2c5c:	213c5404 	addi	r4,r4,-3760
    2c60:	00018880 	call	1888 <strlen>
    2c64:	100f883a 	mov	r7,r2
    2c68:	dcc14515 	stw	r19,1300(sp)
    2c6c:	9880010e 	bge	r19,r2,2c74 <___vfprintf_internal_r+0x1320>
    2c70:	d8814515 	stw	r2,1300(sp)
    2c74:	00800074 	movhi	r2,1
    2c78:	10bc5404 	addi	r2,r2,-3760
    2c7c:	dcc14615 	stw	r19,1304(sp)
    2c80:	d8814115 	stw	r2,1284(sp)
    2c84:	003dd506 	br	23dc <___vfprintf_internal_r+0xa88>
    2c88:	d9401904 	addi	r5,sp,100
    2c8c:	dd000f04 	addi	r20,sp,60
    2c90:	d9414115 	stw	r5,1284(sp)
    2c94:	880a977a 	slli	r5,r17,29
    2c98:	d9814117 	ldw	r6,1284(sp)
    2c9c:	8004d0fa 	srli	r2,r16,3
    2ca0:	8806d0fa 	srli	r3,r17,3
    2ca4:	810001cc 	andi	r4,r16,7
    2ca8:	2884b03a 	or	r2,r5,r2
    2cac:	31bfffc4 	addi	r6,r6,-1
    2cb0:	21000c04 	addi	r4,r4,48
    2cb4:	d9814115 	stw	r6,1284(sp)
    2cb8:	10cab03a 	or	r5,r2,r3
    2cbc:	31000005 	stb	r4,0(r6)
    2cc0:	1021883a 	mov	r16,r2
    2cc4:	1823883a 	mov	r17,r3
    2cc8:	283ff21e 	bne	r5,zero,2c94 <___vfprintf_internal_r+0x1340>
    2ccc:	d8c14c17 	ldw	r3,1328(sp)
    2cd0:	1880004c 	andi	r2,r3,1
    2cd4:	1005003a 	cmpeq	r2,r2,zero
    2cd8:	103db91e 	bne	r2,zero,23c0 <___vfprintf_internal_r+0xa6c>
    2cdc:	20803fcc 	andi	r2,r4,255
    2ce0:	1080201c 	xori	r2,r2,128
    2ce4:	10bfe004 	addi	r2,r2,-128
    2ce8:	00c00c04 	movi	r3,48
    2cec:	10fdb426 	beq	r2,r3,23c0 <___vfprintf_internal_r+0xa6c>
    2cf0:	31bfffc4 	addi	r6,r6,-1
    2cf4:	d9814115 	stw	r6,1284(sp)
    2cf8:	30c00005 	stb	r3,0(r6)
    2cfc:	003db006 	br	23c0 <___vfprintf_internal_r+0xa6c>
    2d00:	88800068 	cmpgeui	r2,r17,1
    2d04:	10002c1e 	bne	r2,zero,2db8 <___vfprintf_internal_r+0x1464>
    2d08:	8800021e 	bne	r17,zero,2d14 <___vfprintf_internal_r+0x13c0>
    2d0c:	00800244 	movi	r2,9
    2d10:	14002936 	bltu	r2,r16,2db8 <___vfprintf_internal_r+0x1464>
    2d14:	d90018c4 	addi	r4,sp,99
    2d18:	dd000f04 	addi	r20,sp,60
    2d1c:	d9014115 	stw	r4,1284(sp)
    2d20:	d9014117 	ldw	r4,1284(sp)
    2d24:	80800c04 	addi	r2,r16,48
    2d28:	20800005 	stb	r2,0(r4)
    2d2c:	003da406 	br	23c0 <___vfprintf_internal_r+0xa6c>
    2d30:	dc400d17 	ldw	r17,52(sp)
    2d34:	07000074 	movhi	fp,1
    2d38:	e73c5b84 	addi	fp,fp,-3730
    2d3c:	9425883a 	add	r18,r18,r16
    2d40:	8c400044 	addi	r17,r17,1
    2d44:	008001c4 	movi	r2,7
    2d48:	1f000015 	stw	fp,0(r3)
    2d4c:	1c000115 	stw	r16,4(r3)
    2d50:	dc800e15 	stw	r18,56(sp)
    2d54:	dc400d15 	stw	r17,52(sp)
    2d58:	147de216 	blt	r2,r17,24e4 <___vfprintf_internal_r+0xb90>
    2d5c:	18c00204 	addi	r3,r3,8
    2d60:	003c7a06 	br	1f4c <___vfprintf_internal_r+0x5f8>
    2d64:	01000084 	movi	r4,2
    2d68:	d8000405 	stb	zero,16(sp)
    2d6c:	003d8706 	br	238c <___vfprintf_internal_r+0xa38>
    2d70:	d9814c17 	ldw	r6,1328(sp)
    2d74:	30c4703a 	and	r2,r6,r3
    2d78:	1005003a 	cmpeq	r2,r2,zero
    2d7c:	103cb926 	beq	r2,zero,2064 <___vfprintf_internal_r+0x710>
    2d80:	d9014117 	ldw	r4,1284(sp)
    2d84:	94800044 	addi	r18,r18,1
    2d88:	8c400044 	addi	r17,r17,1
    2d8c:	008001c4 	movi	r2,7
    2d90:	a9000015 	stw	r4,0(r21)
    2d94:	a8c00115 	stw	r3,4(r21)
    2d98:	dc800e15 	stw	r18,56(sp)
    2d9c:	dc400d15 	stw	r17,52(sp)
    2da0:	147e6616 	blt	r2,r17,273c <___vfprintf_internal_r+0xde8>
    2da4:	acc00204 	addi	r19,r21,8
    2da8:	003cd706 	br	2108 <___vfprintf_internal_r+0x7b4>
    2dac:	07000074 	movhi	fp,1
    2db0:	e73c5b84 	addi	fp,fp,-3730
    2db4:	003c4f06 	br	1ef4 <___vfprintf_internal_r+0x5a0>
    2db8:	dd000f04 	addi	r20,sp,60
    2dbc:	dc801904 	addi	r18,sp,100
    2dc0:	8009883a 	mov	r4,r16
    2dc4:	880b883a 	mov	r5,r17
    2dc8:	01800284 	movi	r6,10
    2dcc:	000f883a 	mov	r7,zero
    2dd0:	0008b140 	call	8b14 <__umoddi3>
    2dd4:	12000c04 	addi	r8,r2,48
    2dd8:	94bfffc4 	addi	r18,r18,-1
    2ddc:	8009883a 	mov	r4,r16
    2de0:	880b883a 	mov	r5,r17
    2de4:	01800284 	movi	r6,10
    2de8:	000f883a 	mov	r7,zero
    2dec:	92000005 	stb	r8,0(r18)
    2df0:	00085380 	call	8538 <__udivdi3>
    2df4:	1009883a 	mov	r4,r2
    2df8:	1021883a 	mov	r16,r2
    2dfc:	18800068 	cmpgeui	r2,r3,1
    2e00:	1823883a 	mov	r17,r3
    2e04:	103fee1e 	bne	r2,zero,2dc0 <___vfprintf_internal_r+0x146c>
    2e08:	1800021e 	bne	r3,zero,2e14 <___vfprintf_internal_r+0x14c0>
    2e0c:	00800244 	movi	r2,9
    2e10:	113feb36 	bltu	r2,r4,2dc0 <___vfprintf_internal_r+0x146c>
    2e14:	94bfffc4 	addi	r18,r18,-1
    2e18:	dc814115 	stw	r18,1284(sp)
    2e1c:	003fc006 	br	2d20 <___vfprintf_internal_r+0x13cc>
    2e20:	d9014c17 	ldw	r4,1328(sp)
    2e24:	2080004c 	andi	r2,r4,1
    2e28:	10009a1e 	bne	r2,zero,3094 <___vfprintf_internal_r+0x1740>
    2e2c:	d9401904 	addi	r5,sp,100
    2e30:	dd000f04 	addi	r20,sp,60
    2e34:	d9414115 	stw	r5,1284(sp)
    2e38:	003d6106 	br	23c0 <___vfprintf_internal_r+0xa6c>
    2e3c:	d9014f17 	ldw	r4,1340(sp)
    2e40:	b00b883a 	mov	r5,r22
    2e44:	d9800c04 	addi	r6,sp,48
    2e48:	00018fc0 	call	18fc <__sprint_r>
    2e4c:	103c791e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    2e50:	dc800e17 	ldw	r18,56(sp)
    2e54:	d8c01904 	addi	r3,sp,100
    2e58:	003cff06 	br	2258 <___vfprintf_internal_r+0x904>
    2e5c:	d8c14c17 	ldw	r3,1328(sp)
    2e60:	1880040c 	andi	r2,r3,16
    2e64:	1000711e 	bne	r2,zero,302c <___vfprintf_internal_r+0x16d8>
    2e68:	d9014c17 	ldw	r4,1328(sp)
    2e6c:	2080100c 	andi	r2,r4,64
    2e70:	10006e26 	beq	r2,zero,302c <___vfprintf_internal_r+0x16d8>
    2e74:	3c00000b 	ldhu	r16,0(r7)
    2e78:	0023883a 	mov	r17,zero
    2e7c:	39c00104 	addi	r7,r7,4
    2e80:	d9c14015 	stw	r7,1280(sp)
    2e84:	003f0006 	br	2a88 <___vfprintf_internal_r+0x1134>
    2e88:	dc400d17 	ldw	r17,52(sp)
    2e8c:	07000074 	movhi	fp,1
    2e90:	e73c5b84 	addi	fp,fp,-3730
    2e94:	9425883a 	add	r18,r18,r16
    2e98:	8c400044 	addi	r17,r17,1
    2e9c:	008001c4 	movi	r2,7
    2ea0:	1f000015 	stw	fp,0(r3)
    2ea4:	1c000115 	stw	r16,4(r3)
    2ea8:	dc800e15 	stw	r18,56(sp)
    2eac:	dc400d15 	stw	r17,52(sp)
    2eb0:	147d7616 	blt	r2,r17,248c <___vfprintf_internal_r+0xb38>
    2eb4:	18c00204 	addi	r3,r3,8
    2eb8:	003d7b06 	br	24a8 <___vfprintf_internal_r+0xb54>
    2ebc:	dc800e17 	ldw	r18,56(sp)
    2ec0:	dc400d17 	ldw	r17,52(sp)
    2ec4:	07000074 	movhi	fp,1
    2ec8:	e73c5f84 	addi	fp,fp,-3714
    2ecc:	003bc006 	br	1dd0 <___vfprintf_internal_r+0x47c>
    2ed0:	d9014f17 	ldw	r4,1340(sp)
    2ed4:	b00b883a 	mov	r5,r22
    2ed8:	d9800c04 	addi	r6,sp,48
    2edc:	00018fc0 	call	18fc <__sprint_r>
    2ee0:	103c541e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    2ee4:	dc800e17 	ldw	r18,56(sp)
    2ee8:	d8c01904 	addi	r3,sp,100
    2eec:	003ce906 	br	2294 <___vfprintf_internal_r+0x940>
    2ef0:	3c000017 	ldw	r16,0(r7)
    2ef4:	0009883a 	mov	r4,zero
    2ef8:	39c00104 	addi	r7,r7,4
    2efc:	0023883a 	mov	r17,zero
    2f00:	d9c14015 	stw	r7,1280(sp)
    2f04:	d8000405 	stb	zero,16(sp)
    2f08:	003d2006 	br	238c <___vfprintf_internal_r+0xa38>
    2f0c:	38800017 	ldw	r2,0(r7)
    2f10:	39c00104 	addi	r7,r7,4
    2f14:	d9c14015 	stw	r7,1280(sp)
    2f18:	1023d7fa 	srai	r17,r2,31
    2f1c:	1021883a 	mov	r16,r2
    2f20:	003d1806 	br	2384 <___vfprintf_internal_r+0xa30>
    2f24:	3c000017 	ldw	r16,0(r7)
    2f28:	01000044 	movi	r4,1
    2f2c:	39c00104 	addi	r7,r7,4
    2f30:	0023883a 	mov	r17,zero
    2f34:	d9c14015 	stw	r7,1280(sp)
    2f38:	d8000405 	stb	zero,16(sp)
    2f3c:	003d1306 	br	238c <___vfprintf_internal_r+0xa38>
    2f40:	00800074 	movhi	r2,1
    2f44:	10bc5b04 	addi	r2,r2,-3732
    2f48:	94800044 	addi	r18,r18,1
    2f4c:	8c400044 	addi	r17,r17,1
    2f50:	a8800015 	stw	r2,0(r21)
    2f54:	00c00044 	movi	r3,1
    2f58:	008001c4 	movi	r2,7
    2f5c:	a8c00115 	stw	r3,4(r21)
    2f60:	dc800e15 	stw	r18,56(sp)
    2f64:	dc400d15 	stw	r17,52(sp)
    2f68:	1440ca16 	blt	r2,r17,3294 <___vfprintf_internal_r+0x1940>
    2f6c:	a8c00204 	addi	r3,r21,8
    2f70:	2000061e 	bne	r4,zero,2f8c <___vfprintf_internal_r+0x1638>
    2f74:	d9414717 	ldw	r5,1308(sp)
    2f78:	2800041e 	bne	r5,zero,2f8c <___vfprintf_internal_r+0x1638>
    2f7c:	d9814c17 	ldw	r6,1328(sp)
    2f80:	3080004c 	andi	r2,r6,1
    2f84:	1005003a 	cmpeq	r2,r2,zero
    2f88:	103bf01e 	bne	r2,zero,1f4c <___vfprintf_internal_r+0x5f8>
    2f8c:	00800044 	movi	r2,1
    2f90:	dc400d17 	ldw	r17,52(sp)
    2f94:	18800115 	stw	r2,4(r3)
    2f98:	d8814917 	ldw	r2,1316(sp)
    2f9c:	94800044 	addi	r18,r18,1
    2fa0:	8c400044 	addi	r17,r17,1
    2fa4:	18800015 	stw	r2,0(r3)
    2fa8:	008001c4 	movi	r2,7
    2fac:	dc800e15 	stw	r18,56(sp)
    2fb0:	dc400d15 	stw	r17,52(sp)
    2fb4:	1440ca16 	blt	r2,r17,32e0 <___vfprintf_internal_r+0x198c>
    2fb8:	18c00204 	addi	r3,r3,8
    2fbc:	0121c83a 	sub	r16,zero,r4
    2fc0:	0400500e 	bge	zero,r16,3104 <___vfprintf_internal_r+0x17b0>
    2fc4:	00800404 	movi	r2,16
    2fc8:	1400800e 	bge	r2,r16,31cc <___vfprintf_internal_r+0x1878>
    2fcc:	1027883a 	mov	r19,r2
    2fd0:	07000074 	movhi	fp,1
    2fd4:	e73c5b84 	addi	fp,fp,-3730
    2fd8:	050001c4 	movi	r20,7
    2fdc:	00000306 	br	2fec <___vfprintf_internal_r+0x1698>
    2fe0:	18c00204 	addi	r3,r3,8
    2fe4:	843ffc04 	addi	r16,r16,-16
    2fe8:	9c007a0e 	bge	r19,r16,31d4 <___vfprintf_internal_r+0x1880>
    2fec:	94800404 	addi	r18,r18,16
    2ff0:	8c400044 	addi	r17,r17,1
    2ff4:	1f000015 	stw	fp,0(r3)
    2ff8:	1cc00115 	stw	r19,4(r3)
    2ffc:	dc800e15 	stw	r18,56(sp)
    3000:	dc400d15 	stw	r17,52(sp)
    3004:	a47ff60e 	bge	r20,r17,2fe0 <___vfprintf_internal_r+0x168c>
    3008:	d9014f17 	ldw	r4,1340(sp)
    300c:	b00b883a 	mov	r5,r22
    3010:	d9800c04 	addi	r6,sp,48
    3014:	00018fc0 	call	18fc <__sprint_r>
    3018:	103c061e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    301c:	dc800e17 	ldw	r18,56(sp)
    3020:	dc400d17 	ldw	r17,52(sp)
    3024:	d8c01904 	addi	r3,sp,100
    3028:	003fee06 	br	2fe4 <___vfprintf_internal_r+0x1690>
    302c:	3c000017 	ldw	r16,0(r7)
    3030:	0023883a 	mov	r17,zero
    3034:	39c00104 	addi	r7,r7,4
    3038:	d9c14015 	stw	r7,1280(sp)
    303c:	003e9206 	br	2a88 <___vfprintf_internal_r+0x1134>
    3040:	d9401904 	addi	r5,sp,100
    3044:	dd000f04 	addi	r20,sp,60
    3048:	d9414115 	stw	r5,1284(sp)
    304c:	d9814417 	ldw	r6,1296(sp)
    3050:	880a973a 	slli	r5,r17,28
    3054:	8004d13a 	srli	r2,r16,4
    3058:	810003cc 	andi	r4,r16,15
    305c:	3109883a 	add	r4,r6,r4
    3060:	2884b03a 	or	r2,r5,r2
    3064:	21400003 	ldbu	r5,0(r4)
    3068:	d9014117 	ldw	r4,1284(sp)
    306c:	8806d13a 	srli	r3,r17,4
    3070:	1021883a 	mov	r16,r2
    3074:	213fffc4 	addi	r4,r4,-1
    3078:	d9014115 	stw	r4,1284(sp)
    307c:	d9814117 	ldw	r6,1284(sp)
    3080:	10c8b03a 	or	r4,r2,r3
    3084:	1823883a 	mov	r17,r3
    3088:	31400005 	stb	r5,0(r6)
    308c:	203fef1e 	bne	r4,zero,304c <___vfprintf_internal_r+0x16f8>
    3090:	003ccb06 	br	23c0 <___vfprintf_internal_r+0xa6c>
    3094:	00800c04 	movi	r2,48
    3098:	d98018c4 	addi	r6,sp,99
    309c:	dd000f04 	addi	r20,sp,60
    30a0:	d88018c5 	stb	r2,99(sp)
    30a4:	d9814115 	stw	r6,1284(sp)
    30a8:	003cc506 	br	23c0 <___vfprintf_internal_r+0xa6c>
    30ac:	dc400d17 	ldw	r17,52(sp)
    30b0:	07000074 	movhi	fp,1
    30b4:	e73c5f84 	addi	fp,fp,-3714
    30b8:	003bc706 	br	1fd8 <___vfprintf_internal_r+0x684>
    30bc:	d9414c17 	ldw	r5,1328(sp)
    30c0:	2880040c 	andi	r2,r5,16
    30c4:	10007c26 	beq	r2,zero,32b8 <___vfprintf_internal_r+0x1964>
    30c8:	38800017 	ldw	r2,0(r7)
    30cc:	39c00104 	addi	r7,r7,4
    30d0:	d9c14015 	stw	r7,1280(sp)
    30d4:	d9814b17 	ldw	r6,1324(sp)
    30d8:	d9c14017 	ldw	r7,1280(sp)
    30dc:	11800015 	stw	r6,0(r2)
    30e0:	003a7806 	br	1ac4 <___vfprintf_internal_r+0x170>
    30e4:	d9014f17 	ldw	r4,1340(sp)
    30e8:	b00b883a 	mov	r5,r22
    30ec:	d9800c04 	addi	r6,sp,48
    30f0:	00018fc0 	call	18fc <__sprint_r>
    30f4:	103bcf1e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    30f8:	dc800e17 	ldw	r18,56(sp)
    30fc:	dc400d17 	ldw	r17,52(sp)
    3100:	d8c01904 	addi	r3,sp,100
    3104:	d9014717 	ldw	r4,1308(sp)
    3108:	d9414117 	ldw	r5,1284(sp)
    310c:	8c400044 	addi	r17,r17,1
    3110:	9125883a 	add	r18,r18,r4
    3114:	008001c4 	movi	r2,7
    3118:	19400015 	stw	r5,0(r3)
    311c:	19000115 	stw	r4,4(r3)
    3120:	dc800e15 	stw	r18,56(sp)
    3124:	dc400d15 	stw	r17,52(sp)
    3128:	147cee16 	blt	r2,r17,24e4 <___vfprintf_internal_r+0xb90>
    312c:	18c00204 	addi	r3,r3,8
    3130:	003b8606 	br	1f4c <___vfprintf_internal_r+0x5f8>
    3134:	38c00017 	ldw	r3,0(r7)
    3138:	39000204 	addi	r4,r7,8
    313c:	d9014015 	stw	r4,1280(sp)
    3140:	d8c14215 	stw	r3,1288(sp)
    3144:	39c00117 	ldw	r7,4(r7)
    3148:	d9c14315 	stw	r7,1292(sp)
    314c:	003e2006 	br	29d0 <___vfprintf_internal_r+0x107c>
    3150:	0005883a 	mov	r2,zero
    3154:	1409c83a 	sub	r4,r2,r16
    3158:	1105803a 	cmpltu	r2,r2,r4
    315c:	044bc83a 	sub	r5,zero,r17
    3160:	2885c83a 	sub	r2,r5,r2
    3164:	2021883a 	mov	r16,r4
    3168:	1023883a 	mov	r17,r2
    316c:	01000044 	movi	r4,1
    3170:	00800b44 	movi	r2,45
    3174:	d8800405 	stb	r2,16(sp)
    3178:	003c8406 	br	238c <___vfprintf_internal_r+0xa38>
    317c:	d9014f17 	ldw	r4,1340(sp)
    3180:	b00b883a 	mov	r5,r22
    3184:	d9800c04 	addi	r6,sp,48
    3188:	00018fc0 	call	18fc <__sprint_r>
    318c:	103ba91e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    3190:	dc800e17 	ldw	r18,56(sp)
    3194:	dc400d17 	ldw	r17,52(sp)
    3198:	d9000517 	ldw	r4,20(sp)
    319c:	d9401904 	addi	r5,sp,100
    31a0:	003da706 	br	2840 <___vfprintf_internal_r+0xeec>
    31a4:	d9014f17 	ldw	r4,1340(sp)
    31a8:	b00b883a 	mov	r5,r22
    31ac:	d9800c04 	addi	r6,sp,48
    31b0:	00018fc0 	call	18fc <__sprint_r>
    31b4:	103b9f1e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    31b8:	dc800e17 	ldw	r18,56(sp)
    31bc:	dc400d17 	ldw	r17,52(sp)
    31c0:	d9000517 	ldw	r4,20(sp)
    31c4:	d8c01904 	addi	r3,sp,100
    31c8:	003d9106 	br	2810 <___vfprintf_internal_r+0xebc>
    31cc:	07000074 	movhi	fp,1
    31d0:	e73c5b84 	addi	fp,fp,-3730
    31d4:	9425883a 	add	r18,r18,r16
    31d8:	8c400044 	addi	r17,r17,1
    31dc:	008001c4 	movi	r2,7
    31e0:	1f000015 	stw	fp,0(r3)
    31e4:	1c000115 	stw	r16,4(r3)
    31e8:	dc800e15 	stw	r18,56(sp)
    31ec:	dc400d15 	stw	r17,52(sp)
    31f0:	147fbc16 	blt	r2,r17,30e4 <___vfprintf_internal_r+0x1790>
    31f4:	18c00204 	addi	r3,r3,8
    31f8:	003fc206 	br	3104 <___vfprintf_internal_r+0x17b0>
    31fc:	d9014f17 	ldw	r4,1340(sp)
    3200:	b00b883a 	mov	r5,r22
    3204:	d9800c04 	addi	r6,sp,48
    3208:	00018fc0 	call	18fc <__sprint_r>
    320c:	103b891e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    3210:	dc800e17 	ldw	r18,56(sp)
    3214:	d9000517 	ldw	r4,20(sp)
    3218:	d8c01904 	addi	r3,sp,100
    321c:	003d0206 	br	2628 <___vfprintf_internal_r+0xcd4>
    3220:	07000074 	movhi	fp,1
    3224:	e73c5b84 	addi	fp,fp,-3730
    3228:	003be406 	br	21bc <___vfprintf_internal_r+0x868>
    322c:	00800074 	movhi	r2,1
    3230:	10bc4a04 	addi	r2,r2,-3800
    3234:	d8814115 	stw	r2,1284(sp)
    3238:	003df506 	br	2a10 <___vfprintf_internal_r+0x10bc>
    323c:	d9014217 	ldw	r4,1288(sp)
    3240:	d9414317 	ldw	r5,1292(sp)
    3244:	0007dd40 	call	7dd4 <__isnand>
    3248:	10003926 	beq	r2,zero,3330 <___vfprintf_internal_r+0x19dc>
    324c:	d9414d17 	ldw	r5,1332(sp)
    3250:	008011c4 	movi	r2,71
    3254:	1140ce16 	blt	r2,r5,3590 <___vfprintf_internal_r+0x1c3c>
    3258:	01800074 	movhi	r6,1
    325c:	31bc4b04 	addi	r6,r6,-3796
    3260:	d9814115 	stw	r6,1284(sp)
    3264:	003dea06 	br	2a10 <___vfprintf_internal_r+0x10bc>
    3268:	d9014c17 	ldw	r4,1328(sp)
    326c:	bdc00044 	addi	r23,r23,1
    3270:	b8c00007 	ldb	r3,0(r23)
    3274:	21000814 	ori	r4,r4,32
    3278:	d9014c15 	stw	r4,1328(sp)
    327c:	003a3406 	br	1b50 <___vfprintf_internal_r+0x1fc>
    3280:	dcc14515 	stw	r19,1300(sp)
    3284:	98011016 	blt	r19,zero,36c8 <___vfprintf_internal_r+0x1d74>
    3288:	980f883a 	mov	r7,r19
    328c:	d8014615 	stw	zero,1304(sp)
    3290:	003c5206 	br	23dc <___vfprintf_internal_r+0xa88>
    3294:	d9014f17 	ldw	r4,1340(sp)
    3298:	b00b883a 	mov	r5,r22
    329c:	d9800c04 	addi	r6,sp,48
    32a0:	00018fc0 	call	18fc <__sprint_r>
    32a4:	103b631e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    32a8:	dc800e17 	ldw	r18,56(sp)
    32ac:	d9000517 	ldw	r4,20(sp)
    32b0:	d8c01904 	addi	r3,sp,100
    32b4:	003f2e06 	br	2f70 <___vfprintf_internal_r+0x161c>
    32b8:	d8c14c17 	ldw	r3,1328(sp)
    32bc:	1880100c 	andi	r2,r3,64
    32c0:	1000a026 	beq	r2,zero,3544 <___vfprintf_internal_r+0x1bf0>
    32c4:	38800017 	ldw	r2,0(r7)
    32c8:	39c00104 	addi	r7,r7,4
    32cc:	d9c14015 	stw	r7,1280(sp)
    32d0:	d9014b17 	ldw	r4,1324(sp)
    32d4:	d9c14017 	ldw	r7,1280(sp)
    32d8:	1100000d 	sth	r4,0(r2)
    32dc:	0039f906 	br	1ac4 <___vfprintf_internal_r+0x170>
    32e0:	d9014f17 	ldw	r4,1340(sp)
    32e4:	b00b883a 	mov	r5,r22
    32e8:	d9800c04 	addi	r6,sp,48
    32ec:	00018fc0 	call	18fc <__sprint_r>
    32f0:	103b501e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    32f4:	dc800e17 	ldw	r18,56(sp)
    32f8:	dc400d17 	ldw	r17,52(sp)
    32fc:	d9000517 	ldw	r4,20(sp)
    3300:	d8c01904 	addi	r3,sp,100
    3304:	003f2d06 	br	2fbc <___vfprintf_internal_r+0x1668>
    3308:	00800184 	movi	r2,6
    330c:	14c09a36 	bltu	r2,r19,3578 <___vfprintf_internal_r+0x1c24>
    3310:	dcc14515 	stw	r19,1300(sp)
    3314:	9800010e 	bge	r19,zero,331c <___vfprintf_internal_r+0x19c8>
    3318:	d8014515 	stw	zero,1300(sp)
    331c:	00800074 	movhi	r2,1
    3320:	10bc4d04 	addi	r2,r2,-3788
    3324:	980f883a 	mov	r7,r19
    3328:	d8814115 	stw	r2,1284(sp)
    332c:	003a7806 	br	1d10 <___vfprintf_internal_r+0x3bc>
    3330:	00bfffc4 	movi	r2,-1
    3334:	9880e226 	beq	r19,r2,36c0 <___vfprintf_internal_r+0x1d6c>
    3338:	d9414d17 	ldw	r5,1332(sp)
    333c:	008019c4 	movi	r2,103
    3340:	2880dc26 	beq	r5,r2,36b4 <___vfprintf_internal_r+0x1d60>
    3344:	008011c4 	movi	r2,71
    3348:	2880da26 	beq	r5,r2,36b4 <___vfprintf_internal_r+0x1d60>
    334c:	d9414c17 	ldw	r5,1328(sp)
    3350:	d9014317 	ldw	r4,1292(sp)
    3354:	d9814217 	ldw	r6,1288(sp)
    3358:	29404014 	ori	r5,r5,256
    335c:	d9414c15 	stw	r5,1328(sp)
    3360:	2000cc16 	blt	r4,zero,3694 <___vfprintf_internal_r+0x1d40>
    3364:	3021883a 	mov	r16,r6
    3368:	2023883a 	mov	r17,r4
    336c:	0039883a 	mov	fp,zero
    3370:	d9414d17 	ldw	r5,1332(sp)
    3374:	00801984 	movi	r2,102
    3378:	2880b726 	beq	r5,r2,3658 <___vfprintf_internal_r+0x1d04>
    337c:	00801184 	movi	r2,70
    3380:	2880b526 	beq	r5,r2,3658 <___vfprintf_internal_r+0x1d04>
    3384:	00801944 	movi	r2,101
    3388:	2880c826 	beq	r5,r2,36ac <___vfprintf_internal_r+0x1d58>
    338c:	00801144 	movi	r2,69
    3390:	2880c626 	beq	r5,r2,36ac <___vfprintf_internal_r+0x1d58>
    3394:	9829883a 	mov	r20,r19
    3398:	d9014f17 	ldw	r4,1340(sp)
    339c:	d8800504 	addi	r2,sp,20
    33a0:	880d883a 	mov	r6,r17
    33a4:	d8800115 	stw	r2,4(sp)
    33a8:	d8c00604 	addi	r3,sp,24
    33ac:	d8800704 	addi	r2,sp,28
    33b0:	800b883a 	mov	r5,r16
    33b4:	01c00084 	movi	r7,2
    33b8:	d8c00215 	stw	r3,8(sp)
    33bc:	d8800315 	stw	r2,12(sp)
    33c0:	dd000015 	stw	r20,0(sp)
    33c4:	0003b780 	call	3b78 <_dtoa_r>
    33c8:	d9814d17 	ldw	r6,1332(sp)
    33cc:	d8814115 	stw	r2,1284(sp)
    33d0:	008019c4 	movi	r2,103
    33d4:	30809526 	beq	r6,r2,362c <___vfprintf_internal_r+0x1cd8>
    33d8:	d8c14d17 	ldw	r3,1332(sp)
    33dc:	008011c4 	movi	r2,71
    33e0:	18809226 	beq	r3,r2,362c <___vfprintf_internal_r+0x1cd8>
    33e4:	d9414117 	ldw	r5,1284(sp)
    33e8:	d9814d17 	ldw	r6,1332(sp)
    33ec:	00801984 	movi	r2,102
    33f0:	2d25883a 	add	r18,r5,r20
    33f4:	30808626 	beq	r6,r2,3610 <___vfprintf_internal_r+0x1cbc>
    33f8:	00801184 	movi	r2,70
    33fc:	30808426 	beq	r6,r2,3610 <___vfprintf_internal_r+0x1cbc>
    3400:	000d883a 	mov	r6,zero
    3404:	000f883a 	mov	r7,zero
    3408:	880b883a 	mov	r5,r17
    340c:	8009883a 	mov	r4,r16
    3410:	0009be40 	call	9be4 <__eqdf2>
    3414:	1000751e 	bne	r2,zero,35ec <___vfprintf_internal_r+0x1c98>
    3418:	9005883a 	mov	r2,r18
    341c:	dc800715 	stw	r18,28(sp)
    3420:	d9014117 	ldw	r4,1284(sp)
    3424:	d9414d17 	ldw	r5,1332(sp)
    3428:	00c019c4 	movi	r3,103
    342c:	1125c83a 	sub	r18,r2,r4
    3430:	28c06826 	beq	r5,r3,35d4 <___vfprintf_internal_r+0x1c80>
    3434:	008011c4 	movi	r2,71
    3438:	28806626 	beq	r5,r2,35d4 <___vfprintf_internal_r+0x1c80>
    343c:	d9000517 	ldw	r4,20(sp)
    3440:	d8c14d17 	ldw	r3,1332(sp)
    3444:	00801944 	movi	r2,101
    3448:	10c05516 	blt	r2,r3,35a0 <___vfprintf_internal_r+0x1c4c>
    344c:	213fffc4 	addi	r4,r4,-1
    3450:	d9000515 	stw	r4,20(sp)
    3454:	d8c00805 	stb	r3,32(sp)
    3458:	2021883a 	mov	r16,r4
    345c:	2000c116 	blt	r4,zero,3764 <___vfprintf_internal_r+0x1e10>
    3460:	00800ac4 	movi	r2,43
    3464:	d8800845 	stb	r2,33(sp)
    3468:	00800244 	movi	r2,9
    346c:	1400af0e 	bge	r2,r16,372c <___vfprintf_internal_r+0x1dd8>
    3470:	1027883a 	mov	r19,r2
    3474:	dc400b84 	addi	r17,sp,46
    3478:	8009883a 	mov	r4,r16
    347c:	01400284 	movi	r5,10
    3480:	000a2cc0 	call	a2cc <__modsi3>
    3484:	10800c04 	addi	r2,r2,48
    3488:	8c7fffc4 	addi	r17,r17,-1
    348c:	8009883a 	mov	r4,r16
    3490:	01400284 	movi	r5,10
    3494:	88800005 	stb	r2,0(r17)
    3498:	000a26c0 	call	a26c <__divsi3>
    349c:	1021883a 	mov	r16,r2
    34a0:	98bff516 	blt	r19,r2,3478 <___vfprintf_internal_r+0x1b24>
    34a4:	10c00c04 	addi	r3,r2,48
    34a8:	d88009c4 	addi	r2,sp,39
    34ac:	108001c4 	addi	r2,r2,7
    34b0:	897fffc4 	addi	r5,r17,-1
    34b4:	88ffffc5 	stb	r3,-1(r17)
    34b8:	2880a72e 	bgeu	r5,r2,3758 <___vfprintf_internal_r+0x1e04>
    34bc:	1009883a 	mov	r4,r2
    34c0:	d9800804 	addi	r6,sp,32
    34c4:	d8c00884 	addi	r3,sp,34
    34c8:	28800003 	ldbu	r2,0(r5)
    34cc:	29400044 	addi	r5,r5,1
    34d0:	18800005 	stb	r2,0(r3)
    34d4:	18c00044 	addi	r3,r3,1
    34d8:	293ffb36 	bltu	r5,r4,34c8 <___vfprintf_internal_r+0x1b74>
    34dc:	1987c83a 	sub	r3,r3,r6
    34e0:	00800044 	movi	r2,1
    34e4:	d8c14815 	stw	r3,1312(sp)
    34e8:	90cf883a 	add	r7,r18,r3
    34ec:	1480960e 	bge	r2,r18,3748 <___vfprintf_internal_r+0x1df4>
    34f0:	39c00044 	addi	r7,r7,1
    34f4:	d9c14515 	stw	r7,1300(sp)
    34f8:	38003416 	blt	r7,zero,35cc <___vfprintf_internal_r+0x1c78>
    34fc:	e0803fcc 	andi	r2,fp,255
    3500:	1080201c 	xori	r2,r2,128
    3504:	10bfe004 	addi	r2,r2,-128
    3508:	10004e26 	beq	r2,zero,3644 <___vfprintf_internal_r+0x1cf0>
    350c:	00800b44 	movi	r2,45
    3510:	dc814715 	stw	r18,1308(sp)
    3514:	d8014615 	stw	zero,1304(sp)
    3518:	d8800405 	stb	r2,16(sp)
    351c:	003bb106 	br	23e4 <___vfprintf_internal_r+0xa90>
    3520:	00800b44 	movi	r2,45
    3524:	d8800405 	stb	r2,16(sp)
    3528:	003d3306 	br	29f8 <___vfprintf_internal_r+0x10a4>
    352c:	d9014f17 	ldw	r4,1340(sp)
    3530:	b00b883a 	mov	r5,r22
    3534:	d9800c04 	addi	r6,sp,48
    3538:	00018fc0 	call	18fc <__sprint_r>
    353c:	103abd1e 	bne	r2,zero,2034 <___vfprintf_internal_r+0x6e0>
    3540:	003abb06 	br	2030 <___vfprintf_internal_r+0x6dc>
    3544:	38800017 	ldw	r2,0(r7)
    3548:	39c00104 	addi	r7,r7,4
    354c:	d9c14015 	stw	r7,1280(sp)
    3550:	d9414b17 	ldw	r5,1324(sp)
    3554:	d9c14017 	ldw	r7,1280(sp)
    3558:	11400015 	stw	r5,0(r2)
    355c:	00395906 	br	1ac4 <___vfprintf_internal_r+0x170>
    3560:	980f883a 	mov	r7,r19
    3564:	dcc14515 	stw	r19,1300(sp)
    3568:	d8014615 	stw	zero,1304(sp)
    356c:	003b9b06 	br	23dc <___vfprintf_internal_r+0xa88>
    3570:	0027883a 	mov	r19,zero
    3574:	00397806 	br	1b58 <___vfprintf_internal_r+0x204>
    3578:	00c00074 	movhi	r3,1
    357c:	18fc4d04 	addi	r3,r3,-3788
    3580:	100f883a 	mov	r7,r2
    3584:	d8814515 	stw	r2,1300(sp)
    3588:	d8c14115 	stw	r3,1284(sp)
    358c:	0039e006 	br	1d10 <___vfprintf_internal_r+0x3bc>
    3590:	00800074 	movhi	r2,1
    3594:	10bc4c04 	addi	r2,r2,-3792
    3598:	d8814115 	stw	r2,1284(sp)
    359c:	003d1c06 	br	2a10 <___vfprintf_internal_r+0x10bc>
    35a0:	d9414d17 	ldw	r5,1332(sp)
    35a4:	00801984 	movi	r2,102
    35a8:	28804926 	beq	r5,r2,36d0 <___vfprintf_internal_r+0x1d7c>
    35ac:	200f883a 	mov	r7,r4
    35b0:	24805716 	blt	r4,r18,3710 <___vfprintf_internal_r+0x1dbc>
    35b4:	d9414c17 	ldw	r5,1328(sp)
    35b8:	2880004c 	andi	r2,r5,1
    35bc:	10000126 	beq	r2,zero,35c4 <___vfprintf_internal_r+0x1c70>
    35c0:	21c00044 	addi	r7,r4,1
    35c4:	d9c14515 	stw	r7,1300(sp)
    35c8:	383fcc0e 	bge	r7,zero,34fc <___vfprintf_internal_r+0x1ba8>
    35cc:	d8014515 	stw	zero,1300(sp)
    35d0:	003fca06 	br	34fc <___vfprintf_internal_r+0x1ba8>
    35d4:	d9000517 	ldw	r4,20(sp)
    35d8:	00bfff04 	movi	r2,-4
    35dc:	1100480e 	bge	r2,r4,3700 <___vfprintf_internal_r+0x1dac>
    35e0:	99004716 	blt	r19,r4,3700 <___vfprintf_internal_r+0x1dac>
    35e4:	d8c14d15 	stw	r3,1332(sp)
    35e8:	003ff006 	br	35ac <___vfprintf_internal_r+0x1c58>
    35ec:	d8800717 	ldw	r2,28(sp)
    35f0:	14bf8b2e 	bgeu	r2,r18,3420 <___vfprintf_internal_r+0x1acc>
    35f4:	9007883a 	mov	r3,r18
    35f8:	01000c04 	movi	r4,48
    35fc:	11000005 	stb	r4,0(r2)
    3600:	10800044 	addi	r2,r2,1
    3604:	d8800715 	stw	r2,28(sp)
    3608:	18bffc1e 	bne	r3,r2,35fc <___vfprintf_internal_r+0x1ca8>
    360c:	003f8406 	br	3420 <___vfprintf_internal_r+0x1acc>
    3610:	d8814117 	ldw	r2,1284(sp)
    3614:	10c00007 	ldb	r3,0(r2)
    3618:	00800c04 	movi	r2,48
    361c:	18805b26 	beq	r3,r2,378c <___vfprintf_internal_r+0x1e38>
    3620:	d9000517 	ldw	r4,20(sp)
    3624:	9125883a 	add	r18,r18,r4
    3628:	003f7506 	br	3400 <___vfprintf_internal_r+0x1aac>
    362c:	d9014c17 	ldw	r4,1328(sp)
    3630:	2080004c 	andi	r2,r4,1
    3634:	1005003a 	cmpeq	r2,r2,zero
    3638:	103f6a26 	beq	r2,zero,33e4 <___vfprintf_internal_r+0x1a90>
    363c:	d8800717 	ldw	r2,28(sp)
    3640:	003f7706 	br	3420 <___vfprintf_internal_r+0x1acc>
    3644:	d9c14515 	stw	r7,1300(sp)
    3648:	38004d16 	blt	r7,zero,3780 <___vfprintf_internal_r+0x1e2c>
    364c:	dc814715 	stw	r18,1308(sp)
    3650:	d8014615 	stw	zero,1304(sp)
    3654:	003b6106 	br	23dc <___vfprintf_internal_r+0xa88>
    3658:	d9014f17 	ldw	r4,1340(sp)
    365c:	d8800504 	addi	r2,sp,20
    3660:	d8800115 	stw	r2,4(sp)
    3664:	d8c00604 	addi	r3,sp,24
    3668:	d8800704 	addi	r2,sp,28
    366c:	800b883a 	mov	r5,r16
    3670:	880d883a 	mov	r6,r17
    3674:	01c000c4 	movi	r7,3
    3678:	d8c00215 	stw	r3,8(sp)
    367c:	d8800315 	stw	r2,12(sp)
    3680:	dcc00015 	stw	r19,0(sp)
    3684:	9829883a 	mov	r20,r19
    3688:	0003b780 	call	3b78 <_dtoa_r>
    368c:	d8814115 	stw	r2,1284(sp)
    3690:	003f5106 	br	33d8 <___vfprintf_internal_r+0x1a84>
    3694:	d8c14217 	ldw	r3,1288(sp)
    3698:	d9014317 	ldw	r4,1292(sp)
    369c:	07000b44 	movi	fp,45
    36a0:	1821883a 	mov	r16,r3
    36a4:	2460003c 	xorhi	r17,r4,32768
    36a8:	003f3106 	br	3370 <___vfprintf_internal_r+0x1a1c>
    36ac:	9d000044 	addi	r20,r19,1
    36b0:	003f3906 	br	3398 <___vfprintf_internal_r+0x1a44>
    36b4:	983f251e 	bne	r19,zero,334c <___vfprintf_internal_r+0x19f8>
    36b8:	04c00044 	movi	r19,1
    36bc:	003f2306 	br	334c <___vfprintf_internal_r+0x19f8>
    36c0:	04c00184 	movi	r19,6
    36c4:	003f2106 	br	334c <___vfprintf_internal_r+0x19f8>
    36c8:	d8014515 	stw	zero,1300(sp)
    36cc:	003eee06 	br	3288 <___vfprintf_internal_r+0x1934>
    36d0:	200f883a 	mov	r7,r4
    36d4:	0100370e 	bge	zero,r4,37b4 <___vfprintf_internal_r+0x1e60>
    36d8:	9800031e 	bne	r19,zero,36e8 <___vfprintf_internal_r+0x1d94>
    36dc:	d9814c17 	ldw	r6,1328(sp)
    36e0:	3080004c 	andi	r2,r6,1
    36e4:	103fb726 	beq	r2,zero,35c4 <___vfprintf_internal_r+0x1c70>
    36e8:	20800044 	addi	r2,r4,1
    36ec:	98a7883a 	add	r19,r19,r2
    36f0:	dcc14515 	stw	r19,1300(sp)
    36f4:	980f883a 	mov	r7,r19
    36f8:	983f800e 	bge	r19,zero,34fc <___vfprintf_internal_r+0x1ba8>
    36fc:	003fb306 	br	35cc <___vfprintf_internal_r+0x1c78>
    3700:	d9814d17 	ldw	r6,1332(sp)
    3704:	31bfff84 	addi	r6,r6,-2
    3708:	d9814d15 	stw	r6,1332(sp)
    370c:	003f4c06 	br	3440 <___vfprintf_internal_r+0x1aec>
    3710:	0100180e 	bge	zero,r4,3774 <___vfprintf_internal_r+0x1e20>
    3714:	00800044 	movi	r2,1
    3718:	1485883a 	add	r2,r2,r18
    371c:	d8814515 	stw	r2,1300(sp)
    3720:	100f883a 	mov	r7,r2
    3724:	103f750e 	bge	r2,zero,34fc <___vfprintf_internal_r+0x1ba8>
    3728:	003fa806 	br	35cc <___vfprintf_internal_r+0x1c78>
    372c:	80c00c04 	addi	r3,r16,48
    3730:	00800c04 	movi	r2,48
    3734:	d8c008c5 	stb	r3,35(sp)
    3738:	d9800804 	addi	r6,sp,32
    373c:	d8c00904 	addi	r3,sp,36
    3740:	d8800885 	stb	r2,34(sp)
    3744:	003f6506 	br	34dc <___vfprintf_internal_r+0x1b88>
    3748:	d9014c17 	ldw	r4,1328(sp)
    374c:	2084703a 	and	r2,r4,r2
    3750:	103f9c26 	beq	r2,zero,35c4 <___vfprintf_internal_r+0x1c70>
    3754:	003f6606 	br	34f0 <___vfprintf_internal_r+0x1b9c>
    3758:	d9800804 	addi	r6,sp,32
    375c:	d8c00884 	addi	r3,sp,34
    3760:	003f5e06 	br	34dc <___vfprintf_internal_r+0x1b88>
    3764:	00800b44 	movi	r2,45
    3768:	0121c83a 	sub	r16,zero,r4
    376c:	d8800845 	stb	r2,33(sp)
    3770:	003f3d06 	br	3468 <___vfprintf_internal_r+0x1b14>
    3774:	00800084 	movi	r2,2
    3778:	1105c83a 	sub	r2,r2,r4
    377c:	003fe606 	br	3718 <___vfprintf_internal_r+0x1dc4>
    3780:	d8014515 	stw	zero,1300(sp)
    3784:	dc814715 	stw	r18,1308(sp)
    3788:	003fb106 	br	3650 <___vfprintf_internal_r+0x1cfc>
    378c:	000d883a 	mov	r6,zero
    3790:	000f883a 	mov	r7,zero
    3794:	8009883a 	mov	r4,r16
    3798:	880b883a 	mov	r5,r17
    379c:	0009c6c0 	call	9c6c <__nedf2>
    37a0:	103f9f26 	beq	r2,zero,3620 <___vfprintf_internal_r+0x1ccc>
    37a4:	00800044 	movi	r2,1
    37a8:	1509c83a 	sub	r4,r2,r20
    37ac:	d9000515 	stw	r4,20(sp)
    37b0:	003f9b06 	br	3620 <___vfprintf_internal_r+0x1ccc>
    37b4:	98000d1e 	bne	r19,zero,37ec <___vfprintf_internal_r+0x1e98>
    37b8:	d8c14c17 	ldw	r3,1328(sp)
    37bc:	1880004c 	andi	r2,r3,1
    37c0:	10000a1e 	bne	r2,zero,37ec <___vfprintf_internal_r+0x1e98>
    37c4:	01000044 	movi	r4,1
    37c8:	200f883a 	mov	r7,r4
    37cc:	d9014515 	stw	r4,1300(sp)
    37d0:	003f4a06 	br	34fc <___vfprintf_internal_r+0x1ba8>
    37d4:	3cc00017 	ldw	r19,0(r7)
    37d8:	39c00104 	addi	r7,r7,4
    37dc:	983d0e0e 	bge	r19,zero,2c18 <___vfprintf_internal_r+0x12c4>
    37e0:	b8c00007 	ldb	r3,0(r23)
    37e4:	04ffffc4 	movi	r19,-1
    37e8:	0038d906 	br	1b50 <___vfprintf_internal_r+0x1fc>
    37ec:	9cc00084 	addi	r19,r19,2
    37f0:	dcc14515 	stw	r19,1300(sp)
    37f4:	980f883a 	mov	r7,r19
    37f8:	983f400e 	bge	r19,zero,34fc <___vfprintf_internal_r+0x1ba8>
    37fc:	003f7306 	br	35cc <___vfprintf_internal_r+0x1c78>

00003800 <__vfprintf_internal>:
    3800:	00800074 	movhi	r2,1
    3804:	10840004 	addi	r2,r2,4096
    3808:	2013883a 	mov	r9,r4
    380c:	11000017 	ldw	r4,0(r2)
    3810:	2805883a 	mov	r2,r5
    3814:	300f883a 	mov	r7,r6
    3818:	480b883a 	mov	r5,r9
    381c:	100d883a 	mov	r6,r2
    3820:	00019541 	jmpi	1954 <___vfprintf_internal_r>

00003824 <__swsetup_r>:
    3824:	00800074 	movhi	r2,1
    3828:	10840004 	addi	r2,r2,4096
    382c:	10c00017 	ldw	r3,0(r2)
    3830:	defffd04 	addi	sp,sp,-12
    3834:	dc400115 	stw	r17,4(sp)
    3838:	dc000015 	stw	r16,0(sp)
    383c:	dfc00215 	stw	ra,8(sp)
    3840:	2023883a 	mov	r17,r4
    3844:	2821883a 	mov	r16,r5
    3848:	18000226 	beq	r3,zero,3854 <__swsetup_r+0x30>
    384c:	18800e17 	ldw	r2,56(r3)
    3850:	10001f26 	beq	r2,zero,38d0 <__swsetup_r+0xac>
    3854:	8100030b 	ldhu	r4,12(r16)
    3858:	2080020c 	andi	r2,r4,8
    385c:	10002826 	beq	r2,zero,3900 <__swsetup_r+0xdc>
    3860:	81400417 	ldw	r5,16(r16)
    3864:	28001d26 	beq	r5,zero,38dc <__swsetup_r+0xb8>
    3868:	2080004c 	andi	r2,r4,1
    386c:	1005003a 	cmpeq	r2,r2,zero
    3870:	10000b26 	beq	r2,zero,38a0 <__swsetup_r+0x7c>
    3874:	2080008c 	andi	r2,r4,2
    3878:	10001226 	beq	r2,zero,38c4 <__swsetup_r+0xa0>
    387c:	0005883a 	mov	r2,zero
    3880:	80800215 	stw	r2,8(r16)
    3884:	28000b26 	beq	r5,zero,38b4 <__swsetup_r+0x90>
    3888:	0005883a 	mov	r2,zero
    388c:	dfc00217 	ldw	ra,8(sp)
    3890:	dc400117 	ldw	r17,4(sp)
    3894:	dc000017 	ldw	r16,0(sp)
    3898:	dec00304 	addi	sp,sp,12
    389c:	f800283a 	ret
    38a0:	80800517 	ldw	r2,20(r16)
    38a4:	80000215 	stw	zero,8(r16)
    38a8:	0085c83a 	sub	r2,zero,r2
    38ac:	80800615 	stw	r2,24(r16)
    38b0:	283ff51e 	bne	r5,zero,3888 <__swsetup_r+0x64>
    38b4:	2080200c 	andi	r2,r4,128
    38b8:	103ff326 	beq	r2,zero,3888 <__swsetup_r+0x64>
    38bc:	00bfffc4 	movi	r2,-1
    38c0:	003ff206 	br	388c <__swsetup_r+0x68>
    38c4:	80800517 	ldw	r2,20(r16)
    38c8:	80800215 	stw	r2,8(r16)
    38cc:	003fed06 	br	3884 <__swsetup_r+0x60>
    38d0:	1809883a 	mov	r4,r3
    38d4:	00053c40 	call	53c4 <__sinit>
    38d8:	003fde06 	br	3854 <__swsetup_r+0x30>
    38dc:	20c0a00c 	andi	r3,r4,640
    38e0:	00808004 	movi	r2,512
    38e4:	18bfe026 	beq	r3,r2,3868 <__swsetup_r+0x44>
    38e8:	8809883a 	mov	r4,r17
    38ec:	800b883a 	mov	r5,r16
    38f0:	000613c0 	call	613c <__smakebuf_r>
    38f4:	8100030b 	ldhu	r4,12(r16)
    38f8:	81400417 	ldw	r5,16(r16)
    38fc:	003fda06 	br	3868 <__swsetup_r+0x44>
    3900:	2080040c 	andi	r2,r4,16
    3904:	103fed26 	beq	r2,zero,38bc <__swsetup_r+0x98>
    3908:	2080010c 	andi	r2,r4,4
    390c:	10001226 	beq	r2,zero,3958 <__swsetup_r+0x134>
    3910:	81400c17 	ldw	r5,48(r16)
    3914:	28000526 	beq	r5,zero,392c <__swsetup_r+0x108>
    3918:	80801004 	addi	r2,r16,64
    391c:	28800226 	beq	r5,r2,3928 <__swsetup_r+0x104>
    3920:	8809883a 	mov	r4,r17
    3924:	00057480 	call	5748 <_free_r>
    3928:	80000c15 	stw	zero,48(r16)
    392c:	8080030b 	ldhu	r2,12(r16)
    3930:	81400417 	ldw	r5,16(r16)
    3934:	80000115 	stw	zero,4(r16)
    3938:	10bff6cc 	andi	r2,r2,65499
    393c:	8080030d 	sth	r2,12(r16)
    3940:	81400015 	stw	r5,0(r16)
    3944:	8080030b 	ldhu	r2,12(r16)
    3948:	10800214 	ori	r2,r2,8
    394c:	113fffcc 	andi	r4,r2,65535
    3950:	8080030d 	sth	r2,12(r16)
    3954:	003fc306 	br	3864 <__swsetup_r+0x40>
    3958:	81400417 	ldw	r5,16(r16)
    395c:	003ff906 	br	3944 <__swsetup_r+0x120>

00003960 <quorem>:
    3960:	28c00417 	ldw	r3,16(r5)
    3964:	20800417 	ldw	r2,16(r4)
    3968:	defff604 	addi	sp,sp,-40
    396c:	ddc00715 	stw	r23,28(sp)
    3970:	dd400515 	stw	r21,20(sp)
    3974:	dfc00915 	stw	ra,36(sp)
    3978:	df000815 	stw	fp,32(sp)
    397c:	dd800615 	stw	r22,24(sp)
    3980:	dd000415 	stw	r20,16(sp)
    3984:	dcc00315 	stw	r19,12(sp)
    3988:	dc800215 	stw	r18,8(sp)
    398c:	dc400115 	stw	r17,4(sp)
    3990:	dc000015 	stw	r16,0(sp)
    3994:	202f883a 	mov	r23,r4
    3998:	282b883a 	mov	r21,r5
    399c:	10c07416 	blt	r2,r3,3b70 <quorem+0x210>
    39a0:	1c7fffc4 	addi	r17,r3,-1
    39a4:	8c45883a 	add	r2,r17,r17
    39a8:	1085883a 	add	r2,r2,r2
    39ac:	2c000504 	addi	r16,r5,20
    39b0:	24c00504 	addi	r19,r4,20
    39b4:	14ed883a 	add	r22,r2,r19
    39b8:	80a5883a 	add	r18,r16,r2
    39bc:	b7000017 	ldw	fp,0(r22)
    39c0:	91400017 	ldw	r5,0(r18)
    39c4:	e009883a 	mov	r4,fp
    39c8:	29400044 	addi	r5,r5,1
    39cc:	000a32c0 	call	a32c <__udivsi3>
    39d0:	1029883a 	mov	r20,r2
    39d4:	10003c1e 	bne	r2,zero,3ac8 <quorem+0x168>
    39d8:	a80b883a 	mov	r5,r21
    39dc:	b809883a 	mov	r4,r23
    39e0:	00067280 	call	6728 <__mcmp>
    39e4:	10002b16 	blt	r2,zero,3a94 <quorem+0x134>
    39e8:	a5000044 	addi	r20,r20,1
    39ec:	980f883a 	mov	r7,r19
    39f0:	0011883a 	mov	r8,zero
    39f4:	0009883a 	mov	r4,zero
    39f8:	81400017 	ldw	r5,0(r16)
    39fc:	38c00017 	ldw	r3,0(r7)
    3a00:	84000104 	addi	r16,r16,4
    3a04:	28bfffcc 	andi	r2,r5,65535
    3a08:	2085883a 	add	r2,r4,r2
    3a0c:	11bfffcc 	andi	r6,r2,65535
    3a10:	193fffcc 	andi	r4,r3,65535
    3a14:	1004d43a 	srli	r2,r2,16
    3a18:	280ad43a 	srli	r5,r5,16
    3a1c:	2189c83a 	sub	r4,r4,r6
    3a20:	2209883a 	add	r4,r4,r8
    3a24:	1806d43a 	srli	r3,r3,16
    3a28:	288b883a 	add	r5,r5,r2
    3a2c:	200dd43a 	srai	r6,r4,16
    3a30:	28bfffcc 	andi	r2,r5,65535
    3a34:	1887c83a 	sub	r3,r3,r2
    3a38:	1987883a 	add	r3,r3,r6
    3a3c:	3900000d 	sth	r4,0(r7)
    3a40:	38c0008d 	sth	r3,2(r7)
    3a44:	2808d43a 	srli	r4,r5,16
    3a48:	39c00104 	addi	r7,r7,4
    3a4c:	1811d43a 	srai	r8,r3,16
    3a50:	943fe92e 	bgeu	r18,r16,39f8 <quorem+0x98>
    3a54:	8c45883a 	add	r2,r17,r17
    3a58:	1085883a 	add	r2,r2,r2
    3a5c:	9885883a 	add	r2,r19,r2
    3a60:	10c00017 	ldw	r3,0(r2)
    3a64:	18000b1e 	bne	r3,zero,3a94 <quorem+0x134>
    3a68:	113fff04 	addi	r4,r2,-4
    3a6c:	9900082e 	bgeu	r19,r4,3a90 <quorem+0x130>
    3a70:	10bfff17 	ldw	r2,-4(r2)
    3a74:	10000326 	beq	r2,zero,3a84 <quorem+0x124>
    3a78:	00000506 	br	3a90 <quorem+0x130>
    3a7c:	20800017 	ldw	r2,0(r4)
    3a80:	1000031e 	bne	r2,zero,3a90 <quorem+0x130>
    3a84:	213fff04 	addi	r4,r4,-4
    3a88:	8c7fffc4 	addi	r17,r17,-1
    3a8c:	993ffb36 	bltu	r19,r4,3a7c <quorem+0x11c>
    3a90:	bc400415 	stw	r17,16(r23)
    3a94:	a005883a 	mov	r2,r20
    3a98:	dfc00917 	ldw	ra,36(sp)
    3a9c:	df000817 	ldw	fp,32(sp)
    3aa0:	ddc00717 	ldw	r23,28(sp)
    3aa4:	dd800617 	ldw	r22,24(sp)
    3aa8:	dd400517 	ldw	r21,20(sp)
    3aac:	dd000417 	ldw	r20,16(sp)
    3ab0:	dcc00317 	ldw	r19,12(sp)
    3ab4:	dc800217 	ldw	r18,8(sp)
    3ab8:	dc400117 	ldw	r17,4(sp)
    3abc:	dc000017 	ldw	r16,0(sp)
    3ac0:	dec00a04 	addi	sp,sp,40
    3ac4:	f800283a 	ret
    3ac8:	980f883a 	mov	r7,r19
    3acc:	8011883a 	mov	r8,r16
    3ad0:	0013883a 	mov	r9,zero
    3ad4:	000d883a 	mov	r6,zero
    3ad8:	40c00017 	ldw	r3,0(r8)
    3adc:	39000017 	ldw	r4,0(r7)
    3ae0:	42000104 	addi	r8,r8,4
    3ae4:	18bfffcc 	andi	r2,r3,65535
    3ae8:	a085383a 	mul	r2,r20,r2
    3aec:	1806d43a 	srli	r3,r3,16
    3af0:	217fffcc 	andi	r5,r4,65535
    3af4:	3085883a 	add	r2,r6,r2
    3af8:	11bfffcc 	andi	r6,r2,65535
    3afc:	a0c7383a 	mul	r3,r20,r3
    3b00:	1004d43a 	srli	r2,r2,16
    3b04:	298bc83a 	sub	r5,r5,r6
    3b08:	2a4b883a 	add	r5,r5,r9
    3b0c:	2008d43a 	srli	r4,r4,16
    3b10:	1887883a 	add	r3,r3,r2
    3b14:	280dd43a 	srai	r6,r5,16
    3b18:	18bfffcc 	andi	r2,r3,65535
    3b1c:	2089c83a 	sub	r4,r4,r2
    3b20:	2189883a 	add	r4,r4,r6
    3b24:	3900008d 	sth	r4,2(r7)
    3b28:	3940000d 	sth	r5,0(r7)
    3b2c:	180cd43a 	srli	r6,r3,16
    3b30:	39c00104 	addi	r7,r7,4
    3b34:	2013d43a 	srai	r9,r4,16
    3b38:	923fe72e 	bgeu	r18,r8,3ad8 <quorem+0x178>
    3b3c:	e03fa61e 	bne	fp,zero,39d8 <quorem+0x78>
    3b40:	b0ffff04 	addi	r3,r22,-4
    3b44:	98c0082e 	bgeu	r19,r3,3b68 <quorem+0x208>
    3b48:	b0bfff17 	ldw	r2,-4(r22)
    3b4c:	10000326 	beq	r2,zero,3b5c <quorem+0x1fc>
    3b50:	00000506 	br	3b68 <quorem+0x208>
    3b54:	18800017 	ldw	r2,0(r3)
    3b58:	1000031e 	bne	r2,zero,3b68 <quorem+0x208>
    3b5c:	18ffff04 	addi	r3,r3,-4
    3b60:	8c7fffc4 	addi	r17,r17,-1
    3b64:	98fffb36 	bltu	r19,r3,3b54 <quorem+0x1f4>
    3b68:	bc400415 	stw	r17,16(r23)
    3b6c:	003f9a06 	br	39d8 <quorem+0x78>
    3b70:	0005883a 	mov	r2,zero
    3b74:	003fc806 	br	3a98 <quorem+0x138>

00003b78 <_dtoa_r>:
    3b78:	22001017 	ldw	r8,64(r4)
    3b7c:	deffda04 	addi	sp,sp,-152
    3b80:	dd402115 	stw	r21,132(sp)
    3b84:	dd002015 	stw	r20,128(sp)
    3b88:	dc801e15 	stw	r18,120(sp)
    3b8c:	dc401d15 	stw	r17,116(sp)
    3b90:	dfc02515 	stw	ra,148(sp)
    3b94:	df002415 	stw	fp,144(sp)
    3b98:	ddc02315 	stw	r23,140(sp)
    3b9c:	dd802215 	stw	r22,136(sp)
    3ba0:	dcc01f15 	stw	r19,124(sp)
    3ba4:	dc001c15 	stw	r16,112(sp)
    3ba8:	d9001615 	stw	r4,88(sp)
    3bac:	3023883a 	mov	r17,r6
    3bb0:	2829883a 	mov	r20,r5
    3bb4:	d9c01715 	stw	r7,92(sp)
    3bb8:	dc802817 	ldw	r18,160(sp)
    3bbc:	302b883a 	mov	r21,r6
    3bc0:	40000a26 	beq	r8,zero,3bec <_dtoa_r+0x74>
    3bc4:	20801117 	ldw	r2,68(r4)
    3bc8:	400b883a 	mov	r5,r8
    3bcc:	40800115 	stw	r2,4(r8)
    3bd0:	20c01117 	ldw	r3,68(r4)
    3bd4:	00800044 	movi	r2,1
    3bd8:	10c4983a 	sll	r2,r2,r3
    3bdc:	40800215 	stw	r2,8(r8)
    3be0:	00065cc0 	call	65cc <_Bfree>
    3be4:	d8c01617 	ldw	r3,88(sp)
    3be8:	18001015 	stw	zero,64(r3)
    3bec:	8800a316 	blt	r17,zero,3e7c <_dtoa_r+0x304>
    3bf0:	90000015 	stw	zero,0(r18)
    3bf4:	a8dffc2c 	andhi	r3,r21,32752
    3bf8:	009ffc34 	movhi	r2,32752
    3bfc:	18809126 	beq	r3,r2,3e44 <_dtoa_r+0x2cc>
    3c00:	000d883a 	mov	r6,zero
    3c04:	000f883a 	mov	r7,zero
    3c08:	a009883a 	mov	r4,r20
    3c0c:	a80b883a 	mov	r5,r21
    3c10:	dd001215 	stw	r20,72(sp)
    3c14:	dd401315 	stw	r21,76(sp)
    3c18:	0009c6c0 	call	9c6c <__nedf2>
    3c1c:	1000171e 	bne	r2,zero,3c7c <_dtoa_r+0x104>
    3c20:	d9802717 	ldw	r6,156(sp)
    3c24:	00800044 	movi	r2,1
    3c28:	30800015 	stw	r2,0(r6)
    3c2c:	d8802917 	ldw	r2,164(sp)
    3c30:	10029b26 	beq	r2,zero,46a0 <_dtoa_r+0xb28>
    3c34:	d9002917 	ldw	r4,164(sp)
    3c38:	00800074 	movhi	r2,1
    3c3c:	10bc5b44 	addi	r2,r2,-3731
    3c40:	10ffffc4 	addi	r3,r2,-1
    3c44:	20800015 	stw	r2,0(r4)
    3c48:	1805883a 	mov	r2,r3
    3c4c:	dfc02517 	ldw	ra,148(sp)
    3c50:	df002417 	ldw	fp,144(sp)
    3c54:	ddc02317 	ldw	r23,140(sp)
    3c58:	dd802217 	ldw	r22,136(sp)
    3c5c:	dd402117 	ldw	r21,132(sp)
    3c60:	dd002017 	ldw	r20,128(sp)
    3c64:	dcc01f17 	ldw	r19,124(sp)
    3c68:	dc801e17 	ldw	r18,120(sp)
    3c6c:	dc401d17 	ldw	r17,116(sp)
    3c70:	dc001c17 	ldw	r16,112(sp)
    3c74:	dec02604 	addi	sp,sp,152
    3c78:	f800283a 	ret
    3c7c:	d9001617 	ldw	r4,88(sp)
    3c80:	d9401217 	ldw	r5,72(sp)
    3c84:	d8800104 	addi	r2,sp,4
    3c88:	a80d883a 	mov	r6,r21
    3c8c:	d9c00204 	addi	r7,sp,8
    3c90:	d8800015 	stw	r2,0(sp)
    3c94:	0006c080 	call	6c08 <__d2b>
    3c98:	d8800715 	stw	r2,28(sp)
    3c9c:	a804d53a 	srli	r2,r21,20
    3ca0:	1101ffcc 	andi	r4,r2,2047
    3ca4:	20008626 	beq	r4,zero,3ec0 <_dtoa_r+0x348>
    3ca8:	d8c01217 	ldw	r3,72(sp)
    3cac:	00800434 	movhi	r2,16
    3cb0:	10bfffc4 	addi	r2,r2,-1
    3cb4:	ddc00117 	ldw	r23,4(sp)
    3cb8:	a884703a 	and	r2,r21,r2
    3cbc:	1811883a 	mov	r8,r3
    3cc0:	124ffc34 	orhi	r9,r2,16368
    3cc4:	25bf0044 	addi	r22,r4,-1023
    3cc8:	d8000815 	stw	zero,32(sp)
    3ccc:	0005883a 	mov	r2,zero
    3cd0:	00cffe34 	movhi	r3,16376
    3cd4:	480b883a 	mov	r5,r9
    3cd8:	4009883a 	mov	r4,r8
    3cdc:	180f883a 	mov	r7,r3
    3ce0:	100d883a 	mov	r6,r2
    3ce4:	00094d40 	call	94d4 <__subdf3>
    3ce8:	0218dbf4 	movhi	r8,25455
    3cec:	4210d844 	addi	r8,r8,17249
    3cf0:	024ff4f4 	movhi	r9,16339
    3cf4:	4a61e9c4 	addi	r9,r9,-30809
    3cf8:	480f883a 	mov	r7,r9
    3cfc:	400d883a 	mov	r6,r8
    3d00:	180b883a 	mov	r5,r3
    3d04:	1009883a 	mov	r4,r2
    3d08:	00095c80 	call	95c8 <__muldf3>
    3d0c:	0222d874 	movhi	r8,35681
    3d10:	42322cc4 	addi	r8,r8,-14157
    3d14:	024ff1f4 	movhi	r9,16327
    3d18:	4a628a04 	addi	r9,r9,-30168
    3d1c:	480f883a 	mov	r7,r9
    3d20:	400d883a 	mov	r6,r8
    3d24:	180b883a 	mov	r5,r3
    3d28:	1009883a 	mov	r4,r2
    3d2c:	00095540 	call	9554 <__adddf3>
    3d30:	b009883a 	mov	r4,r22
    3d34:	1021883a 	mov	r16,r2
    3d38:	1823883a 	mov	r17,r3
    3d3c:	0009e8c0 	call	9e8c <__floatsidf>
    3d40:	021427f4 	movhi	r8,20639
    3d44:	421e7ec4 	addi	r8,r8,31227
    3d48:	024ff4f4 	movhi	r9,16339
    3d4c:	4a5104c4 	addi	r9,r9,17427
    3d50:	480f883a 	mov	r7,r9
    3d54:	400d883a 	mov	r6,r8
    3d58:	180b883a 	mov	r5,r3
    3d5c:	1009883a 	mov	r4,r2
    3d60:	00095c80 	call	95c8 <__muldf3>
    3d64:	180f883a 	mov	r7,r3
    3d68:	880b883a 	mov	r5,r17
    3d6c:	100d883a 	mov	r6,r2
    3d70:	8009883a 	mov	r4,r16
    3d74:	00095540 	call	9554 <__adddf3>
    3d78:	1009883a 	mov	r4,r2
    3d7c:	180b883a 	mov	r5,r3
    3d80:	1021883a 	mov	r16,r2
    3d84:	1823883a 	mov	r17,r3
    3d88:	0009f840 	call	9f84 <__fixdfsi>
    3d8c:	000d883a 	mov	r6,zero
    3d90:	000f883a 	mov	r7,zero
    3d94:	8009883a 	mov	r4,r16
    3d98:	880b883a 	mov	r5,r17
    3d9c:	d8800d15 	stw	r2,52(sp)
    3da0:	0009e040 	call	9e04 <__ltdf2>
    3da4:	10031716 	blt	r2,zero,4a04 <_dtoa_r+0xe8c>
    3da8:	d8c00d17 	ldw	r3,52(sp)
    3dac:	00800584 	movi	r2,22
    3db0:	10c1482e 	bgeu	r2,r3,42d4 <_dtoa_r+0x75c>
    3db4:	01000044 	movi	r4,1
    3db8:	d9000c15 	stw	r4,48(sp)
    3dbc:	bd85c83a 	sub	r2,r23,r22
    3dc0:	11bfffc4 	addi	r6,r2,-1
    3dc4:	30030b16 	blt	r6,zero,49f4 <_dtoa_r+0xe7c>
    3dc8:	d9800a15 	stw	r6,40(sp)
    3dcc:	d8001115 	stw	zero,68(sp)
    3dd0:	d8c00d17 	ldw	r3,52(sp)
    3dd4:	1802ff16 	blt	r3,zero,49d4 <_dtoa_r+0xe5c>
    3dd8:	d9000a17 	ldw	r4,40(sp)
    3ddc:	d8c00915 	stw	r3,36(sp)
    3de0:	d8001015 	stw	zero,64(sp)
    3de4:	20c9883a 	add	r4,r4,r3
    3de8:	d9000a15 	stw	r4,40(sp)
    3dec:	d9001717 	ldw	r4,92(sp)
    3df0:	00800244 	movi	r2,9
    3df4:	11004636 	bltu	r2,r4,3f10 <_dtoa_r+0x398>
    3df8:	00800144 	movi	r2,5
    3dfc:	11020416 	blt	r2,r4,4610 <_dtoa_r+0xa98>
    3e00:	04400044 	movi	r17,1
    3e04:	d8c01717 	ldw	r3,92(sp)
    3e08:	00800144 	movi	r2,5
    3e0c:	10c1ed36 	bltu	r2,r3,45c4 <_dtoa_r+0xa4c>
    3e10:	18c5883a 	add	r2,r3,r3
    3e14:	1085883a 	add	r2,r2,r2
    3e18:	00c00034 	movhi	r3,0
    3e1c:	18cf8b04 	addi	r3,r3,15916
    3e20:	10c5883a 	add	r2,r2,r3
    3e24:	11000017 	ldw	r4,0(r2)
    3e28:	2000683a 	jmp	r4
    3e2c:	00003f18 	cmpnei	zero,zero,252
    3e30:	00003f18 	cmpnei	zero,zero,252
    3e34:	00004918 	cmpnei	zero,zero,292
    3e38:	000048f0 	cmpltui	zero,zero,291
    3e3c:	00004934 	movhi	zero,292
    3e40:	00004940 	call	494 <create_test_data+0x294>
    3e44:	d9002717 	ldw	r4,156(sp)
    3e48:	0089c3c4 	movi	r2,9999
    3e4c:	20800015 	stw	r2,0(r4)
    3e50:	a0001026 	beq	r20,zero,3e94 <_dtoa_r+0x31c>
    3e54:	00c00074 	movhi	r3,1
    3e58:	18fc6704 	addi	r3,r3,-3684
    3e5c:	d9802917 	ldw	r6,164(sp)
    3e60:	303f7926 	beq	r6,zero,3c48 <_dtoa_r+0xd0>
    3e64:	188000c7 	ldb	r2,3(r3)
    3e68:	190000c4 	addi	r4,r3,3
    3e6c:	1000101e 	bne	r2,zero,3eb0 <_dtoa_r+0x338>
    3e70:	d8802917 	ldw	r2,164(sp)
    3e74:	11000015 	stw	r4,0(r2)
    3e78:	003f7306 	br	3c48 <_dtoa_r+0xd0>
    3e7c:	00a00034 	movhi	r2,32768
    3e80:	10bfffc4 	addi	r2,r2,-1
    3e84:	00c00044 	movi	r3,1
    3e88:	88aa703a 	and	r21,r17,r2
    3e8c:	90c00015 	stw	r3,0(r18)
    3e90:	003f5806 	br	3bf4 <_dtoa_r+0x7c>
    3e94:	00800434 	movhi	r2,16
    3e98:	10bfffc4 	addi	r2,r2,-1
    3e9c:	a884703a 	and	r2,r21,r2
    3ea0:	103fec1e 	bne	r2,zero,3e54 <_dtoa_r+0x2dc>
    3ea4:	00c00074 	movhi	r3,1
    3ea8:	18fc6404 	addi	r3,r3,-3696
    3eac:	003feb06 	br	3e5c <_dtoa_r+0x2e4>
    3eb0:	d8802917 	ldw	r2,164(sp)
    3eb4:	19000204 	addi	r4,r3,8
    3eb8:	11000015 	stw	r4,0(r2)
    3ebc:	003f6206 	br	3c48 <_dtoa_r+0xd0>
    3ec0:	ddc00117 	ldw	r23,4(sp)
    3ec4:	d8800217 	ldw	r2,8(sp)
    3ec8:	01000804 	movi	r4,32
    3ecc:	b8c10c84 	addi	r3,r23,1074
    3ed0:	18a3883a 	add	r17,r3,r2
    3ed4:	2441b80e 	bge	r4,r17,45b8 <_dtoa_r+0xa40>
    3ed8:	00c01004 	movi	r3,64
    3edc:	1c47c83a 	sub	r3,r3,r17
    3ee0:	88bff804 	addi	r2,r17,-32
    3ee4:	a8c6983a 	sll	r3,r21,r3
    3ee8:	a084d83a 	srl	r2,r20,r2
    3eec:	1888b03a 	or	r4,r3,r2
    3ef0:	000a05c0 	call	a05c <__floatunsidf>
    3ef4:	1011883a 	mov	r8,r2
    3ef8:	00bf8434 	movhi	r2,65040
    3efc:	01000044 	movi	r4,1
    3f00:	10d3883a 	add	r9,r2,r3
    3f04:	8dbef344 	addi	r22,r17,-1075
    3f08:	d9000815 	stw	r4,32(sp)
    3f0c:	003f6f06 	br	3ccc <_dtoa_r+0x154>
    3f10:	d8001715 	stw	zero,92(sp)
    3f14:	04400044 	movi	r17,1
    3f18:	00bfffc4 	movi	r2,-1
    3f1c:	00c00044 	movi	r3,1
    3f20:	d8800e15 	stw	r2,56(sp)
    3f24:	d8002615 	stw	zero,152(sp)
    3f28:	d8800f15 	stw	r2,60(sp)
    3f2c:	d8c00b15 	stw	r3,44(sp)
    3f30:	1021883a 	mov	r16,r2
    3f34:	d8801617 	ldw	r2,88(sp)
    3f38:	10001115 	stw	zero,68(r2)
    3f3c:	d8801617 	ldw	r2,88(sp)
    3f40:	11401117 	ldw	r5,68(r2)
    3f44:	1009883a 	mov	r4,r2
    3f48:	0006b4c0 	call	6b4c <_Balloc>
    3f4c:	d8c01617 	ldw	r3,88(sp)
    3f50:	d8800515 	stw	r2,20(sp)
    3f54:	18801015 	stw	r2,64(r3)
    3f58:	00800384 	movi	r2,14
    3f5c:	14006836 	bltu	r2,r16,4100 <_dtoa_r+0x588>
    3f60:	8805003a 	cmpeq	r2,r17,zero
    3f64:	1000661e 	bne	r2,zero,4100 <_dtoa_r+0x588>
    3f68:	d9000d17 	ldw	r4,52(sp)
    3f6c:	0102300e 	bge	zero,r4,4830 <_dtoa_r+0xcb8>
    3f70:	208003cc 	andi	r2,r4,15
    3f74:	100490fa 	slli	r2,r2,3
    3f78:	2025d13a 	srai	r18,r4,4
    3f7c:	00c00074 	movhi	r3,1
    3f80:	18fc7804 	addi	r3,r3,-3616
    3f84:	10c5883a 	add	r2,r2,r3
    3f88:	90c0040c 	andi	r3,r18,16
    3f8c:	14000017 	ldw	r16,0(r2)
    3f90:	14400117 	ldw	r17,4(r2)
    3f94:	18036a1e 	bne	r3,zero,4d40 <_dtoa_r+0x11c8>
    3f98:	05800084 	movi	r22,2
    3f9c:	90001026 	beq	r18,zero,3fe0 <_dtoa_r+0x468>
    3fa0:	04c00074 	movhi	r19,1
    3fa4:	9cfcaa04 	addi	r19,r19,-3416
    3fa8:	9080004c 	andi	r2,r18,1
    3fac:	1005003a 	cmpeq	r2,r2,zero
    3fb0:	1000081e 	bne	r2,zero,3fd4 <_dtoa_r+0x45c>
    3fb4:	99800017 	ldw	r6,0(r19)
    3fb8:	99c00117 	ldw	r7,4(r19)
    3fbc:	880b883a 	mov	r5,r17
    3fc0:	8009883a 	mov	r4,r16
    3fc4:	00095c80 	call	95c8 <__muldf3>
    3fc8:	1021883a 	mov	r16,r2
    3fcc:	b5800044 	addi	r22,r22,1
    3fd0:	1823883a 	mov	r17,r3
    3fd4:	9025d07a 	srai	r18,r18,1
    3fd8:	9cc00204 	addi	r19,r19,8
    3fdc:	903ff21e 	bne	r18,zero,3fa8 <_dtoa_r+0x430>
    3fe0:	a80b883a 	mov	r5,r21
    3fe4:	a009883a 	mov	r4,r20
    3fe8:	880f883a 	mov	r7,r17
    3fec:	800d883a 	mov	r6,r16
    3ff0:	000998c0 	call	998c <__divdf3>
    3ff4:	1029883a 	mov	r20,r2
    3ff8:	182b883a 	mov	r21,r3
    3ffc:	d8c00c17 	ldw	r3,48(sp)
    4000:	1805003a 	cmpeq	r2,r3,zero
    4004:	1000081e 	bne	r2,zero,4028 <_dtoa_r+0x4b0>
    4008:	0005883a 	mov	r2,zero
    400c:	00cffc34 	movhi	r3,16368
    4010:	180f883a 	mov	r7,r3
    4014:	a009883a 	mov	r4,r20
    4018:	a80b883a 	mov	r5,r21
    401c:	100d883a 	mov	r6,r2
    4020:	0009e040 	call	9e04 <__ltdf2>
    4024:	1003fe16 	blt	r2,zero,5020 <_dtoa_r+0x14a8>
    4028:	b009883a 	mov	r4,r22
    402c:	0009e8c0 	call	9e8c <__floatsidf>
    4030:	180b883a 	mov	r5,r3
    4034:	1009883a 	mov	r4,r2
    4038:	a00d883a 	mov	r6,r20
    403c:	a80f883a 	mov	r7,r21
    4040:	00095c80 	call	95c8 <__muldf3>
    4044:	0011883a 	mov	r8,zero
    4048:	02500734 	movhi	r9,16412
    404c:	1009883a 	mov	r4,r2
    4050:	180b883a 	mov	r5,r3
    4054:	480f883a 	mov	r7,r9
    4058:	400d883a 	mov	r6,r8
    405c:	00095540 	call	9554 <__adddf3>
    4060:	d9000f17 	ldw	r4,60(sp)
    4064:	102d883a 	mov	r22,r2
    4068:	00bf3034 	movhi	r2,64704
    406c:	18b9883a 	add	fp,r3,r2
    4070:	e02f883a 	mov	r23,fp
    4074:	20028f1e 	bne	r4,zero,4ab4 <_dtoa_r+0xf3c>
    4078:	0005883a 	mov	r2,zero
    407c:	00d00534 	movhi	r3,16404
    4080:	a009883a 	mov	r4,r20
    4084:	a80b883a 	mov	r5,r21
    4088:	180f883a 	mov	r7,r3
    408c:	100d883a 	mov	r6,r2
    4090:	00094d40 	call	94d4 <__subdf3>
    4094:	1009883a 	mov	r4,r2
    4098:	e00f883a 	mov	r7,fp
    409c:	180b883a 	mov	r5,r3
    40a0:	b00d883a 	mov	r6,r22
    40a4:	1025883a 	mov	r18,r2
    40a8:	1827883a 	mov	r19,r3
    40ac:	0009cf40 	call	9cf4 <__gtdf2>
    40b0:	00834f16 	blt	zero,r2,4df0 <_dtoa_r+0x1278>
    40b4:	e0e0003c 	xorhi	r3,fp,32768
    40b8:	9009883a 	mov	r4,r18
    40bc:	980b883a 	mov	r5,r19
    40c0:	180f883a 	mov	r7,r3
    40c4:	b00d883a 	mov	r6,r22
    40c8:	0009e040 	call	9e04 <__ltdf2>
    40cc:	1000080e 	bge	r2,zero,40f0 <_dtoa_r+0x578>
    40d0:	0027883a 	mov	r19,zero
    40d4:	0025883a 	mov	r18,zero
    40d8:	d8802617 	ldw	r2,152(sp)
    40dc:	df000517 	ldw	fp,20(sp)
    40e0:	d8000615 	stw	zero,24(sp)
    40e4:	0084303a 	nor	r2,zero,r2
    40e8:	d8800d15 	stw	r2,52(sp)
    40ec:	00019b06 	br	475c <_dtoa_r+0xbe4>
    40f0:	d9801217 	ldw	r6,72(sp)
    40f4:	d8801317 	ldw	r2,76(sp)
    40f8:	3029883a 	mov	r20,r6
    40fc:	102b883a 	mov	r21,r2
    4100:	d8c00217 	ldw	r3,8(sp)
    4104:	18008516 	blt	r3,zero,431c <_dtoa_r+0x7a4>
    4108:	d9000d17 	ldw	r4,52(sp)
    410c:	00800384 	movi	r2,14
    4110:	11008216 	blt	r2,r4,431c <_dtoa_r+0x7a4>
    4114:	200490fa 	slli	r2,r4,3
    4118:	d9802617 	ldw	r6,152(sp)
    411c:	00c00074 	movhi	r3,1
    4120:	18fc7804 	addi	r3,r3,-3616
    4124:	10c5883a 	add	r2,r2,r3
    4128:	14800017 	ldw	r18,0(r2)
    412c:	14c00117 	ldw	r19,4(r2)
    4130:	30031e16 	blt	r6,zero,4dac <_dtoa_r+0x1234>
    4134:	d9000517 	ldw	r4,20(sp)
    4138:	d8c00f17 	ldw	r3,60(sp)
    413c:	a823883a 	mov	r17,r21
    4140:	a021883a 	mov	r16,r20
    4144:	192b883a 	add	r21,r3,r4
    4148:	2039883a 	mov	fp,r4
    414c:	00000f06 	br	418c <_dtoa_r+0x614>
    4150:	0005883a 	mov	r2,zero
    4154:	00d00934 	movhi	r3,16420
    4158:	5009883a 	mov	r4,r10
    415c:	580b883a 	mov	r5,r11
    4160:	180f883a 	mov	r7,r3
    4164:	100d883a 	mov	r6,r2
    4168:	00095c80 	call	95c8 <__muldf3>
    416c:	180b883a 	mov	r5,r3
    4170:	000d883a 	mov	r6,zero
    4174:	000f883a 	mov	r7,zero
    4178:	1009883a 	mov	r4,r2
    417c:	1021883a 	mov	r16,r2
    4180:	1823883a 	mov	r17,r3
    4184:	0009c6c0 	call	9c6c <__nedf2>
    4188:	10004526 	beq	r2,zero,42a0 <_dtoa_r+0x728>
    418c:	900d883a 	mov	r6,r18
    4190:	980f883a 	mov	r7,r19
    4194:	8009883a 	mov	r4,r16
    4198:	880b883a 	mov	r5,r17
    419c:	000998c0 	call	998c <__divdf3>
    41a0:	180b883a 	mov	r5,r3
    41a4:	1009883a 	mov	r4,r2
    41a8:	0009f840 	call	9f84 <__fixdfsi>
    41ac:	1009883a 	mov	r4,r2
    41b0:	1029883a 	mov	r20,r2
    41b4:	0009e8c0 	call	9e8c <__floatsidf>
    41b8:	180f883a 	mov	r7,r3
    41bc:	9009883a 	mov	r4,r18
    41c0:	980b883a 	mov	r5,r19
    41c4:	100d883a 	mov	r6,r2
    41c8:	00095c80 	call	95c8 <__muldf3>
    41cc:	180f883a 	mov	r7,r3
    41d0:	880b883a 	mov	r5,r17
    41d4:	8009883a 	mov	r4,r16
    41d8:	100d883a 	mov	r6,r2
    41dc:	00094d40 	call	94d4 <__subdf3>
    41e0:	1015883a 	mov	r10,r2
    41e4:	a0800c04 	addi	r2,r20,48
    41e8:	e0800005 	stb	r2,0(fp)
    41ec:	e7000044 	addi	fp,fp,1
    41f0:	1817883a 	mov	r11,r3
    41f4:	e57fd61e 	bne	fp,r21,4150 <_dtoa_r+0x5d8>
    41f8:	500d883a 	mov	r6,r10
    41fc:	180f883a 	mov	r7,r3
    4200:	5009883a 	mov	r4,r10
    4204:	180b883a 	mov	r5,r3
    4208:	00095540 	call	9554 <__adddf3>
    420c:	100d883a 	mov	r6,r2
    4210:	9009883a 	mov	r4,r18
    4214:	980b883a 	mov	r5,r19
    4218:	180f883a 	mov	r7,r3
    421c:	1021883a 	mov	r16,r2
    4220:	1823883a 	mov	r17,r3
    4224:	0009e040 	call	9e04 <__ltdf2>
    4228:	10000816 	blt	r2,zero,424c <_dtoa_r+0x6d4>
    422c:	980b883a 	mov	r5,r19
    4230:	800d883a 	mov	r6,r16
    4234:	880f883a 	mov	r7,r17
    4238:	9009883a 	mov	r4,r18
    423c:	0009be40 	call	9be4 <__eqdf2>
    4240:	1000171e 	bne	r2,zero,42a0 <_dtoa_r+0x728>
    4244:	a080004c 	andi	r2,r20,1
    4248:	10001526 	beq	r2,zero,42a0 <_dtoa_r+0x728>
    424c:	d8800d17 	ldw	r2,52(sp)
    4250:	d8800415 	stw	r2,16(sp)
    4254:	e009883a 	mov	r4,fp
    4258:	213fffc4 	addi	r4,r4,-1
    425c:	20c00007 	ldb	r3,0(r4)
    4260:	00800e44 	movi	r2,57
    4264:	1880081e 	bne	r3,r2,4288 <_dtoa_r+0x710>
    4268:	d8800517 	ldw	r2,20(sp)
    426c:	113ffa1e 	bne	r2,r4,4258 <_dtoa_r+0x6e0>
    4270:	d8c00417 	ldw	r3,16(sp)
    4274:	d9800517 	ldw	r6,20(sp)
    4278:	00800c04 	movi	r2,48
    427c:	18c00044 	addi	r3,r3,1
    4280:	d8c00415 	stw	r3,16(sp)
    4284:	30800005 	stb	r2,0(r6)
    4288:	20800003 	ldbu	r2,0(r4)
    428c:	d8c00417 	ldw	r3,16(sp)
    4290:	27000044 	addi	fp,r4,1
    4294:	10800044 	addi	r2,r2,1
    4298:	d8c00d15 	stw	r3,52(sp)
    429c:	20800005 	stb	r2,0(r4)
    42a0:	d9001617 	ldw	r4,88(sp)
    42a4:	d9400717 	ldw	r5,28(sp)
    42a8:	00065cc0 	call	65cc <_Bfree>
    42ac:	e0000005 	stb	zero,0(fp)
    42b0:	d9800d17 	ldw	r6,52(sp)
    42b4:	d8c02717 	ldw	r3,156(sp)
    42b8:	d9002917 	ldw	r4,164(sp)
    42bc:	30800044 	addi	r2,r6,1
    42c0:	18800015 	stw	r2,0(r3)
    42c4:	20029c26 	beq	r4,zero,4d38 <_dtoa_r+0x11c0>
    42c8:	d8c00517 	ldw	r3,20(sp)
    42cc:	27000015 	stw	fp,0(r4)
    42d0:	003e5d06 	br	3c48 <_dtoa_r+0xd0>
    42d4:	d9800d17 	ldw	r6,52(sp)
    42d8:	00c00074 	movhi	r3,1
    42dc:	18fc7804 	addi	r3,r3,-3616
    42e0:	d9001217 	ldw	r4,72(sp)
    42e4:	300490fa 	slli	r2,r6,3
    42e8:	d9401317 	ldw	r5,76(sp)
    42ec:	10c5883a 	add	r2,r2,r3
    42f0:	12000017 	ldw	r8,0(r2)
    42f4:	12400117 	ldw	r9,4(r2)
    42f8:	400d883a 	mov	r6,r8
    42fc:	480f883a 	mov	r7,r9
    4300:	0009e040 	call	9e04 <__ltdf2>
    4304:	1000030e 	bge	r2,zero,4314 <_dtoa_r+0x79c>
    4308:	d8800d17 	ldw	r2,52(sp)
    430c:	10bfffc4 	addi	r2,r2,-1
    4310:	d8800d15 	stw	r2,52(sp)
    4314:	d8000c15 	stw	zero,48(sp)
    4318:	003ea806 	br	3dbc <_dtoa_r+0x244>
    431c:	d9000b17 	ldw	r4,44(sp)
    4320:	202cc03a 	cmpne	r22,r4,zero
    4324:	b000c71e 	bne	r22,zero,4644 <_dtoa_r+0xacc>
    4328:	dc001117 	ldw	r16,68(sp)
    432c:	dc801017 	ldw	r18,64(sp)
    4330:	0027883a 	mov	r19,zero
    4334:	04000b0e 	bge	zero,r16,4364 <_dtoa_r+0x7ec>
    4338:	d8c00a17 	ldw	r3,40(sp)
    433c:	00c0090e 	bge	zero,r3,4364 <_dtoa_r+0x7ec>
    4340:	8005883a 	mov	r2,r16
    4344:	1c011316 	blt	r3,r16,4794 <_dtoa_r+0xc1c>
    4348:	d9000a17 	ldw	r4,40(sp)
    434c:	d9801117 	ldw	r6,68(sp)
    4350:	80a1c83a 	sub	r16,r16,r2
    4354:	2089c83a 	sub	r4,r4,r2
    4358:	308dc83a 	sub	r6,r6,r2
    435c:	d9000a15 	stw	r4,40(sp)
    4360:	d9801115 	stw	r6,68(sp)
    4364:	d8801017 	ldw	r2,64(sp)
    4368:	0080150e 	bge	zero,r2,43c0 <_dtoa_r+0x848>
    436c:	d8c00b17 	ldw	r3,44(sp)
    4370:	1805003a 	cmpeq	r2,r3,zero
    4374:	1001c91e 	bne	r2,zero,4a9c <_dtoa_r+0xf24>
    4378:	04800e0e 	bge	zero,r18,43b4 <_dtoa_r+0x83c>
    437c:	d9001617 	ldw	r4,88(sp)
    4380:	980b883a 	mov	r5,r19
    4384:	900d883a 	mov	r6,r18
    4388:	00073800 	call	7380 <__pow5mult>
    438c:	d9001617 	ldw	r4,88(sp)
    4390:	d9800717 	ldw	r6,28(sp)
    4394:	100b883a 	mov	r5,r2
    4398:	1027883a 	mov	r19,r2
    439c:	000705c0 	call	705c <__multiply>
    43a0:	d9001617 	ldw	r4,88(sp)
    43a4:	d9400717 	ldw	r5,28(sp)
    43a8:	1023883a 	mov	r17,r2
    43ac:	00065cc0 	call	65cc <_Bfree>
    43b0:	dc400715 	stw	r17,28(sp)
    43b4:	d9001017 	ldw	r4,64(sp)
    43b8:	248dc83a 	sub	r6,r4,r18
    43bc:	30010e1e 	bne	r6,zero,47f8 <_dtoa_r+0xc80>
    43c0:	d9001617 	ldw	r4,88(sp)
    43c4:	04400044 	movi	r17,1
    43c8:	880b883a 	mov	r5,r17
    43cc:	00072440 	call	7244 <__i2b>
    43d0:	d9800917 	ldw	r6,36(sp)
    43d4:	1025883a 	mov	r18,r2
    43d8:	0180040e 	bge	zero,r6,43ec <_dtoa_r+0x874>
    43dc:	d9001617 	ldw	r4,88(sp)
    43e0:	100b883a 	mov	r5,r2
    43e4:	00073800 	call	7380 <__pow5mult>
    43e8:	1025883a 	mov	r18,r2
    43ec:	d8801717 	ldw	r2,92(sp)
    43f0:	8880f30e 	bge	r17,r2,47c0 <_dtoa_r+0xc48>
    43f4:	0023883a 	mov	r17,zero
    43f8:	d9800917 	ldw	r6,36(sp)
    43fc:	30019e1e 	bne	r6,zero,4a78 <_dtoa_r+0xf00>
    4400:	00c00044 	movi	r3,1
    4404:	d9000a17 	ldw	r4,40(sp)
    4408:	20c5883a 	add	r2,r4,r3
    440c:	10c007cc 	andi	r3,r2,31
    4410:	1800841e 	bne	r3,zero,4624 <_dtoa_r+0xaac>
    4414:	00800704 	movi	r2,28
    4418:	d9000a17 	ldw	r4,40(sp)
    441c:	d9801117 	ldw	r6,68(sp)
    4420:	80a1883a 	add	r16,r16,r2
    4424:	2089883a 	add	r4,r4,r2
    4428:	308d883a 	add	r6,r6,r2
    442c:	d9000a15 	stw	r4,40(sp)
    4430:	d9801115 	stw	r6,68(sp)
    4434:	d8801117 	ldw	r2,68(sp)
    4438:	0080050e 	bge	zero,r2,4450 <_dtoa_r+0x8d8>
    443c:	d9400717 	ldw	r5,28(sp)
    4440:	d9001617 	ldw	r4,88(sp)
    4444:	100d883a 	mov	r6,r2
    4448:	0006f100 	call	6f10 <__lshift>
    444c:	d8800715 	stw	r2,28(sp)
    4450:	d8c00a17 	ldw	r3,40(sp)
    4454:	00c0050e 	bge	zero,r3,446c <_dtoa_r+0x8f4>
    4458:	d9001617 	ldw	r4,88(sp)
    445c:	900b883a 	mov	r5,r18
    4460:	180d883a 	mov	r6,r3
    4464:	0006f100 	call	6f10 <__lshift>
    4468:	1025883a 	mov	r18,r2
    446c:	d9000c17 	ldw	r4,48(sp)
    4470:	2005003a 	cmpeq	r2,r4,zero
    4474:	10016f26 	beq	r2,zero,4a34 <_dtoa_r+0xebc>
    4478:	d9000f17 	ldw	r4,60(sp)
    447c:	0102170e 	bge	zero,r4,4cdc <_dtoa_r+0x1164>
    4480:	d9800b17 	ldw	r6,44(sp)
    4484:	3005003a 	cmpeq	r2,r6,zero
    4488:	1000881e 	bne	r2,zero,46ac <_dtoa_r+0xb34>
    448c:	0400050e 	bge	zero,r16,44a4 <_dtoa_r+0x92c>
    4490:	d9001617 	ldw	r4,88(sp)
    4494:	980b883a 	mov	r5,r19
    4498:	800d883a 	mov	r6,r16
    449c:	0006f100 	call	6f10 <__lshift>
    44a0:	1027883a 	mov	r19,r2
    44a4:	8804c03a 	cmpne	r2,r17,zero
    44a8:	1002541e 	bne	r2,zero,4dfc <_dtoa_r+0x1284>
    44ac:	980b883a 	mov	r5,r19
    44b0:	dd800517 	ldw	r22,20(sp)
    44b4:	dcc00615 	stw	r19,24(sp)
    44b8:	a700004c 	andi	fp,r20,1
    44bc:	2827883a 	mov	r19,r5
    44c0:	d9000717 	ldw	r4,28(sp)
    44c4:	900b883a 	mov	r5,r18
    44c8:	00039600 	call	3960 <quorem>
    44cc:	d9000717 	ldw	r4,28(sp)
    44d0:	d9400617 	ldw	r5,24(sp)
    44d4:	1023883a 	mov	r17,r2
    44d8:	8dc00c04 	addi	r23,r17,48
    44dc:	00067280 	call	6728 <__mcmp>
    44e0:	d9001617 	ldw	r4,88(sp)
    44e4:	900b883a 	mov	r5,r18
    44e8:	980d883a 	mov	r6,r19
    44ec:	1029883a 	mov	r20,r2
    44f0:	0006d840 	call	6d84 <__mdiff>
    44f4:	102b883a 	mov	r21,r2
    44f8:	10800317 	ldw	r2,12(r2)
    44fc:	1001281e 	bne	r2,zero,49a0 <_dtoa_r+0xe28>
    4500:	d9000717 	ldw	r4,28(sp)
    4504:	a80b883a 	mov	r5,r21
    4508:	00067280 	call	6728 <__mcmp>
    450c:	d9001617 	ldw	r4,88(sp)
    4510:	1021883a 	mov	r16,r2
    4514:	a80b883a 	mov	r5,r21
    4518:	00065cc0 	call	65cc <_Bfree>
    451c:	8000041e 	bne	r16,zero,4530 <_dtoa_r+0x9b8>
    4520:	d8801717 	ldw	r2,92(sp)
    4524:	1000021e 	bne	r2,zero,4530 <_dtoa_r+0x9b8>
    4528:	e004c03a 	cmpne	r2,fp,zero
    452c:	10011726 	beq	r2,zero,498c <_dtoa_r+0xe14>
    4530:	a0010616 	blt	r20,zero,494c <_dtoa_r+0xdd4>
    4534:	a000041e 	bne	r20,zero,4548 <_dtoa_r+0x9d0>
    4538:	d8c01717 	ldw	r3,92(sp)
    453c:	1800021e 	bne	r3,zero,4548 <_dtoa_r+0x9d0>
    4540:	e004c03a 	cmpne	r2,fp,zero
    4544:	10010126 	beq	r2,zero,494c <_dtoa_r+0xdd4>
    4548:	04023d16 	blt	zero,r16,4e40 <_dtoa_r+0x12c8>
    454c:	b5c00005 	stb	r23,0(r22)
    4550:	d9800517 	ldw	r6,20(sp)
    4554:	d9000f17 	ldw	r4,60(sp)
    4558:	b5800044 	addi	r22,r22,1
    455c:	3105883a 	add	r2,r6,r4
    4560:	b0806526 	beq	r22,r2,46f8 <_dtoa_r+0xb80>
    4564:	d9400717 	ldw	r5,28(sp)
    4568:	d9001617 	ldw	r4,88(sp)
    456c:	01800284 	movi	r6,10
    4570:	000f883a 	mov	r7,zero
    4574:	00072800 	call	7280 <__multadd>
    4578:	d8800715 	stw	r2,28(sp)
    457c:	d8800617 	ldw	r2,24(sp)
    4580:	14c10c26 	beq	r2,r19,49b4 <_dtoa_r+0xe3c>
    4584:	d9400617 	ldw	r5,24(sp)
    4588:	d9001617 	ldw	r4,88(sp)
    458c:	01800284 	movi	r6,10
    4590:	000f883a 	mov	r7,zero
    4594:	00072800 	call	7280 <__multadd>
    4598:	d9001617 	ldw	r4,88(sp)
    459c:	980b883a 	mov	r5,r19
    45a0:	01800284 	movi	r6,10
    45a4:	000f883a 	mov	r7,zero
    45a8:	d8800615 	stw	r2,24(sp)
    45ac:	00072800 	call	7280 <__multadd>
    45b0:	1027883a 	mov	r19,r2
    45b4:	003fc206 	br	44c0 <_dtoa_r+0x948>
    45b8:	2445c83a 	sub	r2,r4,r17
    45bc:	a088983a 	sll	r4,r20,r2
    45c0:	003e4b06 	br	3ef0 <_dtoa_r+0x378>
    45c4:	01bfffc4 	movi	r6,-1
    45c8:	00800044 	movi	r2,1
    45cc:	d9800e15 	stw	r6,56(sp)
    45d0:	d9800f15 	stw	r6,60(sp)
    45d4:	d8800b15 	stw	r2,44(sp)
    45d8:	d8c01617 	ldw	r3,88(sp)
    45dc:	008005c4 	movi	r2,23
    45e0:	18001115 	stw	zero,68(r3)
    45e4:	1580082e 	bgeu	r2,r22,4608 <_dtoa_r+0xa90>
    45e8:	00c00104 	movi	r3,4
    45ec:	0009883a 	mov	r4,zero
    45f0:	18c7883a 	add	r3,r3,r3
    45f4:	18800504 	addi	r2,r3,20
    45f8:	21000044 	addi	r4,r4,1
    45fc:	b0bffc2e 	bgeu	r22,r2,45f0 <_dtoa_r+0xa78>
    4600:	d9801617 	ldw	r6,88(sp)
    4604:	31001115 	stw	r4,68(r6)
    4608:	dc000f17 	ldw	r16,60(sp)
    460c:	003e4b06 	br	3f3c <_dtoa_r+0x3c4>
    4610:	d9801717 	ldw	r6,92(sp)
    4614:	0023883a 	mov	r17,zero
    4618:	31bfff04 	addi	r6,r6,-4
    461c:	d9801715 	stw	r6,92(sp)
    4620:	003df806 	br	3e04 <_dtoa_r+0x28c>
    4624:	00800804 	movi	r2,32
    4628:	10c9c83a 	sub	r4,r2,r3
    462c:	00c00104 	movi	r3,4
    4630:	19005a16 	blt	r3,r4,479c <_dtoa_r+0xc24>
    4634:	008000c4 	movi	r2,3
    4638:	113f7e16 	blt	r2,r4,4434 <_dtoa_r+0x8bc>
    463c:	20800704 	addi	r2,r4,28
    4640:	003f7506 	br	4418 <_dtoa_r+0x8a0>
    4644:	d9801717 	ldw	r6,92(sp)
    4648:	00800044 	movi	r2,1
    464c:	1180a10e 	bge	r2,r6,48d4 <_dtoa_r+0xd5c>
    4650:	d9800f17 	ldw	r6,60(sp)
    4654:	d8c01017 	ldw	r3,64(sp)
    4658:	30bfffc4 	addi	r2,r6,-1
    465c:	1881c616 	blt	r3,r2,4d78 <_dtoa_r+0x1200>
    4660:	18a5c83a 	sub	r18,r3,r2
    4664:	d8800f17 	ldw	r2,60(sp)
    4668:	10026216 	blt	r2,zero,4ff4 <_dtoa_r+0x147c>
    466c:	dc001117 	ldw	r16,68(sp)
    4670:	1007883a 	mov	r3,r2
    4674:	d9800a17 	ldw	r6,40(sp)
    4678:	d8801117 	ldw	r2,68(sp)
    467c:	d9001617 	ldw	r4,88(sp)
    4680:	30cd883a 	add	r6,r6,r3
    4684:	10c5883a 	add	r2,r2,r3
    4688:	01400044 	movi	r5,1
    468c:	d9800a15 	stw	r6,40(sp)
    4690:	d8801115 	stw	r2,68(sp)
    4694:	00072440 	call	7244 <__i2b>
    4698:	1027883a 	mov	r19,r2
    469c:	003f2506 	br	4334 <_dtoa_r+0x7bc>
    46a0:	00c00074 	movhi	r3,1
    46a4:	18fc5b04 	addi	r3,r3,-3732
    46a8:	003d6706 	br	3c48 <_dtoa_r+0xd0>
    46ac:	dd800517 	ldw	r22,20(sp)
    46b0:	04000044 	movi	r16,1
    46b4:	00000706 	br	46d4 <_dtoa_r+0xb5c>
    46b8:	d9400717 	ldw	r5,28(sp)
    46bc:	d9001617 	ldw	r4,88(sp)
    46c0:	01800284 	movi	r6,10
    46c4:	000f883a 	mov	r7,zero
    46c8:	00072800 	call	7280 <__multadd>
    46cc:	d8800715 	stw	r2,28(sp)
    46d0:	84000044 	addi	r16,r16,1
    46d4:	d9000717 	ldw	r4,28(sp)
    46d8:	900b883a 	mov	r5,r18
    46dc:	00039600 	call	3960 <quorem>
    46e0:	15c00c04 	addi	r23,r2,48
    46e4:	b5c00005 	stb	r23,0(r22)
    46e8:	d8c00f17 	ldw	r3,60(sp)
    46ec:	b5800044 	addi	r22,r22,1
    46f0:	80fff116 	blt	r16,r3,46b8 <_dtoa_r+0xb40>
    46f4:	d8000615 	stw	zero,24(sp)
    46f8:	d9400717 	ldw	r5,28(sp)
    46fc:	d9001617 	ldw	r4,88(sp)
    4700:	01800044 	movi	r6,1
    4704:	0006f100 	call	6f10 <__lshift>
    4708:	1009883a 	mov	r4,r2
    470c:	900b883a 	mov	r5,r18
    4710:	d8800715 	stw	r2,28(sp)
    4714:	00067280 	call	6728 <__mcmp>
    4718:	00803c0e 	bge	zero,r2,480c <_dtoa_r+0xc94>
    471c:	b009883a 	mov	r4,r22
    4720:	213fffc4 	addi	r4,r4,-1
    4724:	21400003 	ldbu	r5,0(r4)
    4728:	00800e44 	movi	r2,57
    472c:	28c03fcc 	andi	r3,r5,255
    4730:	18c0201c 	xori	r3,r3,128
    4734:	18ffe004 	addi	r3,r3,-128
    4738:	1881981e 	bne	r3,r2,4d9c <_dtoa_r+0x1224>
    473c:	d9800517 	ldw	r6,20(sp)
    4740:	21bff71e 	bne	r4,r6,4720 <_dtoa_r+0xba8>
    4744:	d8800d17 	ldw	r2,52(sp)
    4748:	37000044 	addi	fp,r6,1
    474c:	10800044 	addi	r2,r2,1
    4750:	d8800d15 	stw	r2,52(sp)
    4754:	00800c44 	movi	r2,49
    4758:	30800005 	stb	r2,0(r6)
    475c:	d9001617 	ldw	r4,88(sp)
    4760:	900b883a 	mov	r5,r18
    4764:	00065cc0 	call	65cc <_Bfree>
    4768:	983ecd26 	beq	r19,zero,42a0 <_dtoa_r+0x728>
    476c:	d8c00617 	ldw	r3,24(sp)
    4770:	18000426 	beq	r3,zero,4784 <_dtoa_r+0xc0c>
    4774:	1cc00326 	beq	r3,r19,4784 <_dtoa_r+0xc0c>
    4778:	d9001617 	ldw	r4,88(sp)
    477c:	180b883a 	mov	r5,r3
    4780:	00065cc0 	call	65cc <_Bfree>
    4784:	d9001617 	ldw	r4,88(sp)
    4788:	980b883a 	mov	r5,r19
    478c:	00065cc0 	call	65cc <_Bfree>
    4790:	003ec306 	br	42a0 <_dtoa_r+0x728>
    4794:	1805883a 	mov	r2,r3
    4798:	003eeb06 	br	4348 <_dtoa_r+0x7d0>
    479c:	d9800a17 	ldw	r6,40(sp)
    47a0:	d8c01117 	ldw	r3,68(sp)
    47a4:	20bfff04 	addi	r2,r4,-4
    47a8:	308d883a 	add	r6,r6,r2
    47ac:	1887883a 	add	r3,r3,r2
    47b0:	80a1883a 	add	r16,r16,r2
    47b4:	d9800a15 	stw	r6,40(sp)
    47b8:	d8c01115 	stw	r3,68(sp)
    47bc:	003f1d06 	br	4434 <_dtoa_r+0x8bc>
    47c0:	a03f0c1e 	bne	r20,zero,43f4 <_dtoa_r+0x87c>
    47c4:	00800434 	movhi	r2,16
    47c8:	10bfffc4 	addi	r2,r2,-1
    47cc:	a884703a 	and	r2,r21,r2
    47d0:	103f081e 	bne	r2,zero,43f4 <_dtoa_r+0x87c>
    47d4:	a89ffc2c 	andhi	r2,r21,32752
    47d8:	103f0626 	beq	r2,zero,43f4 <_dtoa_r+0x87c>
    47dc:	d8c01117 	ldw	r3,68(sp)
    47e0:	d9000a17 	ldw	r4,40(sp)
    47e4:	18c00044 	addi	r3,r3,1
    47e8:	21000044 	addi	r4,r4,1
    47ec:	d8c01115 	stw	r3,68(sp)
    47f0:	d9000a15 	stw	r4,40(sp)
    47f4:	003f0006 	br	43f8 <_dtoa_r+0x880>
    47f8:	d9400717 	ldw	r5,28(sp)
    47fc:	d9001617 	ldw	r4,88(sp)
    4800:	00073800 	call	7380 <__pow5mult>
    4804:	d8800715 	stw	r2,28(sp)
    4808:	003eed06 	br	43c0 <_dtoa_r+0x848>
    480c:	1000021e 	bne	r2,zero,4818 <_dtoa_r+0xca0>
    4810:	b880004c 	andi	r2,r23,1
    4814:	103fc11e 	bne	r2,zero,471c <_dtoa_r+0xba4>
    4818:	b5bfffc4 	addi	r22,r22,-1
    481c:	b0c00007 	ldb	r3,0(r22)
    4820:	00800c04 	movi	r2,48
    4824:	18bffc26 	beq	r3,r2,4818 <_dtoa_r+0xca0>
    4828:	b7000044 	addi	fp,r22,1
    482c:	003fcb06 	br	475c <_dtoa_r+0xbe4>
    4830:	d9800d17 	ldw	r6,52(sp)
    4834:	018fc83a 	sub	r7,zero,r6
    4838:	3801f726 	beq	r7,zero,5018 <_dtoa_r+0x14a0>
    483c:	398003cc 	andi	r6,r7,15
    4840:	300c90fa 	slli	r6,r6,3
    4844:	01400074 	movhi	r5,1
    4848:	297c7804 	addi	r5,r5,-3616
    484c:	d9001217 	ldw	r4,72(sp)
    4850:	314d883a 	add	r6,r6,r5
    4854:	30c00117 	ldw	r3,4(r6)
    4858:	30800017 	ldw	r2,0(r6)
    485c:	d9401317 	ldw	r5,76(sp)
    4860:	3821d13a 	srai	r16,r7,4
    4864:	100d883a 	mov	r6,r2
    4868:	180f883a 	mov	r7,r3
    486c:	00095c80 	call	95c8 <__muldf3>
    4870:	1011883a 	mov	r8,r2
    4874:	1813883a 	mov	r9,r3
    4878:	1029883a 	mov	r20,r2
    487c:	182b883a 	mov	r21,r3
    4880:	8001e526 	beq	r16,zero,5018 <_dtoa_r+0x14a0>
    4884:	05800084 	movi	r22,2
    4888:	04400074 	movhi	r17,1
    488c:	8c7caa04 	addi	r17,r17,-3416
    4890:	8080004c 	andi	r2,r16,1
    4894:	1005003a 	cmpeq	r2,r2,zero
    4898:	1000081e 	bne	r2,zero,48bc <_dtoa_r+0xd44>
    489c:	89800017 	ldw	r6,0(r17)
    48a0:	89c00117 	ldw	r7,4(r17)
    48a4:	480b883a 	mov	r5,r9
    48a8:	4009883a 	mov	r4,r8
    48ac:	00095c80 	call	95c8 <__muldf3>
    48b0:	1011883a 	mov	r8,r2
    48b4:	b5800044 	addi	r22,r22,1
    48b8:	1813883a 	mov	r9,r3
    48bc:	8021d07a 	srai	r16,r16,1
    48c0:	8c400204 	addi	r17,r17,8
    48c4:	803ff21e 	bne	r16,zero,4890 <_dtoa_r+0xd18>
    48c8:	4029883a 	mov	r20,r8
    48cc:	482b883a 	mov	r21,r9
    48d0:	003dca06 	br	3ffc <_dtoa_r+0x484>
    48d4:	d9000817 	ldw	r4,32(sp)
    48d8:	2005003a 	cmpeq	r2,r4,zero
    48dc:	1001f61e 	bne	r2,zero,50b8 <_dtoa_r+0x1540>
    48e0:	dc001117 	ldw	r16,68(sp)
    48e4:	dc801017 	ldw	r18,64(sp)
    48e8:	18c10cc4 	addi	r3,r3,1075
    48ec:	003f6106 	br	4674 <_dtoa_r+0xafc>
    48f0:	d8000b15 	stw	zero,44(sp)
    48f4:	d9802617 	ldw	r6,152(sp)
    48f8:	d8c00d17 	ldw	r3,52(sp)
    48fc:	30800044 	addi	r2,r6,1
    4900:	18ad883a 	add	r22,r3,r2
    4904:	b13fffc4 	addi	r4,r22,-1
    4908:	d9000e15 	stw	r4,56(sp)
    490c:	0581f60e 	bge	zero,r22,50e8 <_dtoa_r+0x1570>
    4910:	dd800f15 	stw	r22,60(sp)
    4914:	003f3006 	br	45d8 <_dtoa_r+0xa60>
    4918:	d8000b15 	stw	zero,44(sp)
    491c:	d9002617 	ldw	r4,152(sp)
    4920:	0101eb0e 	bge	zero,r4,50d0 <_dtoa_r+0x1558>
    4924:	202d883a 	mov	r22,r4
    4928:	d9000e15 	stw	r4,56(sp)
    492c:	d9000f15 	stw	r4,60(sp)
    4930:	003f2906 	br	45d8 <_dtoa_r+0xa60>
    4934:	01800044 	movi	r6,1
    4938:	d9800b15 	stw	r6,44(sp)
    493c:	003ff706 	br	491c <_dtoa_r+0xda4>
    4940:	01000044 	movi	r4,1
    4944:	d9000b15 	stw	r4,44(sp)
    4948:	003fea06 	br	48f4 <_dtoa_r+0xd7c>
    494c:	04000c0e 	bge	zero,r16,4980 <_dtoa_r+0xe08>
    4950:	d9400717 	ldw	r5,28(sp)
    4954:	d9001617 	ldw	r4,88(sp)
    4958:	01800044 	movi	r6,1
    495c:	0006f100 	call	6f10 <__lshift>
    4960:	1009883a 	mov	r4,r2
    4964:	900b883a 	mov	r5,r18
    4968:	d8800715 	stw	r2,28(sp)
    496c:	00067280 	call	6728 <__mcmp>
    4970:	0081e00e 	bge	zero,r2,50f4 <_dtoa_r+0x157c>
    4974:	bdc00044 	addi	r23,r23,1
    4978:	00800e84 	movi	r2,58
    497c:	b881a226 	beq	r23,r2,5008 <_dtoa_r+0x1490>
    4980:	b7000044 	addi	fp,r22,1
    4984:	b5c00005 	stb	r23,0(r22)
    4988:	003f7406 	br	475c <_dtoa_r+0xbe4>
    498c:	00800e44 	movi	r2,57
    4990:	b8819d26 	beq	r23,r2,5008 <_dtoa_r+0x1490>
    4994:	053ffa0e 	bge	zero,r20,4980 <_dtoa_r+0xe08>
    4998:	8dc00c44 	addi	r23,r17,49
    499c:	003ff806 	br	4980 <_dtoa_r+0xe08>
    49a0:	d9001617 	ldw	r4,88(sp)
    49a4:	a80b883a 	mov	r5,r21
    49a8:	04000044 	movi	r16,1
    49ac:	00065cc0 	call	65cc <_Bfree>
    49b0:	003edf06 	br	4530 <_dtoa_r+0x9b8>
    49b4:	d9001617 	ldw	r4,88(sp)
    49b8:	980b883a 	mov	r5,r19
    49bc:	01800284 	movi	r6,10
    49c0:	000f883a 	mov	r7,zero
    49c4:	00072800 	call	7280 <__multadd>
    49c8:	1027883a 	mov	r19,r2
    49cc:	d8800615 	stw	r2,24(sp)
    49d0:	003ebb06 	br	44c0 <_dtoa_r+0x948>
    49d4:	d9801117 	ldw	r6,68(sp)
    49d8:	d8800d17 	ldw	r2,52(sp)
    49dc:	d8000915 	stw	zero,36(sp)
    49e0:	308dc83a 	sub	r6,r6,r2
    49e4:	0087c83a 	sub	r3,zero,r2
    49e8:	d9801115 	stw	r6,68(sp)
    49ec:	d8c01015 	stw	r3,64(sp)
    49f0:	003cfe06 	br	3dec <_dtoa_r+0x274>
    49f4:	018dc83a 	sub	r6,zero,r6
    49f8:	d9801115 	stw	r6,68(sp)
    49fc:	d8000a15 	stw	zero,40(sp)
    4a00:	003cf306 	br	3dd0 <_dtoa_r+0x258>
    4a04:	d9000d17 	ldw	r4,52(sp)
    4a08:	0009e8c0 	call	9e8c <__floatsidf>
    4a0c:	880b883a 	mov	r5,r17
    4a10:	8009883a 	mov	r4,r16
    4a14:	180f883a 	mov	r7,r3
    4a18:	100d883a 	mov	r6,r2
    4a1c:	0009c6c0 	call	9c6c <__nedf2>
    4a20:	103ce126 	beq	r2,zero,3da8 <_dtoa_r+0x230>
    4a24:	d9800d17 	ldw	r6,52(sp)
    4a28:	31bfffc4 	addi	r6,r6,-1
    4a2c:	d9800d15 	stw	r6,52(sp)
    4a30:	003cdd06 	br	3da8 <_dtoa_r+0x230>
    4a34:	d9000717 	ldw	r4,28(sp)
    4a38:	900b883a 	mov	r5,r18
    4a3c:	00067280 	call	6728 <__mcmp>
    4a40:	103e8d0e 	bge	r2,zero,4478 <_dtoa_r+0x900>
    4a44:	d9400717 	ldw	r5,28(sp)
    4a48:	d9001617 	ldw	r4,88(sp)
    4a4c:	01800284 	movi	r6,10
    4a50:	000f883a 	mov	r7,zero
    4a54:	00072800 	call	7280 <__multadd>
    4a58:	d9800d17 	ldw	r6,52(sp)
    4a5c:	d8800715 	stw	r2,28(sp)
    4a60:	31bfffc4 	addi	r6,r6,-1
    4a64:	d9800d15 	stw	r6,52(sp)
    4a68:	b001a71e 	bne	r22,zero,5108 <_dtoa_r+0x1590>
    4a6c:	d8800e17 	ldw	r2,56(sp)
    4a70:	d8800f15 	stw	r2,60(sp)
    4a74:	003e8006 	br	4478 <_dtoa_r+0x900>
    4a78:	90800417 	ldw	r2,16(r18)
    4a7c:	1085883a 	add	r2,r2,r2
    4a80:	1085883a 	add	r2,r2,r2
    4a84:	1485883a 	add	r2,r2,r18
    4a88:	11000417 	ldw	r4,16(r2)
    4a8c:	00065f40 	call	65f4 <__hi0bits>
    4a90:	00c00804 	movi	r3,32
    4a94:	1887c83a 	sub	r3,r3,r2
    4a98:	003e5a06 	br	4404 <_dtoa_r+0x88c>
    4a9c:	d9400717 	ldw	r5,28(sp)
    4aa0:	d9801017 	ldw	r6,64(sp)
    4aa4:	d9001617 	ldw	r4,88(sp)
    4aa8:	00073800 	call	7380 <__pow5mult>
    4aac:	d8800715 	stw	r2,28(sp)
    4ab0:	003e4306 	br	43c0 <_dtoa_r+0x848>
    4ab4:	d9800f17 	ldw	r6,60(sp)
    4ab8:	d8800d17 	ldw	r2,52(sp)
    4abc:	d9800315 	stw	r6,12(sp)
    4ac0:	d8800415 	stw	r2,16(sp)
    4ac4:	d8c00b17 	ldw	r3,44(sp)
    4ac8:	1805003a 	cmpeq	r2,r3,zero
    4acc:	1000e21e 	bne	r2,zero,4e58 <_dtoa_r+0x12e0>
    4ad0:	d9000317 	ldw	r4,12(sp)
    4ad4:	0005883a 	mov	r2,zero
    4ad8:	00cff834 	movhi	r3,16352
    4adc:	200c90fa 	slli	r6,r4,3
    4ae0:	01000074 	movhi	r4,1
    4ae4:	213c7804 	addi	r4,r4,-3616
    4ae8:	180b883a 	mov	r5,r3
    4aec:	310d883a 	add	r6,r6,r4
    4af0:	327fff17 	ldw	r9,-4(r6)
    4af4:	323ffe17 	ldw	r8,-8(r6)
    4af8:	1009883a 	mov	r4,r2
    4afc:	480f883a 	mov	r7,r9
    4b00:	400d883a 	mov	r6,r8
    4b04:	000998c0 	call	998c <__divdf3>
    4b08:	180b883a 	mov	r5,r3
    4b0c:	b00d883a 	mov	r6,r22
    4b10:	b80f883a 	mov	r7,r23
    4b14:	1009883a 	mov	r4,r2
    4b18:	00094d40 	call	94d4 <__subdf3>
    4b1c:	a80b883a 	mov	r5,r21
    4b20:	a009883a 	mov	r4,r20
    4b24:	d8c01915 	stw	r3,100(sp)
    4b28:	d8801815 	stw	r2,96(sp)
    4b2c:	0009f840 	call	9f84 <__fixdfsi>
    4b30:	1009883a 	mov	r4,r2
    4b34:	1027883a 	mov	r19,r2
    4b38:	0009e8c0 	call	9e8c <__floatsidf>
    4b3c:	a80b883a 	mov	r5,r21
    4b40:	a009883a 	mov	r4,r20
    4b44:	180f883a 	mov	r7,r3
    4b48:	100d883a 	mov	r6,r2
    4b4c:	00094d40 	call	94d4 <__subdf3>
    4b50:	d9801817 	ldw	r6,96(sp)
    4b54:	1823883a 	mov	r17,r3
    4b58:	d8801415 	stw	r2,80(sp)
    4b5c:	302d883a 	mov	r22,r6
    4b60:	d9800517 	ldw	r6,20(sp)
    4b64:	9cc00c04 	addi	r19,r19,48
    4b68:	dc401515 	stw	r17,84(sp)
    4b6c:	d8c01917 	ldw	r3,100(sp)
    4b70:	34c00005 	stb	r19,0(r6)
    4b74:	d8800517 	ldw	r2,20(sp)
    4b78:	d9401917 	ldw	r5,100(sp)
    4b7c:	d9801417 	ldw	r6,80(sp)
    4b80:	b009883a 	mov	r4,r22
    4b84:	880f883a 	mov	r7,r17
    4b88:	182f883a 	mov	r23,r3
    4b8c:	17000044 	addi	fp,r2,1
    4b90:	0009cf40 	call	9cf4 <__gtdf2>
    4b94:	00804e16 	blt	zero,r2,4cd0 <_dtoa_r+0x1158>
    4b98:	d9801417 	ldw	r6,80(sp)
    4b9c:	0005883a 	mov	r2,zero
    4ba0:	00cffc34 	movhi	r3,16368
    4ba4:	180b883a 	mov	r5,r3
    4ba8:	880f883a 	mov	r7,r17
    4bac:	1009883a 	mov	r4,r2
    4bb0:	00094d40 	call	94d4 <__subdf3>
    4bb4:	d9401917 	ldw	r5,100(sp)
    4bb8:	180f883a 	mov	r7,r3
    4bbc:	b009883a 	mov	r4,r22
    4bc0:	100d883a 	mov	r6,r2
    4bc4:	0009cf40 	call	9cf4 <__gtdf2>
    4bc8:	00bda216 	blt	zero,r2,4254 <_dtoa_r+0x6dc>
    4bcc:	d8c00317 	ldw	r3,12(sp)
    4bd0:	00800044 	movi	r2,1
    4bd4:	10c01216 	blt	r2,r3,4c20 <_dtoa_r+0x10a8>
    4bd8:	003d4506 	br	40f0 <_dtoa_r+0x578>
    4bdc:	d9801417 	ldw	r6,80(sp)
    4be0:	0005883a 	mov	r2,zero
    4be4:	00cffc34 	movhi	r3,16368
    4be8:	180b883a 	mov	r5,r3
    4bec:	880f883a 	mov	r7,r17
    4bf0:	1009883a 	mov	r4,r2
    4bf4:	00094d40 	call	94d4 <__subdf3>
    4bf8:	d9c01b17 	ldw	r7,108(sp)
    4bfc:	180b883a 	mov	r5,r3
    4c00:	1009883a 	mov	r4,r2
    4c04:	b00d883a 	mov	r6,r22
    4c08:	0009e040 	call	9e04 <__ltdf2>
    4c0c:	103d9116 	blt	r2,zero,4254 <_dtoa_r+0x6dc>
    4c10:	d9800517 	ldw	r6,20(sp)
    4c14:	d9000317 	ldw	r4,12(sp)
    4c18:	3105883a 	add	r2,r6,r4
    4c1c:	e0bd3426 	beq	fp,r2,40f0 <_dtoa_r+0x578>
    4c20:	04500934 	movhi	r17,16420
    4c24:	0021883a 	mov	r16,zero
    4c28:	b80b883a 	mov	r5,r23
    4c2c:	b009883a 	mov	r4,r22
    4c30:	800d883a 	mov	r6,r16
    4c34:	880f883a 	mov	r7,r17
    4c38:	00095c80 	call	95c8 <__muldf3>
    4c3c:	d9401517 	ldw	r5,84(sp)
    4c40:	d9001417 	ldw	r4,80(sp)
    4c44:	880f883a 	mov	r7,r17
    4c48:	000d883a 	mov	r6,zero
    4c4c:	d8801a15 	stw	r2,104(sp)
    4c50:	d8c01b15 	stw	r3,108(sp)
    4c54:	00095c80 	call	95c8 <__muldf3>
    4c58:	180b883a 	mov	r5,r3
    4c5c:	1009883a 	mov	r4,r2
    4c60:	1823883a 	mov	r17,r3
    4c64:	1021883a 	mov	r16,r2
    4c68:	0009f840 	call	9f84 <__fixdfsi>
    4c6c:	1009883a 	mov	r4,r2
    4c70:	102b883a 	mov	r21,r2
    4c74:	0009e8c0 	call	9e8c <__floatsidf>
    4c78:	880b883a 	mov	r5,r17
    4c7c:	8009883a 	mov	r4,r16
    4c80:	180f883a 	mov	r7,r3
    4c84:	100d883a 	mov	r6,r2
    4c88:	00094d40 	call	94d4 <__subdf3>
    4c8c:	1021883a 	mov	r16,r2
    4c90:	d9001b17 	ldw	r4,108(sp)
    4c94:	1823883a 	mov	r17,r3
    4c98:	dc001415 	stw	r16,80(sp)
    4c9c:	ad400c04 	addi	r21,r21,48
    4ca0:	dc401515 	stw	r17,84(sp)
    4ca4:	d8801a17 	ldw	r2,104(sp)
    4ca8:	e5400005 	stb	r21,0(fp)
    4cac:	202f883a 	mov	r23,r4
    4cb0:	d9c01b17 	ldw	r7,108(sp)
    4cb4:	d9001417 	ldw	r4,80(sp)
    4cb8:	880b883a 	mov	r5,r17
    4cbc:	100d883a 	mov	r6,r2
    4cc0:	102d883a 	mov	r22,r2
    4cc4:	e7000044 	addi	fp,fp,1
    4cc8:	0009e040 	call	9e04 <__ltdf2>
    4ccc:	103fc30e 	bge	r2,zero,4bdc <_dtoa_r+0x1064>
    4cd0:	d9000417 	ldw	r4,16(sp)
    4cd4:	d9000d15 	stw	r4,52(sp)
    4cd8:	003d7106 	br	42a0 <_dtoa_r+0x728>
    4cdc:	d9801717 	ldw	r6,92(sp)
    4ce0:	00800084 	movi	r2,2
    4ce4:	11bde60e 	bge	r2,r6,4480 <_dtoa_r+0x908>
    4ce8:	203cfb1e 	bne	r4,zero,40d8 <_dtoa_r+0x560>
    4cec:	d9001617 	ldw	r4,88(sp)
    4cf0:	900b883a 	mov	r5,r18
    4cf4:	01800144 	movi	r6,5
    4cf8:	000f883a 	mov	r7,zero
    4cfc:	00072800 	call	7280 <__multadd>
    4d00:	d9000717 	ldw	r4,28(sp)
    4d04:	100b883a 	mov	r5,r2
    4d08:	1025883a 	mov	r18,r2
    4d0c:	00067280 	call	6728 <__mcmp>
    4d10:	00bcf10e 	bge	zero,r2,40d8 <_dtoa_r+0x560>
    4d14:	d8c00d17 	ldw	r3,52(sp)
    4d18:	d9000517 	ldw	r4,20(sp)
    4d1c:	d8000615 	stw	zero,24(sp)
    4d20:	18c00044 	addi	r3,r3,1
    4d24:	d8c00d15 	stw	r3,52(sp)
    4d28:	00800c44 	movi	r2,49
    4d2c:	27000044 	addi	fp,r4,1
    4d30:	20800005 	stb	r2,0(r4)
    4d34:	003e8906 	br	475c <_dtoa_r+0xbe4>
    4d38:	d8c00517 	ldw	r3,20(sp)
    4d3c:	003bc206 	br	3c48 <_dtoa_r+0xd0>
    4d40:	01800074 	movhi	r6,1
    4d44:	31bcaa04 	addi	r6,r6,-3416
    4d48:	30c00917 	ldw	r3,36(r6)
    4d4c:	30800817 	ldw	r2,32(r6)
    4d50:	d9001217 	ldw	r4,72(sp)
    4d54:	d9401317 	ldw	r5,76(sp)
    4d58:	180f883a 	mov	r7,r3
    4d5c:	100d883a 	mov	r6,r2
    4d60:	000998c0 	call	998c <__divdf3>
    4d64:	948003cc 	andi	r18,r18,15
    4d68:	058000c4 	movi	r22,3
    4d6c:	1029883a 	mov	r20,r2
    4d70:	182b883a 	mov	r21,r3
    4d74:	003c8906 	br	3f9c <_dtoa_r+0x424>
    4d78:	d9001017 	ldw	r4,64(sp)
    4d7c:	d9800917 	ldw	r6,36(sp)
    4d80:	0025883a 	mov	r18,zero
    4d84:	1105c83a 	sub	r2,r2,r4
    4d88:	2089883a 	add	r4,r4,r2
    4d8c:	308d883a 	add	r6,r6,r2
    4d90:	d9001015 	stw	r4,64(sp)
    4d94:	d9800915 	stw	r6,36(sp)
    4d98:	003e3206 	br	4664 <_dtoa_r+0xaec>
    4d9c:	28800044 	addi	r2,r5,1
    4da0:	27000044 	addi	fp,r4,1
    4da4:	20800005 	stb	r2,0(r4)
    4da8:	003e6c06 	br	475c <_dtoa_r+0xbe4>
    4dac:	d8800f17 	ldw	r2,60(sp)
    4db0:	00bce016 	blt	zero,r2,4134 <_dtoa_r+0x5bc>
    4db4:	d9800f17 	ldw	r6,60(sp)
    4db8:	303cc51e 	bne	r6,zero,40d0 <_dtoa_r+0x558>
    4dbc:	0005883a 	mov	r2,zero
    4dc0:	00d00534 	movhi	r3,16404
    4dc4:	980b883a 	mov	r5,r19
    4dc8:	180f883a 	mov	r7,r3
    4dcc:	9009883a 	mov	r4,r18
    4dd0:	100d883a 	mov	r6,r2
    4dd4:	00095c80 	call	95c8 <__muldf3>
    4dd8:	180b883a 	mov	r5,r3
    4ddc:	a80f883a 	mov	r7,r21
    4de0:	1009883a 	mov	r4,r2
    4de4:	a00d883a 	mov	r6,r20
    4de8:	0009d7c0 	call	9d7c <__gedf2>
    4dec:	103cb80e 	bge	r2,zero,40d0 <_dtoa_r+0x558>
    4df0:	0027883a 	mov	r19,zero
    4df4:	0025883a 	mov	r18,zero
    4df8:	003fc606 	br	4d14 <_dtoa_r+0x119c>
    4dfc:	99400117 	ldw	r5,4(r19)
    4e00:	d9001617 	ldw	r4,88(sp)
    4e04:	0006b4c0 	call	6b4c <_Balloc>
    4e08:	99800417 	ldw	r6,16(r19)
    4e0c:	11000304 	addi	r4,r2,12
    4e10:	99400304 	addi	r5,r19,12
    4e14:	318d883a 	add	r6,r6,r6
    4e18:	318d883a 	add	r6,r6,r6
    4e1c:	31800204 	addi	r6,r6,8
    4e20:	1023883a 	mov	r17,r2
    4e24:	00063b40 	call	63b4 <memcpy>
    4e28:	d9001617 	ldw	r4,88(sp)
    4e2c:	880b883a 	mov	r5,r17
    4e30:	01800044 	movi	r6,1
    4e34:	0006f100 	call	6f10 <__lshift>
    4e38:	100b883a 	mov	r5,r2
    4e3c:	003d9c06 	br	44b0 <_dtoa_r+0x938>
    4e40:	00800e44 	movi	r2,57
    4e44:	b8807026 	beq	r23,r2,5008 <_dtoa_r+0x1490>
    4e48:	b8800044 	addi	r2,r23,1
    4e4c:	b7000044 	addi	fp,r22,1
    4e50:	b0800005 	stb	r2,0(r22)
    4e54:	003e4106 	br	475c <_dtoa_r+0xbe4>
    4e58:	d8800317 	ldw	r2,12(sp)
    4e5c:	01800074 	movhi	r6,1
    4e60:	31bc7804 	addi	r6,r6,-3616
    4e64:	b009883a 	mov	r4,r22
    4e68:	100e90fa 	slli	r7,r2,3
    4e6c:	b80b883a 	mov	r5,r23
    4e70:	398f883a 	add	r7,r7,r6
    4e74:	38bffe17 	ldw	r2,-8(r7)
    4e78:	d9800517 	ldw	r6,20(sp)
    4e7c:	38ffff17 	ldw	r3,-4(r7)
    4e80:	37000044 	addi	fp,r6,1
    4e84:	180f883a 	mov	r7,r3
    4e88:	100d883a 	mov	r6,r2
    4e8c:	00095c80 	call	95c8 <__muldf3>
    4e90:	a80b883a 	mov	r5,r21
    4e94:	a009883a 	mov	r4,r20
    4e98:	182f883a 	mov	r23,r3
    4e9c:	102d883a 	mov	r22,r2
    4ea0:	0009f840 	call	9f84 <__fixdfsi>
    4ea4:	1009883a 	mov	r4,r2
    4ea8:	1027883a 	mov	r19,r2
    4eac:	0009e8c0 	call	9e8c <__floatsidf>
    4eb0:	a80b883a 	mov	r5,r21
    4eb4:	a009883a 	mov	r4,r20
    4eb8:	180f883a 	mov	r7,r3
    4ebc:	100d883a 	mov	r6,r2
    4ec0:	00094d40 	call	94d4 <__subdf3>
    4ec4:	180b883a 	mov	r5,r3
    4ec8:	d8c00517 	ldw	r3,20(sp)
    4ecc:	9cc00c04 	addi	r19,r19,48
    4ed0:	1009883a 	mov	r4,r2
    4ed4:	1cc00005 	stb	r19,0(r3)
    4ed8:	2021883a 	mov	r16,r4
    4edc:	d9000317 	ldw	r4,12(sp)
    4ee0:	00800044 	movi	r2,1
    4ee4:	2823883a 	mov	r17,r5
    4ee8:	20802226 	beq	r4,r2,4f74 <_dtoa_r+0x13fc>
    4eec:	1029883a 	mov	r20,r2
    4ef0:	0005883a 	mov	r2,zero
    4ef4:	00d00934 	movhi	r3,16420
    4ef8:	180f883a 	mov	r7,r3
    4efc:	100d883a 	mov	r6,r2
    4f00:	880b883a 	mov	r5,r17
    4f04:	8009883a 	mov	r4,r16
    4f08:	00095c80 	call	95c8 <__muldf3>
    4f0c:	180b883a 	mov	r5,r3
    4f10:	1009883a 	mov	r4,r2
    4f14:	1823883a 	mov	r17,r3
    4f18:	1021883a 	mov	r16,r2
    4f1c:	0009f840 	call	9f84 <__fixdfsi>
    4f20:	1009883a 	mov	r4,r2
    4f24:	102b883a 	mov	r21,r2
    4f28:	0009e8c0 	call	9e8c <__floatsidf>
    4f2c:	880b883a 	mov	r5,r17
    4f30:	8009883a 	mov	r4,r16
    4f34:	180f883a 	mov	r7,r3
    4f38:	100d883a 	mov	r6,r2
    4f3c:	00094d40 	call	94d4 <__subdf3>
    4f40:	180b883a 	mov	r5,r3
    4f44:	d8c00517 	ldw	r3,20(sp)
    4f48:	1009883a 	mov	r4,r2
    4f4c:	ad400c04 	addi	r21,r21,48
    4f50:	1d05883a 	add	r2,r3,r20
    4f54:	15400005 	stb	r21,0(r2)
    4f58:	2021883a 	mov	r16,r4
    4f5c:	d9000317 	ldw	r4,12(sp)
    4f60:	a5000044 	addi	r20,r20,1
    4f64:	2823883a 	mov	r17,r5
    4f68:	a13fe11e 	bne	r20,r4,4ef0 <_dtoa_r+0x1378>
    4f6c:	e505883a 	add	r2,fp,r20
    4f70:	173fffc4 	addi	fp,r2,-1
    4f74:	0025883a 	mov	r18,zero
    4f78:	04cff834 	movhi	r19,16352
    4f7c:	b009883a 	mov	r4,r22
    4f80:	b80b883a 	mov	r5,r23
    4f84:	900d883a 	mov	r6,r18
    4f88:	980f883a 	mov	r7,r19
    4f8c:	00095540 	call	9554 <__adddf3>
    4f90:	180b883a 	mov	r5,r3
    4f94:	1009883a 	mov	r4,r2
    4f98:	800d883a 	mov	r6,r16
    4f9c:	880f883a 	mov	r7,r17
    4fa0:	0009e040 	call	9e04 <__ltdf2>
    4fa4:	103cab16 	blt	r2,zero,4254 <_dtoa_r+0x6dc>
    4fa8:	0009883a 	mov	r4,zero
    4fac:	980b883a 	mov	r5,r19
    4fb0:	b80f883a 	mov	r7,r23
    4fb4:	b00d883a 	mov	r6,r22
    4fb8:	00094d40 	call	94d4 <__subdf3>
    4fbc:	180b883a 	mov	r5,r3
    4fc0:	880f883a 	mov	r7,r17
    4fc4:	1009883a 	mov	r4,r2
    4fc8:	800d883a 	mov	r6,r16
    4fcc:	0009cf40 	call	9cf4 <__gtdf2>
    4fd0:	00bc470e 	bge	zero,r2,40f0 <_dtoa_r+0x578>
    4fd4:	00c00c04 	movi	r3,48
    4fd8:	e73fffc4 	addi	fp,fp,-1
    4fdc:	e0800007 	ldb	r2,0(fp)
    4fe0:	10fffd26 	beq	r2,r3,4fd8 <_dtoa_r+0x1460>
    4fe4:	d9800417 	ldw	r6,16(sp)
    4fe8:	e7000044 	addi	fp,fp,1
    4fec:	d9800d15 	stw	r6,52(sp)
    4ff0:	003cab06 	br	42a0 <_dtoa_r+0x728>
    4ff4:	d8c00f17 	ldw	r3,60(sp)
    4ff8:	d9001117 	ldw	r4,68(sp)
    4ffc:	20e1c83a 	sub	r16,r4,r3
    5000:	0007883a 	mov	r3,zero
    5004:	003d9b06 	br	4674 <_dtoa_r+0xafc>
    5008:	00800e44 	movi	r2,57
    500c:	b0800005 	stb	r2,0(r22)
    5010:	b5800044 	addi	r22,r22,1
    5014:	003dc106 	br	471c <_dtoa_r+0xba4>
    5018:	05800084 	movi	r22,2
    501c:	003bf706 	br	3ffc <_dtoa_r+0x484>
    5020:	d9000f17 	ldw	r4,60(sp)
    5024:	013c000e 	bge	zero,r4,4028 <_dtoa_r+0x4b0>
    5028:	d9800e17 	ldw	r6,56(sp)
    502c:	01bc300e 	bge	zero,r6,40f0 <_dtoa_r+0x578>
    5030:	0005883a 	mov	r2,zero
    5034:	00d00934 	movhi	r3,16420
    5038:	a80b883a 	mov	r5,r21
    503c:	180f883a 	mov	r7,r3
    5040:	a009883a 	mov	r4,r20
    5044:	100d883a 	mov	r6,r2
    5048:	00095c80 	call	95c8 <__muldf3>
    504c:	b1000044 	addi	r4,r22,1
    5050:	1021883a 	mov	r16,r2
    5054:	1823883a 	mov	r17,r3
    5058:	0009e8c0 	call	9e8c <__floatsidf>
    505c:	880b883a 	mov	r5,r17
    5060:	8009883a 	mov	r4,r16
    5064:	180f883a 	mov	r7,r3
    5068:	100d883a 	mov	r6,r2
    506c:	00095c80 	call	95c8 <__muldf3>
    5070:	0011883a 	mov	r8,zero
    5074:	02500734 	movhi	r9,16412
    5078:	180b883a 	mov	r5,r3
    507c:	480f883a 	mov	r7,r9
    5080:	1009883a 	mov	r4,r2
    5084:	400d883a 	mov	r6,r8
    5088:	00095540 	call	9554 <__adddf3>
    508c:	102d883a 	mov	r22,r2
    5090:	00bf3034 	movhi	r2,64704
    5094:	10ef883a 	add	r23,r2,r3
    5098:	d8800d17 	ldw	r2,52(sp)
    509c:	d8c00e17 	ldw	r3,56(sp)
    50a0:	8029883a 	mov	r20,r16
    50a4:	10bfffc4 	addi	r2,r2,-1
    50a8:	882b883a 	mov	r21,r17
    50ac:	d8800415 	stw	r2,16(sp)
    50b0:	d8c00315 	stw	r3,12(sp)
    50b4:	003e8306 	br	4ac4 <_dtoa_r+0xf4c>
    50b8:	d8800117 	ldw	r2,4(sp)
    50bc:	dc001117 	ldw	r16,68(sp)
    50c0:	dc801017 	ldw	r18,64(sp)
    50c4:	00c00d84 	movi	r3,54
    50c8:	1887c83a 	sub	r3,r3,r2
    50cc:	003d6906 	br	4674 <_dtoa_r+0xafc>
    50d0:	01800044 	movi	r6,1
    50d4:	3021883a 	mov	r16,r6
    50d8:	d9800f15 	stw	r6,60(sp)
    50dc:	d9802615 	stw	r6,152(sp)
    50e0:	d9800e15 	stw	r6,56(sp)
    50e4:	003b9306 	br	3f34 <_dtoa_r+0x3bc>
    50e8:	b021883a 	mov	r16,r22
    50ec:	dd800f15 	stw	r22,60(sp)
    50f0:	003b9006 	br	3f34 <_dtoa_r+0x3bc>
    50f4:	103e221e 	bne	r2,zero,4980 <_dtoa_r+0xe08>
    50f8:	b880004c 	andi	r2,r23,1
    50fc:	1005003a 	cmpeq	r2,r2,zero
    5100:	103e1f1e 	bne	r2,zero,4980 <_dtoa_r+0xe08>
    5104:	003e1b06 	br	4974 <_dtoa_r+0xdfc>
    5108:	d9001617 	ldw	r4,88(sp)
    510c:	980b883a 	mov	r5,r19
    5110:	01800284 	movi	r6,10
    5114:	000f883a 	mov	r7,zero
    5118:	00072800 	call	7280 <__multadd>
    511c:	d8c00e17 	ldw	r3,56(sp)
    5120:	1027883a 	mov	r19,r2
    5124:	d8c00f15 	stw	r3,60(sp)
    5128:	003cd306 	br	4478 <_dtoa_r+0x900>

0000512c <_fflush_r>:
    512c:	defffb04 	addi	sp,sp,-20
    5130:	dcc00315 	stw	r19,12(sp)
    5134:	dc800215 	stw	r18,8(sp)
    5138:	dfc00415 	stw	ra,16(sp)
    513c:	dc400115 	stw	r17,4(sp)
    5140:	dc000015 	stw	r16,0(sp)
    5144:	2027883a 	mov	r19,r4
    5148:	2825883a 	mov	r18,r5
    514c:	20000226 	beq	r4,zero,5158 <_fflush_r+0x2c>
    5150:	20800e17 	ldw	r2,56(r4)
    5154:	10005626 	beq	r2,zero,52b0 <_fflush_r+0x184>
    5158:	9100030b 	ldhu	r4,12(r18)
    515c:	20ffffcc 	andi	r3,r4,65535
    5160:	18e0001c 	xori	r3,r3,32768
    5164:	18e00004 	addi	r3,r3,-32768
    5168:	1880020c 	andi	r2,r3,8
    516c:	1000261e 	bne	r2,zero,5208 <_fflush_r+0xdc>
    5170:	90c00117 	ldw	r3,4(r18)
    5174:	20820014 	ori	r2,r4,2048
    5178:	9080030d 	sth	r2,12(r18)
    517c:	1009883a 	mov	r4,r2
    5180:	00c0400e 	bge	zero,r3,5284 <_fflush_r+0x158>
    5184:	92000a17 	ldw	r8,40(r18)
    5188:	40004026 	beq	r8,zero,528c <_fflush_r+0x160>
    518c:	2084000c 	andi	r2,r4,4096
    5190:	10005326 	beq	r2,zero,52e0 <_fflush_r+0x1b4>
    5194:	94001417 	ldw	r16,80(r18)
    5198:	9080030b 	ldhu	r2,12(r18)
    519c:	1080010c 	andi	r2,r2,4
    51a0:	1000481e 	bne	r2,zero,52c4 <_fflush_r+0x198>
    51a4:	91400717 	ldw	r5,28(r18)
    51a8:	9809883a 	mov	r4,r19
    51ac:	800d883a 	mov	r6,r16
    51b0:	000f883a 	mov	r7,zero
    51b4:	403ee83a 	callr	r8
    51b8:	8080261e 	bne	r16,r2,5254 <_fflush_r+0x128>
    51bc:	9080030b 	ldhu	r2,12(r18)
    51c0:	91000417 	ldw	r4,16(r18)
    51c4:	90000115 	stw	zero,4(r18)
    51c8:	10bdffcc 	andi	r2,r2,63487
    51cc:	10ffffcc 	andi	r3,r2,65535
    51d0:	18c4000c 	andi	r3,r3,4096
    51d4:	9080030d 	sth	r2,12(r18)
    51d8:	91000015 	stw	r4,0(r18)
    51dc:	18002b26 	beq	r3,zero,528c <_fflush_r+0x160>
    51e0:	0007883a 	mov	r3,zero
    51e4:	1805883a 	mov	r2,r3
    51e8:	94001415 	stw	r16,80(r18)
    51ec:	dfc00417 	ldw	ra,16(sp)
    51f0:	dcc00317 	ldw	r19,12(sp)
    51f4:	dc800217 	ldw	r18,8(sp)
    51f8:	dc400117 	ldw	r17,4(sp)
    51fc:	dc000017 	ldw	r16,0(sp)
    5200:	dec00504 	addi	sp,sp,20
    5204:	f800283a 	ret
    5208:	94400417 	ldw	r17,16(r18)
    520c:	88001f26 	beq	r17,zero,528c <_fflush_r+0x160>
    5210:	90800017 	ldw	r2,0(r18)
    5214:	18c000cc 	andi	r3,r3,3
    5218:	94400015 	stw	r17,0(r18)
    521c:	1461c83a 	sub	r16,r2,r17
    5220:	18002526 	beq	r3,zero,52b8 <_fflush_r+0x18c>
    5224:	0005883a 	mov	r2,zero
    5228:	90800215 	stw	r2,8(r18)
    522c:	0400170e 	bge	zero,r16,528c <_fflush_r+0x160>
    5230:	90c00917 	ldw	r3,36(r18)
    5234:	91400717 	ldw	r5,28(r18)
    5238:	880d883a 	mov	r6,r17
    523c:	800f883a 	mov	r7,r16
    5240:	9809883a 	mov	r4,r19
    5244:	183ee83a 	callr	r3
    5248:	88a3883a 	add	r17,r17,r2
    524c:	80a1c83a 	sub	r16,r16,r2
    5250:	00bff616 	blt	zero,r2,522c <_fflush_r+0x100>
    5254:	9080030b 	ldhu	r2,12(r18)
    5258:	00ffffc4 	movi	r3,-1
    525c:	10801014 	ori	r2,r2,64
    5260:	9080030d 	sth	r2,12(r18)
    5264:	1805883a 	mov	r2,r3
    5268:	dfc00417 	ldw	ra,16(sp)
    526c:	dcc00317 	ldw	r19,12(sp)
    5270:	dc800217 	ldw	r18,8(sp)
    5274:	dc400117 	ldw	r17,4(sp)
    5278:	dc000017 	ldw	r16,0(sp)
    527c:	dec00504 	addi	sp,sp,20
    5280:	f800283a 	ret
    5284:	90800f17 	ldw	r2,60(r18)
    5288:	00bfbe16 	blt	zero,r2,5184 <_fflush_r+0x58>
    528c:	0007883a 	mov	r3,zero
    5290:	1805883a 	mov	r2,r3
    5294:	dfc00417 	ldw	ra,16(sp)
    5298:	dcc00317 	ldw	r19,12(sp)
    529c:	dc800217 	ldw	r18,8(sp)
    52a0:	dc400117 	ldw	r17,4(sp)
    52a4:	dc000017 	ldw	r16,0(sp)
    52a8:	dec00504 	addi	sp,sp,20
    52ac:	f800283a 	ret
    52b0:	00053c40 	call	53c4 <__sinit>
    52b4:	003fa806 	br	5158 <_fflush_r+0x2c>
    52b8:	90800517 	ldw	r2,20(r18)
    52bc:	90800215 	stw	r2,8(r18)
    52c0:	003fda06 	br	522c <_fflush_r+0x100>
    52c4:	90800117 	ldw	r2,4(r18)
    52c8:	90c00c17 	ldw	r3,48(r18)
    52cc:	80a1c83a 	sub	r16,r16,r2
    52d0:	183fb426 	beq	r3,zero,51a4 <_fflush_r+0x78>
    52d4:	90800f17 	ldw	r2,60(r18)
    52d8:	80a1c83a 	sub	r16,r16,r2
    52dc:	003fb106 	br	51a4 <_fflush_r+0x78>
    52e0:	91400717 	ldw	r5,28(r18)
    52e4:	9809883a 	mov	r4,r19
    52e8:	000d883a 	mov	r6,zero
    52ec:	01c00044 	movi	r7,1
    52f0:	403ee83a 	callr	r8
    52f4:	1021883a 	mov	r16,r2
    52f8:	00bfffc4 	movi	r2,-1
    52fc:	80800226 	beq	r16,r2,5308 <_fflush_r+0x1dc>
    5300:	92000a17 	ldw	r8,40(r18)
    5304:	003fa406 	br	5198 <_fflush_r+0x6c>
    5308:	98c00017 	ldw	r3,0(r19)
    530c:	00800744 	movi	r2,29
    5310:	18bfde26 	beq	r3,r2,528c <_fflush_r+0x160>
    5314:	9080030b 	ldhu	r2,12(r18)
    5318:	8007883a 	mov	r3,r16
    531c:	10801014 	ori	r2,r2,64
    5320:	9080030d 	sth	r2,12(r18)
    5324:	003fcf06 	br	5264 <_fflush_r+0x138>

00005328 <fflush>:
    5328:	01400034 	movhi	r5,0
    532c:	29544b04 	addi	r5,r5,20780
    5330:	2007883a 	mov	r3,r4
    5334:	20000526 	beq	r4,zero,534c <fflush+0x24>
    5338:	00800074 	movhi	r2,1
    533c:	10840004 	addi	r2,r2,4096
    5340:	11000017 	ldw	r4,0(r2)
    5344:	180b883a 	mov	r5,r3
    5348:	000512c1 	jmpi	512c <_fflush_r>
    534c:	00800074 	movhi	r2,1
    5350:	10840104 	addi	r2,r2,4100
    5354:	11000017 	ldw	r4,0(r2)
    5358:	0005ef81 	jmpi	5ef8 <_fwalk_reent>

0000535c <std>:
    535c:	00800034 	movhi	r2,0
    5360:	109f8104 	addi	r2,r2,32260
    5364:	20800b15 	stw	r2,44(r4)
    5368:	00800034 	movhi	r2,0
    536c:	109fbc04 	addi	r2,r2,32496
    5370:	20800815 	stw	r2,32(r4)
    5374:	00c00034 	movhi	r3,0
    5378:	18df9d04 	addi	r3,r3,32372
    537c:	00800034 	movhi	r2,0
    5380:	109f8304 	addi	r2,r2,32268
    5384:	2140030d 	sth	r5,12(r4)
    5388:	2180038d 	sth	r6,14(r4)
    538c:	20c00915 	stw	r3,36(r4)
    5390:	20800a15 	stw	r2,40(r4)
    5394:	20000015 	stw	zero,0(r4)
    5398:	20000115 	stw	zero,4(r4)
    539c:	20000215 	stw	zero,8(r4)
    53a0:	20000415 	stw	zero,16(r4)
    53a4:	20000515 	stw	zero,20(r4)
    53a8:	20000615 	stw	zero,24(r4)
    53ac:	21000715 	stw	r4,28(r4)
    53b0:	f800283a 	ret

000053b4 <__sfp_lock_acquire>:
    53b4:	f800283a 	ret

000053b8 <__sfp_lock_release>:
    53b8:	f800283a 	ret

000053bc <__sinit_lock_acquire>:
    53bc:	f800283a 	ret

000053c0 <__sinit_lock_release>:
    53c0:	f800283a 	ret

000053c4 <__sinit>:
    53c4:	20800e17 	ldw	r2,56(r4)
    53c8:	defffd04 	addi	sp,sp,-12
    53cc:	dc400115 	stw	r17,4(sp)
    53d0:	dc000015 	stw	r16,0(sp)
    53d4:	dfc00215 	stw	ra,8(sp)
    53d8:	04400044 	movi	r17,1
    53dc:	01400104 	movi	r5,4
    53e0:	000d883a 	mov	r6,zero
    53e4:	2021883a 	mov	r16,r4
    53e8:	2200bb04 	addi	r8,r4,748
    53ec:	200f883a 	mov	r7,r4
    53f0:	10000526 	beq	r2,zero,5408 <__sinit+0x44>
    53f4:	dfc00217 	ldw	ra,8(sp)
    53f8:	dc400117 	ldw	r17,4(sp)
    53fc:	dc000017 	ldw	r16,0(sp)
    5400:	dec00304 	addi	sp,sp,12
    5404:	f800283a 	ret
    5408:	21000117 	ldw	r4,4(r4)
    540c:	00800034 	movhi	r2,0
    5410:	10952a04 	addi	r2,r2,21672
    5414:	00c000c4 	movi	r3,3
    5418:	80800f15 	stw	r2,60(r16)
    541c:	80c0b915 	stw	r3,740(r16)
    5420:	8200ba15 	stw	r8,744(r16)
    5424:	84400e15 	stw	r17,56(r16)
    5428:	8000b815 	stw	zero,736(r16)
    542c:	000535c0 	call	535c <std>
    5430:	81000217 	ldw	r4,8(r16)
    5434:	880d883a 	mov	r6,r17
    5438:	800f883a 	mov	r7,r16
    543c:	01400284 	movi	r5,10
    5440:	000535c0 	call	535c <std>
    5444:	81000317 	ldw	r4,12(r16)
    5448:	800f883a 	mov	r7,r16
    544c:	01400484 	movi	r5,18
    5450:	01800084 	movi	r6,2
    5454:	dfc00217 	ldw	ra,8(sp)
    5458:	dc400117 	ldw	r17,4(sp)
    545c:	dc000017 	ldw	r16,0(sp)
    5460:	dec00304 	addi	sp,sp,12
    5464:	000535c1 	jmpi	535c <std>

00005468 <__fp_lock>:
    5468:	0005883a 	mov	r2,zero
    546c:	f800283a 	ret

00005470 <__fp_unlock>:
    5470:	0005883a 	mov	r2,zero
    5474:	f800283a 	ret

00005478 <__fp_unlock_all>:
    5478:	00800074 	movhi	r2,1
    547c:	10840004 	addi	r2,r2,4096
    5480:	11000017 	ldw	r4,0(r2)
    5484:	01400034 	movhi	r5,0
    5488:	29551c04 	addi	r5,r5,21616
    548c:	0005fc01 	jmpi	5fc0 <_fwalk>

00005490 <__fp_lock_all>:
    5490:	00800074 	movhi	r2,1
    5494:	10840004 	addi	r2,r2,4096
    5498:	11000017 	ldw	r4,0(r2)
    549c:	01400034 	movhi	r5,0
    54a0:	29551a04 	addi	r5,r5,21608
    54a4:	0005fc01 	jmpi	5fc0 <_fwalk>

000054a8 <_cleanup_r>:
    54a8:	01400074 	movhi	r5,1
    54ac:	2960ae04 	addi	r5,r5,-32072
    54b0:	0005fc01 	jmpi	5fc0 <_fwalk>

000054b4 <_cleanup>:
    54b4:	00800074 	movhi	r2,1
    54b8:	10840104 	addi	r2,r2,4100
    54bc:	11000017 	ldw	r4,0(r2)
    54c0:	00054a81 	jmpi	54a8 <_cleanup_r>

000054c4 <__sfmoreglue>:
    54c4:	defffc04 	addi	sp,sp,-16
    54c8:	dc400115 	stw	r17,4(sp)
    54cc:	2c401724 	muli	r17,r5,92
    54d0:	dc800215 	stw	r18,8(sp)
    54d4:	2825883a 	mov	r18,r5
    54d8:	89400304 	addi	r5,r17,12
    54dc:	dc000015 	stw	r16,0(sp)
    54e0:	dfc00315 	stw	ra,12(sp)
    54e4:	0000eb80 	call	eb8 <_malloc_r>
    54e8:	0021883a 	mov	r16,zero
    54ec:	880d883a 	mov	r6,r17
    54f0:	000b883a 	mov	r5,zero
    54f4:	10000626 	beq	r2,zero,5510 <__sfmoreglue+0x4c>
    54f8:	11000304 	addi	r4,r2,12
    54fc:	14800115 	stw	r18,4(r2)
    5500:	10000015 	stw	zero,0(r2)
    5504:	11000215 	stw	r4,8(r2)
    5508:	1021883a 	mov	r16,r2
    550c:	00065340 	call	6534 <memset>
    5510:	8005883a 	mov	r2,r16
    5514:	dfc00317 	ldw	ra,12(sp)
    5518:	dc800217 	ldw	r18,8(sp)
    551c:	dc400117 	ldw	r17,4(sp)
    5520:	dc000017 	ldw	r16,0(sp)
    5524:	dec00404 	addi	sp,sp,16
    5528:	f800283a 	ret

0000552c <__sfp>:
    552c:	defffd04 	addi	sp,sp,-12
    5530:	00800074 	movhi	r2,1
    5534:	10840104 	addi	r2,r2,4100
    5538:	dc000015 	stw	r16,0(sp)
    553c:	14000017 	ldw	r16,0(r2)
    5540:	dc400115 	stw	r17,4(sp)
    5544:	dfc00215 	stw	ra,8(sp)
    5548:	80800e17 	ldw	r2,56(r16)
    554c:	2023883a 	mov	r17,r4
    5550:	10002626 	beq	r2,zero,55ec <__sfp+0xc0>
    5554:	8400b804 	addi	r16,r16,736
    5558:	80800117 	ldw	r2,4(r16)
    555c:	81000217 	ldw	r4,8(r16)
    5560:	10ffffc4 	addi	r3,r2,-1
    5564:	18000916 	blt	r3,zero,558c <__sfp+0x60>
    5568:	2080030f 	ldh	r2,12(r4)
    556c:	10000b26 	beq	r2,zero,559c <__sfp+0x70>
    5570:	017fffc4 	movi	r5,-1
    5574:	00000206 	br	5580 <__sfp+0x54>
    5578:	2080030f 	ldh	r2,12(r4)
    557c:	10000726 	beq	r2,zero,559c <__sfp+0x70>
    5580:	18ffffc4 	addi	r3,r3,-1
    5584:	21001704 	addi	r4,r4,92
    5588:	197ffb1e 	bne	r3,r5,5578 <__sfp+0x4c>
    558c:	80800017 	ldw	r2,0(r16)
    5590:	10001926 	beq	r2,zero,55f8 <__sfp+0xcc>
    5594:	1021883a 	mov	r16,r2
    5598:	003fef06 	br	5558 <__sfp+0x2c>
    559c:	00bfffc4 	movi	r2,-1
    55a0:	00c00044 	movi	r3,1
    55a4:	2080038d 	sth	r2,14(r4)
    55a8:	20c0030d 	sth	r3,12(r4)
    55ac:	20000015 	stw	zero,0(r4)
    55b0:	20000215 	stw	zero,8(r4)
    55b4:	20000115 	stw	zero,4(r4)
    55b8:	20000415 	stw	zero,16(r4)
    55bc:	20000515 	stw	zero,20(r4)
    55c0:	20000615 	stw	zero,24(r4)
    55c4:	20000c15 	stw	zero,48(r4)
    55c8:	20000d15 	stw	zero,52(r4)
    55cc:	20001115 	stw	zero,68(r4)
    55d0:	20001215 	stw	zero,72(r4)
    55d4:	2005883a 	mov	r2,r4
    55d8:	dfc00217 	ldw	ra,8(sp)
    55dc:	dc400117 	ldw	r17,4(sp)
    55e0:	dc000017 	ldw	r16,0(sp)
    55e4:	dec00304 	addi	sp,sp,12
    55e8:	f800283a 	ret
    55ec:	8009883a 	mov	r4,r16
    55f0:	00053c40 	call	53c4 <__sinit>
    55f4:	003fd706 	br	5554 <__sfp+0x28>
    55f8:	8809883a 	mov	r4,r17
    55fc:	01400104 	movi	r5,4
    5600:	00054c40 	call	54c4 <__sfmoreglue>
    5604:	80800015 	stw	r2,0(r16)
    5608:	103fe21e 	bne	r2,zero,5594 <__sfp+0x68>
    560c:	00800304 	movi	r2,12
    5610:	0009883a 	mov	r4,zero
    5614:	88800015 	stw	r2,0(r17)
    5618:	003fee06 	br	55d4 <__sfp+0xa8>

0000561c <_malloc_trim_r>:
    561c:	defffb04 	addi	sp,sp,-20
    5620:	dcc00315 	stw	r19,12(sp)
    5624:	04c00074 	movhi	r19,1
    5628:	9cfe2404 	addi	r19,r19,-1904
    562c:	dc800215 	stw	r18,8(sp)
    5630:	dc400115 	stw	r17,4(sp)
    5634:	dc000015 	stw	r16,0(sp)
    5638:	2823883a 	mov	r17,r5
    563c:	2025883a 	mov	r18,r4
    5640:	dfc00415 	stw	ra,16(sp)
    5644:	000af980 	call	af98 <__malloc_lock>
    5648:	98800217 	ldw	r2,8(r19)
    564c:	9009883a 	mov	r4,r18
    5650:	000b883a 	mov	r5,zero
    5654:	10c00117 	ldw	r3,4(r2)
    5658:	00bfff04 	movi	r2,-4
    565c:	18a0703a 	and	r16,r3,r2
    5660:	8463c83a 	sub	r17,r16,r17
    5664:	8c43fbc4 	addi	r17,r17,4079
    5668:	8822d33a 	srli	r17,r17,12
    566c:	0083ffc4 	movi	r2,4095
    5670:	8c7fffc4 	addi	r17,r17,-1
    5674:	8822933a 	slli	r17,r17,12
    5678:	1440060e 	bge	r2,r17,5694 <_malloc_trim_r+0x78>
    567c:	00018180 	call	1818 <_sbrk_r>
    5680:	98c00217 	ldw	r3,8(r19)
    5684:	9009883a 	mov	r4,r18
    5688:	044bc83a 	sub	r5,zero,r17
    568c:	80c7883a 	add	r3,r16,r3
    5690:	10c00926 	beq	r2,r3,56b8 <_malloc_trim_r+0x9c>
    5694:	000afb80 	call	afb8 <__malloc_unlock>
    5698:	0005883a 	mov	r2,zero
    569c:	dfc00417 	ldw	ra,16(sp)
    56a0:	dcc00317 	ldw	r19,12(sp)
    56a4:	dc800217 	ldw	r18,8(sp)
    56a8:	dc400117 	ldw	r17,4(sp)
    56ac:	dc000017 	ldw	r16,0(sp)
    56b0:	dec00504 	addi	sp,sp,20
    56b4:	f800283a 	ret
    56b8:	9009883a 	mov	r4,r18
    56bc:	00018180 	call	1818 <_sbrk_r>
    56c0:	844dc83a 	sub	r6,r16,r17
    56c4:	00ffffc4 	movi	r3,-1
    56c8:	9009883a 	mov	r4,r18
    56cc:	000b883a 	mov	r5,zero
    56d0:	01c00074 	movhi	r7,1
    56d4:	39cb0e04 	addi	r7,r7,11320
    56d8:	31800054 	ori	r6,r6,1
    56dc:	10c00926 	beq	r2,r3,5704 <_malloc_trim_r+0xe8>
    56e0:	38800017 	ldw	r2,0(r7)
    56e4:	98c00217 	ldw	r3,8(r19)
    56e8:	9009883a 	mov	r4,r18
    56ec:	1445c83a 	sub	r2,r2,r17
    56f0:	38800015 	stw	r2,0(r7)
    56f4:	19800115 	stw	r6,4(r3)
    56f8:	000afb80 	call	afb8 <__malloc_unlock>
    56fc:	00800044 	movi	r2,1
    5700:	003fe606 	br	569c <_malloc_trim_r+0x80>
    5704:	00018180 	call	1818 <_sbrk_r>
    5708:	99800217 	ldw	r6,8(r19)
    570c:	100f883a 	mov	r7,r2
    5710:	9009883a 	mov	r4,r18
    5714:	1187c83a 	sub	r3,r2,r6
    5718:	008003c4 	movi	r2,15
    571c:	19400054 	ori	r5,r3,1
    5720:	10ffdc0e 	bge	r2,r3,5694 <_malloc_trim_r+0x78>
    5724:	00800074 	movhi	r2,1
    5728:	10840304 	addi	r2,r2,4108
    572c:	10c00017 	ldw	r3,0(r2)
    5730:	00800074 	movhi	r2,1
    5734:	108b0e04 	addi	r2,r2,11320
    5738:	31400115 	stw	r5,4(r6)
    573c:	38c7c83a 	sub	r3,r7,r3
    5740:	10c00015 	stw	r3,0(r2)
    5744:	003fd306 	br	5694 <_malloc_trim_r+0x78>

00005748 <_free_r>:
    5748:	defffd04 	addi	sp,sp,-12
    574c:	dc400115 	stw	r17,4(sp)
    5750:	dc000015 	stw	r16,0(sp)
    5754:	dfc00215 	stw	ra,8(sp)
    5758:	2821883a 	mov	r16,r5
    575c:	2023883a 	mov	r17,r4
    5760:	28005a26 	beq	r5,zero,58cc <_free_r+0x184>
    5764:	000af980 	call	af98 <__malloc_lock>
    5768:	823ffe04 	addi	r8,r16,-8
    576c:	41400117 	ldw	r5,4(r8)
    5770:	00bfff84 	movi	r2,-2
    5774:	02800074 	movhi	r10,1
    5778:	52be2404 	addi	r10,r10,-1904
    577c:	288e703a 	and	r7,r5,r2
    5780:	41cd883a 	add	r6,r8,r7
    5784:	30c00117 	ldw	r3,4(r6)
    5788:	51000217 	ldw	r4,8(r10)
    578c:	00bfff04 	movi	r2,-4
    5790:	1892703a 	and	r9,r3,r2
    5794:	5017883a 	mov	r11,r10
    5798:	31006726 	beq	r6,r4,5938 <_free_r+0x1f0>
    579c:	2880004c 	andi	r2,r5,1
    57a0:	1005003a 	cmpeq	r2,r2,zero
    57a4:	32400115 	stw	r9,4(r6)
    57a8:	10001a1e 	bne	r2,zero,5814 <_free_r+0xcc>
    57ac:	000b883a 	mov	r5,zero
    57b0:	3247883a 	add	r3,r6,r9
    57b4:	18800117 	ldw	r2,4(r3)
    57b8:	1080004c 	andi	r2,r2,1
    57bc:	1000231e 	bne	r2,zero,584c <_free_r+0x104>
    57c0:	280ac03a 	cmpne	r5,r5,zero
    57c4:	3a4f883a 	add	r7,r7,r9
    57c8:	2800451e 	bne	r5,zero,58e0 <_free_r+0x198>
    57cc:	31000217 	ldw	r4,8(r6)
    57d0:	00800074 	movhi	r2,1
    57d4:	10be2604 	addi	r2,r2,-1896
    57d8:	20807b26 	beq	r4,r2,59c8 <_free_r+0x280>
    57dc:	30800317 	ldw	r2,12(r6)
    57e0:	3a07883a 	add	r3,r7,r8
    57e4:	19c00015 	stw	r7,0(r3)
    57e8:	11000215 	stw	r4,8(r2)
    57ec:	20800315 	stw	r2,12(r4)
    57f0:	38800054 	ori	r2,r7,1
    57f4:	40800115 	stw	r2,4(r8)
    57f8:	28001a26 	beq	r5,zero,5864 <_free_r+0x11c>
    57fc:	8809883a 	mov	r4,r17
    5800:	dfc00217 	ldw	ra,8(sp)
    5804:	dc400117 	ldw	r17,4(sp)
    5808:	dc000017 	ldw	r16,0(sp)
    580c:	dec00304 	addi	sp,sp,12
    5810:	000afb81 	jmpi	afb8 <__malloc_unlock>
    5814:	80bffe17 	ldw	r2,-8(r16)
    5818:	50c00204 	addi	r3,r10,8
    581c:	4091c83a 	sub	r8,r8,r2
    5820:	41000217 	ldw	r4,8(r8)
    5824:	388f883a 	add	r7,r7,r2
    5828:	20c06126 	beq	r4,r3,59b0 <_free_r+0x268>
    582c:	40800317 	ldw	r2,12(r8)
    5830:	3247883a 	add	r3,r6,r9
    5834:	000b883a 	mov	r5,zero
    5838:	11000215 	stw	r4,8(r2)
    583c:	20800315 	stw	r2,12(r4)
    5840:	18800117 	ldw	r2,4(r3)
    5844:	1080004c 	andi	r2,r2,1
    5848:	103fdd26 	beq	r2,zero,57c0 <_free_r+0x78>
    584c:	38800054 	ori	r2,r7,1
    5850:	3a07883a 	add	r3,r7,r8
    5854:	280ac03a 	cmpne	r5,r5,zero
    5858:	40800115 	stw	r2,4(r8)
    585c:	19c00015 	stw	r7,0(r3)
    5860:	283fe61e 	bne	r5,zero,57fc <_free_r+0xb4>
    5864:	00807fc4 	movi	r2,511
    5868:	11c01f2e 	bgeu	r2,r7,58e8 <_free_r+0x1a0>
    586c:	3806d27a 	srli	r3,r7,9
    5870:	1800481e 	bne	r3,zero,5994 <_free_r+0x24c>
    5874:	3804d0fa 	srli	r2,r7,3
    5878:	100690fa 	slli	r3,r2,3
    587c:	1acd883a 	add	r6,r3,r11
    5880:	31400217 	ldw	r5,8(r6)
    5884:	31405926 	beq	r6,r5,59ec <_free_r+0x2a4>
    5888:	28800117 	ldw	r2,4(r5)
    588c:	00ffff04 	movi	r3,-4
    5890:	10c4703a 	and	r2,r2,r3
    5894:	3880022e 	bgeu	r7,r2,58a0 <_free_r+0x158>
    5898:	29400217 	ldw	r5,8(r5)
    589c:	317ffa1e 	bne	r6,r5,5888 <_free_r+0x140>
    58a0:	29800317 	ldw	r6,12(r5)
    58a4:	41800315 	stw	r6,12(r8)
    58a8:	41400215 	stw	r5,8(r8)
    58ac:	8809883a 	mov	r4,r17
    58b0:	2a000315 	stw	r8,12(r5)
    58b4:	32000215 	stw	r8,8(r6)
    58b8:	dfc00217 	ldw	ra,8(sp)
    58bc:	dc400117 	ldw	r17,4(sp)
    58c0:	dc000017 	ldw	r16,0(sp)
    58c4:	dec00304 	addi	sp,sp,12
    58c8:	000afb81 	jmpi	afb8 <__malloc_unlock>
    58cc:	dfc00217 	ldw	ra,8(sp)
    58d0:	dc400117 	ldw	r17,4(sp)
    58d4:	dc000017 	ldw	r16,0(sp)
    58d8:	dec00304 	addi	sp,sp,12
    58dc:	f800283a 	ret
    58e0:	31000217 	ldw	r4,8(r6)
    58e4:	003fbd06 	br	57dc <_free_r+0x94>
    58e8:	3806d0fa 	srli	r3,r7,3
    58ec:	00800044 	movi	r2,1
    58f0:	51400117 	ldw	r5,4(r10)
    58f4:	180890fa 	slli	r4,r3,3
    58f8:	1807d0ba 	srai	r3,r3,2
    58fc:	22c9883a 	add	r4,r4,r11
    5900:	21800217 	ldw	r6,8(r4)
    5904:	10c4983a 	sll	r2,r2,r3
    5908:	41000315 	stw	r4,12(r8)
    590c:	41800215 	stw	r6,8(r8)
    5910:	288ab03a 	or	r5,r5,r2
    5914:	22000215 	stw	r8,8(r4)
    5918:	8809883a 	mov	r4,r17
    591c:	51400115 	stw	r5,4(r10)
    5920:	32000315 	stw	r8,12(r6)
    5924:	dfc00217 	ldw	ra,8(sp)
    5928:	dc400117 	ldw	r17,4(sp)
    592c:	dc000017 	ldw	r16,0(sp)
    5930:	dec00304 	addi	sp,sp,12
    5934:	000afb81 	jmpi	afb8 <__malloc_unlock>
    5938:	2880004c 	andi	r2,r5,1
    593c:	3a4d883a 	add	r6,r7,r9
    5940:	1000071e 	bne	r2,zero,5960 <_free_r+0x218>
    5944:	80bffe17 	ldw	r2,-8(r16)
    5948:	4091c83a 	sub	r8,r8,r2
    594c:	41000317 	ldw	r4,12(r8)
    5950:	40c00217 	ldw	r3,8(r8)
    5954:	308d883a 	add	r6,r6,r2
    5958:	20c00215 	stw	r3,8(r4)
    595c:	19000315 	stw	r4,12(r3)
    5960:	00800074 	movhi	r2,1
    5964:	10840204 	addi	r2,r2,4104
    5968:	11000017 	ldw	r4,0(r2)
    596c:	30c00054 	ori	r3,r6,1
    5970:	52000215 	stw	r8,8(r10)
    5974:	40c00115 	stw	r3,4(r8)
    5978:	313fa036 	bltu	r6,r4,57fc <_free_r+0xb4>
    597c:	00800074 	movhi	r2,1
    5980:	108b0104 	addi	r2,r2,11268
    5984:	11400017 	ldw	r5,0(r2)
    5988:	8809883a 	mov	r4,r17
    598c:	000561c0 	call	561c <_malloc_trim_r>
    5990:	003f9a06 	br	57fc <_free_r+0xb4>
    5994:	00800104 	movi	r2,4
    5998:	10c0072e 	bgeu	r2,r3,59b8 <_free_r+0x270>
    599c:	00800504 	movi	r2,20
    59a0:	10c01936 	bltu	r2,r3,5a08 <_free_r+0x2c0>
    59a4:	188016c4 	addi	r2,r3,91
    59a8:	100690fa 	slli	r3,r2,3
    59ac:	003fb306 	br	587c <_free_r+0x134>
    59b0:	01400044 	movi	r5,1
    59b4:	003f7e06 	br	57b0 <_free_r+0x68>
    59b8:	3804d1ba 	srli	r2,r7,6
    59bc:	10800e04 	addi	r2,r2,56
    59c0:	100690fa 	slli	r3,r2,3
    59c4:	003fad06 	br	587c <_free_r+0x134>
    59c8:	22000315 	stw	r8,12(r4)
    59cc:	22000215 	stw	r8,8(r4)
    59d0:	3a05883a 	add	r2,r7,r8
    59d4:	38c00054 	ori	r3,r7,1
    59d8:	11c00015 	stw	r7,0(r2)
    59dc:	41000215 	stw	r4,8(r8)
    59e0:	40c00115 	stw	r3,4(r8)
    59e4:	41000315 	stw	r4,12(r8)
    59e8:	003f8406 	br	57fc <_free_r+0xb4>
    59ec:	1005d0ba 	srai	r2,r2,2
    59f0:	00c00044 	movi	r3,1
    59f4:	51000117 	ldw	r4,4(r10)
    59f8:	1886983a 	sll	r3,r3,r2
    59fc:	20c8b03a 	or	r4,r4,r3
    5a00:	51000115 	stw	r4,4(r10)
    5a04:	003fa706 	br	58a4 <_free_r+0x15c>
    5a08:	00801504 	movi	r2,84
    5a0c:	10c00436 	bltu	r2,r3,5a20 <_free_r+0x2d8>
    5a10:	3804d33a 	srli	r2,r7,12
    5a14:	10801b84 	addi	r2,r2,110
    5a18:	100690fa 	slli	r3,r2,3
    5a1c:	003f9706 	br	587c <_free_r+0x134>
    5a20:	00805504 	movi	r2,340
    5a24:	10c00436 	bltu	r2,r3,5a38 <_free_r+0x2f0>
    5a28:	3804d3fa 	srli	r2,r7,15
    5a2c:	10801dc4 	addi	r2,r2,119
    5a30:	100690fa 	slli	r3,r2,3
    5a34:	003f9106 	br	587c <_free_r+0x134>
    5a38:	00815504 	movi	r2,1364
    5a3c:	10c0032e 	bgeu	r2,r3,5a4c <_free_r+0x304>
    5a40:	00801f84 	movi	r2,126
    5a44:	00c0fc04 	movi	r3,1008
    5a48:	003f8c06 	br	587c <_free_r+0x134>
    5a4c:	3804d4ba 	srli	r2,r7,18
    5a50:	10801f04 	addi	r2,r2,124
    5a54:	100690fa 	slli	r3,r2,3
    5a58:	003f8806 	br	587c <_free_r+0x134>

00005a5c <__sfvwrite_r>:
    5a5c:	30800217 	ldw	r2,8(r6)
    5a60:	defff504 	addi	sp,sp,-44
    5a64:	df000915 	stw	fp,36(sp)
    5a68:	dd800715 	stw	r22,28(sp)
    5a6c:	dc800315 	stw	r18,12(sp)
    5a70:	dfc00a15 	stw	ra,40(sp)
    5a74:	ddc00815 	stw	r23,32(sp)
    5a78:	dd400615 	stw	r21,24(sp)
    5a7c:	dd000515 	stw	r20,20(sp)
    5a80:	dcc00415 	stw	r19,16(sp)
    5a84:	dc400215 	stw	r17,8(sp)
    5a88:	dc000115 	stw	r16,4(sp)
    5a8c:	302d883a 	mov	r22,r6
    5a90:	2039883a 	mov	fp,r4
    5a94:	2825883a 	mov	r18,r5
    5a98:	10001c26 	beq	r2,zero,5b0c <__sfvwrite_r+0xb0>
    5a9c:	29c0030b 	ldhu	r7,12(r5)
    5aa0:	3880020c 	andi	r2,r7,8
    5aa4:	10002726 	beq	r2,zero,5b44 <__sfvwrite_r+0xe8>
    5aa8:	28800417 	ldw	r2,16(r5)
    5aac:	10002526 	beq	r2,zero,5b44 <__sfvwrite_r+0xe8>
    5ab0:	3880008c 	andi	r2,r7,2
    5ab4:	b5400017 	ldw	r21,0(r22)
    5ab8:	10002826 	beq	r2,zero,5b5c <__sfvwrite_r+0x100>
    5abc:	0021883a 	mov	r16,zero
    5ac0:	0023883a 	mov	r17,zero
    5ac4:	880d883a 	mov	r6,r17
    5ac8:	e009883a 	mov	r4,fp
    5acc:	00810004 	movi	r2,1024
    5ad0:	80006e26 	beq	r16,zero,5c8c <__sfvwrite_r+0x230>
    5ad4:	800f883a 	mov	r7,r16
    5ad8:	91400717 	ldw	r5,28(r18)
    5adc:	1400012e 	bgeu	r2,r16,5ae4 <__sfvwrite_r+0x88>
    5ae0:	100f883a 	mov	r7,r2
    5ae4:	90c00917 	ldw	r3,36(r18)
    5ae8:	183ee83a 	callr	r3
    5aec:	1007883a 	mov	r3,r2
    5af0:	80a1c83a 	sub	r16,r16,r2
    5af4:	88a3883a 	add	r17,r17,r2
    5af8:	00806d0e 	bge	zero,r2,5cb0 <__sfvwrite_r+0x254>
    5afc:	b0800217 	ldw	r2,8(r22)
    5b00:	10c5c83a 	sub	r2,r2,r3
    5b04:	b0800215 	stw	r2,8(r22)
    5b08:	103fee1e 	bne	r2,zero,5ac4 <__sfvwrite_r+0x68>
    5b0c:	0009883a 	mov	r4,zero
    5b10:	2005883a 	mov	r2,r4
    5b14:	dfc00a17 	ldw	ra,40(sp)
    5b18:	df000917 	ldw	fp,36(sp)
    5b1c:	ddc00817 	ldw	r23,32(sp)
    5b20:	dd800717 	ldw	r22,28(sp)
    5b24:	dd400617 	ldw	r21,24(sp)
    5b28:	dd000517 	ldw	r20,20(sp)
    5b2c:	dcc00417 	ldw	r19,16(sp)
    5b30:	dc800317 	ldw	r18,12(sp)
    5b34:	dc400217 	ldw	r17,8(sp)
    5b38:	dc000117 	ldw	r16,4(sp)
    5b3c:	dec00b04 	addi	sp,sp,44
    5b40:	f800283a 	ret
    5b44:	00038240 	call	3824 <__swsetup_r>
    5b48:	1000e41e 	bne	r2,zero,5edc <__sfvwrite_r+0x480>
    5b4c:	91c0030b 	ldhu	r7,12(r18)
    5b50:	b5400017 	ldw	r21,0(r22)
    5b54:	3880008c 	andi	r2,r7,2
    5b58:	103fd81e 	bne	r2,zero,5abc <__sfvwrite_r+0x60>
    5b5c:	3880004c 	andi	r2,r7,1
    5b60:	1005003a 	cmpeq	r2,r2,zero
    5b64:	10005726 	beq	r2,zero,5cc4 <__sfvwrite_r+0x268>
    5b68:	0029883a 	mov	r20,zero
    5b6c:	002f883a 	mov	r23,zero
    5b70:	a0004226 	beq	r20,zero,5c7c <__sfvwrite_r+0x220>
    5b74:	3880800c 	andi	r2,r7,512
    5b78:	94000217 	ldw	r16,8(r18)
    5b7c:	10008b26 	beq	r2,zero,5dac <__sfvwrite_r+0x350>
    5b80:	800d883a 	mov	r6,r16
    5b84:	a400a536 	bltu	r20,r16,5e1c <__sfvwrite_r+0x3c0>
    5b88:	3881200c 	andi	r2,r7,1152
    5b8c:	10002726 	beq	r2,zero,5c2c <__sfvwrite_r+0x1d0>
    5b90:	90800517 	ldw	r2,20(r18)
    5b94:	92000417 	ldw	r8,16(r18)
    5b98:	91400017 	ldw	r5,0(r18)
    5b9c:	1087883a 	add	r3,r2,r2
    5ba0:	1887883a 	add	r3,r3,r2
    5ba4:	1808d7fa 	srli	r4,r3,31
    5ba8:	2a21c83a 	sub	r16,r5,r8
    5bac:	80800044 	addi	r2,r16,1
    5bb0:	20c9883a 	add	r4,r4,r3
    5bb4:	2027d07a 	srai	r19,r4,1
    5bb8:	a085883a 	add	r2,r20,r2
    5bbc:	980d883a 	mov	r6,r19
    5bc0:	9880022e 	bgeu	r19,r2,5bcc <__sfvwrite_r+0x170>
    5bc4:	1027883a 	mov	r19,r2
    5bc8:	100d883a 	mov	r6,r2
    5bcc:	3881000c 	andi	r2,r7,1024
    5bd0:	1000b826 	beq	r2,zero,5eb4 <__sfvwrite_r+0x458>
    5bd4:	300b883a 	mov	r5,r6
    5bd8:	e009883a 	mov	r4,fp
    5bdc:	0000eb80 	call	eb8 <_malloc_r>
    5be0:	10003126 	beq	r2,zero,5ca8 <__sfvwrite_r+0x24c>
    5be4:	91400417 	ldw	r5,16(r18)
    5be8:	1009883a 	mov	r4,r2
    5bec:	800d883a 	mov	r6,r16
    5bf0:	1023883a 	mov	r17,r2
    5bf4:	00063b40 	call	63b4 <memcpy>
    5bf8:	90c0030b 	ldhu	r3,12(r18)
    5bfc:	00beffc4 	movi	r2,-1025
    5c00:	1886703a 	and	r3,r3,r2
    5c04:	18c02014 	ori	r3,r3,128
    5c08:	90c0030d 	sth	r3,12(r18)
    5c0c:	9c07c83a 	sub	r3,r19,r16
    5c10:	8c05883a 	add	r2,r17,r16
    5c14:	a00d883a 	mov	r6,r20
    5c18:	a021883a 	mov	r16,r20
    5c1c:	90800015 	stw	r2,0(r18)
    5c20:	90c00215 	stw	r3,8(r18)
    5c24:	94400415 	stw	r17,16(r18)
    5c28:	94c00515 	stw	r19,20(r18)
    5c2c:	91000017 	ldw	r4,0(r18)
    5c30:	b80b883a 	mov	r5,r23
    5c34:	a023883a 	mov	r17,r20
    5c38:	00064540 	call	6454 <memmove>
    5c3c:	90c00217 	ldw	r3,8(r18)
    5c40:	90800017 	ldw	r2,0(r18)
    5c44:	a027883a 	mov	r19,r20
    5c48:	1c07c83a 	sub	r3,r3,r16
    5c4c:	1405883a 	add	r2,r2,r16
    5c50:	90c00215 	stw	r3,8(r18)
    5c54:	a021883a 	mov	r16,r20
    5c58:	90800015 	stw	r2,0(r18)
    5c5c:	b0800217 	ldw	r2,8(r22)
    5c60:	1405c83a 	sub	r2,r2,r16
    5c64:	b0800215 	stw	r2,8(r22)
    5c68:	103fa826 	beq	r2,zero,5b0c <__sfvwrite_r+0xb0>
    5c6c:	a469c83a 	sub	r20,r20,r17
    5c70:	91c0030b 	ldhu	r7,12(r18)
    5c74:	bcef883a 	add	r23,r23,r19
    5c78:	a03fbe1e 	bne	r20,zero,5b74 <__sfvwrite_r+0x118>
    5c7c:	adc00017 	ldw	r23,0(r21)
    5c80:	ad000117 	ldw	r20,4(r21)
    5c84:	ad400204 	addi	r21,r21,8
    5c88:	003fb906 	br	5b70 <__sfvwrite_r+0x114>
    5c8c:	ac400017 	ldw	r17,0(r21)
    5c90:	ac000117 	ldw	r16,4(r21)
    5c94:	ad400204 	addi	r21,r21,8
    5c98:	003f8a06 	br	5ac4 <__sfvwrite_r+0x68>
    5c9c:	91400417 	ldw	r5,16(r18)
    5ca0:	e009883a 	mov	r4,fp
    5ca4:	00057480 	call	5748 <_free_r>
    5ca8:	00800304 	movi	r2,12
    5cac:	e0800015 	stw	r2,0(fp)
    5cb0:	9080030b 	ldhu	r2,12(r18)
    5cb4:	013fffc4 	movi	r4,-1
    5cb8:	10801014 	ori	r2,r2,64
    5cbc:	9080030d 	sth	r2,12(r18)
    5cc0:	003f9306 	br	5b10 <__sfvwrite_r+0xb4>
    5cc4:	0027883a 	mov	r19,zero
    5cc8:	002f883a 	mov	r23,zero
    5ccc:	d8000015 	stw	zero,0(sp)
    5cd0:	0029883a 	mov	r20,zero
    5cd4:	98001e26 	beq	r19,zero,5d50 <__sfvwrite_r+0x2f4>
    5cd8:	d8c00017 	ldw	r3,0(sp)
    5cdc:	1804c03a 	cmpne	r2,r3,zero
    5ce0:	10005e26 	beq	r2,zero,5e5c <__sfvwrite_r+0x400>
    5ce4:	9821883a 	mov	r16,r19
    5ce8:	a4c0012e 	bgeu	r20,r19,5cf0 <__sfvwrite_r+0x294>
    5cec:	a021883a 	mov	r16,r20
    5cf0:	91000017 	ldw	r4,0(r18)
    5cf4:	90800417 	ldw	r2,16(r18)
    5cf8:	91800217 	ldw	r6,8(r18)
    5cfc:	91c00517 	ldw	r7,20(r18)
    5d00:	1100022e 	bgeu	r2,r4,5d0c <__sfvwrite_r+0x2b0>
    5d04:	31e3883a 	add	r17,r6,r7
    5d08:	8c001616 	blt	r17,r16,5d64 <__sfvwrite_r+0x308>
    5d0c:	81c03816 	blt	r16,r7,5df0 <__sfvwrite_r+0x394>
    5d10:	90c00917 	ldw	r3,36(r18)
    5d14:	91400717 	ldw	r5,28(r18)
    5d18:	e009883a 	mov	r4,fp
    5d1c:	b80d883a 	mov	r6,r23
    5d20:	183ee83a 	callr	r3
    5d24:	1023883a 	mov	r17,r2
    5d28:	00bfe10e 	bge	zero,r2,5cb0 <__sfvwrite_r+0x254>
    5d2c:	a469c83a 	sub	r20,r20,r17
    5d30:	a0001826 	beq	r20,zero,5d94 <__sfvwrite_r+0x338>
    5d34:	b0800217 	ldw	r2,8(r22)
    5d38:	1445c83a 	sub	r2,r2,r17
    5d3c:	b0800215 	stw	r2,8(r22)
    5d40:	103f7226 	beq	r2,zero,5b0c <__sfvwrite_r+0xb0>
    5d44:	9c67c83a 	sub	r19,r19,r17
    5d48:	bc6f883a 	add	r23,r23,r17
    5d4c:	983fe21e 	bne	r19,zero,5cd8 <__sfvwrite_r+0x27c>
    5d50:	adc00017 	ldw	r23,0(r21)
    5d54:	acc00117 	ldw	r19,4(r21)
    5d58:	ad400204 	addi	r21,r21,8
    5d5c:	d8000015 	stw	zero,0(sp)
    5d60:	003fdc06 	br	5cd4 <__sfvwrite_r+0x278>
    5d64:	b80b883a 	mov	r5,r23
    5d68:	880d883a 	mov	r6,r17
    5d6c:	00064540 	call	6454 <memmove>
    5d70:	90c00017 	ldw	r3,0(r18)
    5d74:	e009883a 	mov	r4,fp
    5d78:	900b883a 	mov	r5,r18
    5d7c:	1c47883a 	add	r3,r3,r17
    5d80:	90c00015 	stw	r3,0(r18)
    5d84:	000512c0 	call	512c <_fflush_r>
    5d88:	103fc91e 	bne	r2,zero,5cb0 <__sfvwrite_r+0x254>
    5d8c:	a469c83a 	sub	r20,r20,r17
    5d90:	a03fe81e 	bne	r20,zero,5d34 <__sfvwrite_r+0x2d8>
    5d94:	e009883a 	mov	r4,fp
    5d98:	900b883a 	mov	r5,r18
    5d9c:	000512c0 	call	512c <_fflush_r>
    5da0:	103fc31e 	bne	r2,zero,5cb0 <__sfvwrite_r+0x254>
    5da4:	d8000015 	stw	zero,0(sp)
    5da8:	003fe206 	br	5d34 <__sfvwrite_r+0x2d8>
    5dac:	91000017 	ldw	r4,0(r18)
    5db0:	90800417 	ldw	r2,16(r18)
    5db4:	1100022e 	bgeu	r2,r4,5dc0 <__sfvwrite_r+0x364>
    5db8:	8023883a 	mov	r17,r16
    5dbc:	85003136 	bltu	r16,r20,5e84 <__sfvwrite_r+0x428>
    5dc0:	91c00517 	ldw	r7,20(r18)
    5dc4:	a1c01836 	bltu	r20,r7,5e28 <__sfvwrite_r+0x3cc>
    5dc8:	90c00917 	ldw	r3,36(r18)
    5dcc:	91400717 	ldw	r5,28(r18)
    5dd0:	e009883a 	mov	r4,fp
    5dd4:	b80d883a 	mov	r6,r23
    5dd8:	183ee83a 	callr	r3
    5ddc:	1021883a 	mov	r16,r2
    5de0:	00bfb30e 	bge	zero,r2,5cb0 <__sfvwrite_r+0x254>
    5de4:	1023883a 	mov	r17,r2
    5de8:	1027883a 	mov	r19,r2
    5dec:	003f9b06 	br	5c5c <__sfvwrite_r+0x200>
    5df0:	b80b883a 	mov	r5,r23
    5df4:	800d883a 	mov	r6,r16
    5df8:	00064540 	call	6454 <memmove>
    5dfc:	90c00217 	ldw	r3,8(r18)
    5e00:	90800017 	ldw	r2,0(r18)
    5e04:	8023883a 	mov	r17,r16
    5e08:	1c07c83a 	sub	r3,r3,r16
    5e0c:	1405883a 	add	r2,r2,r16
    5e10:	90c00215 	stw	r3,8(r18)
    5e14:	90800015 	stw	r2,0(r18)
    5e18:	003fc406 	br	5d2c <__sfvwrite_r+0x2d0>
    5e1c:	a00d883a 	mov	r6,r20
    5e20:	a021883a 	mov	r16,r20
    5e24:	003f8106 	br	5c2c <__sfvwrite_r+0x1d0>
    5e28:	b80b883a 	mov	r5,r23
    5e2c:	a00d883a 	mov	r6,r20
    5e30:	00064540 	call	6454 <memmove>
    5e34:	90c00217 	ldw	r3,8(r18)
    5e38:	90800017 	ldw	r2,0(r18)
    5e3c:	a021883a 	mov	r16,r20
    5e40:	1d07c83a 	sub	r3,r3,r20
    5e44:	1505883a 	add	r2,r2,r20
    5e48:	a023883a 	mov	r17,r20
    5e4c:	a027883a 	mov	r19,r20
    5e50:	90c00215 	stw	r3,8(r18)
    5e54:	90800015 	stw	r2,0(r18)
    5e58:	003f8006 	br	5c5c <__sfvwrite_r+0x200>
    5e5c:	b809883a 	mov	r4,r23
    5e60:	01400284 	movi	r5,10
    5e64:	980d883a 	mov	r6,r19
    5e68:	00062d00 	call	62d0 <memchr>
    5e6c:	10001726 	beq	r2,zero,5ecc <__sfvwrite_r+0x470>
    5e70:	15c5c83a 	sub	r2,r2,r23
    5e74:	15000044 	addi	r20,r2,1
    5e78:	00800044 	movi	r2,1
    5e7c:	d8800015 	stw	r2,0(sp)
    5e80:	003f9806 	br	5ce4 <__sfvwrite_r+0x288>
    5e84:	b80b883a 	mov	r5,r23
    5e88:	800d883a 	mov	r6,r16
    5e8c:	00064540 	call	6454 <memmove>
    5e90:	90c00017 	ldw	r3,0(r18)
    5e94:	e009883a 	mov	r4,fp
    5e98:	900b883a 	mov	r5,r18
    5e9c:	1c07883a 	add	r3,r3,r16
    5ea0:	90c00015 	stw	r3,0(r18)
    5ea4:	8027883a 	mov	r19,r16
    5ea8:	000512c0 	call	512c <_fflush_r>
    5eac:	103f6b26 	beq	r2,zero,5c5c <__sfvwrite_r+0x200>
    5eb0:	003f7f06 	br	5cb0 <__sfvwrite_r+0x254>
    5eb4:	400b883a 	mov	r5,r8
    5eb8:	e009883a 	mov	r4,fp
    5ebc:	00075c00 	call	75c0 <_realloc_r>
    5ec0:	103f7626 	beq	r2,zero,5c9c <__sfvwrite_r+0x240>
    5ec4:	1023883a 	mov	r17,r2
    5ec8:	003f5006 	br	5c0c <__sfvwrite_r+0x1b0>
    5ecc:	00c00044 	movi	r3,1
    5ed0:	9d000044 	addi	r20,r19,1
    5ed4:	d8c00015 	stw	r3,0(sp)
    5ed8:	003f8206 	br	5ce4 <__sfvwrite_r+0x288>
    5edc:	9080030b 	ldhu	r2,12(r18)
    5ee0:	00c00244 	movi	r3,9
    5ee4:	013fffc4 	movi	r4,-1
    5ee8:	10801014 	ori	r2,r2,64
    5eec:	9080030d 	sth	r2,12(r18)
    5ef0:	e0c00015 	stw	r3,0(fp)
    5ef4:	003f0606 	br	5b10 <__sfvwrite_r+0xb4>

00005ef8 <_fwalk_reent>:
    5ef8:	defff704 	addi	sp,sp,-36
    5efc:	dcc00315 	stw	r19,12(sp)
    5f00:	24c0b804 	addi	r19,r4,736
    5f04:	dd800615 	stw	r22,24(sp)
    5f08:	dd400515 	stw	r21,20(sp)
    5f0c:	dfc00815 	stw	ra,32(sp)
    5f10:	ddc00715 	stw	r23,28(sp)
    5f14:	dd000415 	stw	r20,16(sp)
    5f18:	dc800215 	stw	r18,8(sp)
    5f1c:	dc400115 	stw	r17,4(sp)
    5f20:	dc000015 	stw	r16,0(sp)
    5f24:	202b883a 	mov	r21,r4
    5f28:	282d883a 	mov	r22,r5
    5f2c:	00053b40 	call	53b4 <__sfp_lock_acquire>
    5f30:	98002126 	beq	r19,zero,5fb8 <_fwalk_reent+0xc0>
    5f34:	002f883a 	mov	r23,zero
    5f38:	9c800117 	ldw	r18,4(r19)
    5f3c:	9c000217 	ldw	r16,8(r19)
    5f40:	90bfffc4 	addi	r2,r18,-1
    5f44:	10000d16 	blt	r2,zero,5f7c <_fwalk_reent+0x84>
    5f48:	0023883a 	mov	r17,zero
    5f4c:	053fffc4 	movi	r20,-1
    5f50:	8080030f 	ldh	r2,12(r16)
    5f54:	8c400044 	addi	r17,r17,1
    5f58:	10000626 	beq	r2,zero,5f74 <_fwalk_reent+0x7c>
    5f5c:	8080038f 	ldh	r2,14(r16)
    5f60:	800b883a 	mov	r5,r16
    5f64:	a809883a 	mov	r4,r21
    5f68:	15000226 	beq	r2,r20,5f74 <_fwalk_reent+0x7c>
    5f6c:	b03ee83a 	callr	r22
    5f70:	b8aeb03a 	or	r23,r23,r2
    5f74:	84001704 	addi	r16,r16,92
    5f78:	947ff51e 	bne	r18,r17,5f50 <_fwalk_reent+0x58>
    5f7c:	9cc00017 	ldw	r19,0(r19)
    5f80:	983fed1e 	bne	r19,zero,5f38 <_fwalk_reent+0x40>
    5f84:	00053b80 	call	53b8 <__sfp_lock_release>
    5f88:	b805883a 	mov	r2,r23
    5f8c:	dfc00817 	ldw	ra,32(sp)
    5f90:	ddc00717 	ldw	r23,28(sp)
    5f94:	dd800617 	ldw	r22,24(sp)
    5f98:	dd400517 	ldw	r21,20(sp)
    5f9c:	dd000417 	ldw	r20,16(sp)
    5fa0:	dcc00317 	ldw	r19,12(sp)
    5fa4:	dc800217 	ldw	r18,8(sp)
    5fa8:	dc400117 	ldw	r17,4(sp)
    5fac:	dc000017 	ldw	r16,0(sp)
    5fb0:	dec00904 	addi	sp,sp,36
    5fb4:	f800283a 	ret
    5fb8:	002f883a 	mov	r23,zero
    5fbc:	003ff106 	br	5f84 <_fwalk_reent+0x8c>

00005fc0 <_fwalk>:
    5fc0:	defff804 	addi	sp,sp,-32
    5fc4:	dcc00315 	stw	r19,12(sp)
    5fc8:	24c0b804 	addi	r19,r4,736
    5fcc:	dd400515 	stw	r21,20(sp)
    5fd0:	dfc00715 	stw	ra,28(sp)
    5fd4:	dd800615 	stw	r22,24(sp)
    5fd8:	dd000415 	stw	r20,16(sp)
    5fdc:	dc800215 	stw	r18,8(sp)
    5fe0:	dc400115 	stw	r17,4(sp)
    5fe4:	dc000015 	stw	r16,0(sp)
    5fe8:	282b883a 	mov	r21,r5
    5fec:	00053b40 	call	53b4 <__sfp_lock_acquire>
    5ff0:	98001f26 	beq	r19,zero,6070 <_fwalk+0xb0>
    5ff4:	002d883a 	mov	r22,zero
    5ff8:	9c800117 	ldw	r18,4(r19)
    5ffc:	9c000217 	ldw	r16,8(r19)
    6000:	90bfffc4 	addi	r2,r18,-1
    6004:	10000c16 	blt	r2,zero,6038 <_fwalk+0x78>
    6008:	0023883a 	mov	r17,zero
    600c:	053fffc4 	movi	r20,-1
    6010:	8080030f 	ldh	r2,12(r16)
    6014:	8c400044 	addi	r17,r17,1
    6018:	10000526 	beq	r2,zero,6030 <_fwalk+0x70>
    601c:	8080038f 	ldh	r2,14(r16)
    6020:	8009883a 	mov	r4,r16
    6024:	15000226 	beq	r2,r20,6030 <_fwalk+0x70>
    6028:	a83ee83a 	callr	r21
    602c:	b0acb03a 	or	r22,r22,r2
    6030:	84001704 	addi	r16,r16,92
    6034:	947ff61e 	bne	r18,r17,6010 <_fwalk+0x50>
    6038:	9cc00017 	ldw	r19,0(r19)
    603c:	983fee1e 	bne	r19,zero,5ff8 <_fwalk+0x38>
    6040:	00053b80 	call	53b8 <__sfp_lock_release>
    6044:	b005883a 	mov	r2,r22
    6048:	dfc00717 	ldw	ra,28(sp)
    604c:	dd800617 	ldw	r22,24(sp)
    6050:	dd400517 	ldw	r21,20(sp)
    6054:	dd000417 	ldw	r20,16(sp)
    6058:	dcc00317 	ldw	r19,12(sp)
    605c:	dc800217 	ldw	r18,8(sp)
    6060:	dc400117 	ldw	r17,4(sp)
    6064:	dc000017 	ldw	r16,0(sp)
    6068:	dec00804 	addi	sp,sp,32
    606c:	f800283a 	ret
    6070:	002d883a 	mov	r22,zero
    6074:	003ff206 	br	6040 <_fwalk+0x80>

00006078 <__locale_charset>:
    6078:	d0a00517 	ldw	r2,-32748(gp)
    607c:	f800283a 	ret

00006080 <_localeconv_r>:
    6080:	00800074 	movhi	r2,1
    6084:	10bc6c04 	addi	r2,r2,-3664
    6088:	f800283a 	ret

0000608c <localeconv>:
    608c:	00800074 	movhi	r2,1
    6090:	10840004 	addi	r2,r2,4096
    6094:	11000017 	ldw	r4,0(r2)
    6098:	00060801 	jmpi	6080 <_localeconv_r>

0000609c <_setlocale_r>:
    609c:	defffc04 	addi	sp,sp,-16
    60a0:	00c00074 	movhi	r3,1
    60a4:	18fc4204 	addi	r3,r3,-3832
    60a8:	dc800215 	stw	r18,8(sp)
    60ac:	dc400115 	stw	r17,4(sp)
    60b0:	dc000015 	stw	r16,0(sp)
    60b4:	2023883a 	mov	r17,r4
    60b8:	2825883a 	mov	r18,r5
    60bc:	dfc00315 	stw	ra,12(sp)
    60c0:	3021883a 	mov	r16,r6
    60c4:	3009883a 	mov	r4,r6
    60c8:	180b883a 	mov	r5,r3
    60cc:	30000926 	beq	r6,zero,60f4 <_setlocale_r+0x58>
    60d0:	0007f500 	call	7f50 <strcmp>
    60d4:	8009883a 	mov	r4,r16
    60d8:	01400074 	movhi	r5,1
    60dc:	297c5304 	addi	r5,r5,-3764
    60e0:	10000b1e 	bne	r2,zero,6110 <_setlocale_r+0x74>
    60e4:	8c000d15 	stw	r16,52(r17)
    60e8:	8c800c15 	stw	r18,48(r17)
    60ec:	00c00074 	movhi	r3,1
    60f0:	18fc4204 	addi	r3,r3,-3832
    60f4:	1805883a 	mov	r2,r3
    60f8:	dfc00317 	ldw	ra,12(sp)
    60fc:	dc800217 	ldw	r18,8(sp)
    6100:	dc400117 	ldw	r17,4(sp)
    6104:	dc000017 	ldw	r16,0(sp)
    6108:	dec00404 	addi	sp,sp,16
    610c:	f800283a 	ret
    6110:	0007f500 	call	7f50 <strcmp>
    6114:	0007883a 	mov	r3,zero
    6118:	103ff226 	beq	r2,zero,60e4 <_setlocale_r+0x48>
    611c:	003ff506 	br	60f4 <_setlocale_r+0x58>

00006120 <setlocale>:
    6120:	01800074 	movhi	r6,1
    6124:	31840004 	addi	r6,r6,4096
    6128:	2007883a 	mov	r3,r4
    612c:	31000017 	ldw	r4,0(r6)
    6130:	280d883a 	mov	r6,r5
    6134:	180b883a 	mov	r5,r3
    6138:	000609c1 	jmpi	609c <_setlocale_r>

0000613c <__smakebuf_r>:
    613c:	2880030b 	ldhu	r2,12(r5)
    6140:	deffed04 	addi	sp,sp,-76
    6144:	dc401015 	stw	r17,64(sp)
    6148:	1080008c 	andi	r2,r2,2
    614c:	dc000f15 	stw	r16,60(sp)
    6150:	dfc01215 	stw	ra,72(sp)
    6154:	dc801115 	stw	r18,68(sp)
    6158:	2821883a 	mov	r16,r5
    615c:	2023883a 	mov	r17,r4
    6160:	10000b26 	beq	r2,zero,6190 <__smakebuf_r+0x54>
    6164:	28c010c4 	addi	r3,r5,67
    6168:	00800044 	movi	r2,1
    616c:	28800515 	stw	r2,20(r5)
    6170:	28c00415 	stw	r3,16(r5)
    6174:	28c00015 	stw	r3,0(r5)
    6178:	dfc01217 	ldw	ra,72(sp)
    617c:	dc801117 	ldw	r18,68(sp)
    6180:	dc401017 	ldw	r17,64(sp)
    6184:	dc000f17 	ldw	r16,60(sp)
    6188:	dec01304 	addi	sp,sp,76
    618c:	f800283a 	ret
    6190:	2940038f 	ldh	r5,14(r5)
    6194:	28002116 	blt	r5,zero,621c <__smakebuf_r+0xe0>
    6198:	d80d883a 	mov	r6,sp
    619c:	00082cc0 	call	82cc <_fstat_r>
    61a0:	10001e16 	blt	r2,zero,621c <__smakebuf_r+0xe0>
    61a4:	d8800117 	ldw	r2,4(sp)
    61a8:	00e00014 	movui	r3,32768
    61ac:	113c000c 	andi	r4,r2,61440
    61b0:	20c03126 	beq	r4,r3,6278 <__smakebuf_r+0x13c>
    61b4:	8080030b 	ldhu	r2,12(r16)
    61b8:	00c80004 	movi	r3,8192
    61bc:	10820014 	ori	r2,r2,2048
    61c0:	8080030d 	sth	r2,12(r16)
    61c4:	20c01e26 	beq	r4,r3,6240 <__smakebuf_r+0x104>
    61c8:	04810004 	movi	r18,1024
    61cc:	8809883a 	mov	r4,r17
    61d0:	900b883a 	mov	r5,r18
    61d4:	0000eb80 	call	eb8 <_malloc_r>
    61d8:	1009883a 	mov	r4,r2
    61dc:	10003126 	beq	r2,zero,62a4 <__smakebuf_r+0x168>
    61e0:	80c0030b 	ldhu	r3,12(r16)
    61e4:	00800034 	movhi	r2,0
    61e8:	10952a04 	addi	r2,r2,21672
    61ec:	88800f15 	stw	r2,60(r17)
    61f0:	18c02014 	ori	r3,r3,128
    61f4:	84800515 	stw	r18,20(r16)
    61f8:	80c0030d 	sth	r3,12(r16)
    61fc:	81000415 	stw	r4,16(r16)
    6200:	81000015 	stw	r4,0(r16)
    6204:	dfc01217 	ldw	ra,72(sp)
    6208:	dc801117 	ldw	r18,68(sp)
    620c:	dc401017 	ldw	r17,64(sp)
    6210:	dc000f17 	ldw	r16,60(sp)
    6214:	dec01304 	addi	sp,sp,76
    6218:	f800283a 	ret
    621c:	80c0030b 	ldhu	r3,12(r16)
    6220:	1880200c 	andi	r2,r3,128
    6224:	10000426 	beq	r2,zero,6238 <__smakebuf_r+0xfc>
    6228:	04801004 	movi	r18,64
    622c:	18820014 	ori	r2,r3,2048
    6230:	8080030d 	sth	r2,12(r16)
    6234:	003fe506 	br	61cc <__smakebuf_r+0x90>
    6238:	04810004 	movi	r18,1024
    623c:	003ffb06 	br	622c <__smakebuf_r+0xf0>
    6240:	8140038f 	ldh	r5,14(r16)
    6244:	8809883a 	mov	r4,r17
    6248:	00083400 	call	8340 <_isatty_r>
    624c:	103fde26 	beq	r2,zero,61c8 <__smakebuf_r+0x8c>
    6250:	8080030b 	ldhu	r2,12(r16)
    6254:	80c010c4 	addi	r3,r16,67
    6258:	04810004 	movi	r18,1024
    625c:	10800054 	ori	r2,r2,1
    6260:	8080030d 	sth	r2,12(r16)
    6264:	00800044 	movi	r2,1
    6268:	80c00415 	stw	r3,16(r16)
    626c:	80800515 	stw	r2,20(r16)
    6270:	80c00015 	stw	r3,0(r16)
    6274:	003fd506 	br	61cc <__smakebuf_r+0x90>
    6278:	80c00a17 	ldw	r3,40(r16)
    627c:	00800034 	movhi	r2,0
    6280:	109f8304 	addi	r2,r2,32268
    6284:	18bfcb1e 	bne	r3,r2,61b4 <__smakebuf_r+0x78>
    6288:	8080030b 	ldhu	r2,12(r16)
    628c:	00c10004 	movi	r3,1024
    6290:	1825883a 	mov	r18,r3
    6294:	10c4b03a 	or	r2,r2,r3
    6298:	8080030d 	sth	r2,12(r16)
    629c:	80c01315 	stw	r3,76(r16)
    62a0:	003fca06 	br	61cc <__smakebuf_r+0x90>
    62a4:	8100030b 	ldhu	r4,12(r16)
    62a8:	2080800c 	andi	r2,r4,512
    62ac:	103fb21e 	bne	r2,zero,6178 <__smakebuf_r+0x3c>
    62b0:	80c010c4 	addi	r3,r16,67
    62b4:	21000094 	ori	r4,r4,2
    62b8:	00800044 	movi	r2,1
    62bc:	80800515 	stw	r2,20(r16)
    62c0:	8100030d 	sth	r4,12(r16)
    62c4:	80c00415 	stw	r3,16(r16)
    62c8:	80c00015 	stw	r3,0(r16)
    62cc:	003faa06 	br	6178 <__smakebuf_r+0x3c>

000062d0 <memchr>:
    62d0:	008000c4 	movi	r2,3
    62d4:	29403fcc 	andi	r5,r5,255
    62d8:	2007883a 	mov	r3,r4
    62dc:	1180022e 	bgeu	r2,r6,62e8 <memchr+0x18>
    62e0:	2084703a 	and	r2,r4,r2
    62e4:	10000b26 	beq	r2,zero,6314 <memchr+0x44>
    62e8:	313fffc4 	addi	r4,r6,-1
    62ec:	3000051e 	bne	r6,zero,6304 <memchr+0x34>
    62f0:	00002c06 	br	63a4 <memchr+0xd4>
    62f4:	213fffc4 	addi	r4,r4,-1
    62f8:	00bfffc4 	movi	r2,-1
    62fc:	18c00044 	addi	r3,r3,1
    6300:	20802826 	beq	r4,r2,63a4 <memchr+0xd4>
    6304:	18800003 	ldbu	r2,0(r3)
    6308:	28bffa1e 	bne	r5,r2,62f4 <memchr+0x24>
    630c:	1805883a 	mov	r2,r3
    6310:	f800283a 	ret
    6314:	0011883a 	mov	r8,zero
    6318:	0007883a 	mov	r3,zero
    631c:	01c00104 	movi	r7,4
    6320:	4004923a 	slli	r2,r8,8
    6324:	18c00044 	addi	r3,r3,1
    6328:	1151883a 	add	r8,r2,r5
    632c:	19fffc1e 	bne	r3,r7,6320 <memchr+0x50>
    6330:	02bfbff4 	movhi	r10,65279
    6334:	52bfbfc4 	addi	r10,r10,-257
    6338:	02602074 	movhi	r9,32897
    633c:	4a602004 	addi	r9,r9,-32640
    6340:	02c000c4 	movi	r11,3
    6344:	20800017 	ldw	r2,0(r4)
    6348:	31bfff04 	addi	r6,r6,-4
    634c:	200f883a 	mov	r7,r4
    6350:	1204f03a 	xor	r2,r2,r8
    6354:	1287883a 	add	r3,r2,r10
    6358:	1a46703a 	and	r3,r3,r9
    635c:	0084303a 	nor	r2,zero,r2
    6360:	10c4703a 	and	r2,r2,r3
    6364:	10000b26 	beq	r2,zero,6394 <memchr+0xc4>
    6368:	20800003 	ldbu	r2,0(r4)
    636c:	28800f26 	beq	r5,r2,63ac <memchr+0xdc>
    6370:	20800043 	ldbu	r2,1(r4)
    6374:	21c00044 	addi	r7,r4,1
    6378:	28800c26 	beq	r5,r2,63ac <memchr+0xdc>
    637c:	20800083 	ldbu	r2,2(r4)
    6380:	21c00084 	addi	r7,r4,2
    6384:	28800926 	beq	r5,r2,63ac <memchr+0xdc>
    6388:	208000c3 	ldbu	r2,3(r4)
    638c:	21c000c4 	addi	r7,r4,3
    6390:	28800626 	beq	r5,r2,63ac <memchr+0xdc>
    6394:	21000104 	addi	r4,r4,4
    6398:	59bfea36 	bltu	r11,r6,6344 <memchr+0x74>
    639c:	2007883a 	mov	r3,r4
    63a0:	003fd106 	br	62e8 <memchr+0x18>
    63a4:	0005883a 	mov	r2,zero
    63a8:	f800283a 	ret
    63ac:	3805883a 	mov	r2,r7
    63b0:	f800283a 	ret

000063b4 <memcpy>:
    63b4:	01c003c4 	movi	r7,15
    63b8:	2007883a 	mov	r3,r4
    63bc:	3980032e 	bgeu	r7,r6,63cc <memcpy+0x18>
    63c0:	2904b03a 	or	r2,r5,r4
    63c4:	108000cc 	andi	r2,r2,3
    63c8:	10000926 	beq	r2,zero,63f0 <memcpy+0x3c>
    63cc:	30000626 	beq	r6,zero,63e8 <memcpy+0x34>
    63d0:	30cd883a 	add	r6,r6,r3
    63d4:	28800003 	ldbu	r2,0(r5)
    63d8:	29400044 	addi	r5,r5,1
    63dc:	18800005 	stb	r2,0(r3)
    63e0:	18c00044 	addi	r3,r3,1
    63e4:	30fffb1e 	bne	r6,r3,63d4 <memcpy+0x20>
    63e8:	2005883a 	mov	r2,r4
    63ec:	f800283a 	ret
    63f0:	3811883a 	mov	r8,r7
    63f4:	200f883a 	mov	r7,r4
    63f8:	28c00017 	ldw	r3,0(r5)
    63fc:	31bffc04 	addi	r6,r6,-16
    6400:	38c00015 	stw	r3,0(r7)
    6404:	28800117 	ldw	r2,4(r5)
    6408:	38800115 	stw	r2,4(r7)
    640c:	28c00217 	ldw	r3,8(r5)
    6410:	38c00215 	stw	r3,8(r7)
    6414:	28800317 	ldw	r2,12(r5)
    6418:	29400404 	addi	r5,r5,16
    641c:	38800315 	stw	r2,12(r7)
    6420:	39c00404 	addi	r7,r7,16
    6424:	41bff436 	bltu	r8,r6,63f8 <memcpy+0x44>
    6428:	008000c4 	movi	r2,3
    642c:	1180072e 	bgeu	r2,r6,644c <memcpy+0x98>
    6430:	1007883a 	mov	r3,r2
    6434:	28800017 	ldw	r2,0(r5)
    6438:	31bfff04 	addi	r6,r6,-4
    643c:	29400104 	addi	r5,r5,4
    6440:	38800015 	stw	r2,0(r7)
    6444:	39c00104 	addi	r7,r7,4
    6448:	19bffa36 	bltu	r3,r6,6434 <memcpy+0x80>
    644c:	3807883a 	mov	r3,r7
    6450:	003fde06 	br	63cc <memcpy+0x18>

00006454 <memmove>:
    6454:	2807883a 	mov	r3,r5
    6458:	2011883a 	mov	r8,r4
    645c:	29000c2e 	bgeu	r5,r4,6490 <memmove+0x3c>
    6460:	298f883a 	add	r7,r5,r6
    6464:	21c00a2e 	bgeu	r4,r7,6490 <memmove+0x3c>
    6468:	30000726 	beq	r6,zero,6488 <memmove+0x34>
    646c:	2187883a 	add	r3,r4,r6
    6470:	198dc83a 	sub	r6,r3,r6
    6474:	39ffffc4 	addi	r7,r7,-1
    6478:	38800003 	ldbu	r2,0(r7)
    647c:	18ffffc4 	addi	r3,r3,-1
    6480:	18800005 	stb	r2,0(r3)
    6484:	19bffb1e 	bne	r3,r6,6474 <memmove+0x20>
    6488:	2005883a 	mov	r2,r4
    648c:	f800283a 	ret
    6490:	01c003c4 	movi	r7,15
    6494:	39800a36 	bltu	r7,r6,64c0 <memmove+0x6c>
    6498:	303ffb26 	beq	r6,zero,6488 <memmove+0x34>
    649c:	400f883a 	mov	r7,r8
    64a0:	320d883a 	add	r6,r6,r8
    64a4:	28800003 	ldbu	r2,0(r5)
    64a8:	29400044 	addi	r5,r5,1
    64ac:	38800005 	stb	r2,0(r7)
    64b0:	39c00044 	addi	r7,r7,1
    64b4:	39bffb1e 	bne	r7,r6,64a4 <memmove+0x50>
    64b8:	2005883a 	mov	r2,r4
    64bc:	f800283a 	ret
    64c0:	1904b03a 	or	r2,r3,r4
    64c4:	108000cc 	andi	r2,r2,3
    64c8:	103ff31e 	bne	r2,zero,6498 <memmove+0x44>
    64cc:	3811883a 	mov	r8,r7
    64d0:	180b883a 	mov	r5,r3
    64d4:	200f883a 	mov	r7,r4
    64d8:	28c00017 	ldw	r3,0(r5)
    64dc:	31bffc04 	addi	r6,r6,-16
    64e0:	38c00015 	stw	r3,0(r7)
    64e4:	28800117 	ldw	r2,4(r5)
    64e8:	38800115 	stw	r2,4(r7)
    64ec:	28c00217 	ldw	r3,8(r5)
    64f0:	38c00215 	stw	r3,8(r7)
    64f4:	28800317 	ldw	r2,12(r5)
    64f8:	29400404 	addi	r5,r5,16
    64fc:	38800315 	stw	r2,12(r7)
    6500:	39c00404 	addi	r7,r7,16
    6504:	41bff436 	bltu	r8,r6,64d8 <memmove+0x84>
    6508:	008000c4 	movi	r2,3
    650c:	1180072e 	bgeu	r2,r6,652c <memmove+0xd8>
    6510:	1007883a 	mov	r3,r2
    6514:	28800017 	ldw	r2,0(r5)
    6518:	31bfff04 	addi	r6,r6,-4
    651c:	29400104 	addi	r5,r5,4
    6520:	38800015 	stw	r2,0(r7)
    6524:	39c00104 	addi	r7,r7,4
    6528:	19bffa36 	bltu	r3,r6,6514 <memmove+0xc0>
    652c:	3811883a 	mov	r8,r7
    6530:	003fd906 	br	6498 <memmove+0x44>

00006534 <memset>:
    6534:	008000c4 	movi	r2,3
    6538:	29403fcc 	andi	r5,r5,255
    653c:	2007883a 	mov	r3,r4
    6540:	1180022e 	bgeu	r2,r6,654c <memset+0x18>
    6544:	2084703a 	and	r2,r4,r2
    6548:	10000826 	beq	r2,zero,656c <memset+0x38>
    654c:	30000526 	beq	r6,zero,6564 <memset+0x30>
    6550:	2805883a 	mov	r2,r5
    6554:	30cd883a 	add	r6,r6,r3
    6558:	18800005 	stb	r2,0(r3)
    655c:	18c00044 	addi	r3,r3,1
    6560:	19bffd1e 	bne	r3,r6,6558 <memset+0x24>
    6564:	2005883a 	mov	r2,r4
    6568:	f800283a 	ret
    656c:	2804923a 	slli	r2,r5,8
    6570:	020003c4 	movi	r8,15
    6574:	200f883a 	mov	r7,r4
    6578:	2884b03a 	or	r2,r5,r2
    657c:	1006943a 	slli	r3,r2,16
    6580:	10c6b03a 	or	r3,r2,r3
    6584:	41800a2e 	bgeu	r8,r6,65b0 <memset+0x7c>
    6588:	4005883a 	mov	r2,r8
    658c:	31bffc04 	addi	r6,r6,-16
    6590:	38c00015 	stw	r3,0(r7)
    6594:	38c00115 	stw	r3,4(r7)
    6598:	38c00215 	stw	r3,8(r7)
    659c:	38c00315 	stw	r3,12(r7)
    65a0:	39c00404 	addi	r7,r7,16
    65a4:	11bff936 	bltu	r2,r6,658c <memset+0x58>
    65a8:	008000c4 	movi	r2,3
    65ac:	1180052e 	bgeu	r2,r6,65c4 <memset+0x90>
    65b0:	31bfff04 	addi	r6,r6,-4
    65b4:	008000c4 	movi	r2,3
    65b8:	38c00015 	stw	r3,0(r7)
    65bc:	39c00104 	addi	r7,r7,4
    65c0:	11bffb36 	bltu	r2,r6,65b0 <memset+0x7c>
    65c4:	3807883a 	mov	r3,r7
    65c8:	003fe006 	br	654c <memset+0x18>

000065cc <_Bfree>:
    65cc:	28000826 	beq	r5,zero,65f0 <_Bfree+0x24>
    65d0:	28800117 	ldw	r2,4(r5)
    65d4:	21001317 	ldw	r4,76(r4)
    65d8:	1085883a 	add	r2,r2,r2
    65dc:	1085883a 	add	r2,r2,r2
    65e0:	1105883a 	add	r2,r2,r4
    65e4:	10c00017 	ldw	r3,0(r2)
    65e8:	28c00015 	stw	r3,0(r5)
    65ec:	11400015 	stw	r5,0(r2)
    65f0:	f800283a 	ret

000065f4 <__hi0bits>:
    65f4:	20bfffec 	andhi	r2,r4,65535
    65f8:	10001426 	beq	r2,zero,664c <__hi0bits+0x58>
    65fc:	0007883a 	mov	r3,zero
    6600:	20bfc02c 	andhi	r2,r4,65280
    6604:	1000021e 	bne	r2,zero,6610 <__hi0bits+0x1c>
    6608:	2008923a 	slli	r4,r4,8
    660c:	18c00204 	addi	r3,r3,8
    6610:	20bc002c 	andhi	r2,r4,61440
    6614:	1000021e 	bne	r2,zero,6620 <__hi0bits+0x2c>
    6618:	2008913a 	slli	r4,r4,4
    661c:	18c00104 	addi	r3,r3,4
    6620:	20b0002c 	andhi	r2,r4,49152
    6624:	1000031e 	bne	r2,zero,6634 <__hi0bits+0x40>
    6628:	2105883a 	add	r2,r4,r4
    662c:	18c00084 	addi	r3,r3,2
    6630:	1089883a 	add	r4,r2,r2
    6634:	20000316 	blt	r4,zero,6644 <__hi0bits+0x50>
    6638:	2090002c 	andhi	r2,r4,16384
    663c:	10000626 	beq	r2,zero,6658 <__hi0bits+0x64>
    6640:	18c00044 	addi	r3,r3,1
    6644:	1805883a 	mov	r2,r3
    6648:	f800283a 	ret
    664c:	2008943a 	slli	r4,r4,16
    6650:	00c00404 	movi	r3,16
    6654:	003fea06 	br	6600 <__hi0bits+0xc>
    6658:	00c00804 	movi	r3,32
    665c:	1805883a 	mov	r2,r3
    6660:	f800283a 	ret

00006664 <__lo0bits>:
    6664:	20c00017 	ldw	r3,0(r4)
    6668:	188001cc 	andi	r2,r3,7
    666c:	10000a26 	beq	r2,zero,6698 <__lo0bits+0x34>
    6670:	1880004c 	andi	r2,r3,1
    6674:	1005003a 	cmpeq	r2,r2,zero
    6678:	10002126 	beq	r2,zero,6700 <__lo0bits+0x9c>
    667c:	1880008c 	andi	r2,r3,2
    6680:	1000251e 	bne	r2,zero,6718 <__lo0bits+0xb4>
    6684:	1804d0ba 	srli	r2,r3,2
    6688:	01400084 	movi	r5,2
    668c:	20800015 	stw	r2,0(r4)
    6690:	2805883a 	mov	r2,r5
    6694:	f800283a 	ret
    6698:	18bfffcc 	andi	r2,r3,65535
    669c:	10001526 	beq	r2,zero,66f4 <__lo0bits+0x90>
    66a0:	000b883a 	mov	r5,zero
    66a4:	18803fcc 	andi	r2,r3,255
    66a8:	1000021e 	bne	r2,zero,66b4 <__lo0bits+0x50>
    66ac:	1806d23a 	srli	r3,r3,8
    66b0:	29400204 	addi	r5,r5,8
    66b4:	188003cc 	andi	r2,r3,15
    66b8:	1000021e 	bne	r2,zero,66c4 <__lo0bits+0x60>
    66bc:	1806d13a 	srli	r3,r3,4
    66c0:	29400104 	addi	r5,r5,4
    66c4:	188000cc 	andi	r2,r3,3
    66c8:	1000021e 	bne	r2,zero,66d4 <__lo0bits+0x70>
    66cc:	1806d0ba 	srli	r3,r3,2
    66d0:	29400084 	addi	r5,r5,2
    66d4:	1880004c 	andi	r2,r3,1
    66d8:	1000031e 	bne	r2,zero,66e8 <__lo0bits+0x84>
    66dc:	1806d07a 	srli	r3,r3,1
    66e0:	18000a26 	beq	r3,zero,670c <__lo0bits+0xa8>
    66e4:	29400044 	addi	r5,r5,1
    66e8:	2805883a 	mov	r2,r5
    66ec:	20c00015 	stw	r3,0(r4)
    66f0:	f800283a 	ret
    66f4:	1806d43a 	srli	r3,r3,16
    66f8:	01400404 	movi	r5,16
    66fc:	003fe906 	br	66a4 <__lo0bits+0x40>
    6700:	000b883a 	mov	r5,zero
    6704:	2805883a 	mov	r2,r5
    6708:	f800283a 	ret
    670c:	01400804 	movi	r5,32
    6710:	2805883a 	mov	r2,r5
    6714:	f800283a 	ret
    6718:	1804d07a 	srli	r2,r3,1
    671c:	01400044 	movi	r5,1
    6720:	20800015 	stw	r2,0(r4)
    6724:	003fda06 	br	6690 <__lo0bits+0x2c>

00006728 <__mcmp>:
    6728:	20800417 	ldw	r2,16(r4)
    672c:	28c00417 	ldw	r3,16(r5)
    6730:	10cfc83a 	sub	r7,r2,r3
    6734:	38000c1e 	bne	r7,zero,6768 <__mcmp+0x40>
    6738:	18c5883a 	add	r2,r3,r3
    673c:	1085883a 	add	r2,r2,r2
    6740:	10c00504 	addi	r3,r2,20
    6744:	21000504 	addi	r4,r4,20
    6748:	28cb883a 	add	r5,r5,r3
    674c:	2085883a 	add	r2,r4,r2
    6750:	10bfff04 	addi	r2,r2,-4
    6754:	297fff04 	addi	r5,r5,-4
    6758:	11800017 	ldw	r6,0(r2)
    675c:	28c00017 	ldw	r3,0(r5)
    6760:	30c0031e 	bne	r6,r3,6770 <__mcmp+0x48>
    6764:	20bffa36 	bltu	r4,r2,6750 <__mcmp+0x28>
    6768:	3805883a 	mov	r2,r7
    676c:	f800283a 	ret
    6770:	30c00336 	bltu	r6,r3,6780 <__mcmp+0x58>
    6774:	01c00044 	movi	r7,1
    6778:	3805883a 	mov	r2,r7
    677c:	f800283a 	ret
    6780:	01ffffc4 	movi	r7,-1
    6784:	003ff806 	br	6768 <__mcmp+0x40>

00006788 <__ulp>:
    6788:	295ffc2c 	andhi	r5,r5,32752
    678c:	013f3034 	movhi	r4,64704
    6790:	290b883a 	add	r5,r5,r4
    6794:	0145c83a 	sub	r2,zero,r5
    6798:	1007d53a 	srai	r3,r2,20
    679c:	000d883a 	mov	r6,zero
    67a0:	0140040e 	bge	zero,r5,67b4 <__ulp+0x2c>
    67a4:	280f883a 	mov	r7,r5
    67a8:	3807883a 	mov	r3,r7
    67ac:	3005883a 	mov	r2,r6
    67b0:	f800283a 	ret
    67b4:	008004c4 	movi	r2,19
    67b8:	193ffb04 	addi	r4,r3,-20
    67bc:	10c00c0e 	bge	r2,r3,67f0 <__ulp+0x68>
    67c0:	008007c4 	movi	r2,31
    67c4:	1107c83a 	sub	r3,r2,r4
    67c8:	00800784 	movi	r2,30
    67cc:	01400044 	movi	r5,1
    67d0:	11000216 	blt	r2,r4,67dc <__ulp+0x54>
    67d4:	00800044 	movi	r2,1
    67d8:	10ca983a 	sll	r5,r2,r3
    67dc:	000f883a 	mov	r7,zero
    67e0:	280d883a 	mov	r6,r5
    67e4:	3807883a 	mov	r3,r7
    67e8:	3005883a 	mov	r2,r6
    67ec:	f800283a 	ret
    67f0:	00800234 	movhi	r2,8
    67f4:	10cfd83a 	sra	r7,r2,r3
    67f8:	000d883a 	mov	r6,zero
    67fc:	3005883a 	mov	r2,r6
    6800:	3807883a 	mov	r3,r7
    6804:	f800283a 	ret

00006808 <__b2d>:
    6808:	20800417 	ldw	r2,16(r4)
    680c:	defff904 	addi	sp,sp,-28
    6810:	dd000415 	stw	r20,16(sp)
    6814:	1085883a 	add	r2,r2,r2
    6818:	25000504 	addi	r20,r4,20
    681c:	1085883a 	add	r2,r2,r2
    6820:	dc000015 	stw	r16,0(sp)
    6824:	a0a1883a 	add	r16,r20,r2
    6828:	dd400515 	stw	r21,20(sp)
    682c:	857fff17 	ldw	r21,-4(r16)
    6830:	dc400115 	stw	r17,4(sp)
    6834:	dfc00615 	stw	ra,24(sp)
    6838:	a809883a 	mov	r4,r21
    683c:	2823883a 	mov	r17,r5
    6840:	dcc00315 	stw	r19,12(sp)
    6844:	dc800215 	stw	r18,8(sp)
    6848:	00065f40 	call	65f4 <__hi0bits>
    684c:	100b883a 	mov	r5,r2
    6850:	00800804 	movi	r2,32
    6854:	1145c83a 	sub	r2,r2,r5
    6858:	88800015 	stw	r2,0(r17)
    685c:	00800284 	movi	r2,10
    6860:	80ffff04 	addi	r3,r16,-4
    6864:	11401416 	blt	r2,r5,68b8 <__b2d+0xb0>
    6868:	008002c4 	movi	r2,11
    686c:	1149c83a 	sub	r4,r2,r5
    6870:	a0c02736 	bltu	r20,r3,6910 <__b2d+0x108>
    6874:	000d883a 	mov	r6,zero
    6878:	28800544 	addi	r2,r5,21
    687c:	a906d83a 	srl	r3,r21,r4
    6880:	a884983a 	sll	r2,r21,r2
    6884:	1ccffc34 	orhi	r19,r3,16368
    6888:	11a4b03a 	or	r18,r2,r6
    688c:	9005883a 	mov	r2,r18
    6890:	9807883a 	mov	r3,r19
    6894:	dfc00617 	ldw	ra,24(sp)
    6898:	dd400517 	ldw	r21,20(sp)
    689c:	dd000417 	ldw	r20,16(sp)
    68a0:	dcc00317 	ldw	r19,12(sp)
    68a4:	dc800217 	ldw	r18,8(sp)
    68a8:	dc400117 	ldw	r17,4(sp)
    68ac:	dc000017 	ldw	r16,0(sp)
    68b0:	dec00704 	addi	sp,sp,28
    68b4:	f800283a 	ret
    68b8:	a0c00e36 	bltu	r20,r3,68f4 <__b2d+0xec>
    68bc:	293ffd44 	addi	r4,r5,-11
    68c0:	000d883a 	mov	r6,zero
    68c4:	20000f26 	beq	r4,zero,6904 <__b2d+0xfc>
    68c8:	00800804 	movi	r2,32
    68cc:	110bc83a 	sub	r5,r2,r4
    68d0:	a0c01236 	bltu	r20,r3,691c <__b2d+0x114>
    68d4:	000f883a 	mov	r7,zero
    68d8:	a904983a 	sll	r2,r21,r4
    68dc:	3146d83a 	srl	r3,r6,r5
    68e0:	3108983a 	sll	r4,r6,r4
    68e4:	108ffc34 	orhi	r2,r2,16368
    68e8:	18a6b03a 	or	r19,r3,r2
    68ec:	3924b03a 	or	r18,r7,r4
    68f0:	003fe606 	br	688c <__b2d+0x84>
    68f4:	293ffd44 	addi	r4,r5,-11
    68f8:	81bffe17 	ldw	r6,-8(r16)
    68fc:	80fffe04 	addi	r3,r16,-8
    6900:	203ff11e 	bne	r4,zero,68c8 <__b2d+0xc0>
    6904:	accffc34 	orhi	r19,r21,16368
    6908:	3025883a 	mov	r18,r6
    690c:	003fdf06 	br	688c <__b2d+0x84>
    6910:	18bfff17 	ldw	r2,-4(r3)
    6914:	110cd83a 	srl	r6,r2,r4
    6918:	003fd706 	br	6878 <__b2d+0x70>
    691c:	18bfff17 	ldw	r2,-4(r3)
    6920:	114ed83a 	srl	r7,r2,r5
    6924:	003fec06 	br	68d8 <__b2d+0xd0>

00006928 <__ratio>:
    6928:	defff904 	addi	sp,sp,-28
    692c:	dc400215 	stw	r17,8(sp)
    6930:	2823883a 	mov	r17,r5
    6934:	d80b883a 	mov	r5,sp
    6938:	dfc00615 	stw	ra,24(sp)
    693c:	dd000515 	stw	r20,20(sp)
    6940:	dcc00415 	stw	r19,16(sp)
    6944:	dc800315 	stw	r18,12(sp)
    6948:	2025883a 	mov	r18,r4
    694c:	00068080 	call	6808 <__b2d>
    6950:	8809883a 	mov	r4,r17
    6954:	d9400104 	addi	r5,sp,4
    6958:	1027883a 	mov	r19,r2
    695c:	1829883a 	mov	r20,r3
    6960:	00068080 	call	6808 <__b2d>
    6964:	89000417 	ldw	r4,16(r17)
    6968:	91c00417 	ldw	r7,16(r18)
    696c:	d9800117 	ldw	r6,4(sp)
    6970:	180b883a 	mov	r5,r3
    6974:	390fc83a 	sub	r7,r7,r4
    6978:	1009883a 	mov	r4,r2
    697c:	d8800017 	ldw	r2,0(sp)
    6980:	380e917a 	slli	r7,r7,5
    6984:	2011883a 	mov	r8,r4
    6988:	1185c83a 	sub	r2,r2,r6
    698c:	11c5883a 	add	r2,r2,r7
    6990:	1006953a 	slli	r3,r2,20
    6994:	2813883a 	mov	r9,r5
    6998:	00800d0e 	bge	zero,r2,69d0 <__ratio+0xa8>
    699c:	1d29883a 	add	r20,r3,r20
    69a0:	a00b883a 	mov	r5,r20
    69a4:	480f883a 	mov	r7,r9
    69a8:	9809883a 	mov	r4,r19
    69ac:	400d883a 	mov	r6,r8
    69b0:	000998c0 	call	998c <__divdf3>
    69b4:	dfc00617 	ldw	ra,24(sp)
    69b8:	dd000517 	ldw	r20,20(sp)
    69bc:	dcc00417 	ldw	r19,16(sp)
    69c0:	dc800317 	ldw	r18,12(sp)
    69c4:	dc400217 	ldw	r17,8(sp)
    69c8:	dec00704 	addi	sp,sp,28
    69cc:	f800283a 	ret
    69d0:	28d3c83a 	sub	r9,r5,r3
    69d4:	003ff206 	br	69a0 <__ratio+0x78>

000069d8 <_mprec_log10>:
    69d8:	defffe04 	addi	sp,sp,-8
    69dc:	008005c4 	movi	r2,23
    69e0:	dc000015 	stw	r16,0(sp)
    69e4:	dfc00115 	stw	ra,4(sp)
    69e8:	2021883a 	mov	r16,r4
    69ec:	11000c16 	blt	r2,r4,6a20 <_mprec_log10+0x48>
    69f0:	200490fa 	slli	r2,r4,3
    69f4:	00c00074 	movhi	r3,1
    69f8:	18fc7804 	addi	r3,r3,-3616
    69fc:	10c5883a 	add	r2,r2,r3
    6a00:	12400117 	ldw	r9,4(r2)
    6a04:	12000017 	ldw	r8,0(r2)
    6a08:	4807883a 	mov	r3,r9
    6a0c:	4005883a 	mov	r2,r8
    6a10:	dfc00117 	ldw	ra,4(sp)
    6a14:	dc000017 	ldw	r16,0(sp)
    6a18:	dec00204 	addi	sp,sp,8
    6a1c:	f800283a 	ret
    6a20:	0011883a 	mov	r8,zero
    6a24:	024ffc34 	movhi	r9,16368
    6a28:	0005883a 	mov	r2,zero
    6a2c:	00d00934 	movhi	r3,16420
    6a30:	480b883a 	mov	r5,r9
    6a34:	4009883a 	mov	r4,r8
    6a38:	180f883a 	mov	r7,r3
    6a3c:	100d883a 	mov	r6,r2
    6a40:	00095c80 	call	95c8 <__muldf3>
    6a44:	843fffc4 	addi	r16,r16,-1
    6a48:	1011883a 	mov	r8,r2
    6a4c:	1813883a 	mov	r9,r3
    6a50:	803ff51e 	bne	r16,zero,6a28 <_mprec_log10+0x50>
    6a54:	4005883a 	mov	r2,r8
    6a58:	4807883a 	mov	r3,r9
    6a5c:	dfc00117 	ldw	ra,4(sp)
    6a60:	dc000017 	ldw	r16,0(sp)
    6a64:	dec00204 	addi	sp,sp,8
    6a68:	f800283a 	ret

00006a6c <__copybits>:
    6a6c:	297fffc4 	addi	r5,r5,-1
    6a70:	30800417 	ldw	r2,16(r6)
    6a74:	280bd17a 	srai	r5,r5,5
    6a78:	31800504 	addi	r6,r6,20
    6a7c:	1085883a 	add	r2,r2,r2
    6a80:	294b883a 	add	r5,r5,r5
    6a84:	294b883a 	add	r5,r5,r5
    6a88:	1085883a 	add	r2,r2,r2
    6a8c:	290b883a 	add	r5,r5,r4
    6a90:	3087883a 	add	r3,r6,r2
    6a94:	29400104 	addi	r5,r5,4
    6a98:	30c0052e 	bgeu	r6,r3,6ab0 <__copybits+0x44>
    6a9c:	30800017 	ldw	r2,0(r6)
    6aa0:	31800104 	addi	r6,r6,4
    6aa4:	20800015 	stw	r2,0(r4)
    6aa8:	21000104 	addi	r4,r4,4
    6aac:	30fffb36 	bltu	r6,r3,6a9c <__copybits+0x30>
    6ab0:	2140032e 	bgeu	r4,r5,6ac0 <__copybits+0x54>
    6ab4:	20000015 	stw	zero,0(r4)
    6ab8:	21000104 	addi	r4,r4,4
    6abc:	217ffd36 	bltu	r4,r5,6ab4 <__copybits+0x48>
    6ac0:	f800283a 	ret

00006ac4 <__any_on>:
    6ac4:	20800417 	ldw	r2,16(r4)
    6ac8:	2807d17a 	srai	r3,r5,5
    6acc:	21000504 	addi	r4,r4,20
    6ad0:	10c00d0e 	bge	r2,r3,6b08 <__any_on+0x44>
    6ad4:	1085883a 	add	r2,r2,r2
    6ad8:	1085883a 	add	r2,r2,r2
    6adc:	208d883a 	add	r6,r4,r2
    6ae0:	2180182e 	bgeu	r4,r6,6b44 <__any_on+0x80>
    6ae4:	30bfff17 	ldw	r2,-4(r6)
    6ae8:	30ffff04 	addi	r3,r6,-4
    6aec:	1000041e 	bne	r2,zero,6b00 <__any_on+0x3c>
    6af0:	20c0142e 	bgeu	r4,r3,6b44 <__any_on+0x80>
    6af4:	18ffff04 	addi	r3,r3,-4
    6af8:	18800017 	ldw	r2,0(r3)
    6afc:	103ffc26 	beq	r2,zero,6af0 <__any_on+0x2c>
    6b00:	00800044 	movi	r2,1
    6b04:	f800283a 	ret
    6b08:	18800a0e 	bge	r3,r2,6b34 <__any_on+0x70>
    6b0c:	294007cc 	andi	r5,r5,31
    6b10:	28000826 	beq	r5,zero,6b34 <__any_on+0x70>
    6b14:	18c5883a 	add	r2,r3,r3
    6b18:	1085883a 	add	r2,r2,r2
    6b1c:	208d883a 	add	r6,r4,r2
    6b20:	30c00017 	ldw	r3,0(r6)
    6b24:	1944d83a 	srl	r2,r3,r5
    6b28:	1144983a 	sll	r2,r2,r5
    6b2c:	18bff41e 	bne	r3,r2,6b00 <__any_on+0x3c>
    6b30:	003feb06 	br	6ae0 <__any_on+0x1c>
    6b34:	18c5883a 	add	r2,r3,r3
    6b38:	1085883a 	add	r2,r2,r2
    6b3c:	208d883a 	add	r6,r4,r2
    6b40:	003fe706 	br	6ae0 <__any_on+0x1c>
    6b44:	0005883a 	mov	r2,zero
    6b48:	f800283a 	ret

00006b4c <_Balloc>:
    6b4c:	20c01317 	ldw	r3,76(r4)
    6b50:	defffb04 	addi	sp,sp,-20
    6b54:	dcc00315 	stw	r19,12(sp)
    6b58:	dc800215 	stw	r18,8(sp)
    6b5c:	dfc00415 	stw	ra,16(sp)
    6b60:	2825883a 	mov	r18,r5
    6b64:	dc400115 	stw	r17,4(sp)
    6b68:	dc000015 	stw	r16,0(sp)
    6b6c:	2027883a 	mov	r19,r4
    6b70:	01800404 	movi	r6,16
    6b74:	01400104 	movi	r5,4
    6b78:	18001726 	beq	r3,zero,6bd8 <_Balloc+0x8c>
    6b7c:	01400044 	movi	r5,1
    6b80:	9485883a 	add	r2,r18,r18
    6b84:	2ca2983a 	sll	r17,r5,r18
    6b88:	1085883a 	add	r2,r2,r2
    6b8c:	10c7883a 	add	r3,r2,r3
    6b90:	1c000017 	ldw	r16,0(r3)
    6b94:	8c4d883a 	add	r6,r17,r17
    6b98:	318d883a 	add	r6,r6,r6
    6b9c:	9809883a 	mov	r4,r19
    6ba0:	31800504 	addi	r6,r6,20
    6ba4:	80001226 	beq	r16,zero,6bf0 <_Balloc+0xa4>
    6ba8:	80800017 	ldw	r2,0(r16)
    6bac:	18800015 	stw	r2,0(r3)
    6bb0:	80000415 	stw	zero,16(r16)
    6bb4:	80000315 	stw	zero,12(r16)
    6bb8:	8005883a 	mov	r2,r16
    6bbc:	dfc00417 	ldw	ra,16(sp)
    6bc0:	dcc00317 	ldw	r19,12(sp)
    6bc4:	dc800217 	ldw	r18,8(sp)
    6bc8:	dc400117 	ldw	r17,4(sp)
    6bcc:	dc000017 	ldw	r16,0(sp)
    6bd0:	dec00504 	addi	sp,sp,20
    6bd4:	f800283a 	ret
    6bd8:	00080840 	call	8084 <_calloc_r>
    6bdc:	1007883a 	mov	r3,r2
    6be0:	0021883a 	mov	r16,zero
    6be4:	98801315 	stw	r2,76(r19)
    6be8:	103fe41e 	bne	r2,zero,6b7c <_Balloc+0x30>
    6bec:	003ff206 	br	6bb8 <_Balloc+0x6c>
    6bf0:	00080840 	call	8084 <_calloc_r>
    6bf4:	103ff026 	beq	r2,zero,6bb8 <_Balloc+0x6c>
    6bf8:	1021883a 	mov	r16,r2
    6bfc:	14800115 	stw	r18,4(r2)
    6c00:	14400215 	stw	r17,8(r2)
    6c04:	003fea06 	br	6bb0 <_Balloc+0x64>

00006c08 <__d2b>:
    6c08:	defff504 	addi	sp,sp,-44
    6c0c:	dcc00515 	stw	r19,20(sp)
    6c10:	04c00044 	movi	r19,1
    6c14:	dc000215 	stw	r16,8(sp)
    6c18:	2821883a 	mov	r16,r5
    6c1c:	980b883a 	mov	r5,r19
    6c20:	ddc00915 	stw	r23,36(sp)
    6c24:	dd800815 	stw	r22,32(sp)
    6c28:	dd400715 	stw	r21,28(sp)
    6c2c:	dd000615 	stw	r20,24(sp)
    6c30:	dc800415 	stw	r18,16(sp)
    6c34:	dc400315 	stw	r17,12(sp)
    6c38:	dfc00a15 	stw	ra,40(sp)
    6c3c:	3023883a 	mov	r17,r6
    6c40:	382d883a 	mov	r22,r7
    6c44:	ddc00b17 	ldw	r23,44(sp)
    6c48:	0006b4c0 	call	6b4c <_Balloc>
    6c4c:	1025883a 	mov	r18,r2
    6c50:	00a00034 	movhi	r2,32768
    6c54:	10bfffc4 	addi	r2,r2,-1
    6c58:	8888703a 	and	r4,r17,r2
    6c5c:	202ad53a 	srli	r21,r4,20
    6c60:	00800434 	movhi	r2,16
    6c64:	10bfffc4 	addi	r2,r2,-1
    6c68:	8886703a 	and	r3,r17,r2
    6c6c:	a829003a 	cmpeq	r20,r21,zero
    6c70:	800b883a 	mov	r5,r16
    6c74:	d8c00115 	stw	r3,4(sp)
    6c78:	94000504 	addi	r16,r18,20
    6c7c:	a000021e 	bne	r20,zero,6c88 <__d2b+0x80>
    6c80:	18c00434 	orhi	r3,r3,16
    6c84:	d8c00115 	stw	r3,4(sp)
    6c88:	28002726 	beq	r5,zero,6d28 <__d2b+0x120>
    6c8c:	d809883a 	mov	r4,sp
    6c90:	d9400015 	stw	r5,0(sp)
    6c94:	00066640 	call	6664 <__lo0bits>
    6c98:	100d883a 	mov	r6,r2
    6c9c:	10003526 	beq	r2,zero,6d74 <__d2b+0x16c>
    6ca0:	d8c00117 	ldw	r3,4(sp)
    6ca4:	00800804 	movi	r2,32
    6ca8:	1185c83a 	sub	r2,r2,r6
    6cac:	d9000017 	ldw	r4,0(sp)
    6cb0:	1886983a 	sll	r3,r3,r2
    6cb4:	1906b03a 	or	r3,r3,r4
    6cb8:	90c00515 	stw	r3,20(r18)
    6cbc:	d8c00117 	ldw	r3,4(sp)
    6cc0:	1986d83a 	srl	r3,r3,r6
    6cc4:	d8c00115 	stw	r3,4(sp)
    6cc8:	180b003a 	cmpeq	r5,r3,zero
    6ccc:	00800084 	movi	r2,2
    6cd0:	114bc83a 	sub	r5,r2,r5
    6cd4:	80c00115 	stw	r3,4(r16)
    6cd8:	91400415 	stw	r5,16(r18)
    6cdc:	a0001a1e 	bne	r20,zero,6d48 <__d2b+0x140>
    6ce0:	3545883a 	add	r2,r6,r21
    6ce4:	10bef344 	addi	r2,r2,-1075
    6ce8:	00c00d44 	movi	r3,53
    6cec:	b0800015 	stw	r2,0(r22)
    6cf0:	1987c83a 	sub	r3,r3,r6
    6cf4:	b8c00015 	stw	r3,0(r23)
    6cf8:	9005883a 	mov	r2,r18
    6cfc:	dfc00a17 	ldw	ra,40(sp)
    6d00:	ddc00917 	ldw	r23,36(sp)
    6d04:	dd800817 	ldw	r22,32(sp)
    6d08:	dd400717 	ldw	r21,28(sp)
    6d0c:	dd000617 	ldw	r20,24(sp)
    6d10:	dcc00517 	ldw	r19,20(sp)
    6d14:	dc800417 	ldw	r18,16(sp)
    6d18:	dc400317 	ldw	r17,12(sp)
    6d1c:	dc000217 	ldw	r16,8(sp)
    6d20:	dec00b04 	addi	sp,sp,44
    6d24:	f800283a 	ret
    6d28:	d9000104 	addi	r4,sp,4
    6d2c:	00066640 	call	6664 <__lo0bits>
    6d30:	11800804 	addi	r6,r2,32
    6d34:	d8800117 	ldw	r2,4(sp)
    6d38:	94c00415 	stw	r19,16(r18)
    6d3c:	980b883a 	mov	r5,r19
    6d40:	90800515 	stw	r2,20(r18)
    6d44:	a03fe626 	beq	r20,zero,6ce0 <__d2b+0xd8>
    6d48:	2945883a 	add	r2,r5,r5
    6d4c:	1085883a 	add	r2,r2,r2
    6d50:	1405883a 	add	r2,r2,r16
    6d54:	113fff17 	ldw	r4,-4(r2)
    6d58:	30fef384 	addi	r3,r6,-1074
    6d5c:	2820917a 	slli	r16,r5,5
    6d60:	b0c00015 	stw	r3,0(r22)
    6d64:	00065f40 	call	65f4 <__hi0bits>
    6d68:	80a1c83a 	sub	r16,r16,r2
    6d6c:	bc000015 	stw	r16,0(r23)
    6d70:	003fe106 	br	6cf8 <__d2b+0xf0>
    6d74:	d8800017 	ldw	r2,0(sp)
    6d78:	90800515 	stw	r2,20(r18)
    6d7c:	d8c00117 	ldw	r3,4(sp)
    6d80:	003fd106 	br	6cc8 <__d2b+0xc0>

00006d84 <__mdiff>:
    6d84:	defffb04 	addi	sp,sp,-20
    6d88:	dc000015 	stw	r16,0(sp)
    6d8c:	2821883a 	mov	r16,r5
    6d90:	dc800215 	stw	r18,8(sp)
    6d94:	300b883a 	mov	r5,r6
    6d98:	2025883a 	mov	r18,r4
    6d9c:	8009883a 	mov	r4,r16
    6da0:	dc400115 	stw	r17,4(sp)
    6da4:	dfc00415 	stw	ra,16(sp)
    6da8:	dcc00315 	stw	r19,12(sp)
    6dac:	3023883a 	mov	r17,r6
    6db0:	00067280 	call	6728 <__mcmp>
    6db4:	10004226 	beq	r2,zero,6ec0 <__mdiff+0x13c>
    6db8:	10005016 	blt	r2,zero,6efc <__mdiff+0x178>
    6dbc:	0027883a 	mov	r19,zero
    6dc0:	81400117 	ldw	r5,4(r16)
    6dc4:	9009883a 	mov	r4,r18
    6dc8:	0006b4c0 	call	6b4c <_Balloc>
    6dcc:	1019883a 	mov	r12,r2
    6dd0:	82800417 	ldw	r10,16(r16)
    6dd4:	88800417 	ldw	r2,16(r17)
    6dd8:	81800504 	addi	r6,r16,20
    6ddc:	5287883a 	add	r3,r10,r10
    6de0:	1085883a 	add	r2,r2,r2
    6de4:	18c7883a 	add	r3,r3,r3
    6de8:	1085883a 	add	r2,r2,r2
    6dec:	8a000504 	addi	r8,r17,20
    6df0:	64c00315 	stw	r19,12(r12)
    6df4:	30db883a 	add	r13,r6,r3
    6df8:	4097883a 	add	r11,r8,r2
    6dfc:	61c00504 	addi	r7,r12,20
    6e00:	0013883a 	mov	r9,zero
    6e04:	31000017 	ldw	r4,0(r6)
    6e08:	41400017 	ldw	r5,0(r8)
    6e0c:	42000104 	addi	r8,r8,4
    6e10:	20bfffcc 	andi	r2,r4,65535
    6e14:	28ffffcc 	andi	r3,r5,65535
    6e18:	10c5c83a 	sub	r2,r2,r3
    6e1c:	1245883a 	add	r2,r2,r9
    6e20:	2008d43a 	srli	r4,r4,16
    6e24:	280ad43a 	srli	r5,r5,16
    6e28:	1007d43a 	srai	r3,r2,16
    6e2c:	3880000d 	sth	r2,0(r7)
    6e30:	2149c83a 	sub	r4,r4,r5
    6e34:	20c9883a 	add	r4,r4,r3
    6e38:	3900008d 	sth	r4,2(r7)
    6e3c:	31800104 	addi	r6,r6,4
    6e40:	39c00104 	addi	r7,r7,4
    6e44:	2013d43a 	srai	r9,r4,16
    6e48:	42ffee36 	bltu	r8,r11,6e04 <__mdiff+0x80>
    6e4c:	33400c2e 	bgeu	r6,r13,6e80 <__mdiff+0xfc>
    6e50:	30800017 	ldw	r2,0(r6)
    6e54:	31800104 	addi	r6,r6,4
    6e58:	10ffffcc 	andi	r3,r2,65535
    6e5c:	1a47883a 	add	r3,r3,r9
    6e60:	1004d43a 	srli	r2,r2,16
    6e64:	1809d43a 	srai	r4,r3,16
    6e68:	38c0000d 	sth	r3,0(r7)
    6e6c:	1105883a 	add	r2,r2,r4
    6e70:	3880008d 	sth	r2,2(r7)
    6e74:	1013d43a 	srai	r9,r2,16
    6e78:	39c00104 	addi	r7,r7,4
    6e7c:	337ff436 	bltu	r6,r13,6e50 <__mdiff+0xcc>
    6e80:	38bfff17 	ldw	r2,-4(r7)
    6e84:	38ffff04 	addi	r3,r7,-4
    6e88:	1000041e 	bne	r2,zero,6e9c <__mdiff+0x118>
    6e8c:	18ffff04 	addi	r3,r3,-4
    6e90:	18800017 	ldw	r2,0(r3)
    6e94:	52bfffc4 	addi	r10,r10,-1
    6e98:	103ffc26 	beq	r2,zero,6e8c <__mdiff+0x108>
    6e9c:	6005883a 	mov	r2,r12
    6ea0:	62800415 	stw	r10,16(r12)
    6ea4:	dfc00417 	ldw	ra,16(sp)
    6ea8:	dcc00317 	ldw	r19,12(sp)
    6eac:	dc800217 	ldw	r18,8(sp)
    6eb0:	dc400117 	ldw	r17,4(sp)
    6eb4:	dc000017 	ldw	r16,0(sp)
    6eb8:	dec00504 	addi	sp,sp,20
    6ebc:	f800283a 	ret
    6ec0:	9009883a 	mov	r4,r18
    6ec4:	000b883a 	mov	r5,zero
    6ec8:	0006b4c0 	call	6b4c <_Balloc>
    6ecc:	1019883a 	mov	r12,r2
    6ed0:	00800044 	movi	r2,1
    6ed4:	60800415 	stw	r2,16(r12)
    6ed8:	6005883a 	mov	r2,r12
    6edc:	60000515 	stw	zero,20(r12)
    6ee0:	dfc00417 	ldw	ra,16(sp)
    6ee4:	dcc00317 	ldw	r19,12(sp)
    6ee8:	dc800217 	ldw	r18,8(sp)
    6eec:	dc400117 	ldw	r17,4(sp)
    6ef0:	dc000017 	ldw	r16,0(sp)
    6ef4:	dec00504 	addi	sp,sp,20
    6ef8:	f800283a 	ret
    6efc:	880d883a 	mov	r6,r17
    6f00:	04c00044 	movi	r19,1
    6f04:	8023883a 	mov	r17,r16
    6f08:	3021883a 	mov	r16,r6
    6f0c:	003fac06 	br	6dc0 <__mdiff+0x3c>

00006f10 <__lshift>:
    6f10:	defff904 	addi	sp,sp,-28
    6f14:	28800417 	ldw	r2,16(r5)
    6f18:	dc000015 	stw	r16,0(sp)
    6f1c:	3021d17a 	srai	r16,r6,5
    6f20:	28c00217 	ldw	r3,8(r5)
    6f24:	10800044 	addi	r2,r2,1
    6f28:	dc400115 	stw	r17,4(sp)
    6f2c:	80a3883a 	add	r17,r16,r2
    6f30:	dd400515 	stw	r21,20(sp)
    6f34:	dd000415 	stw	r20,16(sp)
    6f38:	dc800215 	stw	r18,8(sp)
    6f3c:	dfc00615 	stw	ra,24(sp)
    6f40:	2825883a 	mov	r18,r5
    6f44:	dcc00315 	stw	r19,12(sp)
    6f48:	3029883a 	mov	r20,r6
    6f4c:	202b883a 	mov	r21,r4
    6f50:	29400117 	ldw	r5,4(r5)
    6f54:	1c40030e 	bge	r3,r17,6f64 <__lshift+0x54>
    6f58:	18c7883a 	add	r3,r3,r3
    6f5c:	29400044 	addi	r5,r5,1
    6f60:	1c7ffd16 	blt	r3,r17,6f58 <__lshift+0x48>
    6f64:	a809883a 	mov	r4,r21
    6f68:	0006b4c0 	call	6b4c <_Balloc>
    6f6c:	1027883a 	mov	r19,r2
    6f70:	11400504 	addi	r5,r2,20
    6f74:	0400090e 	bge	zero,r16,6f9c <__lshift+0x8c>
    6f78:	2805883a 	mov	r2,r5
    6f7c:	0007883a 	mov	r3,zero
    6f80:	18c00044 	addi	r3,r3,1
    6f84:	10000015 	stw	zero,0(r2)
    6f88:	10800104 	addi	r2,r2,4
    6f8c:	80fffc1e 	bne	r16,r3,6f80 <__lshift+0x70>
    6f90:	8405883a 	add	r2,r16,r16
    6f94:	1085883a 	add	r2,r2,r2
    6f98:	288b883a 	add	r5,r5,r2
    6f9c:	90800417 	ldw	r2,16(r18)
    6fa0:	91000504 	addi	r4,r18,20
    6fa4:	a18007cc 	andi	r6,r20,31
    6fa8:	1085883a 	add	r2,r2,r2
    6fac:	1085883a 	add	r2,r2,r2
    6fb0:	208f883a 	add	r7,r4,r2
    6fb4:	30001e26 	beq	r6,zero,7030 <__lshift+0x120>
    6fb8:	00800804 	movi	r2,32
    6fbc:	1191c83a 	sub	r8,r2,r6
    6fc0:	0007883a 	mov	r3,zero
    6fc4:	20800017 	ldw	r2,0(r4)
    6fc8:	1184983a 	sll	r2,r2,r6
    6fcc:	1884b03a 	or	r2,r3,r2
    6fd0:	28800015 	stw	r2,0(r5)
    6fd4:	20c00017 	ldw	r3,0(r4)
    6fd8:	21000104 	addi	r4,r4,4
    6fdc:	29400104 	addi	r5,r5,4
    6fe0:	1a06d83a 	srl	r3,r3,r8
    6fe4:	21fff736 	bltu	r4,r7,6fc4 <__lshift+0xb4>
    6fe8:	28c00015 	stw	r3,0(r5)
    6fec:	18000126 	beq	r3,zero,6ff4 <__lshift+0xe4>
    6ff0:	8c400044 	addi	r17,r17,1
    6ff4:	88bfffc4 	addi	r2,r17,-1
    6ff8:	98800415 	stw	r2,16(r19)
    6ffc:	a809883a 	mov	r4,r21
    7000:	900b883a 	mov	r5,r18
    7004:	00065cc0 	call	65cc <_Bfree>
    7008:	9805883a 	mov	r2,r19
    700c:	dfc00617 	ldw	ra,24(sp)
    7010:	dd400517 	ldw	r21,20(sp)
    7014:	dd000417 	ldw	r20,16(sp)
    7018:	dcc00317 	ldw	r19,12(sp)
    701c:	dc800217 	ldw	r18,8(sp)
    7020:	dc400117 	ldw	r17,4(sp)
    7024:	dc000017 	ldw	r16,0(sp)
    7028:	dec00704 	addi	sp,sp,28
    702c:	f800283a 	ret
    7030:	20800017 	ldw	r2,0(r4)
    7034:	21000104 	addi	r4,r4,4
    7038:	28800015 	stw	r2,0(r5)
    703c:	29400104 	addi	r5,r5,4
    7040:	21ffec2e 	bgeu	r4,r7,6ff4 <__lshift+0xe4>
    7044:	20800017 	ldw	r2,0(r4)
    7048:	21000104 	addi	r4,r4,4
    704c:	28800015 	stw	r2,0(r5)
    7050:	29400104 	addi	r5,r5,4
    7054:	21fff636 	bltu	r4,r7,7030 <__lshift+0x120>
    7058:	003fe606 	br	6ff4 <__lshift+0xe4>

0000705c <__multiply>:
    705c:	defff904 	addi	sp,sp,-28
    7060:	dcc00315 	stw	r19,12(sp)
    7064:	dc800215 	stw	r18,8(sp)
    7068:	2cc00417 	ldw	r19,16(r5)
    706c:	34800417 	ldw	r18,16(r6)
    7070:	dd000415 	stw	r20,16(sp)
    7074:	dc400115 	stw	r17,4(sp)
    7078:	dfc00615 	stw	ra,24(sp)
    707c:	dd400515 	stw	r21,20(sp)
    7080:	dc000015 	stw	r16,0(sp)
    7084:	2823883a 	mov	r17,r5
    7088:	3029883a 	mov	r20,r6
    708c:	9c80040e 	bge	r19,r18,70a0 <__multiply+0x44>
    7090:	9027883a 	mov	r19,r18
    7094:	2c800417 	ldw	r18,16(r5)
    7098:	2829883a 	mov	r20,r5
    709c:	3023883a 	mov	r17,r6
    70a0:	88800217 	ldw	r2,8(r17)
    70a4:	9ca1883a 	add	r16,r19,r18
    70a8:	89400117 	ldw	r5,4(r17)
    70ac:	1400010e 	bge	r2,r16,70b4 <__multiply+0x58>
    70b0:	29400044 	addi	r5,r5,1
    70b4:	0006b4c0 	call	6b4c <_Balloc>
    70b8:	102b883a 	mov	r21,r2
    70bc:	8405883a 	add	r2,r16,r16
    70c0:	1085883a 	add	r2,r2,r2
    70c4:	a9000504 	addi	r4,r21,20
    70c8:	209d883a 	add	r14,r4,r2
    70cc:	2380042e 	bgeu	r4,r14,70e0 <__multiply+0x84>
    70d0:	2005883a 	mov	r2,r4
    70d4:	10000015 	stw	zero,0(r2)
    70d8:	10800104 	addi	r2,r2,4
    70dc:	13bffd36 	bltu	r2,r14,70d4 <__multiply+0x78>
    70e0:	9485883a 	add	r2,r18,r18
    70e4:	9cc7883a 	add	r3,r19,r19
    70e8:	a1800504 	addi	r6,r20,20
    70ec:	1085883a 	add	r2,r2,r2
    70f0:	8b400504 	addi	r13,r17,20
    70f4:	18c7883a 	add	r3,r3,r3
    70f8:	309f883a 	add	r15,r6,r2
    70fc:	68d7883a 	add	r11,r13,r3
    7100:	33c03b2e 	bgeu	r6,r15,71f0 <__multiply+0x194>
    7104:	2019883a 	mov	r12,r4
    7108:	30800017 	ldw	r2,0(r6)
    710c:	127fffcc 	andi	r9,r2,65535
    7110:	48001826 	beq	r9,zero,7174 <__multiply+0x118>
    7114:	6811883a 	mov	r8,r13
    7118:	600f883a 	mov	r7,r12
    711c:	0015883a 	mov	r10,zero
    7120:	40c00017 	ldw	r3,0(r8)
    7124:	39400017 	ldw	r5,0(r7)
    7128:	42000104 	addi	r8,r8,4
    712c:	193fffcc 	andi	r4,r3,65535
    7130:	4909383a 	mul	r4,r9,r4
    7134:	1806d43a 	srli	r3,r3,16
    7138:	28bfffcc 	andi	r2,r5,65535
    713c:	5085883a 	add	r2,r10,r2
    7140:	2089883a 	add	r4,r4,r2
    7144:	48c7383a 	mul	r3,r9,r3
    7148:	280ad43a 	srli	r5,r5,16
    714c:	2004d43a 	srli	r2,r4,16
    7150:	3900000d 	sth	r4,0(r7)
    7154:	1947883a 	add	r3,r3,r5
    7158:	10c5883a 	add	r2,r2,r3
    715c:	3880008d 	sth	r2,2(r7)
    7160:	1014d43a 	srli	r10,r2,16
    7164:	39c00104 	addi	r7,r7,4
    7168:	42ffed36 	bltu	r8,r11,7120 <__multiply+0xc4>
    716c:	3a800015 	stw	r10,0(r7)
    7170:	30800017 	ldw	r2,0(r6)
    7174:	1012d43a 	srli	r9,r2,16
    7178:	48001926 	beq	r9,zero,71e0 <__multiply+0x184>
    717c:	60800017 	ldw	r2,0(r12)
    7180:	6811883a 	mov	r8,r13
    7184:	600f883a 	mov	r7,r12
    7188:	0015883a 	mov	r10,zero
    718c:	100b883a 	mov	r5,r2
    7190:	41000017 	ldw	r4,0(r8)
    7194:	2806d43a 	srli	r3,r5,16
    7198:	3880000d 	sth	r2,0(r7)
    719c:	20bfffcc 	andi	r2,r4,65535
    71a0:	4885383a 	mul	r2,r9,r2
    71a4:	50c7883a 	add	r3,r10,r3
    71a8:	2008d43a 	srli	r4,r4,16
    71ac:	10c5883a 	add	r2,r2,r3
    71b0:	3880008d 	sth	r2,2(r7)
    71b4:	39c00104 	addi	r7,r7,4
    71b8:	39400017 	ldw	r5,0(r7)
    71bc:	4909383a 	mul	r4,r9,r4
    71c0:	1004d43a 	srli	r2,r2,16
    71c4:	28ffffcc 	andi	r3,r5,65535
    71c8:	20c9883a 	add	r4,r4,r3
    71cc:	1105883a 	add	r2,r2,r4
    71d0:	42000104 	addi	r8,r8,4
    71d4:	1014d43a 	srli	r10,r2,16
    71d8:	42ffed36 	bltu	r8,r11,7190 <__multiply+0x134>
    71dc:	38800015 	stw	r2,0(r7)
    71e0:	31800104 	addi	r6,r6,4
    71e4:	33c0022e 	bgeu	r6,r15,71f0 <__multiply+0x194>
    71e8:	63000104 	addi	r12,r12,4
    71ec:	003fc606 	br	7108 <__multiply+0xac>
    71f0:	0400090e 	bge	zero,r16,7218 <__multiply+0x1bc>
    71f4:	70bfff17 	ldw	r2,-4(r14)
    71f8:	70ffff04 	addi	r3,r14,-4
    71fc:	10000326 	beq	r2,zero,720c <__multiply+0x1b0>
    7200:	00000506 	br	7218 <__multiply+0x1bc>
    7204:	18800017 	ldw	r2,0(r3)
    7208:	1000031e 	bne	r2,zero,7218 <__multiply+0x1bc>
    720c:	843fffc4 	addi	r16,r16,-1
    7210:	18ffff04 	addi	r3,r3,-4
    7214:	803ffb1e 	bne	r16,zero,7204 <__multiply+0x1a8>
    7218:	a805883a 	mov	r2,r21
    721c:	ac000415 	stw	r16,16(r21)
    7220:	dfc00617 	ldw	ra,24(sp)
    7224:	dd400517 	ldw	r21,20(sp)
    7228:	dd000417 	ldw	r20,16(sp)
    722c:	dcc00317 	ldw	r19,12(sp)
    7230:	dc800217 	ldw	r18,8(sp)
    7234:	dc400117 	ldw	r17,4(sp)
    7238:	dc000017 	ldw	r16,0(sp)
    723c:	dec00704 	addi	sp,sp,28
    7240:	f800283a 	ret

00007244 <__i2b>:
    7244:	defffd04 	addi	sp,sp,-12
    7248:	dc000015 	stw	r16,0(sp)
    724c:	04000044 	movi	r16,1
    7250:	dc800115 	stw	r18,4(sp)
    7254:	2825883a 	mov	r18,r5
    7258:	800b883a 	mov	r5,r16
    725c:	dfc00215 	stw	ra,8(sp)
    7260:	0006b4c0 	call	6b4c <_Balloc>
    7264:	14000415 	stw	r16,16(r2)
    7268:	14800515 	stw	r18,20(r2)
    726c:	dfc00217 	ldw	ra,8(sp)
    7270:	dc800117 	ldw	r18,4(sp)
    7274:	dc000017 	ldw	r16,0(sp)
    7278:	dec00304 	addi	sp,sp,12
    727c:	f800283a 	ret

00007280 <__multadd>:
    7280:	defffa04 	addi	sp,sp,-24
    7284:	dc800215 	stw	r18,8(sp)
    7288:	2c800417 	ldw	r18,16(r5)
    728c:	dd000415 	stw	r20,16(sp)
    7290:	dcc00315 	stw	r19,12(sp)
    7294:	dc000015 	stw	r16,0(sp)
    7298:	dfc00515 	stw	ra,20(sp)
    729c:	3821883a 	mov	r16,r7
    72a0:	dc400115 	stw	r17,4(sp)
    72a4:	2827883a 	mov	r19,r5
    72a8:	2029883a 	mov	r20,r4
    72ac:	2a000504 	addi	r8,r5,20
    72b0:	000f883a 	mov	r7,zero
    72b4:	40800017 	ldw	r2,0(r8)
    72b8:	39c00044 	addi	r7,r7,1
    72bc:	10ffffcc 	andi	r3,r2,65535
    72c0:	1987383a 	mul	r3,r3,r6
    72c4:	1004d43a 	srli	r2,r2,16
    72c8:	1c07883a 	add	r3,r3,r16
    72cc:	180ad43a 	srli	r5,r3,16
    72d0:	1185383a 	mul	r2,r2,r6
    72d4:	18ffffcc 	andi	r3,r3,65535
    72d8:	1145883a 	add	r2,r2,r5
    72dc:	1008943a 	slli	r4,r2,16
    72e0:	1020d43a 	srli	r16,r2,16
    72e4:	20c9883a 	add	r4,r4,r3
    72e8:	41000015 	stw	r4,0(r8)
    72ec:	42000104 	addi	r8,r8,4
    72f0:	3cbff016 	blt	r7,r18,72b4 <__multadd+0x34>
    72f4:	80000826 	beq	r16,zero,7318 <__multadd+0x98>
    72f8:	98800217 	ldw	r2,8(r19)
    72fc:	90800f0e 	bge	r18,r2,733c <__multadd+0xbc>
    7300:	9485883a 	add	r2,r18,r18
    7304:	1085883a 	add	r2,r2,r2
    7308:	14c5883a 	add	r2,r2,r19
    730c:	90c00044 	addi	r3,r18,1
    7310:	14000515 	stw	r16,20(r2)
    7314:	98c00415 	stw	r3,16(r19)
    7318:	9805883a 	mov	r2,r19
    731c:	dfc00517 	ldw	ra,20(sp)
    7320:	dd000417 	ldw	r20,16(sp)
    7324:	dcc00317 	ldw	r19,12(sp)
    7328:	dc800217 	ldw	r18,8(sp)
    732c:	dc400117 	ldw	r17,4(sp)
    7330:	dc000017 	ldw	r16,0(sp)
    7334:	dec00604 	addi	sp,sp,24
    7338:	f800283a 	ret
    733c:	99400117 	ldw	r5,4(r19)
    7340:	a009883a 	mov	r4,r20
    7344:	29400044 	addi	r5,r5,1
    7348:	0006b4c0 	call	6b4c <_Balloc>
    734c:	99800417 	ldw	r6,16(r19)
    7350:	99400304 	addi	r5,r19,12
    7354:	11000304 	addi	r4,r2,12
    7358:	318d883a 	add	r6,r6,r6
    735c:	318d883a 	add	r6,r6,r6
    7360:	31800204 	addi	r6,r6,8
    7364:	1023883a 	mov	r17,r2
    7368:	00063b40 	call	63b4 <memcpy>
    736c:	980b883a 	mov	r5,r19
    7370:	a009883a 	mov	r4,r20
    7374:	00065cc0 	call	65cc <_Bfree>
    7378:	8827883a 	mov	r19,r17
    737c:	003fe006 	br	7300 <__multadd+0x80>

00007380 <__pow5mult>:
    7380:	defffa04 	addi	sp,sp,-24
    7384:	308000cc 	andi	r2,r6,3
    7388:	dd000415 	stw	r20,16(sp)
    738c:	dcc00315 	stw	r19,12(sp)
    7390:	dc000015 	stw	r16,0(sp)
    7394:	dfc00515 	stw	ra,20(sp)
    7398:	dc800215 	stw	r18,8(sp)
    739c:	dc400115 	stw	r17,4(sp)
    73a0:	3021883a 	mov	r16,r6
    73a4:	2027883a 	mov	r19,r4
    73a8:	2829883a 	mov	r20,r5
    73ac:	10002b1e 	bne	r2,zero,745c <__pow5mult+0xdc>
    73b0:	8025d0ba 	srai	r18,r16,2
    73b4:	90001b26 	beq	r18,zero,7424 <__pow5mult+0xa4>
    73b8:	9c001217 	ldw	r16,72(r19)
    73bc:	8000081e 	bne	r16,zero,73e0 <__pow5mult+0x60>
    73c0:	00003006 	br	7484 <__pow5mult+0x104>
    73c4:	800b883a 	mov	r5,r16
    73c8:	800d883a 	mov	r6,r16
    73cc:	9809883a 	mov	r4,r19
    73d0:	90001426 	beq	r18,zero,7424 <__pow5mult+0xa4>
    73d4:	80800017 	ldw	r2,0(r16)
    73d8:	10001b26 	beq	r2,zero,7448 <__pow5mult+0xc8>
    73dc:	1021883a 	mov	r16,r2
    73e0:	9080004c 	andi	r2,r18,1
    73e4:	1005003a 	cmpeq	r2,r2,zero
    73e8:	9025d07a 	srai	r18,r18,1
    73ec:	800d883a 	mov	r6,r16
    73f0:	9809883a 	mov	r4,r19
    73f4:	a00b883a 	mov	r5,r20
    73f8:	103ff21e 	bne	r2,zero,73c4 <__pow5mult+0x44>
    73fc:	000705c0 	call	705c <__multiply>
    7400:	a00b883a 	mov	r5,r20
    7404:	9809883a 	mov	r4,r19
    7408:	1023883a 	mov	r17,r2
    740c:	00065cc0 	call	65cc <_Bfree>
    7410:	8829883a 	mov	r20,r17
    7414:	800b883a 	mov	r5,r16
    7418:	800d883a 	mov	r6,r16
    741c:	9809883a 	mov	r4,r19
    7420:	903fec1e 	bne	r18,zero,73d4 <__pow5mult+0x54>
    7424:	a005883a 	mov	r2,r20
    7428:	dfc00517 	ldw	ra,20(sp)
    742c:	dd000417 	ldw	r20,16(sp)
    7430:	dcc00317 	ldw	r19,12(sp)
    7434:	dc800217 	ldw	r18,8(sp)
    7438:	dc400117 	ldw	r17,4(sp)
    743c:	dc000017 	ldw	r16,0(sp)
    7440:	dec00604 	addi	sp,sp,24
    7444:	f800283a 	ret
    7448:	000705c0 	call	705c <__multiply>
    744c:	80800015 	stw	r2,0(r16)
    7450:	1021883a 	mov	r16,r2
    7454:	10000015 	stw	zero,0(r2)
    7458:	003fe106 	br	73e0 <__pow5mult+0x60>
    745c:	1085883a 	add	r2,r2,r2
    7460:	00c00074 	movhi	r3,1
    7464:	18fcbe04 	addi	r3,r3,-3336
    7468:	1085883a 	add	r2,r2,r2
    746c:	10c5883a 	add	r2,r2,r3
    7470:	11bfff17 	ldw	r6,-4(r2)
    7474:	000f883a 	mov	r7,zero
    7478:	00072800 	call	7280 <__multadd>
    747c:	1029883a 	mov	r20,r2
    7480:	003fcb06 	br	73b0 <__pow5mult+0x30>
    7484:	9809883a 	mov	r4,r19
    7488:	01409c44 	movi	r5,625
    748c:	00072440 	call	7244 <__i2b>
    7490:	98801215 	stw	r2,72(r19)
    7494:	1021883a 	mov	r16,r2
    7498:	10000015 	stw	zero,0(r2)
    749c:	003fd006 	br	73e0 <__pow5mult+0x60>

000074a0 <__s2b>:
    74a0:	defff904 	addi	sp,sp,-28
    74a4:	dcc00315 	stw	r19,12(sp)
    74a8:	dc800215 	stw	r18,8(sp)
    74ac:	2827883a 	mov	r19,r5
    74b0:	2025883a 	mov	r18,r4
    74b4:	01400244 	movi	r5,9
    74b8:	39000204 	addi	r4,r7,8
    74bc:	dd000415 	stw	r20,16(sp)
    74c0:	dc400115 	stw	r17,4(sp)
    74c4:	dfc00615 	stw	ra,24(sp)
    74c8:	dd400515 	stw	r21,20(sp)
    74cc:	dc000015 	stw	r16,0(sp)
    74d0:	3829883a 	mov	r20,r7
    74d4:	3023883a 	mov	r17,r6
    74d8:	000a26c0 	call	a26c <__divsi3>
    74dc:	00c00044 	movi	r3,1
    74e0:	1880350e 	bge	r3,r2,75b8 <__s2b+0x118>
    74e4:	000b883a 	mov	r5,zero
    74e8:	18c7883a 	add	r3,r3,r3
    74ec:	29400044 	addi	r5,r5,1
    74f0:	18bffd16 	blt	r3,r2,74e8 <__s2b+0x48>
    74f4:	9009883a 	mov	r4,r18
    74f8:	0006b4c0 	call	6b4c <_Balloc>
    74fc:	1011883a 	mov	r8,r2
    7500:	d8800717 	ldw	r2,28(sp)
    7504:	00c00044 	movi	r3,1
    7508:	01800244 	movi	r6,9
    750c:	40800515 	stw	r2,20(r8)
    7510:	40c00415 	stw	r3,16(r8)
    7514:	3440260e 	bge	r6,r17,75b0 <__s2b+0x110>
    7518:	3021883a 	mov	r16,r6
    751c:	99ab883a 	add	r21,r19,r6
    7520:	9c05883a 	add	r2,r19,r16
    7524:	11c00007 	ldb	r7,0(r2)
    7528:	400b883a 	mov	r5,r8
    752c:	9009883a 	mov	r4,r18
    7530:	39fff404 	addi	r7,r7,-48
    7534:	01800284 	movi	r6,10
    7538:	00072800 	call	7280 <__multadd>
    753c:	84000044 	addi	r16,r16,1
    7540:	1011883a 	mov	r8,r2
    7544:	8c3ff61e 	bne	r17,r16,7520 <__s2b+0x80>
    7548:	ac45883a 	add	r2,r21,r17
    754c:	117ffe04 	addi	r5,r2,-8
    7550:	880d883a 	mov	r6,r17
    7554:	35000c0e 	bge	r6,r20,7588 <__s2b+0xe8>
    7558:	a185c83a 	sub	r2,r20,r6
    755c:	2821883a 	mov	r16,r5
    7560:	28a3883a 	add	r17,r5,r2
    7564:	81c00007 	ldb	r7,0(r16)
    7568:	400b883a 	mov	r5,r8
    756c:	9009883a 	mov	r4,r18
    7570:	39fff404 	addi	r7,r7,-48
    7574:	01800284 	movi	r6,10
    7578:	00072800 	call	7280 <__multadd>
    757c:	84000044 	addi	r16,r16,1
    7580:	1011883a 	mov	r8,r2
    7584:	847ff71e 	bne	r16,r17,7564 <__s2b+0xc4>
    7588:	4005883a 	mov	r2,r8
    758c:	dfc00617 	ldw	ra,24(sp)
    7590:	dd400517 	ldw	r21,20(sp)
    7594:	dd000417 	ldw	r20,16(sp)
    7598:	dcc00317 	ldw	r19,12(sp)
    759c:	dc800217 	ldw	r18,8(sp)
    75a0:	dc400117 	ldw	r17,4(sp)
    75a4:	dc000017 	ldw	r16,0(sp)
    75a8:	dec00704 	addi	sp,sp,28
    75ac:	f800283a 	ret
    75b0:	99400284 	addi	r5,r19,10
    75b4:	003fe706 	br	7554 <__s2b+0xb4>
    75b8:	000b883a 	mov	r5,zero
    75bc:	003fcd06 	br	74f4 <__s2b+0x54>

000075c0 <_realloc_r>:
    75c0:	defff404 	addi	sp,sp,-48
    75c4:	dd800815 	stw	r22,32(sp)
    75c8:	dc800415 	stw	r18,16(sp)
    75cc:	dc400315 	stw	r17,12(sp)
    75d0:	dfc00b15 	stw	ra,44(sp)
    75d4:	df000a15 	stw	fp,40(sp)
    75d8:	ddc00915 	stw	r23,36(sp)
    75dc:	dd400715 	stw	r21,28(sp)
    75e0:	dd000615 	stw	r20,24(sp)
    75e4:	dcc00515 	stw	r19,20(sp)
    75e8:	dc000215 	stw	r16,8(sp)
    75ec:	2825883a 	mov	r18,r5
    75f0:	3023883a 	mov	r17,r6
    75f4:	202d883a 	mov	r22,r4
    75f8:	2800c926 	beq	r5,zero,7920 <_realloc_r+0x360>
    75fc:	000af980 	call	af98 <__malloc_lock>
    7600:	943ffe04 	addi	r16,r18,-8
    7604:	88c002c4 	addi	r3,r17,11
    7608:	00800584 	movi	r2,22
    760c:	82000117 	ldw	r8,4(r16)
    7610:	10c01b2e 	bgeu	r2,r3,7680 <_realloc_r+0xc0>
    7614:	00bffe04 	movi	r2,-8
    7618:	188e703a 	and	r7,r3,r2
    761c:	3839883a 	mov	fp,r7
    7620:	38001a16 	blt	r7,zero,768c <_realloc_r+0xcc>
    7624:	e4401936 	bltu	fp,r17,768c <_realloc_r+0xcc>
    7628:	013fff04 	movi	r4,-4
    762c:	4126703a 	and	r19,r8,r4
    7630:	99c02616 	blt	r19,r7,76cc <_realloc_r+0x10c>
    7634:	802b883a 	mov	r21,r16
    7638:	9829883a 	mov	r20,r19
    763c:	84000204 	addi	r16,r16,8
    7640:	a80f883a 	mov	r7,r21
    7644:	a70dc83a 	sub	r6,r20,fp
    7648:	008003c4 	movi	r2,15
    764c:	1180c136 	bltu	r2,r6,7954 <_realloc_r+0x394>
    7650:	38800117 	ldw	r2,4(r7)
    7654:	a549883a 	add	r4,r20,r21
    7658:	1080004c 	andi	r2,r2,1
    765c:	a084b03a 	or	r2,r20,r2
    7660:	38800115 	stw	r2,4(r7)
    7664:	20c00117 	ldw	r3,4(r4)
    7668:	18c00054 	ori	r3,r3,1
    766c:	20c00115 	stw	r3,4(r4)
    7670:	b009883a 	mov	r4,r22
    7674:	000afb80 	call	afb8 <__malloc_unlock>
    7678:	8023883a 	mov	r17,r16
    767c:	00000606 	br	7698 <_realloc_r+0xd8>
    7680:	01c00404 	movi	r7,16
    7684:	3839883a 	mov	fp,r7
    7688:	e47fe72e 	bgeu	fp,r17,7628 <_realloc_r+0x68>
    768c:	00800304 	movi	r2,12
    7690:	0023883a 	mov	r17,zero
    7694:	b0800015 	stw	r2,0(r22)
    7698:	8805883a 	mov	r2,r17
    769c:	dfc00b17 	ldw	ra,44(sp)
    76a0:	df000a17 	ldw	fp,40(sp)
    76a4:	ddc00917 	ldw	r23,36(sp)
    76a8:	dd800817 	ldw	r22,32(sp)
    76ac:	dd400717 	ldw	r21,28(sp)
    76b0:	dd000617 	ldw	r20,24(sp)
    76b4:	dcc00517 	ldw	r19,20(sp)
    76b8:	dc800417 	ldw	r18,16(sp)
    76bc:	dc400317 	ldw	r17,12(sp)
    76c0:	dc000217 	ldw	r16,8(sp)
    76c4:	dec00c04 	addi	sp,sp,48
    76c8:	f800283a 	ret
    76cc:	00800074 	movhi	r2,1
    76d0:	10be2404 	addi	r2,r2,-1904
    76d4:	12400217 	ldw	r9,8(r2)
    76d8:	84cd883a 	add	r6,r16,r19
    76dc:	802b883a 	mov	r21,r16
    76e0:	3240b926 	beq	r6,r9,79c8 <_realloc_r+0x408>
    76e4:	31400117 	ldw	r5,4(r6)
    76e8:	00bfff84 	movi	r2,-2
    76ec:	2884703a 	and	r2,r5,r2
    76f0:	1185883a 	add	r2,r2,r6
    76f4:	10c00117 	ldw	r3,4(r2)
    76f8:	18c0004c 	andi	r3,r3,1
    76fc:	1807003a 	cmpeq	r3,r3,zero
    7700:	1800a326 	beq	r3,zero,7990 <_realloc_r+0x3d0>
    7704:	2908703a 	and	r4,r5,r4
    7708:	9929883a 	add	r20,r19,r4
    770c:	a1c0a30e 	bge	r20,r7,799c <_realloc_r+0x3dc>
    7710:	4080004c 	andi	r2,r8,1
    7714:	1000551e 	bne	r2,zero,786c <_realloc_r+0x2ac>
    7718:	80800017 	ldw	r2,0(r16)
    771c:	80afc83a 	sub	r23,r16,r2
    7720:	b8c00117 	ldw	r3,4(r23)
    7724:	00bfff04 	movi	r2,-4
    7728:	1884703a 	and	r2,r3,r2
    772c:	30002e26 	beq	r6,zero,77e8 <_realloc_r+0x228>
    7730:	3240b926 	beq	r6,r9,7a18 <_realloc_r+0x458>
    7734:	98a9883a 	add	r20,r19,r2
    7738:	2509883a 	add	r4,r4,r20
    773c:	d9000015 	stw	r4,0(sp)
    7740:	21c02a16 	blt	r4,r7,77ec <_realloc_r+0x22c>
    7744:	30800317 	ldw	r2,12(r6)
    7748:	30c00217 	ldw	r3,8(r6)
    774c:	01400904 	movi	r5,36
    7750:	99bfff04 	addi	r6,r19,-4
    7754:	18800315 	stw	r2,12(r3)
    7758:	10c00215 	stw	r3,8(r2)
    775c:	b9000317 	ldw	r4,12(r23)
    7760:	b8800217 	ldw	r2,8(r23)
    7764:	b82b883a 	mov	r21,r23
    7768:	bc000204 	addi	r16,r23,8
    776c:	20800215 	stw	r2,8(r4)
    7770:	11000315 	stw	r4,12(r2)
    7774:	2980e436 	bltu	r5,r6,7b08 <_realloc_r+0x548>
    7778:	008004c4 	movi	r2,19
    777c:	9009883a 	mov	r4,r18
    7780:	8011883a 	mov	r8,r16
    7784:	11800f2e 	bgeu	r2,r6,77c4 <_realloc_r+0x204>
    7788:	90800017 	ldw	r2,0(r18)
    778c:	ba000404 	addi	r8,r23,16
    7790:	91000204 	addi	r4,r18,8
    7794:	b8800215 	stw	r2,8(r23)
    7798:	90c00117 	ldw	r3,4(r18)
    779c:	008006c4 	movi	r2,27
    77a0:	b8c00315 	stw	r3,12(r23)
    77a4:	1180072e 	bgeu	r2,r6,77c4 <_realloc_r+0x204>
    77a8:	90c00217 	ldw	r3,8(r18)
    77ac:	ba000604 	addi	r8,r23,24
    77b0:	91000404 	addi	r4,r18,16
    77b4:	b8c00415 	stw	r3,16(r23)
    77b8:	90800317 	ldw	r2,12(r18)
    77bc:	b8800515 	stw	r2,20(r23)
    77c0:	3140e726 	beq	r6,r5,7b60 <_realloc_r+0x5a0>
    77c4:	20800017 	ldw	r2,0(r4)
    77c8:	dd000017 	ldw	r20,0(sp)
    77cc:	b80f883a 	mov	r7,r23
    77d0:	40800015 	stw	r2,0(r8)
    77d4:	20c00117 	ldw	r3,4(r4)
    77d8:	40c00115 	stw	r3,4(r8)
    77dc:	20800217 	ldw	r2,8(r4)
    77e0:	40800215 	stw	r2,8(r8)
    77e4:	003f9706 	br	7644 <_realloc_r+0x84>
    77e8:	98a9883a 	add	r20,r19,r2
    77ec:	a1c01f16 	blt	r20,r7,786c <_realloc_r+0x2ac>
    77f0:	b8c00317 	ldw	r3,12(r23)
    77f4:	b8800217 	ldw	r2,8(r23)
    77f8:	99bfff04 	addi	r6,r19,-4
    77fc:	01400904 	movi	r5,36
    7800:	b82b883a 	mov	r21,r23
    7804:	18800215 	stw	r2,8(r3)
    7808:	10c00315 	stw	r3,12(r2)
    780c:	bc000204 	addi	r16,r23,8
    7810:	2980c336 	bltu	r5,r6,7b20 <_realloc_r+0x560>
    7814:	008004c4 	movi	r2,19
    7818:	9009883a 	mov	r4,r18
    781c:	8011883a 	mov	r8,r16
    7820:	11800f2e 	bgeu	r2,r6,7860 <_realloc_r+0x2a0>
    7824:	90800017 	ldw	r2,0(r18)
    7828:	ba000404 	addi	r8,r23,16
    782c:	91000204 	addi	r4,r18,8
    7830:	b8800215 	stw	r2,8(r23)
    7834:	90c00117 	ldw	r3,4(r18)
    7838:	008006c4 	movi	r2,27
    783c:	b8c00315 	stw	r3,12(r23)
    7840:	1180072e 	bgeu	r2,r6,7860 <_realloc_r+0x2a0>
    7844:	90c00217 	ldw	r3,8(r18)
    7848:	ba000604 	addi	r8,r23,24
    784c:	91000404 	addi	r4,r18,16
    7850:	b8c00415 	stw	r3,16(r23)
    7854:	90800317 	ldw	r2,12(r18)
    7858:	b8800515 	stw	r2,20(r23)
    785c:	3140c726 	beq	r6,r5,7b7c <_realloc_r+0x5bc>
    7860:	20800017 	ldw	r2,0(r4)
    7864:	b80f883a 	mov	r7,r23
    7868:	003fd906 	br	77d0 <_realloc_r+0x210>
    786c:	880b883a 	mov	r5,r17
    7870:	b009883a 	mov	r4,r22
    7874:	0000eb80 	call	eb8 <_malloc_r>
    7878:	1023883a 	mov	r17,r2
    787c:	10002526 	beq	r2,zero,7914 <_realloc_r+0x354>
    7880:	80800117 	ldw	r2,4(r16)
    7884:	00ffff84 	movi	r3,-2
    7888:	893ffe04 	addi	r4,r17,-8
    788c:	10c4703a 	and	r2,r2,r3
    7890:	8085883a 	add	r2,r16,r2
    7894:	20809526 	beq	r4,r2,7aec <_realloc_r+0x52c>
    7898:	99bfff04 	addi	r6,r19,-4
    789c:	01c00904 	movi	r7,36
    78a0:	39804536 	bltu	r7,r6,79b8 <_realloc_r+0x3f8>
    78a4:	008004c4 	movi	r2,19
    78a8:	9009883a 	mov	r4,r18
    78ac:	880b883a 	mov	r5,r17
    78b0:	11800f2e 	bgeu	r2,r6,78f0 <_realloc_r+0x330>
    78b4:	90800017 	ldw	r2,0(r18)
    78b8:	89400204 	addi	r5,r17,8
    78bc:	91000204 	addi	r4,r18,8
    78c0:	88800015 	stw	r2,0(r17)
    78c4:	90c00117 	ldw	r3,4(r18)
    78c8:	008006c4 	movi	r2,27
    78cc:	88c00115 	stw	r3,4(r17)
    78d0:	1180072e 	bgeu	r2,r6,78f0 <_realloc_r+0x330>
    78d4:	90c00217 	ldw	r3,8(r18)
    78d8:	89400404 	addi	r5,r17,16
    78dc:	91000404 	addi	r4,r18,16
    78e0:	88c00215 	stw	r3,8(r17)
    78e4:	90800317 	ldw	r2,12(r18)
    78e8:	88800315 	stw	r2,12(r17)
    78ec:	31c09126 	beq	r6,r7,7b34 <_realloc_r+0x574>
    78f0:	20800017 	ldw	r2,0(r4)
    78f4:	28800015 	stw	r2,0(r5)
    78f8:	20c00117 	ldw	r3,4(r4)
    78fc:	28c00115 	stw	r3,4(r5)
    7900:	20800217 	ldw	r2,8(r4)
    7904:	28800215 	stw	r2,8(r5)
    7908:	900b883a 	mov	r5,r18
    790c:	b009883a 	mov	r4,r22
    7910:	00057480 	call	5748 <_free_r>
    7914:	b009883a 	mov	r4,r22
    7918:	000afb80 	call	afb8 <__malloc_unlock>
    791c:	003f5e06 	br	7698 <_realloc_r+0xd8>
    7920:	300b883a 	mov	r5,r6
    7924:	dfc00b17 	ldw	ra,44(sp)
    7928:	df000a17 	ldw	fp,40(sp)
    792c:	ddc00917 	ldw	r23,36(sp)
    7930:	dd800817 	ldw	r22,32(sp)
    7934:	dd400717 	ldw	r21,28(sp)
    7938:	dd000617 	ldw	r20,24(sp)
    793c:	dcc00517 	ldw	r19,20(sp)
    7940:	dc800417 	ldw	r18,16(sp)
    7944:	dc400317 	ldw	r17,12(sp)
    7948:	dc000217 	ldw	r16,8(sp)
    794c:	dec00c04 	addi	sp,sp,48
    7950:	0000eb81 	jmpi	eb8 <_malloc_r>
    7954:	38800117 	ldw	r2,4(r7)
    7958:	e54b883a 	add	r5,fp,r21
    795c:	31000054 	ori	r4,r6,1
    7960:	1080004c 	andi	r2,r2,1
    7964:	1704b03a 	or	r2,r2,fp
    7968:	38800115 	stw	r2,4(r7)
    796c:	29000115 	stw	r4,4(r5)
    7970:	2987883a 	add	r3,r5,r6
    7974:	18800117 	ldw	r2,4(r3)
    7978:	29400204 	addi	r5,r5,8
    797c:	b009883a 	mov	r4,r22
    7980:	10800054 	ori	r2,r2,1
    7984:	18800115 	stw	r2,4(r3)
    7988:	00057480 	call	5748 <_free_r>
    798c:	003f3806 	br	7670 <_realloc_r+0xb0>
    7990:	000d883a 	mov	r6,zero
    7994:	0009883a 	mov	r4,zero
    7998:	003f5d06 	br	7710 <_realloc_r+0x150>
    799c:	30c00217 	ldw	r3,8(r6)
    79a0:	30800317 	ldw	r2,12(r6)
    79a4:	800f883a 	mov	r7,r16
    79a8:	84000204 	addi	r16,r16,8
    79ac:	10c00215 	stw	r3,8(r2)
    79b0:	18800315 	stw	r2,12(r3)
    79b4:	003f2306 	br	7644 <_realloc_r+0x84>
    79b8:	8809883a 	mov	r4,r17
    79bc:	900b883a 	mov	r5,r18
    79c0:	00064540 	call	6454 <memmove>
    79c4:	003fd006 	br	7908 <_realloc_r+0x348>
    79c8:	30800117 	ldw	r2,4(r6)
    79cc:	e0c00404 	addi	r3,fp,16
    79d0:	1108703a 	and	r4,r2,r4
    79d4:	9905883a 	add	r2,r19,r4
    79d8:	10ff4d16 	blt	r2,r3,7710 <_realloc_r+0x150>
    79dc:	1705c83a 	sub	r2,r2,fp
    79e0:	870b883a 	add	r5,r16,fp
    79e4:	10800054 	ori	r2,r2,1
    79e8:	28800115 	stw	r2,4(r5)
    79ec:	80c00117 	ldw	r3,4(r16)
    79f0:	00800074 	movhi	r2,1
    79f4:	10be2404 	addi	r2,r2,-1904
    79f8:	b009883a 	mov	r4,r22
    79fc:	18c0004c 	andi	r3,r3,1
    7a00:	e0c6b03a 	or	r3,fp,r3
    7a04:	11400215 	stw	r5,8(r2)
    7a08:	80c00115 	stw	r3,4(r16)
    7a0c:	000afb80 	call	afb8 <__malloc_unlock>
    7a10:	84400204 	addi	r17,r16,8
    7a14:	003f2006 	br	7698 <_realloc_r+0xd8>
    7a18:	98a9883a 	add	r20,r19,r2
    7a1c:	2509883a 	add	r4,r4,r20
    7a20:	e0800404 	addi	r2,fp,16
    7a24:	d9000115 	stw	r4,4(sp)
    7a28:	20bf7016 	blt	r4,r2,77ec <_realloc_r+0x22c>
    7a2c:	b8c00317 	ldw	r3,12(r23)
    7a30:	b8800217 	ldw	r2,8(r23)
    7a34:	99bfff04 	addi	r6,r19,-4
    7a38:	01400904 	movi	r5,36
    7a3c:	18800215 	stw	r2,8(r3)
    7a40:	10c00315 	stw	r3,12(r2)
    7a44:	bc400204 	addi	r17,r23,8
    7a48:	29804136 	bltu	r5,r6,7b50 <_realloc_r+0x590>
    7a4c:	008004c4 	movi	r2,19
    7a50:	9009883a 	mov	r4,r18
    7a54:	880f883a 	mov	r7,r17
    7a58:	11800f2e 	bgeu	r2,r6,7a98 <_realloc_r+0x4d8>
    7a5c:	90800017 	ldw	r2,0(r18)
    7a60:	b9c00404 	addi	r7,r23,16
    7a64:	91000204 	addi	r4,r18,8
    7a68:	b8800215 	stw	r2,8(r23)
    7a6c:	90c00117 	ldw	r3,4(r18)
    7a70:	008006c4 	movi	r2,27
    7a74:	b8c00315 	stw	r3,12(r23)
    7a78:	1180072e 	bgeu	r2,r6,7a98 <_realloc_r+0x4d8>
    7a7c:	90c00217 	ldw	r3,8(r18)
    7a80:	b9c00604 	addi	r7,r23,24
    7a84:	91000404 	addi	r4,r18,16
    7a88:	b8c00415 	stw	r3,16(r23)
    7a8c:	90800317 	ldw	r2,12(r18)
    7a90:	b8800515 	stw	r2,20(r23)
    7a94:	31404026 	beq	r6,r5,7b98 <_realloc_r+0x5d8>
    7a98:	20800017 	ldw	r2,0(r4)
    7a9c:	38800015 	stw	r2,0(r7)
    7aa0:	20c00117 	ldw	r3,4(r4)
    7aa4:	38c00115 	stw	r3,4(r7)
    7aa8:	20800217 	ldw	r2,8(r4)
    7aac:	38800215 	stw	r2,8(r7)
    7ab0:	d8c00117 	ldw	r3,4(sp)
    7ab4:	bf0b883a 	add	r5,r23,fp
    7ab8:	b009883a 	mov	r4,r22
    7abc:	1f05c83a 	sub	r2,r3,fp
    7ac0:	10800054 	ori	r2,r2,1
    7ac4:	28800115 	stw	r2,4(r5)
    7ac8:	b8c00117 	ldw	r3,4(r23)
    7acc:	00800074 	movhi	r2,1
    7ad0:	10be2404 	addi	r2,r2,-1904
    7ad4:	11400215 	stw	r5,8(r2)
    7ad8:	18c0004c 	andi	r3,r3,1
    7adc:	e0c6b03a 	or	r3,fp,r3
    7ae0:	b8c00115 	stw	r3,4(r23)
    7ae4:	000afb80 	call	afb8 <__malloc_unlock>
    7ae8:	003eeb06 	br	7698 <_realloc_r+0xd8>
    7aec:	20800117 	ldw	r2,4(r4)
    7af0:	00ffff04 	movi	r3,-4
    7af4:	800f883a 	mov	r7,r16
    7af8:	10c4703a 	and	r2,r2,r3
    7afc:	98a9883a 	add	r20,r19,r2
    7b00:	84000204 	addi	r16,r16,8
    7b04:	003ecf06 	br	7644 <_realloc_r+0x84>
    7b08:	900b883a 	mov	r5,r18
    7b0c:	8009883a 	mov	r4,r16
    7b10:	00064540 	call	6454 <memmove>
    7b14:	dd000017 	ldw	r20,0(sp)
    7b18:	b80f883a 	mov	r7,r23
    7b1c:	003ec906 	br	7644 <_realloc_r+0x84>
    7b20:	900b883a 	mov	r5,r18
    7b24:	8009883a 	mov	r4,r16
    7b28:	00064540 	call	6454 <memmove>
    7b2c:	b80f883a 	mov	r7,r23
    7b30:	003ec406 	br	7644 <_realloc_r+0x84>
    7b34:	90c00417 	ldw	r3,16(r18)
    7b38:	89400604 	addi	r5,r17,24
    7b3c:	91000604 	addi	r4,r18,24
    7b40:	88c00415 	stw	r3,16(r17)
    7b44:	90800517 	ldw	r2,20(r18)
    7b48:	88800515 	stw	r2,20(r17)
    7b4c:	003f6806 	br	78f0 <_realloc_r+0x330>
    7b50:	900b883a 	mov	r5,r18
    7b54:	8809883a 	mov	r4,r17
    7b58:	00064540 	call	6454 <memmove>
    7b5c:	003fd406 	br	7ab0 <_realloc_r+0x4f0>
    7b60:	90c00417 	ldw	r3,16(r18)
    7b64:	91000604 	addi	r4,r18,24
    7b68:	ba000804 	addi	r8,r23,32
    7b6c:	b8c00615 	stw	r3,24(r23)
    7b70:	90800517 	ldw	r2,20(r18)
    7b74:	b8800715 	stw	r2,28(r23)
    7b78:	003f1206 	br	77c4 <_realloc_r+0x204>
    7b7c:	90c00417 	ldw	r3,16(r18)
    7b80:	91000604 	addi	r4,r18,24
    7b84:	ba000804 	addi	r8,r23,32
    7b88:	b8c00615 	stw	r3,24(r23)
    7b8c:	90800517 	ldw	r2,20(r18)
    7b90:	b8800715 	stw	r2,28(r23)
    7b94:	003f3206 	br	7860 <_realloc_r+0x2a0>
    7b98:	90c00417 	ldw	r3,16(r18)
    7b9c:	91000604 	addi	r4,r18,24
    7ba0:	b9c00804 	addi	r7,r23,32
    7ba4:	b8c00615 	stw	r3,24(r23)
    7ba8:	90800517 	ldw	r2,20(r18)
    7bac:	b8800715 	stw	r2,28(r23)
    7bb0:	003fb906 	br	7a98 <_realloc_r+0x4d8>

00007bb4 <__srefill_r>:
    7bb4:	defffd04 	addi	sp,sp,-12
    7bb8:	dc400115 	stw	r17,4(sp)
    7bbc:	dc000015 	stw	r16,0(sp)
    7bc0:	dfc00215 	stw	ra,8(sp)
    7bc4:	2023883a 	mov	r17,r4
    7bc8:	2821883a 	mov	r16,r5
    7bcc:	20000226 	beq	r4,zero,7bd8 <__srefill_r+0x24>
    7bd0:	20800e17 	ldw	r2,56(r4)
    7bd4:	10004126 	beq	r2,zero,7cdc <__srefill_r+0x128>
    7bd8:	80c0030b 	ldhu	r3,12(r16)
    7bdc:	80000115 	stw	zero,4(r16)
    7be0:	1880080c 	andi	r2,r3,32
    7be4:	1000361e 	bne	r2,zero,7cc0 <__srefill_r+0x10c>
    7be8:	1880010c 	andi	r2,r3,4
    7bec:	1000211e 	bne	r2,zero,7c74 <__srefill_r+0xc0>
    7bf0:	1880040c 	andi	r2,r3,16
    7bf4:	10005026 	beq	r2,zero,7d38 <__srefill_r+0x184>
    7bf8:	1880020c 	andi	r2,r3,8
    7bfc:	1000541e 	bne	r2,zero,7d50 <__srefill_r+0x19c>
    7c00:	8080030b 	ldhu	r2,12(r16)
    7c04:	10800114 	ori	r2,r2,4
    7c08:	8080030d 	sth	r2,12(r16)
    7c0c:	80800417 	ldw	r2,16(r16)
    7c10:	10004526 	beq	r2,zero,7d28 <__srefill_r+0x174>
    7c14:	8080030b 	ldhu	r2,12(r16)
    7c18:	108000cc 	andi	r2,r2,3
    7c1c:	1000361e 	bne	r2,zero,7cf8 <__srefill_r+0x144>
    7c20:	81800417 	ldw	r6,16(r16)
    7c24:	80c00817 	ldw	r3,32(r16)
    7c28:	81400717 	ldw	r5,28(r16)
    7c2c:	81c00517 	ldw	r7,20(r16)
    7c30:	8809883a 	mov	r4,r17
    7c34:	81800015 	stw	r6,0(r16)
    7c38:	183ee83a 	callr	r3
    7c3c:	80c0030b 	ldhu	r3,12(r16)
    7c40:	1009883a 	mov	r4,r2
    7c44:	80800115 	stw	r2,4(r16)
    7c48:	00b7ffc4 	movi	r2,-8193
    7c4c:	1884703a 	and	r2,r3,r2
    7c50:	8080030d 	sth	r2,12(r16)
    7c54:	0100230e 	bge	zero,r4,7ce4 <__srefill_r+0x130>
    7c58:	0009883a 	mov	r4,zero
    7c5c:	2005883a 	mov	r2,r4
    7c60:	dfc00217 	ldw	ra,8(sp)
    7c64:	dc400117 	ldw	r17,4(sp)
    7c68:	dc000017 	ldw	r16,0(sp)
    7c6c:	dec00304 	addi	sp,sp,12
    7c70:	f800283a 	ret
    7c74:	81400c17 	ldw	r5,48(r16)
    7c78:	283fe426 	beq	r5,zero,7c0c <__srefill_r+0x58>
    7c7c:	80801004 	addi	r2,r16,64
    7c80:	28800226 	beq	r5,r2,7c8c <__srefill_r+0xd8>
    7c84:	8809883a 	mov	r4,r17
    7c88:	00057480 	call	5748 <_free_r>
    7c8c:	80800f17 	ldw	r2,60(r16)
    7c90:	80000c15 	stw	zero,48(r16)
    7c94:	80800115 	stw	r2,4(r16)
    7c98:	103fdc26 	beq	r2,zero,7c0c <__srefill_r+0x58>
    7c9c:	80800e17 	ldw	r2,56(r16)
    7ca0:	0009883a 	mov	r4,zero
    7ca4:	80800015 	stw	r2,0(r16)
    7ca8:	2005883a 	mov	r2,r4
    7cac:	dfc00217 	ldw	ra,8(sp)
    7cb0:	dc400117 	ldw	r17,4(sp)
    7cb4:	dc000017 	ldw	r16,0(sp)
    7cb8:	dec00304 	addi	sp,sp,12
    7cbc:	f800283a 	ret
    7cc0:	013fffc4 	movi	r4,-1
    7cc4:	2005883a 	mov	r2,r4
    7cc8:	dfc00217 	ldw	ra,8(sp)
    7ccc:	dc400117 	ldw	r17,4(sp)
    7cd0:	dc000017 	ldw	r16,0(sp)
    7cd4:	dec00304 	addi	sp,sp,12
    7cd8:	f800283a 	ret
    7cdc:	00053c40 	call	53c4 <__sinit>
    7ce0:	003fbd06 	br	7bd8 <__srefill_r+0x24>
    7ce4:	20000b1e 	bne	r4,zero,7d14 <__srefill_r+0x160>
    7ce8:	10800814 	ori	r2,r2,32
    7cec:	013fffc4 	movi	r4,-1
    7cf0:	8080030d 	sth	r2,12(r16)
    7cf4:	003fd906 	br	7c5c <__srefill_r+0xa8>
    7cf8:	00800074 	movhi	r2,1
    7cfc:	10840104 	addi	r2,r2,4100
    7d00:	11000017 	ldw	r4,0(r2)
    7d04:	01400034 	movhi	r5,0
    7d08:	295f5e04 	addi	r5,r5,32120
    7d0c:	0005fc00 	call	5fc0 <_fwalk>
    7d10:	003fc306 	br	7c20 <__srefill_r+0x6c>
    7d14:	10801014 	ori	r2,r2,64
    7d18:	013fffc4 	movi	r4,-1
    7d1c:	8080030d 	sth	r2,12(r16)
    7d20:	80000115 	stw	zero,4(r16)
    7d24:	003fcd06 	br	7c5c <__srefill_r+0xa8>
    7d28:	8809883a 	mov	r4,r17
    7d2c:	800b883a 	mov	r5,r16
    7d30:	000613c0 	call	613c <__smakebuf_r>
    7d34:	003fb706 	br	7c14 <__srefill_r+0x60>
    7d38:	18c01014 	ori	r3,r3,64
    7d3c:	00800244 	movi	r2,9
    7d40:	013fffc4 	movi	r4,-1
    7d44:	88800015 	stw	r2,0(r17)
    7d48:	80c0030d 	sth	r3,12(r16)
    7d4c:	003fc306 	br	7c5c <__srefill_r+0xa8>
    7d50:	8809883a 	mov	r4,r17
    7d54:	800b883a 	mov	r5,r16
    7d58:	000512c0 	call	512c <_fflush_r>
    7d5c:	103fd81e 	bne	r2,zero,7cc0 <__srefill_r+0x10c>
    7d60:	8080030b 	ldhu	r2,12(r16)
    7d64:	80000215 	stw	zero,8(r16)
    7d68:	80000615 	stw	zero,24(r16)
    7d6c:	10bffdcc 	andi	r2,r2,65527
    7d70:	8080030d 	sth	r2,12(r16)
    7d74:	003fa206 	br	7c00 <__srefill_r+0x4c>

00007d78 <lflush>:
    7d78:	20c0030b 	ldhu	r3,12(r4)
    7d7c:	01400244 	movi	r5,9
    7d80:	0005883a 	mov	r2,zero
    7d84:	18c0024c 	andi	r3,r3,9
    7d88:	19400126 	beq	r3,r5,7d90 <lflush+0x18>
    7d8c:	f800283a 	ret
    7d90:	00053281 	jmpi	5328 <fflush>

00007d94 <__isinfd>:
    7d94:	200d883a 	mov	r6,r4
    7d98:	0109c83a 	sub	r4,zero,r4
    7d9c:	2188b03a 	or	r4,r4,r6
    7da0:	2008d7fa 	srli	r4,r4,31
    7da4:	00a00034 	movhi	r2,32768
    7da8:	10bfffc4 	addi	r2,r2,-1
    7dac:	1144703a 	and	r2,r2,r5
    7db0:	2088b03a 	or	r4,r4,r2
    7db4:	009ffc34 	movhi	r2,32752
    7db8:	1105c83a 	sub	r2,r2,r4
    7dbc:	0087c83a 	sub	r3,zero,r2
    7dc0:	10c4b03a 	or	r2,r2,r3
    7dc4:	1004d7fa 	srli	r2,r2,31
    7dc8:	00c00044 	movi	r3,1
    7dcc:	1885c83a 	sub	r2,r3,r2
    7dd0:	f800283a 	ret

00007dd4 <__isnand>:
    7dd4:	200d883a 	mov	r6,r4
    7dd8:	0109c83a 	sub	r4,zero,r4
    7ddc:	2188b03a 	or	r4,r4,r6
    7de0:	2008d7fa 	srli	r4,r4,31
    7de4:	00a00034 	movhi	r2,32768
    7de8:	10bfffc4 	addi	r2,r2,-1
    7dec:	1144703a 	and	r2,r2,r5
    7df0:	2088b03a 	or	r4,r4,r2
    7df4:	009ffc34 	movhi	r2,32752
    7df8:	1105c83a 	sub	r2,r2,r4
    7dfc:	1004d7fa 	srli	r2,r2,31
    7e00:	f800283a 	ret

00007e04 <__sclose>:
    7e04:	2940038f 	ldh	r5,14(r5)
    7e08:	00081381 	jmpi	8138 <_close_r>

00007e0c <__sseek>:
    7e0c:	defffe04 	addi	sp,sp,-8
    7e10:	dc000015 	stw	r16,0(sp)
    7e14:	2821883a 	mov	r16,r5
    7e18:	2940038f 	ldh	r5,14(r5)
    7e1c:	dfc00115 	stw	ra,4(sp)
    7e20:	00083b00 	call	83b0 <_lseek_r>
    7e24:	1007883a 	mov	r3,r2
    7e28:	00bfffc4 	movi	r2,-1
    7e2c:	18800926 	beq	r3,r2,7e54 <__sseek+0x48>
    7e30:	8080030b 	ldhu	r2,12(r16)
    7e34:	80c01415 	stw	r3,80(r16)
    7e38:	10840014 	ori	r2,r2,4096
    7e3c:	8080030d 	sth	r2,12(r16)
    7e40:	1805883a 	mov	r2,r3
    7e44:	dfc00117 	ldw	ra,4(sp)
    7e48:	dc000017 	ldw	r16,0(sp)
    7e4c:	dec00204 	addi	sp,sp,8
    7e50:	f800283a 	ret
    7e54:	8080030b 	ldhu	r2,12(r16)
    7e58:	10bbffcc 	andi	r2,r2,61439
    7e5c:	8080030d 	sth	r2,12(r16)
    7e60:	1805883a 	mov	r2,r3
    7e64:	dfc00117 	ldw	ra,4(sp)
    7e68:	dc000017 	ldw	r16,0(sp)
    7e6c:	dec00204 	addi	sp,sp,8
    7e70:	f800283a 	ret

00007e74 <__swrite>:
    7e74:	2880030b 	ldhu	r2,12(r5)
    7e78:	defffb04 	addi	sp,sp,-20
    7e7c:	dcc00315 	stw	r19,12(sp)
    7e80:	1080400c 	andi	r2,r2,256
    7e84:	dc800215 	stw	r18,8(sp)
    7e88:	dc400115 	stw	r17,4(sp)
    7e8c:	dc000015 	stw	r16,0(sp)
    7e90:	3027883a 	mov	r19,r6
    7e94:	3825883a 	mov	r18,r7
    7e98:	dfc00415 	stw	ra,16(sp)
    7e9c:	2821883a 	mov	r16,r5
    7ea0:	000d883a 	mov	r6,zero
    7ea4:	01c00084 	movi	r7,2
    7ea8:	2023883a 	mov	r17,r4
    7eac:	10000226 	beq	r2,zero,7eb8 <__swrite+0x44>
    7eb0:	2940038f 	ldh	r5,14(r5)
    7eb4:	00083b00 	call	83b0 <_lseek_r>
    7eb8:	8080030b 	ldhu	r2,12(r16)
    7ebc:	8140038f 	ldh	r5,14(r16)
    7ec0:	8809883a 	mov	r4,r17
    7ec4:	10bbffcc 	andi	r2,r2,61439
    7ec8:	980d883a 	mov	r6,r19
    7ecc:	900f883a 	mov	r7,r18
    7ed0:	8080030d 	sth	r2,12(r16)
    7ed4:	dfc00417 	ldw	ra,16(sp)
    7ed8:	dcc00317 	ldw	r19,12(sp)
    7edc:	dc800217 	ldw	r18,8(sp)
    7ee0:	dc400117 	ldw	r17,4(sp)
    7ee4:	dc000017 	ldw	r16,0(sp)
    7ee8:	dec00504 	addi	sp,sp,20
    7eec:	000800c1 	jmpi	800c <_write_r>

00007ef0 <__sread>:
    7ef0:	defffe04 	addi	sp,sp,-8
    7ef4:	dc000015 	stw	r16,0(sp)
    7ef8:	2821883a 	mov	r16,r5
    7efc:	2940038f 	ldh	r5,14(r5)
    7f00:	dfc00115 	stw	ra,4(sp)
    7f04:	00084280 	call	8428 <_read_r>
    7f08:	1007883a 	mov	r3,r2
    7f0c:	10000816 	blt	r2,zero,7f30 <__sread+0x40>
    7f10:	80801417 	ldw	r2,80(r16)
    7f14:	10c5883a 	add	r2,r2,r3
    7f18:	80801415 	stw	r2,80(r16)
    7f1c:	1805883a 	mov	r2,r3
    7f20:	dfc00117 	ldw	ra,4(sp)
    7f24:	dc000017 	ldw	r16,0(sp)
    7f28:	dec00204 	addi	sp,sp,8
    7f2c:	f800283a 	ret
    7f30:	8080030b 	ldhu	r2,12(r16)
    7f34:	10bbffcc 	andi	r2,r2,61439
    7f38:	8080030d 	sth	r2,12(r16)
    7f3c:	1805883a 	mov	r2,r3
    7f40:	dfc00117 	ldw	ra,4(sp)
    7f44:	dc000017 	ldw	r16,0(sp)
    7f48:	dec00204 	addi	sp,sp,8
    7f4c:	f800283a 	ret

00007f50 <strcmp>:
    7f50:	2144b03a 	or	r2,r4,r5
    7f54:	108000cc 	andi	r2,r2,3
    7f58:	10001d1e 	bne	r2,zero,7fd0 <strcmp+0x80>
    7f5c:	200f883a 	mov	r7,r4
    7f60:	28800017 	ldw	r2,0(r5)
    7f64:	21000017 	ldw	r4,0(r4)
    7f68:	280d883a 	mov	r6,r5
    7f6c:	2080161e 	bne	r4,r2,7fc8 <strcmp+0x78>
    7f70:	023fbff4 	movhi	r8,65279
    7f74:	423fbfc4 	addi	r8,r8,-257
    7f78:	2207883a 	add	r3,r4,r8
    7f7c:	01602074 	movhi	r5,32897
    7f80:	29602004 	addi	r5,r5,-32640
    7f84:	1946703a 	and	r3,r3,r5
    7f88:	0104303a 	nor	r2,zero,r4
    7f8c:	10c4703a 	and	r2,r2,r3
    7f90:	10001c1e 	bne	r2,zero,8004 <strcmp+0xb4>
    7f94:	4013883a 	mov	r9,r8
    7f98:	2811883a 	mov	r8,r5
    7f9c:	00000106 	br	7fa4 <strcmp+0x54>
    7fa0:	1800181e 	bne	r3,zero,8004 <strcmp+0xb4>
    7fa4:	39c00104 	addi	r7,r7,4
    7fa8:	39000017 	ldw	r4,0(r7)
    7fac:	31800104 	addi	r6,r6,4
    7fb0:	31400017 	ldw	r5,0(r6)
    7fb4:	2245883a 	add	r2,r4,r9
    7fb8:	1204703a 	and	r2,r2,r8
    7fbc:	0106303a 	nor	r3,zero,r4
    7fc0:	1886703a 	and	r3,r3,r2
    7fc4:	217ff626 	beq	r4,r5,7fa0 <strcmp+0x50>
    7fc8:	3809883a 	mov	r4,r7
    7fcc:	300b883a 	mov	r5,r6
    7fd0:	20c00007 	ldb	r3,0(r4)
    7fd4:	1800051e 	bne	r3,zero,7fec <strcmp+0x9c>
    7fd8:	00000606 	br	7ff4 <strcmp+0xa4>
    7fdc:	21000044 	addi	r4,r4,1
    7fe0:	20c00007 	ldb	r3,0(r4)
    7fe4:	29400044 	addi	r5,r5,1
    7fe8:	18000226 	beq	r3,zero,7ff4 <strcmp+0xa4>
    7fec:	28800007 	ldb	r2,0(r5)
    7ff0:	18bffa26 	beq	r3,r2,7fdc <strcmp+0x8c>
    7ff4:	20c00003 	ldbu	r3,0(r4)
    7ff8:	28800003 	ldbu	r2,0(r5)
    7ffc:	1885c83a 	sub	r2,r3,r2
    8000:	f800283a 	ret
    8004:	0005883a 	mov	r2,zero
    8008:	f800283a 	ret

0000800c <_write_r>:
    800c:	defffd04 	addi	sp,sp,-12
    8010:	dc000015 	stw	r16,0(sp)
    8014:	04000074 	movhi	r16,1
    8018:	840b0404 	addi	r16,r16,11280
    801c:	dc400115 	stw	r17,4(sp)
    8020:	80000015 	stw	zero,0(r16)
    8024:	2023883a 	mov	r17,r4
    8028:	2809883a 	mov	r4,r5
    802c:	300b883a 	mov	r5,r6
    8030:	380d883a 	mov	r6,r7
    8034:	dfc00215 	stw	ra,8(sp)
    8038:	000b2740 	call	b274 <write>
    803c:	1007883a 	mov	r3,r2
    8040:	00bfffc4 	movi	r2,-1
    8044:	18800626 	beq	r3,r2,8060 <_write_r+0x54>
    8048:	1805883a 	mov	r2,r3
    804c:	dfc00217 	ldw	ra,8(sp)
    8050:	dc400117 	ldw	r17,4(sp)
    8054:	dc000017 	ldw	r16,0(sp)
    8058:	dec00304 	addi	sp,sp,12
    805c:	f800283a 	ret
    8060:	80800017 	ldw	r2,0(r16)
    8064:	103ff826 	beq	r2,zero,8048 <_write_r+0x3c>
    8068:	88800015 	stw	r2,0(r17)
    806c:	1805883a 	mov	r2,r3
    8070:	dfc00217 	ldw	ra,8(sp)
    8074:	dc400117 	ldw	r17,4(sp)
    8078:	dc000017 	ldw	r16,0(sp)
    807c:	dec00304 	addi	sp,sp,12
    8080:	f800283a 	ret

00008084 <_calloc_r>:
    8084:	298b383a 	mul	r5,r5,r6
    8088:	defffe04 	addi	sp,sp,-8
    808c:	dc000015 	stw	r16,0(sp)
    8090:	dfc00115 	stw	ra,4(sp)
    8094:	0000eb80 	call	eb8 <_malloc_r>
    8098:	1021883a 	mov	r16,r2
    809c:	01c00904 	movi	r7,36
    80a0:	10000d26 	beq	r2,zero,80d8 <_calloc_r+0x54>
    80a4:	10ffff17 	ldw	r3,-4(r2)
    80a8:	1009883a 	mov	r4,r2
    80ac:	00bfff04 	movi	r2,-4
    80b0:	1886703a 	and	r3,r3,r2
    80b4:	1887883a 	add	r3,r3,r2
    80b8:	180d883a 	mov	r6,r3
    80bc:	000b883a 	mov	r5,zero
    80c0:	38c01736 	bltu	r7,r3,8120 <_calloc_r+0x9c>
    80c4:	008004c4 	movi	r2,19
    80c8:	10c00836 	bltu	r2,r3,80ec <_calloc_r+0x68>
    80cc:	20000215 	stw	zero,8(r4)
    80d0:	20000015 	stw	zero,0(r4)
    80d4:	20000115 	stw	zero,4(r4)
    80d8:	8005883a 	mov	r2,r16
    80dc:	dfc00117 	ldw	ra,4(sp)
    80e0:	dc000017 	ldw	r16,0(sp)
    80e4:	dec00204 	addi	sp,sp,8
    80e8:	f800283a 	ret
    80ec:	008006c4 	movi	r2,27
    80f0:	80000015 	stw	zero,0(r16)
    80f4:	80000115 	stw	zero,4(r16)
    80f8:	81000204 	addi	r4,r16,8
    80fc:	10fff32e 	bgeu	r2,r3,80cc <_calloc_r+0x48>
    8100:	80000215 	stw	zero,8(r16)
    8104:	80000315 	stw	zero,12(r16)
    8108:	81000404 	addi	r4,r16,16
    810c:	19ffef1e 	bne	r3,r7,80cc <_calloc_r+0x48>
    8110:	81000604 	addi	r4,r16,24
    8114:	80000415 	stw	zero,16(r16)
    8118:	80000515 	stw	zero,20(r16)
    811c:	003feb06 	br	80cc <_calloc_r+0x48>
    8120:	00065340 	call	6534 <memset>
    8124:	8005883a 	mov	r2,r16
    8128:	dfc00117 	ldw	ra,4(sp)
    812c:	dc000017 	ldw	r16,0(sp)
    8130:	dec00204 	addi	sp,sp,8
    8134:	f800283a 	ret

00008138 <_close_r>:
    8138:	defffd04 	addi	sp,sp,-12
    813c:	dc000015 	stw	r16,0(sp)
    8140:	04000074 	movhi	r16,1
    8144:	840b0404 	addi	r16,r16,11280
    8148:	dc400115 	stw	r17,4(sp)
    814c:	80000015 	stw	zero,0(r16)
    8150:	2023883a 	mov	r17,r4
    8154:	2809883a 	mov	r4,r5
    8158:	dfc00215 	stw	ra,8(sp)
    815c:	000a8d00 	call	a8d0 <close>
    8160:	1007883a 	mov	r3,r2
    8164:	00bfffc4 	movi	r2,-1
    8168:	18800626 	beq	r3,r2,8184 <_close_r+0x4c>
    816c:	1805883a 	mov	r2,r3
    8170:	dfc00217 	ldw	ra,8(sp)
    8174:	dc400117 	ldw	r17,4(sp)
    8178:	dc000017 	ldw	r16,0(sp)
    817c:	dec00304 	addi	sp,sp,12
    8180:	f800283a 	ret
    8184:	80800017 	ldw	r2,0(r16)
    8188:	103ff826 	beq	r2,zero,816c <_close_r+0x34>
    818c:	88800015 	stw	r2,0(r17)
    8190:	1805883a 	mov	r2,r3
    8194:	dfc00217 	ldw	ra,8(sp)
    8198:	dc400117 	ldw	r17,4(sp)
    819c:	dc000017 	ldw	r16,0(sp)
    81a0:	dec00304 	addi	sp,sp,12
    81a4:	f800283a 	ret

000081a8 <_fclose_r>:
    81a8:	defffc04 	addi	sp,sp,-16
    81ac:	dc400115 	stw	r17,4(sp)
    81b0:	dc000015 	stw	r16,0(sp)
    81b4:	dfc00315 	stw	ra,12(sp)
    81b8:	dc800215 	stw	r18,8(sp)
    81bc:	2821883a 	mov	r16,r5
    81c0:	2023883a 	mov	r17,r4
    81c4:	28002926 	beq	r5,zero,826c <_fclose_r+0xc4>
    81c8:	00053b40 	call	53b4 <__sfp_lock_acquire>
    81cc:	88000226 	beq	r17,zero,81d8 <_fclose_r+0x30>
    81d0:	88800e17 	ldw	r2,56(r17)
    81d4:	10002d26 	beq	r2,zero,828c <_fclose_r+0xe4>
    81d8:	8080030f 	ldh	r2,12(r16)
    81dc:	10002226 	beq	r2,zero,8268 <_fclose_r+0xc0>
    81e0:	8809883a 	mov	r4,r17
    81e4:	800b883a 	mov	r5,r16
    81e8:	000512c0 	call	512c <_fflush_r>
    81ec:	1025883a 	mov	r18,r2
    81f0:	80800b17 	ldw	r2,44(r16)
    81f4:	10000426 	beq	r2,zero,8208 <_fclose_r+0x60>
    81f8:	81400717 	ldw	r5,28(r16)
    81fc:	8809883a 	mov	r4,r17
    8200:	103ee83a 	callr	r2
    8204:	10002a16 	blt	r2,zero,82b0 <_fclose_r+0x108>
    8208:	8080030b 	ldhu	r2,12(r16)
    820c:	1080200c 	andi	r2,r2,128
    8210:	1000231e 	bne	r2,zero,82a0 <_fclose_r+0xf8>
    8214:	81400c17 	ldw	r5,48(r16)
    8218:	28000526 	beq	r5,zero,8230 <_fclose_r+0x88>
    821c:	80801004 	addi	r2,r16,64
    8220:	28800226 	beq	r5,r2,822c <_fclose_r+0x84>
    8224:	8809883a 	mov	r4,r17
    8228:	00057480 	call	5748 <_free_r>
    822c:	80000c15 	stw	zero,48(r16)
    8230:	81401117 	ldw	r5,68(r16)
    8234:	28000326 	beq	r5,zero,8244 <_fclose_r+0x9c>
    8238:	8809883a 	mov	r4,r17
    823c:	00057480 	call	5748 <_free_r>
    8240:	80001115 	stw	zero,68(r16)
    8244:	8000030d 	sth	zero,12(r16)
    8248:	00053b80 	call	53b8 <__sfp_lock_release>
    824c:	9005883a 	mov	r2,r18
    8250:	dfc00317 	ldw	ra,12(sp)
    8254:	dc800217 	ldw	r18,8(sp)
    8258:	dc400117 	ldw	r17,4(sp)
    825c:	dc000017 	ldw	r16,0(sp)
    8260:	dec00404 	addi	sp,sp,16
    8264:	f800283a 	ret
    8268:	00053b80 	call	53b8 <__sfp_lock_release>
    826c:	0025883a 	mov	r18,zero
    8270:	9005883a 	mov	r2,r18
    8274:	dfc00317 	ldw	ra,12(sp)
    8278:	dc800217 	ldw	r18,8(sp)
    827c:	dc400117 	ldw	r17,4(sp)
    8280:	dc000017 	ldw	r16,0(sp)
    8284:	dec00404 	addi	sp,sp,16
    8288:	f800283a 	ret
    828c:	8809883a 	mov	r4,r17
    8290:	00053c40 	call	53c4 <__sinit>
    8294:	8080030f 	ldh	r2,12(r16)
    8298:	103fd11e 	bne	r2,zero,81e0 <_fclose_r+0x38>
    829c:	003ff206 	br	8268 <_fclose_r+0xc0>
    82a0:	81400417 	ldw	r5,16(r16)
    82a4:	8809883a 	mov	r4,r17
    82a8:	00057480 	call	5748 <_free_r>
    82ac:	003fd906 	br	8214 <_fclose_r+0x6c>
    82b0:	04bfffc4 	movi	r18,-1
    82b4:	003fd406 	br	8208 <_fclose_r+0x60>

000082b8 <fclose>:
    82b8:	00800074 	movhi	r2,1
    82bc:	10840004 	addi	r2,r2,4096
    82c0:	200b883a 	mov	r5,r4
    82c4:	11000017 	ldw	r4,0(r2)
    82c8:	00081a81 	jmpi	81a8 <_fclose_r>

000082cc <_fstat_r>:
    82cc:	defffd04 	addi	sp,sp,-12
    82d0:	dc000015 	stw	r16,0(sp)
    82d4:	04000074 	movhi	r16,1
    82d8:	840b0404 	addi	r16,r16,11280
    82dc:	dc400115 	stw	r17,4(sp)
    82e0:	80000015 	stw	zero,0(r16)
    82e4:	2023883a 	mov	r17,r4
    82e8:	2809883a 	mov	r4,r5
    82ec:	300b883a 	mov	r5,r6
    82f0:	dfc00215 	stw	ra,8(sp)
    82f4:	000aa9c0 	call	aa9c <fstat>
    82f8:	1007883a 	mov	r3,r2
    82fc:	00bfffc4 	movi	r2,-1
    8300:	18800626 	beq	r3,r2,831c <_fstat_r+0x50>
    8304:	1805883a 	mov	r2,r3
    8308:	dfc00217 	ldw	ra,8(sp)
    830c:	dc400117 	ldw	r17,4(sp)
    8310:	dc000017 	ldw	r16,0(sp)
    8314:	dec00304 	addi	sp,sp,12
    8318:	f800283a 	ret
    831c:	80800017 	ldw	r2,0(r16)
    8320:	103ff826 	beq	r2,zero,8304 <_fstat_r+0x38>
    8324:	88800015 	stw	r2,0(r17)
    8328:	1805883a 	mov	r2,r3
    832c:	dfc00217 	ldw	ra,8(sp)
    8330:	dc400117 	ldw	r17,4(sp)
    8334:	dc000017 	ldw	r16,0(sp)
    8338:	dec00304 	addi	sp,sp,12
    833c:	f800283a 	ret

00008340 <_isatty_r>:
    8340:	defffd04 	addi	sp,sp,-12
    8344:	dc000015 	stw	r16,0(sp)
    8348:	04000074 	movhi	r16,1
    834c:	840b0404 	addi	r16,r16,11280
    8350:	dc400115 	stw	r17,4(sp)
    8354:	80000015 	stw	zero,0(r16)
    8358:	2023883a 	mov	r17,r4
    835c:	2809883a 	mov	r4,r5
    8360:	dfc00215 	stw	ra,8(sp)
    8364:	000abd00 	call	abd0 <isatty>
    8368:	1007883a 	mov	r3,r2
    836c:	00bfffc4 	movi	r2,-1
    8370:	18800626 	beq	r3,r2,838c <_isatty_r+0x4c>
    8374:	1805883a 	mov	r2,r3
    8378:	dfc00217 	ldw	ra,8(sp)
    837c:	dc400117 	ldw	r17,4(sp)
    8380:	dc000017 	ldw	r16,0(sp)
    8384:	dec00304 	addi	sp,sp,12
    8388:	f800283a 	ret
    838c:	80800017 	ldw	r2,0(r16)
    8390:	103ff826 	beq	r2,zero,8374 <_isatty_r+0x34>
    8394:	88800015 	stw	r2,0(r17)
    8398:	1805883a 	mov	r2,r3
    839c:	dfc00217 	ldw	ra,8(sp)
    83a0:	dc400117 	ldw	r17,4(sp)
    83a4:	dc000017 	ldw	r16,0(sp)
    83a8:	dec00304 	addi	sp,sp,12
    83ac:	f800283a 	ret

000083b0 <_lseek_r>:
    83b0:	defffd04 	addi	sp,sp,-12
    83b4:	dc000015 	stw	r16,0(sp)
    83b8:	04000074 	movhi	r16,1
    83bc:	840b0404 	addi	r16,r16,11280
    83c0:	dc400115 	stw	r17,4(sp)
    83c4:	80000015 	stw	zero,0(r16)
    83c8:	2023883a 	mov	r17,r4
    83cc:	2809883a 	mov	r4,r5
    83d0:	300b883a 	mov	r5,r6
    83d4:	380d883a 	mov	r6,r7
    83d8:	dfc00215 	stw	ra,8(sp)
    83dc:	000addc0 	call	addc <lseek>
    83e0:	1007883a 	mov	r3,r2
    83e4:	00bfffc4 	movi	r2,-1
    83e8:	18800626 	beq	r3,r2,8404 <_lseek_r+0x54>
    83ec:	1805883a 	mov	r2,r3
    83f0:	dfc00217 	ldw	ra,8(sp)
    83f4:	dc400117 	ldw	r17,4(sp)
    83f8:	dc000017 	ldw	r16,0(sp)
    83fc:	dec00304 	addi	sp,sp,12
    8400:	f800283a 	ret
    8404:	80800017 	ldw	r2,0(r16)
    8408:	103ff826 	beq	r2,zero,83ec <_lseek_r+0x3c>
    840c:	88800015 	stw	r2,0(r17)
    8410:	1805883a 	mov	r2,r3
    8414:	dfc00217 	ldw	ra,8(sp)
    8418:	dc400117 	ldw	r17,4(sp)
    841c:	dc000017 	ldw	r16,0(sp)
    8420:	dec00304 	addi	sp,sp,12
    8424:	f800283a 	ret

00008428 <_read_r>:
    8428:	defffd04 	addi	sp,sp,-12
    842c:	dc000015 	stw	r16,0(sp)
    8430:	04000074 	movhi	r16,1
    8434:	840b0404 	addi	r16,r16,11280
    8438:	dc400115 	stw	r17,4(sp)
    843c:	80000015 	stw	zero,0(r16)
    8440:	2023883a 	mov	r17,r4
    8444:	2809883a 	mov	r4,r5
    8448:	300b883a 	mov	r5,r6
    844c:	380d883a 	mov	r6,r7
    8450:	dfc00215 	stw	ra,8(sp)
    8454:	000afd80 	call	afd8 <read>
    8458:	1007883a 	mov	r3,r2
    845c:	00bfffc4 	movi	r2,-1
    8460:	18800626 	beq	r3,r2,847c <_read_r+0x54>
    8464:	1805883a 	mov	r2,r3
    8468:	dfc00217 	ldw	ra,8(sp)
    846c:	dc400117 	ldw	r17,4(sp)
    8470:	dc000017 	ldw	r16,0(sp)
    8474:	dec00304 	addi	sp,sp,12
    8478:	f800283a 	ret
    847c:	80800017 	ldw	r2,0(r16)
    8480:	103ff826 	beq	r2,zero,8464 <_read_r+0x3c>
    8484:	88800015 	stw	r2,0(r17)
    8488:	1805883a 	mov	r2,r3
    848c:	dfc00217 	ldw	ra,8(sp)
    8490:	dc400117 	ldw	r17,4(sp)
    8494:	dc000017 	ldw	r16,0(sp)
    8498:	dec00304 	addi	sp,sp,12
    849c:	f800283a 	ret

000084a0 <__muldi3>:
    84a0:	2011883a 	mov	r8,r4
    84a4:	427fffcc 	andi	r9,r8,65535
    84a8:	4018d43a 	srli	r12,r8,16
    84ac:	32bfffcc 	andi	r10,r6,65535
    84b0:	3016d43a 	srli	r11,r6,16
    84b4:	4a85383a 	mul	r2,r9,r10
    84b8:	6295383a 	mul	r10,r12,r10
    84bc:	4ad3383a 	mul	r9,r9,r11
    84c0:	113fffcc 	andi	r4,r2,65535
    84c4:	1004d43a 	srli	r2,r2,16
    84c8:	4a93883a 	add	r9,r9,r10
    84cc:	3807883a 	mov	r3,r7
    84d0:	1245883a 	add	r2,r2,r9
    84d4:	280f883a 	mov	r7,r5
    84d8:	180b883a 	mov	r5,r3
    84dc:	1006943a 	slli	r3,r2,16
    84e0:	defffd04 	addi	sp,sp,-12
    84e4:	dc800215 	stw	r18,8(sp)
    84e8:	1907883a 	add	r3,r3,r4
    84ec:	dc400115 	stw	r17,4(sp)
    84f0:	dc000015 	stw	r16,0(sp)
    84f4:	4165383a 	mul	r18,r8,r5
    84f8:	31e3383a 	mul	r17,r6,r7
    84fc:	1012d43a 	srli	r9,r2,16
    8500:	62d9383a 	mul	r12,r12,r11
    8504:	181f883a 	mov	r15,r3
    8508:	1280022e 	bgeu	r2,r10,8514 <__muldi3+0x74>
    850c:	00800074 	movhi	r2,1
    8510:	6099883a 	add	r12,r12,r2
    8514:	624d883a 	add	r6,r12,r9
    8518:	9187883a 	add	r3,r18,r6
    851c:	88c7883a 	add	r3,r17,r3
    8520:	7805883a 	mov	r2,r15
    8524:	dc800217 	ldw	r18,8(sp)
    8528:	dc400117 	ldw	r17,4(sp)
    852c:	dc000017 	ldw	r16,0(sp)
    8530:	dec00304 	addi	sp,sp,12
    8534:	f800283a 	ret

00008538 <__udivdi3>:
    8538:	defff004 	addi	sp,sp,-64
    853c:	2005883a 	mov	r2,r4
    8540:	3011883a 	mov	r8,r6
    8544:	df000e15 	stw	fp,56(sp)
    8548:	dd000a15 	stw	r20,40(sp)
    854c:	dc000615 	stw	r16,24(sp)
    8550:	dfc00f15 	stw	ra,60(sp)
    8554:	ddc00d15 	stw	r23,52(sp)
    8558:	dd800c15 	stw	r22,48(sp)
    855c:	dd400b15 	stw	r21,44(sp)
    8560:	dcc00915 	stw	r19,36(sp)
    8564:	dc800815 	stw	r18,32(sp)
    8568:	dc400715 	stw	r17,28(sp)
    856c:	4021883a 	mov	r16,r8
    8570:	1039883a 	mov	fp,r2
    8574:	2829883a 	mov	r20,r5
    8578:	38003b1e 	bne	r7,zero,8668 <__udivdi3+0x130>
    857c:	2a005c36 	bltu	r5,r8,86f0 <__udivdi3+0x1b8>
    8580:	4000a626 	beq	r8,zero,881c <__udivdi3+0x2e4>
    8584:	00bfffd4 	movui	r2,65535
    8588:	14009e36 	bltu	r2,r16,8804 <__udivdi3+0x2cc>
    858c:	00803fc4 	movi	r2,255
    8590:	14013d36 	bltu	r2,r16,8a88 <__udivdi3+0x550>
    8594:	000b883a 	mov	r5,zero
    8598:	0005883a 	mov	r2,zero
    859c:	8084d83a 	srl	r2,r16,r2
    85a0:	01000074 	movhi	r4,1
    85a4:	213cc604 	addi	r4,r4,-3304
    85a8:	01800804 	movi	r6,32
    85ac:	1105883a 	add	r2,r2,r4
    85b0:	10c00003 	ldbu	r3,0(r2)
    85b4:	28c7883a 	add	r3,r5,r3
    85b8:	30edc83a 	sub	r22,r6,r3
    85bc:	b000ee1e 	bne	r22,zero,8978 <__udivdi3+0x440>
    85c0:	802ad43a 	srli	r21,r16,16
    85c4:	00800044 	movi	r2,1
    85c8:	a423c83a 	sub	r17,r20,r16
    85cc:	85ffffcc 	andi	r23,r16,65535
    85d0:	d8800315 	stw	r2,12(sp)
    85d4:	8809883a 	mov	r4,r17
    85d8:	a80b883a 	mov	r5,r21
    85dc:	000a32c0 	call	a32c <__udivsi3>
    85e0:	8809883a 	mov	r4,r17
    85e4:	a80b883a 	mov	r5,r21
    85e8:	102d883a 	mov	r22,r2
    85ec:	000a3340 	call	a334 <__umodsi3>
    85f0:	1004943a 	slli	r2,r2,16
    85f4:	e006d43a 	srli	r3,fp,16
    85f8:	bda3383a 	mul	r17,r23,r22
    85fc:	10c4b03a 	or	r2,r2,r3
    8600:	1440042e 	bgeu	r2,r17,8614 <__udivdi3+0xdc>
    8604:	1405883a 	add	r2,r2,r16
    8608:	b5bfffc4 	addi	r22,r22,-1
    860c:	14000136 	bltu	r2,r16,8614 <__udivdi3+0xdc>
    8610:	14413d36 	bltu	r2,r17,8b08 <__udivdi3+0x5d0>
    8614:	1463c83a 	sub	r17,r2,r17
    8618:	8809883a 	mov	r4,r17
    861c:	a80b883a 	mov	r5,r21
    8620:	000a32c0 	call	a32c <__udivsi3>
    8624:	8809883a 	mov	r4,r17
    8628:	a80b883a 	mov	r5,r21
    862c:	1029883a 	mov	r20,r2
    8630:	000a3340 	call	a334 <__umodsi3>
    8634:	1004943a 	slli	r2,r2,16
    8638:	bd09383a 	mul	r4,r23,r20
    863c:	e0ffffcc 	andi	r3,fp,65535
    8640:	10c4b03a 	or	r2,r2,r3
    8644:	1100042e 	bgeu	r2,r4,8658 <__udivdi3+0x120>
    8648:	8085883a 	add	r2,r16,r2
    864c:	a53fffc4 	addi	r20,r20,-1
    8650:	14000136 	bltu	r2,r16,8658 <__udivdi3+0x120>
    8654:	11012036 	bltu	r2,r4,8ad8 <__udivdi3+0x5a0>
    8658:	b004943a 	slli	r2,r22,16
    865c:	d9000317 	ldw	r4,12(sp)
    8660:	a084b03a 	or	r2,r20,r2
    8664:	00001506 	br	86bc <__udivdi3+0x184>
    8668:	380d883a 	mov	r6,r7
    866c:	29c06236 	bltu	r5,r7,87f8 <__udivdi3+0x2c0>
    8670:	00bfffd4 	movui	r2,65535
    8674:	11c05a36 	bltu	r2,r7,87e0 <__udivdi3+0x2a8>
    8678:	00803fc4 	movi	r2,255
    867c:	11c0fc36 	bltu	r2,r7,8a70 <__udivdi3+0x538>
    8680:	000b883a 	mov	r5,zero
    8684:	0005883a 	mov	r2,zero
    8688:	3084d83a 	srl	r2,r6,r2
    868c:	01000074 	movhi	r4,1
    8690:	213cc604 	addi	r4,r4,-3304
    8694:	01c00804 	movi	r7,32
    8698:	1105883a 	add	r2,r2,r4
    869c:	10c00003 	ldbu	r3,0(r2)
    86a0:	28c7883a 	add	r3,r5,r3
    86a4:	38efc83a 	sub	r23,r7,r3
    86a8:	b800691e 	bne	r23,zero,8850 <__udivdi3+0x318>
    86ac:	35000136 	bltu	r6,r20,86b4 <__udivdi3+0x17c>
    86b0:	e4005136 	bltu	fp,r16,87f8 <__udivdi3+0x2c0>
    86b4:	00800044 	movi	r2,1
    86b8:	0009883a 	mov	r4,zero
    86bc:	2007883a 	mov	r3,r4
    86c0:	dfc00f17 	ldw	ra,60(sp)
    86c4:	df000e17 	ldw	fp,56(sp)
    86c8:	ddc00d17 	ldw	r23,52(sp)
    86cc:	dd800c17 	ldw	r22,48(sp)
    86d0:	dd400b17 	ldw	r21,44(sp)
    86d4:	dd000a17 	ldw	r20,40(sp)
    86d8:	dcc00917 	ldw	r19,36(sp)
    86dc:	dc800817 	ldw	r18,32(sp)
    86e0:	dc400717 	ldw	r17,28(sp)
    86e4:	dc000617 	ldw	r16,24(sp)
    86e8:	dec01004 	addi	sp,sp,64
    86ec:	f800283a 	ret
    86f0:	00bfffd4 	movui	r2,65535
    86f4:	12005036 	bltu	r2,r8,8838 <__udivdi3+0x300>
    86f8:	00803fc4 	movi	r2,255
    86fc:	1200e836 	bltu	r2,r8,8aa0 <__udivdi3+0x568>
    8700:	000b883a 	mov	r5,zero
    8704:	0005883a 	mov	r2,zero
    8708:	8084d83a 	srl	r2,r16,r2
    870c:	01000074 	movhi	r4,1
    8710:	213cc604 	addi	r4,r4,-3304
    8714:	01800804 	movi	r6,32
    8718:	1105883a 	add	r2,r2,r4
    871c:	10c00003 	ldbu	r3,0(r2)
    8720:	28c7883a 	add	r3,r5,r3
    8724:	30cbc83a 	sub	r5,r6,r3
    8728:	28000626 	beq	r5,zero,8744 <__udivdi3+0x20c>
    872c:	3145c83a 	sub	r2,r6,r5
    8730:	e084d83a 	srl	r2,fp,r2
    8734:	a146983a 	sll	r3,r20,r5
    8738:	e178983a 	sll	fp,fp,r5
    873c:	8160983a 	sll	r16,r16,r5
    8740:	18a8b03a 	or	r20,r3,r2
    8744:	802ad43a 	srli	r21,r16,16
    8748:	a009883a 	mov	r4,r20
    874c:	85ffffcc 	andi	r23,r16,65535
    8750:	a80b883a 	mov	r5,r21
    8754:	000a32c0 	call	a32c <__udivsi3>
    8758:	a009883a 	mov	r4,r20
    875c:	a80b883a 	mov	r5,r21
    8760:	102d883a 	mov	r22,r2
    8764:	000a3340 	call	a334 <__umodsi3>
    8768:	1004943a 	slli	r2,r2,16
    876c:	e006d43a 	srli	r3,fp,16
    8770:	bda3383a 	mul	r17,r23,r22
    8774:	10c4b03a 	or	r2,r2,r3
    8778:	1440042e 	bgeu	r2,r17,878c <__udivdi3+0x254>
    877c:	1405883a 	add	r2,r2,r16
    8780:	b5bfffc4 	addi	r22,r22,-1
    8784:	14000136 	bltu	r2,r16,878c <__udivdi3+0x254>
    8788:	1440d536 	bltu	r2,r17,8ae0 <__udivdi3+0x5a8>
    878c:	1463c83a 	sub	r17,r2,r17
    8790:	8809883a 	mov	r4,r17
    8794:	a80b883a 	mov	r5,r21
    8798:	000a32c0 	call	a32c <__udivsi3>
    879c:	8809883a 	mov	r4,r17
    87a0:	a80b883a 	mov	r5,r21
    87a4:	1029883a 	mov	r20,r2
    87a8:	000a3340 	call	a334 <__umodsi3>
    87ac:	1004943a 	slli	r2,r2,16
    87b0:	bd09383a 	mul	r4,r23,r20
    87b4:	e0ffffcc 	andi	r3,fp,65535
    87b8:	10c4b03a 	or	r2,r2,r3
    87bc:	1100042e 	bgeu	r2,r4,87d0 <__udivdi3+0x298>
    87c0:	8085883a 	add	r2,r16,r2
    87c4:	a53fffc4 	addi	r20,r20,-1
    87c8:	14000136 	bltu	r2,r16,87d0 <__udivdi3+0x298>
    87cc:	1100c736 	bltu	r2,r4,8aec <__udivdi3+0x5b4>
    87d0:	b004943a 	slli	r2,r22,16
    87d4:	0009883a 	mov	r4,zero
    87d8:	a084b03a 	or	r2,r20,r2
    87dc:	003fb706 	br	86bc <__udivdi3+0x184>
    87e0:	00804034 	movhi	r2,256
    87e4:	10bfffc4 	addi	r2,r2,-1
    87e8:	11c0a436 	bltu	r2,r7,8a7c <__udivdi3+0x544>
    87ec:	01400404 	movi	r5,16
    87f0:	2805883a 	mov	r2,r5
    87f4:	003fa406 	br	8688 <__udivdi3+0x150>
    87f8:	0005883a 	mov	r2,zero
    87fc:	0009883a 	mov	r4,zero
    8800:	003fae06 	br	86bc <__udivdi3+0x184>
    8804:	00804034 	movhi	r2,256
    8808:	10bfffc4 	addi	r2,r2,-1
    880c:	1400a136 	bltu	r2,r16,8a94 <__udivdi3+0x55c>
    8810:	01400404 	movi	r5,16
    8814:	2805883a 	mov	r2,r5
    8818:	003f6006 	br	859c <__udivdi3+0x64>
    881c:	01000044 	movi	r4,1
    8820:	000b883a 	mov	r5,zero
    8824:	000a32c0 	call	a32c <__udivsi3>
    8828:	1021883a 	mov	r16,r2
    882c:	00bfffd4 	movui	r2,65535
    8830:	143ff436 	bltu	r2,r16,8804 <__udivdi3+0x2cc>
    8834:	003f5506 	br	858c <__udivdi3+0x54>
    8838:	00804034 	movhi	r2,256
    883c:	10bfffc4 	addi	r2,r2,-1
    8840:	12009a36 	bltu	r2,r8,8aac <__udivdi3+0x574>
    8844:	01400404 	movi	r5,16
    8848:	2805883a 	mov	r2,r5
    884c:	003fae06 	br	8708 <__udivdi3+0x1d0>
    8850:	3dc5c83a 	sub	r2,r7,r23
    8854:	35c8983a 	sll	r4,r6,r23
    8858:	8086d83a 	srl	r3,r16,r2
    885c:	a0a2d83a 	srl	r17,r20,r2
    8860:	e084d83a 	srl	r2,fp,r2
    8864:	20eab03a 	or	r21,r4,r3
    8868:	a82cd43a 	srli	r22,r21,16
    886c:	a5c6983a 	sll	r3,r20,r23
    8870:	8809883a 	mov	r4,r17
    8874:	b00b883a 	mov	r5,r22
    8878:	1886b03a 	or	r3,r3,r2
    887c:	d8c00215 	stw	r3,8(sp)
    8880:	000a32c0 	call	a32c <__udivsi3>
    8884:	8809883a 	mov	r4,r17
    8888:	b00b883a 	mov	r5,r22
    888c:	1029883a 	mov	r20,r2
    8890:	000a3340 	call	a334 <__umodsi3>
    8894:	a8ffffcc 	andi	r3,r21,65535
    8898:	d8c00515 	stw	r3,20(sp)
    889c:	d9000217 	ldw	r4,8(sp)
    88a0:	d9400517 	ldw	r5,20(sp)
    88a4:	1004943a 	slli	r2,r2,16
    88a8:	2006d43a 	srli	r3,r4,16
    88ac:	85e0983a 	sll	r16,r16,r23
    88b0:	2d23383a 	mul	r17,r5,r20
    88b4:	10c4b03a 	or	r2,r2,r3
    88b8:	dc000015 	stw	r16,0(sp)
    88bc:	1440032e 	bgeu	r2,r17,88cc <__udivdi3+0x394>
    88c0:	1545883a 	add	r2,r2,r21
    88c4:	a53fffc4 	addi	r20,r20,-1
    88c8:	15407f2e 	bgeu	r2,r21,8ac8 <__udivdi3+0x590>
    88cc:	1463c83a 	sub	r17,r2,r17
    88d0:	8809883a 	mov	r4,r17
    88d4:	b00b883a 	mov	r5,r22
    88d8:	000a32c0 	call	a32c <__udivsi3>
    88dc:	8809883a 	mov	r4,r17
    88e0:	b00b883a 	mov	r5,r22
    88e4:	1021883a 	mov	r16,r2
    88e8:	000a3340 	call	a334 <__umodsi3>
    88ec:	d8c00517 	ldw	r3,20(sp)
    88f0:	d9000217 	ldw	r4,8(sp)
    88f4:	1004943a 	slli	r2,r2,16
    88f8:	1c0f383a 	mul	r7,r3,r16
    88fc:	20ffffcc 	andi	r3,r4,65535
    8900:	10e2b03a 	or	r17,r2,r3
    8904:	89c0032e 	bgeu	r17,r7,8914 <__udivdi3+0x3dc>
    8908:	8d63883a 	add	r17,r17,r21
    890c:	843fffc4 	addi	r16,r16,-1
    8910:	8d40692e 	bgeu	r17,r21,8ab8 <__udivdi3+0x580>
    8914:	a008943a 	slli	r4,r20,16
    8918:	d9400017 	ldw	r5,0(sp)
    891c:	89e3c83a 	sub	r17,r17,r7
    8920:	8110b03a 	or	r8,r16,r4
    8924:	280cd43a 	srli	r6,r5,16
    8928:	28ffffcc 	andi	r3,r5,65535
    892c:	40bfffcc 	andi	r2,r8,65535
    8930:	400ad43a 	srli	r5,r8,16
    8934:	10d3383a 	mul	r9,r2,r3
    8938:	1185383a 	mul	r2,r2,r6
    893c:	28c7383a 	mul	r3,r5,r3
    8940:	4808d43a 	srli	r4,r9,16
    8944:	298b383a 	mul	r5,r5,r6
    8948:	10c5883a 	add	r2,r2,r3
    894c:	2089883a 	add	r4,r4,r2
    8950:	20c0022e 	bgeu	r4,r3,895c <__udivdi3+0x424>
    8954:	00800074 	movhi	r2,1
    8958:	288b883a 	add	r5,r5,r2
    895c:	2004d43a 	srli	r2,r4,16
    8960:	288b883a 	add	r5,r5,r2
    8964:	89403f36 	bltu	r17,r5,8a64 <__udivdi3+0x52c>
    8968:	89403926 	beq	r17,r5,8a50 <__udivdi3+0x518>
    896c:	4005883a 	mov	r2,r8
    8970:	0009883a 	mov	r4,zero
    8974:	003f5106 	br	86bc <__udivdi3+0x184>
    8978:	85a0983a 	sll	r16,r16,r22
    897c:	3585c83a 	sub	r2,r6,r22
    8980:	a0a2d83a 	srl	r17,r20,r2
    8984:	802ad43a 	srli	r21,r16,16
    8988:	e084d83a 	srl	r2,fp,r2
    898c:	a586983a 	sll	r3,r20,r22
    8990:	8809883a 	mov	r4,r17
    8994:	a80b883a 	mov	r5,r21
    8998:	1886b03a 	or	r3,r3,r2
    899c:	d8c00115 	stw	r3,4(sp)
    89a0:	000a32c0 	call	a32c <__udivsi3>
    89a4:	8809883a 	mov	r4,r17
    89a8:	a80b883a 	mov	r5,r21
    89ac:	d8800415 	stw	r2,16(sp)
    89b0:	000a3340 	call	a334 <__umodsi3>
    89b4:	d9000117 	ldw	r4,4(sp)
    89b8:	d9400417 	ldw	r5,16(sp)
    89bc:	1004943a 	slli	r2,r2,16
    89c0:	85ffffcc 	andi	r23,r16,65535
    89c4:	2006d43a 	srli	r3,r4,16
    89c8:	b963383a 	mul	r17,r23,r5
    89cc:	10c4b03a 	or	r2,r2,r3
    89d0:	1440042e 	bgeu	r2,r17,89e4 <__udivdi3+0x4ac>
    89d4:	297fffc4 	addi	r5,r5,-1
    89d8:	1405883a 	add	r2,r2,r16
    89dc:	d9400415 	stw	r5,16(sp)
    89e0:	1400442e 	bgeu	r2,r16,8af4 <__udivdi3+0x5bc>
    89e4:	1463c83a 	sub	r17,r2,r17
    89e8:	8809883a 	mov	r4,r17
    89ec:	a80b883a 	mov	r5,r21
    89f0:	000a32c0 	call	a32c <__udivsi3>
    89f4:	8809883a 	mov	r4,r17
    89f8:	a80b883a 	mov	r5,r21
    89fc:	1029883a 	mov	r20,r2
    8a00:	000a3340 	call	a334 <__umodsi3>
    8a04:	d9400117 	ldw	r5,4(sp)
    8a08:	1004943a 	slli	r2,r2,16
    8a0c:	bd09383a 	mul	r4,r23,r20
    8a10:	28ffffcc 	andi	r3,r5,65535
    8a14:	10c6b03a 	or	r3,r2,r3
    8a18:	1900062e 	bgeu	r3,r4,8a34 <__udivdi3+0x4fc>
    8a1c:	1c07883a 	add	r3,r3,r16
    8a20:	a53fffc4 	addi	r20,r20,-1
    8a24:	1c000336 	bltu	r3,r16,8a34 <__udivdi3+0x4fc>
    8a28:	1900022e 	bgeu	r3,r4,8a34 <__udivdi3+0x4fc>
    8a2c:	a53fffc4 	addi	r20,r20,-1
    8a30:	1c07883a 	add	r3,r3,r16
    8a34:	d9400417 	ldw	r5,16(sp)
    8a38:	e5b8983a 	sll	fp,fp,r22
    8a3c:	1923c83a 	sub	r17,r3,r4
    8a40:	2804943a 	slli	r2,r5,16
    8a44:	a0a8b03a 	or	r20,r20,r2
    8a48:	dd000315 	stw	r20,12(sp)
    8a4c:	003ee106 	br	85d4 <__udivdi3+0x9c>
    8a50:	2004943a 	slli	r2,r4,16
    8a54:	e5c8983a 	sll	r4,fp,r23
    8a58:	48ffffcc 	andi	r3,r9,65535
    8a5c:	10c5883a 	add	r2,r2,r3
    8a60:	20bfc22e 	bgeu	r4,r2,896c <__udivdi3+0x434>
    8a64:	40bfffc4 	addi	r2,r8,-1
    8a68:	0009883a 	mov	r4,zero
    8a6c:	003f1306 	br	86bc <__udivdi3+0x184>
    8a70:	01400204 	movi	r5,8
    8a74:	2805883a 	mov	r2,r5
    8a78:	003f0306 	br	8688 <__udivdi3+0x150>
    8a7c:	01400604 	movi	r5,24
    8a80:	2805883a 	mov	r2,r5
    8a84:	003f0006 	br	8688 <__udivdi3+0x150>
    8a88:	01400204 	movi	r5,8
    8a8c:	2805883a 	mov	r2,r5
    8a90:	003ec206 	br	859c <__udivdi3+0x64>
    8a94:	01400604 	movi	r5,24
    8a98:	2805883a 	mov	r2,r5
    8a9c:	003ebf06 	br	859c <__udivdi3+0x64>
    8aa0:	01400204 	movi	r5,8
    8aa4:	2805883a 	mov	r2,r5
    8aa8:	003f1706 	br	8708 <__udivdi3+0x1d0>
    8aac:	01400604 	movi	r5,24
    8ab0:	2805883a 	mov	r2,r5
    8ab4:	003f1406 	br	8708 <__udivdi3+0x1d0>
    8ab8:	89ff962e 	bgeu	r17,r7,8914 <__udivdi3+0x3dc>
    8abc:	8d63883a 	add	r17,r17,r21
    8ac0:	843fffc4 	addi	r16,r16,-1
    8ac4:	003f9306 	br	8914 <__udivdi3+0x3dc>
    8ac8:	147f802e 	bgeu	r2,r17,88cc <__udivdi3+0x394>
    8acc:	a53fffc4 	addi	r20,r20,-1
    8ad0:	1545883a 	add	r2,r2,r21
    8ad4:	003f7d06 	br	88cc <__udivdi3+0x394>
    8ad8:	a53fffc4 	addi	r20,r20,-1
    8adc:	003ede06 	br	8658 <__udivdi3+0x120>
    8ae0:	b5bfffc4 	addi	r22,r22,-1
    8ae4:	1405883a 	add	r2,r2,r16
    8ae8:	003f2806 	br	878c <__udivdi3+0x254>
    8aec:	a53fffc4 	addi	r20,r20,-1
    8af0:	003f3706 	br	87d0 <__udivdi3+0x298>
    8af4:	147fbb2e 	bgeu	r2,r17,89e4 <__udivdi3+0x4ac>
    8af8:	297fffc4 	addi	r5,r5,-1
    8afc:	1405883a 	add	r2,r2,r16
    8b00:	d9400415 	stw	r5,16(sp)
    8b04:	003fb706 	br	89e4 <__udivdi3+0x4ac>
    8b08:	b5bfffc4 	addi	r22,r22,-1
    8b0c:	1405883a 	add	r2,r2,r16
    8b10:	003ec006 	br	8614 <__udivdi3+0xdc>

00008b14 <__umoddi3>:
    8b14:	defff104 	addi	sp,sp,-60
    8b18:	dd800b15 	stw	r22,44(sp)
    8b1c:	dd000915 	stw	r20,36(sp)
    8b20:	dc000515 	stw	r16,20(sp)
    8b24:	dfc00e15 	stw	ra,56(sp)
    8b28:	df000d15 	stw	fp,52(sp)
    8b2c:	ddc00c15 	stw	r23,48(sp)
    8b30:	dd400a15 	stw	r21,40(sp)
    8b34:	dcc00815 	stw	r19,32(sp)
    8b38:	dc800715 	stw	r18,28(sp)
    8b3c:	dc400615 	stw	r17,24(sp)
    8b40:	3021883a 	mov	r16,r6
    8b44:	202d883a 	mov	r22,r4
    8b48:	2829883a 	mov	r20,r5
    8b4c:	38002b1e 	bne	r7,zero,8bfc <__umoddi3+0xe8>
    8b50:	29805036 	bltu	r5,r6,8c94 <__umoddi3+0x180>
    8b54:	30008a26 	beq	r6,zero,8d80 <__umoddi3+0x26c>
    8b58:	00bfffd4 	movui	r2,65535
    8b5c:	14008236 	bltu	r2,r16,8d68 <__umoddi3+0x254>
    8b60:	00803fc4 	movi	r2,255
    8b64:	14013636 	bltu	r2,r16,9040 <__umoddi3+0x52c>
    8b68:	000b883a 	mov	r5,zero
    8b6c:	0005883a 	mov	r2,zero
    8b70:	8084d83a 	srl	r2,r16,r2
    8b74:	01000074 	movhi	r4,1
    8b78:	213cc604 	addi	r4,r4,-3304
    8b7c:	01800804 	movi	r6,32
    8b80:	1105883a 	add	r2,r2,r4
    8b84:	10c00003 	ldbu	r3,0(r2)
    8b88:	28c7883a 	add	r3,r5,r3
    8b8c:	30efc83a 	sub	r23,r6,r3
    8b90:	b800941e 	bne	r23,zero,8de4 <__umoddi3+0x2d0>
    8b94:	802ad43a 	srli	r21,r16,16
    8b98:	a423c83a 	sub	r17,r20,r16
    8b9c:	0039883a 	mov	fp,zero
    8ba0:	853fffcc 	andi	r20,r16,65535
    8ba4:	8809883a 	mov	r4,r17
    8ba8:	a80b883a 	mov	r5,r21
    8bac:	000a32c0 	call	a32c <__udivsi3>
    8bb0:	8809883a 	mov	r4,r17
    8bb4:	a80b883a 	mov	r5,r21
    8bb8:	a0a3383a 	mul	r17,r20,r2
    8bbc:	000a3340 	call	a334 <__umodsi3>
    8bc0:	1004943a 	slli	r2,r2,16
    8bc4:	b006d43a 	srli	r3,r22,16
    8bc8:	10c4b03a 	or	r2,r2,r3
    8bcc:	1440032e 	bgeu	r2,r17,8bdc <__umoddi3+0xc8>
    8bd0:	1405883a 	add	r2,r2,r16
    8bd4:	14000136 	bltu	r2,r16,8bdc <__umoddi3+0xc8>
    8bd8:	14413536 	bltu	r2,r17,90b0 <__umoddi3+0x59c>
    8bdc:	1463c83a 	sub	r17,r2,r17
    8be0:	8809883a 	mov	r4,r17
    8be4:	a80b883a 	mov	r5,r21
    8be8:	000a32c0 	call	a32c <__udivsi3>
    8bec:	8809883a 	mov	r4,r17
    8bf0:	a0a3383a 	mul	r17,r20,r2
    8bf4:	a80b883a 	mov	r5,r21
    8bf8:	00004d06 	br	8d30 <__umoddi3+0x21c>
    8bfc:	380d883a 	mov	r6,r7
    8c00:	29c0102e 	bgeu	r5,r7,8c44 <__umoddi3+0x130>
    8c04:	2011883a 	mov	r8,r4
    8c08:	2813883a 	mov	r9,r5
    8c0c:	4005883a 	mov	r2,r8
    8c10:	4807883a 	mov	r3,r9
    8c14:	dfc00e17 	ldw	ra,56(sp)
    8c18:	df000d17 	ldw	fp,52(sp)
    8c1c:	ddc00c17 	ldw	r23,48(sp)
    8c20:	dd800b17 	ldw	r22,44(sp)
    8c24:	dd400a17 	ldw	r21,40(sp)
    8c28:	dd000917 	ldw	r20,36(sp)
    8c2c:	dcc00817 	ldw	r19,32(sp)
    8c30:	dc800717 	ldw	r18,28(sp)
    8c34:	dc400617 	ldw	r17,24(sp)
    8c38:	dc000517 	ldw	r16,20(sp)
    8c3c:	dec00f04 	addi	sp,sp,60
    8c40:	f800283a 	ret
    8c44:	00bfffd4 	movui	r2,65535
    8c48:	11c05a36 	bltu	r2,r7,8db4 <__umoddi3+0x2a0>
    8c4c:	00803fc4 	movi	r2,255
    8c50:	11c0fe36 	bltu	r2,r7,904c <__umoddi3+0x538>
    8c54:	000b883a 	mov	r5,zero
    8c58:	0005883a 	mov	r2,zero
    8c5c:	3084d83a 	srl	r2,r6,r2
    8c60:	01000074 	movhi	r4,1
    8c64:	213cc604 	addi	r4,r4,-3304
    8c68:	01c00804 	movi	r7,32
    8c6c:	1105883a 	add	r2,r2,r4
    8c70:	10c00003 	ldbu	r3,0(r2)
    8c74:	28c7883a 	add	r3,r5,r3
    8c78:	38ebc83a 	sub	r21,r7,r3
    8c7c:	a800851e 	bne	r21,zero,8e94 <__umoddi3+0x380>
    8c80:	35005236 	bltu	r6,r20,8dcc <__umoddi3+0x2b8>
    8c84:	b400512e 	bgeu	r22,r16,8dcc <__umoddi3+0x2b8>
    8c88:	b011883a 	mov	r8,r22
    8c8c:	a013883a 	mov	r9,r20
    8c90:	003fde06 	br	8c0c <__umoddi3+0xf8>
    8c94:	00bfffd4 	movui	r2,65535
    8c98:	11804036 	bltu	r2,r6,8d9c <__umoddi3+0x288>
    8c9c:	00803fc4 	movi	r2,255
    8ca0:	1180ed36 	bltu	r2,r6,9058 <__umoddi3+0x544>
    8ca4:	000b883a 	mov	r5,zero
    8ca8:	0005883a 	mov	r2,zero
    8cac:	8084d83a 	srl	r2,r16,r2
    8cb0:	01000074 	movhi	r4,1
    8cb4:	213cc604 	addi	r4,r4,-3304
    8cb8:	01800804 	movi	r6,32
    8cbc:	1105883a 	add	r2,r2,r4
    8cc0:	10c00003 	ldbu	r3,0(r2)
    8cc4:	28c7883a 	add	r3,r5,r3
    8cc8:	30c7c83a 	sub	r3,r6,r3
    8ccc:	1800bf1e 	bne	r3,zero,8fcc <__umoddi3+0x4b8>
    8cd0:	0039883a 	mov	fp,zero
    8cd4:	802ad43a 	srli	r21,r16,16
    8cd8:	a009883a 	mov	r4,r20
    8cdc:	85ffffcc 	andi	r23,r16,65535
    8ce0:	a80b883a 	mov	r5,r21
    8ce4:	000a32c0 	call	a32c <__udivsi3>
    8ce8:	a009883a 	mov	r4,r20
    8cec:	a80b883a 	mov	r5,r21
    8cf0:	b8a3383a 	mul	r17,r23,r2
    8cf4:	000a3340 	call	a334 <__umodsi3>
    8cf8:	1004943a 	slli	r2,r2,16
    8cfc:	b006d43a 	srli	r3,r22,16
    8d00:	10c4b03a 	or	r2,r2,r3
    8d04:	1440032e 	bgeu	r2,r17,8d14 <__umoddi3+0x200>
    8d08:	1405883a 	add	r2,r2,r16
    8d0c:	14000136 	bltu	r2,r16,8d14 <__umoddi3+0x200>
    8d10:	1440e536 	bltu	r2,r17,90a8 <__umoddi3+0x594>
    8d14:	1463c83a 	sub	r17,r2,r17
    8d18:	8809883a 	mov	r4,r17
    8d1c:	a80b883a 	mov	r5,r21
    8d20:	000a32c0 	call	a32c <__udivsi3>
    8d24:	8809883a 	mov	r4,r17
    8d28:	b8a3383a 	mul	r17,r23,r2
    8d2c:	a80b883a 	mov	r5,r21
    8d30:	000a3340 	call	a334 <__umodsi3>
    8d34:	1004943a 	slli	r2,r2,16
    8d38:	b0ffffcc 	andi	r3,r22,65535
    8d3c:	10c4b03a 	or	r2,r2,r3
    8d40:	1440042e 	bgeu	r2,r17,8d54 <__umoddi3+0x240>
    8d44:	1405883a 	add	r2,r2,r16
    8d48:	14000236 	bltu	r2,r16,8d54 <__umoddi3+0x240>
    8d4c:	1440012e 	bgeu	r2,r17,8d54 <__umoddi3+0x240>
    8d50:	1405883a 	add	r2,r2,r16
    8d54:	1445c83a 	sub	r2,r2,r17
    8d58:	1724d83a 	srl	r18,r2,fp
    8d5c:	0013883a 	mov	r9,zero
    8d60:	9011883a 	mov	r8,r18
    8d64:	003fa906 	br	8c0c <__umoddi3+0xf8>
    8d68:	00804034 	movhi	r2,256
    8d6c:	10bfffc4 	addi	r2,r2,-1
    8d70:	1400b036 	bltu	r2,r16,9034 <__umoddi3+0x520>
    8d74:	01400404 	movi	r5,16
    8d78:	2805883a 	mov	r2,r5
    8d7c:	003f7c06 	br	8b70 <__umoddi3+0x5c>
    8d80:	01000044 	movi	r4,1
    8d84:	000b883a 	mov	r5,zero
    8d88:	000a32c0 	call	a32c <__udivsi3>
    8d8c:	1021883a 	mov	r16,r2
    8d90:	00bfffd4 	movui	r2,65535
    8d94:	143ff436 	bltu	r2,r16,8d68 <__umoddi3+0x254>
    8d98:	003f7106 	br	8b60 <__umoddi3+0x4c>
    8d9c:	00804034 	movhi	r2,256
    8da0:	10bfffc4 	addi	r2,r2,-1
    8da4:	1180af36 	bltu	r2,r6,9064 <__umoddi3+0x550>
    8da8:	01400404 	movi	r5,16
    8dac:	2805883a 	mov	r2,r5
    8db0:	003fbe06 	br	8cac <__umoddi3+0x198>
    8db4:	00804034 	movhi	r2,256
    8db8:	10bfffc4 	addi	r2,r2,-1
    8dbc:	11c0ac36 	bltu	r2,r7,9070 <__umoddi3+0x55c>
    8dc0:	01400404 	movi	r5,16
    8dc4:	2805883a 	mov	r2,r5
    8dc8:	003fa406 	br	8c5c <__umoddi3+0x148>
    8dcc:	b409c83a 	sub	r4,r22,r16
    8dd0:	b105803a 	cmpltu	r2,r22,r4
    8dd4:	a187c83a 	sub	r3,r20,r6
    8dd8:	18a9c83a 	sub	r20,r3,r2
    8ddc:	202d883a 	mov	r22,r4
    8de0:	003fa906 	br	8c88 <__umoddi3+0x174>
    8de4:	85e0983a 	sll	r16,r16,r23
    8de8:	35c5c83a 	sub	r2,r6,r23
    8dec:	a0a2d83a 	srl	r17,r20,r2
    8df0:	802ad43a 	srli	r21,r16,16
    8df4:	b084d83a 	srl	r2,r22,r2
    8df8:	a5c6983a 	sll	r3,r20,r23
    8dfc:	8809883a 	mov	r4,r17
    8e00:	a80b883a 	mov	r5,r21
    8e04:	1886b03a 	or	r3,r3,r2
    8e08:	d8c00115 	stw	r3,4(sp)
    8e0c:	853fffcc 	andi	r20,r16,65535
    8e10:	000a32c0 	call	a32c <__udivsi3>
    8e14:	8809883a 	mov	r4,r17
    8e18:	a80b883a 	mov	r5,r21
    8e1c:	a0a3383a 	mul	r17,r20,r2
    8e20:	000a3340 	call	a334 <__umodsi3>
    8e24:	d9000117 	ldw	r4,4(sp)
    8e28:	1004943a 	slli	r2,r2,16
    8e2c:	b839883a 	mov	fp,r23
    8e30:	2006d43a 	srli	r3,r4,16
    8e34:	10c4b03a 	or	r2,r2,r3
    8e38:	1440022e 	bgeu	r2,r17,8e44 <__umoddi3+0x330>
    8e3c:	1405883a 	add	r2,r2,r16
    8e40:	1400962e 	bgeu	r2,r16,909c <__umoddi3+0x588>
    8e44:	1463c83a 	sub	r17,r2,r17
    8e48:	8809883a 	mov	r4,r17
    8e4c:	a80b883a 	mov	r5,r21
    8e50:	000a32c0 	call	a32c <__udivsi3>
    8e54:	8809883a 	mov	r4,r17
    8e58:	a80b883a 	mov	r5,r21
    8e5c:	a0a3383a 	mul	r17,r20,r2
    8e60:	000a3340 	call	a334 <__umodsi3>
    8e64:	d9400117 	ldw	r5,4(sp)
    8e68:	1004943a 	slli	r2,r2,16
    8e6c:	28ffffcc 	andi	r3,r5,65535
    8e70:	10c4b03a 	or	r2,r2,r3
    8e74:	1440042e 	bgeu	r2,r17,8e88 <__umoddi3+0x374>
    8e78:	1405883a 	add	r2,r2,r16
    8e7c:	14000236 	bltu	r2,r16,8e88 <__umoddi3+0x374>
    8e80:	1440012e 	bgeu	r2,r17,8e88 <__umoddi3+0x374>
    8e84:	1405883a 	add	r2,r2,r16
    8e88:	b5ec983a 	sll	r22,r22,r23
    8e8c:	1463c83a 	sub	r17,r2,r17
    8e90:	003f4406 	br	8ba4 <__umoddi3+0x90>
    8e94:	3d4fc83a 	sub	r7,r7,r21
    8e98:	3546983a 	sll	r3,r6,r21
    8e9c:	81c4d83a 	srl	r2,r16,r7
    8ea0:	a1e2d83a 	srl	r17,r20,r7
    8ea4:	a54c983a 	sll	r6,r20,r21
    8ea8:	18aeb03a 	or	r23,r3,r2
    8eac:	b828d43a 	srli	r20,r23,16
    8eb0:	b1c4d83a 	srl	r2,r22,r7
    8eb4:	8809883a 	mov	r4,r17
    8eb8:	a00b883a 	mov	r5,r20
    8ebc:	308cb03a 	or	r6,r6,r2
    8ec0:	d9c00315 	stw	r7,12(sp)
    8ec4:	d9800215 	stw	r6,8(sp)
    8ec8:	000a32c0 	call	a32c <__udivsi3>
    8ecc:	8809883a 	mov	r4,r17
    8ed0:	a00b883a 	mov	r5,r20
    8ed4:	1039883a 	mov	fp,r2
    8ed8:	000a3340 	call	a334 <__umodsi3>
    8edc:	b8ffffcc 	andi	r3,r23,65535
    8ee0:	d8c00415 	stw	r3,16(sp)
    8ee4:	d9000217 	ldw	r4,8(sp)
    8ee8:	d9400417 	ldw	r5,16(sp)
    8eec:	1004943a 	slli	r2,r2,16
    8ef0:	2006d43a 	srli	r3,r4,16
    8ef4:	8560983a 	sll	r16,r16,r21
    8ef8:	2f23383a 	mul	r17,r5,fp
    8efc:	10c4b03a 	or	r2,r2,r3
    8f00:	dc000015 	stw	r16,0(sp)
    8f04:	b56c983a 	sll	r22,r22,r21
    8f08:	1440032e 	bgeu	r2,r17,8f18 <__umoddi3+0x404>
    8f0c:	15c5883a 	add	r2,r2,r23
    8f10:	e73fffc4 	addi	fp,fp,-1
    8f14:	15c05d2e 	bgeu	r2,r23,908c <__umoddi3+0x578>
    8f18:	1463c83a 	sub	r17,r2,r17
    8f1c:	8809883a 	mov	r4,r17
    8f20:	a00b883a 	mov	r5,r20
    8f24:	000a32c0 	call	a32c <__udivsi3>
    8f28:	8809883a 	mov	r4,r17
    8f2c:	a00b883a 	mov	r5,r20
    8f30:	1021883a 	mov	r16,r2
    8f34:	000a3340 	call	a334 <__umodsi3>
    8f38:	d8c00417 	ldw	r3,16(sp)
    8f3c:	d9000217 	ldw	r4,8(sp)
    8f40:	1004943a 	slli	r2,r2,16
    8f44:	1c23383a 	mul	r17,r3,r16
    8f48:	20ffffcc 	andi	r3,r4,65535
    8f4c:	10ceb03a 	or	r7,r2,r3
    8f50:	3c40032e 	bgeu	r7,r17,8f60 <__umoddi3+0x44c>
    8f54:	3dcf883a 	add	r7,r7,r23
    8f58:	843fffc4 	addi	r16,r16,-1
    8f5c:	3dc0472e 	bgeu	r7,r23,907c <__umoddi3+0x568>
    8f60:	e004943a 	slli	r2,fp,16
    8f64:	d9400017 	ldw	r5,0(sp)
    8f68:	3c4fc83a 	sub	r7,r7,r17
    8f6c:	8084b03a 	or	r2,r16,r2
    8f70:	28ffffcc 	andi	r3,r5,65535
    8f74:	280cd43a 	srli	r6,r5,16
    8f78:	100ad43a 	srli	r5,r2,16
    8f7c:	10bfffcc 	andi	r2,r2,65535
    8f80:	10d1383a 	mul	r8,r2,r3
    8f84:	28c7383a 	mul	r3,r5,r3
    8f88:	1185383a 	mul	r2,r2,r6
    8f8c:	4008d43a 	srli	r4,r8,16
    8f90:	298b383a 	mul	r5,r5,r6
    8f94:	10c5883a 	add	r2,r2,r3
    8f98:	2089883a 	add	r4,r4,r2
    8f9c:	20c0022e 	bgeu	r4,r3,8fa8 <__umoddi3+0x494>
    8fa0:	00800074 	movhi	r2,1
    8fa4:	288b883a 	add	r5,r5,r2
    8fa8:	2004d43a 	srli	r2,r4,16
    8fac:	2008943a 	slli	r4,r4,16
    8fb0:	40ffffcc 	andi	r3,r8,65535
    8fb4:	288b883a 	add	r5,r5,r2
    8fb8:	20c9883a 	add	r4,r4,r3
    8fbc:	39400b36 	bltu	r7,r5,8fec <__umoddi3+0x4d8>
    8fc0:	39403d26 	beq	r7,r5,90b8 <__umoddi3+0x5a4>
    8fc4:	394bc83a 	sub	r5,r7,r5
    8fc8:	00000f06 	br	9008 <__umoddi3+0x4f4>
    8fcc:	30c5c83a 	sub	r2,r6,r3
    8fd0:	1839883a 	mov	fp,r3
    8fd4:	b084d83a 	srl	r2,r22,r2
    8fd8:	a0c6983a 	sll	r3,r20,r3
    8fdc:	8720983a 	sll	r16,r16,fp
    8fe0:	b72c983a 	sll	r22,r22,fp
    8fe4:	18a8b03a 	or	r20,r3,r2
    8fe8:	003f3a06 	br	8cd4 <__umoddi3+0x1c0>
    8fec:	d8c00017 	ldw	r3,0(sp)
    8ff0:	20c5c83a 	sub	r2,r4,r3
    8ff4:	2089803a 	cmpltu	r4,r4,r2
    8ff8:	2dc7c83a 	sub	r3,r5,r23
    8ffc:	1907c83a 	sub	r3,r3,r4
    9000:	38cbc83a 	sub	r5,r7,r3
    9004:	1009883a 	mov	r4,r2
    9008:	b105c83a 	sub	r2,r22,r4
    900c:	b087803a 	cmpltu	r3,r22,r2
    9010:	28c7c83a 	sub	r3,r5,r3
    9014:	d9400317 	ldw	r5,12(sp)
    9018:	1544d83a 	srl	r2,r2,r21
    901c:	1948983a 	sll	r4,r3,r5
    9020:	1d46d83a 	srl	r3,r3,r21
    9024:	20a4b03a 	or	r18,r4,r2
    9028:	9011883a 	mov	r8,r18
    902c:	1813883a 	mov	r9,r3
    9030:	003ef606 	br	8c0c <__umoddi3+0xf8>
    9034:	01400604 	movi	r5,24
    9038:	2805883a 	mov	r2,r5
    903c:	003ecc06 	br	8b70 <__umoddi3+0x5c>
    9040:	01400204 	movi	r5,8
    9044:	2805883a 	mov	r2,r5
    9048:	003ec906 	br	8b70 <__umoddi3+0x5c>
    904c:	01400204 	movi	r5,8
    9050:	2805883a 	mov	r2,r5
    9054:	003f0106 	br	8c5c <__umoddi3+0x148>
    9058:	01400204 	movi	r5,8
    905c:	2805883a 	mov	r2,r5
    9060:	003f1206 	br	8cac <__umoddi3+0x198>
    9064:	01400604 	movi	r5,24
    9068:	2805883a 	mov	r2,r5
    906c:	003f0f06 	br	8cac <__umoddi3+0x198>
    9070:	01400604 	movi	r5,24
    9074:	2805883a 	mov	r2,r5
    9078:	003ef806 	br	8c5c <__umoddi3+0x148>
    907c:	3c7fb82e 	bgeu	r7,r17,8f60 <__umoddi3+0x44c>
    9080:	843fffc4 	addi	r16,r16,-1
    9084:	3dcf883a 	add	r7,r7,r23
    9088:	003fb506 	br	8f60 <__umoddi3+0x44c>
    908c:	147fa22e 	bgeu	r2,r17,8f18 <__umoddi3+0x404>
    9090:	e73fffc4 	addi	fp,fp,-1
    9094:	15c5883a 	add	r2,r2,r23
    9098:	003f9f06 	br	8f18 <__umoddi3+0x404>
    909c:	147f692e 	bgeu	r2,r17,8e44 <__umoddi3+0x330>
    90a0:	1405883a 	add	r2,r2,r16
    90a4:	003f6706 	br	8e44 <__umoddi3+0x330>
    90a8:	1405883a 	add	r2,r2,r16
    90ac:	003f1906 	br	8d14 <__umoddi3+0x200>
    90b0:	1405883a 	add	r2,r2,r16
    90b4:	003ec906 	br	8bdc <__umoddi3+0xc8>
    90b8:	b13fcc36 	bltu	r22,r4,8fec <__umoddi3+0x4d8>
    90bc:	000b883a 	mov	r5,zero
    90c0:	003fd106 	br	9008 <__umoddi3+0x4f4>

000090c4 <_fpadd_parts>:
    90c4:	defff804 	addi	sp,sp,-32
    90c8:	dcc00315 	stw	r19,12(sp)
    90cc:	2027883a 	mov	r19,r4
    90d0:	21000017 	ldw	r4,0(r4)
    90d4:	00c00044 	movi	r3,1
    90d8:	dd400515 	stw	r21,20(sp)
    90dc:	dd000415 	stw	r20,16(sp)
    90e0:	ddc00715 	stw	r23,28(sp)
    90e4:	dd800615 	stw	r22,24(sp)
    90e8:	dc800215 	stw	r18,8(sp)
    90ec:	dc400115 	stw	r17,4(sp)
    90f0:	dc000015 	stw	r16,0(sp)
    90f4:	282b883a 	mov	r21,r5
    90f8:	3029883a 	mov	r20,r6
    90fc:	1900632e 	bgeu	r3,r4,928c <_fpadd_parts+0x1c8>
    9100:	28800017 	ldw	r2,0(r5)
    9104:	1880812e 	bgeu	r3,r2,930c <_fpadd_parts+0x248>
    9108:	00c00104 	movi	r3,4
    910c:	20c0dc26 	beq	r4,r3,9480 <_fpadd_parts+0x3bc>
    9110:	10c07e26 	beq	r2,r3,930c <_fpadd_parts+0x248>
    9114:	00c00084 	movi	r3,2
    9118:	10c06726 	beq	r2,r3,92b8 <_fpadd_parts+0x1f4>
    911c:	20c07b26 	beq	r4,r3,930c <_fpadd_parts+0x248>
    9120:	9dc00217 	ldw	r23,8(r19)
    9124:	28c00217 	ldw	r3,8(r5)
    9128:	9c400317 	ldw	r17,12(r19)
    912c:	2bc00317 	ldw	r15,12(r5)
    9130:	b8cdc83a 	sub	r6,r23,r3
    9134:	9c800417 	ldw	r18,16(r19)
    9138:	2c000417 	ldw	r16,16(r5)
    913c:	3009883a 	mov	r4,r6
    9140:	30009716 	blt	r6,zero,93a0 <_fpadd_parts+0x2dc>
    9144:	00800fc4 	movi	r2,63
    9148:	11806b16 	blt	r2,r6,92f8 <_fpadd_parts+0x234>
    914c:	0100a40e 	bge	zero,r4,93e0 <_fpadd_parts+0x31c>
    9150:	35bff804 	addi	r22,r6,-32
    9154:	b000bc16 	blt	r22,zero,9448 <_fpadd_parts+0x384>
    9158:	8596d83a 	srl	r11,r16,r22
    915c:	0019883a 	mov	r12,zero
    9160:	0013883a 	mov	r9,zero
    9164:	01000044 	movi	r4,1
    9168:	0015883a 	mov	r10,zero
    916c:	b000be16 	blt	r22,zero,9468 <_fpadd_parts+0x3a4>
    9170:	2590983a 	sll	r8,r4,r22
    9174:	000f883a 	mov	r7,zero
    9178:	00bfffc4 	movi	r2,-1
    917c:	3889883a 	add	r4,r7,r2
    9180:	408b883a 	add	r5,r8,r2
    9184:	21cd803a 	cmpltu	r6,r4,r7
    9188:	314b883a 	add	r5,r6,r5
    918c:	7904703a 	and	r2,r15,r4
    9190:	8146703a 	and	r3,r16,r5
    9194:	10c4b03a 	or	r2,r2,r3
    9198:	10000226 	beq	r2,zero,91a4 <_fpadd_parts+0xe0>
    919c:	02400044 	movi	r9,1
    91a0:	0015883a 	mov	r10,zero
    91a4:	5a5eb03a 	or	r15,r11,r9
    91a8:	62a0b03a 	or	r16,r12,r10
    91ac:	99400117 	ldw	r5,4(r19)
    91b0:	a8800117 	ldw	r2,4(r21)
    91b4:	28806e26 	beq	r5,r2,9370 <_fpadd_parts+0x2ac>
    91b8:	28006626 	beq	r5,zero,9354 <_fpadd_parts+0x290>
    91bc:	7c45c83a 	sub	r2,r15,r17
    91c0:	7889803a 	cmpltu	r4,r15,r2
    91c4:	8487c83a 	sub	r3,r16,r18
    91c8:	1909c83a 	sub	r4,r3,r4
    91cc:	100d883a 	mov	r6,r2
    91d0:	200f883a 	mov	r7,r4
    91d4:	38007716 	blt	r7,zero,93b4 <_fpadd_parts+0x2f0>
    91d8:	a5c00215 	stw	r23,8(r20)
    91dc:	a1c00415 	stw	r7,16(r20)
    91e0:	a0000115 	stw	zero,4(r20)
    91e4:	a1800315 	stw	r6,12(r20)
    91e8:	a2000317 	ldw	r8,12(r20)
    91ec:	a2400417 	ldw	r9,16(r20)
    91f0:	00bfffc4 	movi	r2,-1
    91f4:	408b883a 	add	r5,r8,r2
    91f8:	2a09803a 	cmpltu	r4,r5,r8
    91fc:	488d883a 	add	r6,r9,r2
    9200:	01c40034 	movhi	r7,4096
    9204:	39ffffc4 	addi	r7,r7,-1
    9208:	218d883a 	add	r6,r4,r6
    920c:	39801736 	bltu	r7,r6,926c <_fpadd_parts+0x1a8>
    9210:	31c06526 	beq	r6,r7,93a8 <_fpadd_parts+0x2e4>
    9214:	a3000217 	ldw	r12,8(r20)
    9218:	4209883a 	add	r4,r8,r8
    921c:	00bfffc4 	movi	r2,-1
    9220:	220f803a 	cmpltu	r7,r4,r8
    9224:	4a4b883a 	add	r5,r9,r9
    9228:	394f883a 	add	r7,r7,r5
    922c:	2095883a 	add	r10,r4,r2
    9230:	3897883a 	add	r11,r7,r2
    9234:	510d803a 	cmpltu	r6,r10,r4
    9238:	6099883a 	add	r12,r12,r2
    923c:	32d7883a 	add	r11,r6,r11
    9240:	00840034 	movhi	r2,4096
    9244:	10bfffc4 	addi	r2,r2,-1
    9248:	2011883a 	mov	r8,r4
    924c:	3813883a 	mov	r9,r7
    9250:	a1000315 	stw	r4,12(r20)
    9254:	a1c00415 	stw	r7,16(r20)
    9258:	a3000215 	stw	r12,8(r20)
    925c:	12c00336 	bltu	r2,r11,926c <_fpadd_parts+0x1a8>
    9260:	58bfed1e 	bne	r11,r2,9218 <_fpadd_parts+0x154>
    9264:	00bfff84 	movi	r2,-2
    9268:	12bfeb2e 	bgeu	r2,r10,9218 <_fpadd_parts+0x154>
    926c:	a2800417 	ldw	r10,16(r20)
    9270:	008000c4 	movi	r2,3
    9274:	00c80034 	movhi	r3,8192
    9278:	18ffffc4 	addi	r3,r3,-1
    927c:	a2400317 	ldw	r9,12(r20)
    9280:	a0800015 	stw	r2,0(r20)
    9284:	1a802336 	bltu	r3,r10,9314 <_fpadd_parts+0x250>
    9288:	a027883a 	mov	r19,r20
    928c:	9805883a 	mov	r2,r19
    9290:	ddc00717 	ldw	r23,28(sp)
    9294:	dd800617 	ldw	r22,24(sp)
    9298:	dd400517 	ldw	r21,20(sp)
    929c:	dd000417 	ldw	r20,16(sp)
    92a0:	dcc00317 	ldw	r19,12(sp)
    92a4:	dc800217 	ldw	r18,8(sp)
    92a8:	dc400117 	ldw	r17,4(sp)
    92ac:	dc000017 	ldw	r16,0(sp)
    92b0:	dec00804 	addi	sp,sp,32
    92b4:	f800283a 	ret
    92b8:	20fff41e 	bne	r4,r3,928c <_fpadd_parts+0x1c8>
    92bc:	31000015 	stw	r4,0(r6)
    92c0:	98800117 	ldw	r2,4(r19)
    92c4:	30800115 	stw	r2,4(r6)
    92c8:	98c00217 	ldw	r3,8(r19)
    92cc:	30c00215 	stw	r3,8(r6)
    92d0:	98800317 	ldw	r2,12(r19)
    92d4:	30800315 	stw	r2,12(r6)
    92d8:	98c00417 	ldw	r3,16(r19)
    92dc:	30c00415 	stw	r3,16(r6)
    92e0:	98800117 	ldw	r2,4(r19)
    92e4:	28c00117 	ldw	r3,4(r5)
    92e8:	3027883a 	mov	r19,r6
    92ec:	10c4703a 	and	r2,r2,r3
    92f0:	30800115 	stw	r2,4(r6)
    92f4:	003fe506 	br	928c <_fpadd_parts+0x1c8>
    92f8:	1dc02616 	blt	r3,r23,9394 <_fpadd_parts+0x2d0>
    92fc:	0023883a 	mov	r17,zero
    9300:	182f883a 	mov	r23,r3
    9304:	0025883a 	mov	r18,zero
    9308:	003fa806 	br	91ac <_fpadd_parts+0xe8>
    930c:	a827883a 	mov	r19,r21
    9310:	003fde06 	br	928c <_fpadd_parts+0x1c8>
    9314:	01800044 	movi	r6,1
    9318:	500497fa 	slli	r2,r10,31
    931c:	4808d07a 	srli	r4,r9,1
    9320:	518ad83a 	srl	r5,r10,r6
    9324:	a2000217 	ldw	r8,8(r20)
    9328:	1108b03a 	or	r4,r2,r4
    932c:	0007883a 	mov	r3,zero
    9330:	4984703a 	and	r2,r9,r6
    9334:	208cb03a 	or	r6,r4,r2
    9338:	28ceb03a 	or	r7,r5,r3
    933c:	42000044 	addi	r8,r8,1
    9340:	a027883a 	mov	r19,r20
    9344:	a1c00415 	stw	r7,16(r20)
    9348:	a2000215 	stw	r8,8(r20)
    934c:	a1800315 	stw	r6,12(r20)
    9350:	003fce06 	br	928c <_fpadd_parts+0x1c8>
    9354:	8bc5c83a 	sub	r2,r17,r15
    9358:	8889803a 	cmpltu	r4,r17,r2
    935c:	9407c83a 	sub	r3,r18,r16
    9360:	1909c83a 	sub	r4,r3,r4
    9364:	100d883a 	mov	r6,r2
    9368:	200f883a 	mov	r7,r4
    936c:	003f9906 	br	91d4 <_fpadd_parts+0x110>
    9370:	8bc5883a 	add	r2,r17,r15
    9374:	1449803a 	cmpltu	r4,r2,r17
    9378:	9407883a 	add	r3,r18,r16
    937c:	20c9883a 	add	r4,r4,r3
    9380:	a1400115 	stw	r5,4(r20)
    9384:	a5c00215 	stw	r23,8(r20)
    9388:	a0800315 	stw	r2,12(r20)
    938c:	a1000415 	stw	r4,16(r20)
    9390:	003fb606 	br	926c <_fpadd_parts+0x1a8>
    9394:	001f883a 	mov	r15,zero
    9398:	0021883a 	mov	r16,zero
    939c:	003f8306 	br	91ac <_fpadd_parts+0xe8>
    93a0:	018dc83a 	sub	r6,zero,r6
    93a4:	003f6706 	br	9144 <_fpadd_parts+0x80>
    93a8:	00bfff84 	movi	r2,-2
    93ac:	117faf36 	bltu	r2,r5,926c <_fpadd_parts+0x1a8>
    93b0:	003f9806 	br	9214 <_fpadd_parts+0x150>
    93b4:	0005883a 	mov	r2,zero
    93b8:	1189c83a 	sub	r4,r2,r6
    93bc:	1105803a 	cmpltu	r2,r2,r4
    93c0:	01cbc83a 	sub	r5,zero,r7
    93c4:	2885c83a 	sub	r2,r5,r2
    93c8:	01800044 	movi	r6,1
    93cc:	a1800115 	stw	r6,4(r20)
    93d0:	a5c00215 	stw	r23,8(r20)
    93d4:	a1000315 	stw	r4,12(r20)
    93d8:	a0800415 	stw	r2,16(r20)
    93dc:	003f8206 	br	91e8 <_fpadd_parts+0x124>
    93e0:	203f7226 	beq	r4,zero,91ac <_fpadd_parts+0xe8>
    93e4:	35bff804 	addi	r22,r6,-32
    93e8:	b9af883a 	add	r23,r23,r6
    93ec:	b0003116 	blt	r22,zero,94b4 <_fpadd_parts+0x3f0>
    93f0:	959ad83a 	srl	r13,r18,r22
    93f4:	001d883a 	mov	r14,zero
    93f8:	000f883a 	mov	r7,zero
    93fc:	01000044 	movi	r4,1
    9400:	0011883a 	mov	r8,zero
    9404:	b0002516 	blt	r22,zero,949c <_fpadd_parts+0x3d8>
    9408:	2594983a 	sll	r10,r4,r22
    940c:	0013883a 	mov	r9,zero
    9410:	00bfffc4 	movi	r2,-1
    9414:	4889883a 	add	r4,r9,r2
    9418:	508b883a 	add	r5,r10,r2
    941c:	224d803a 	cmpltu	r6,r4,r9
    9420:	314b883a 	add	r5,r6,r5
    9424:	8904703a 	and	r2,r17,r4
    9428:	9146703a 	and	r3,r18,r5
    942c:	10c4b03a 	or	r2,r2,r3
    9430:	10000226 	beq	r2,zero,943c <_fpadd_parts+0x378>
    9434:	01c00044 	movi	r7,1
    9438:	0011883a 	mov	r8,zero
    943c:	69e2b03a 	or	r17,r13,r7
    9440:	7224b03a 	or	r18,r14,r8
    9444:	003f5906 	br	91ac <_fpadd_parts+0xe8>
    9448:	8407883a 	add	r3,r16,r16
    944c:	008007c4 	movi	r2,31
    9450:	1185c83a 	sub	r2,r2,r6
    9454:	1886983a 	sll	r3,r3,r2
    9458:	7996d83a 	srl	r11,r15,r6
    945c:	8198d83a 	srl	r12,r16,r6
    9460:	1ad6b03a 	or	r11,r3,r11
    9464:	003f3e06 	br	9160 <_fpadd_parts+0x9c>
    9468:	2006d07a 	srli	r3,r4,1
    946c:	008007c4 	movi	r2,31
    9470:	1185c83a 	sub	r2,r2,r6
    9474:	1890d83a 	srl	r8,r3,r2
    9478:	218e983a 	sll	r7,r4,r6
    947c:	003f3e06 	br	9178 <_fpadd_parts+0xb4>
    9480:	113f821e 	bne	r2,r4,928c <_fpadd_parts+0x1c8>
    9484:	28c00117 	ldw	r3,4(r5)
    9488:	98800117 	ldw	r2,4(r19)
    948c:	10ff7f26 	beq	r2,r3,928c <_fpadd_parts+0x1c8>
    9490:	04c00074 	movhi	r19,1
    9494:	9cfcc104 	addi	r19,r19,-3324
    9498:	003f7c06 	br	928c <_fpadd_parts+0x1c8>
    949c:	2006d07a 	srli	r3,r4,1
    94a0:	008007c4 	movi	r2,31
    94a4:	1185c83a 	sub	r2,r2,r6
    94a8:	1894d83a 	srl	r10,r3,r2
    94ac:	2192983a 	sll	r9,r4,r6
    94b0:	003fd706 	br	9410 <_fpadd_parts+0x34c>
    94b4:	9487883a 	add	r3,r18,r18
    94b8:	008007c4 	movi	r2,31
    94bc:	1185c83a 	sub	r2,r2,r6
    94c0:	1886983a 	sll	r3,r3,r2
    94c4:	899ad83a 	srl	r13,r17,r6
    94c8:	919cd83a 	srl	r14,r18,r6
    94cc:	1b5ab03a 	or	r13,r3,r13
    94d0:	003fc906 	br	93f8 <_fpadd_parts+0x334>

000094d4 <__subdf3>:
    94d4:	deffea04 	addi	sp,sp,-88
    94d8:	dcc01415 	stw	r19,80(sp)
    94dc:	dcc00404 	addi	r19,sp,16
    94e0:	2011883a 	mov	r8,r4
    94e4:	2813883a 	mov	r9,r5
    94e8:	dc401315 	stw	r17,76(sp)
    94ec:	d809883a 	mov	r4,sp
    94f0:	980b883a 	mov	r5,r19
    94f4:	dc400904 	addi	r17,sp,36
    94f8:	dfc01515 	stw	ra,84(sp)
    94fc:	da400115 	stw	r9,4(sp)
    9500:	d9c00315 	stw	r7,12(sp)
    9504:	da000015 	stw	r8,0(sp)
    9508:	d9800215 	stw	r6,8(sp)
    950c:	000a6d00 	call	a6d0 <__unpack_d>
    9510:	d9000204 	addi	r4,sp,8
    9514:	880b883a 	mov	r5,r17
    9518:	000a6d00 	call	a6d0 <__unpack_d>
    951c:	d8800a17 	ldw	r2,40(sp)
    9520:	880b883a 	mov	r5,r17
    9524:	9809883a 	mov	r4,r19
    9528:	d9800e04 	addi	r6,sp,56
    952c:	1080005c 	xori	r2,r2,1
    9530:	d8800a15 	stw	r2,40(sp)
    9534:	00090c40 	call	90c4 <_fpadd_parts>
    9538:	1009883a 	mov	r4,r2
    953c:	000a3bc0 	call	a3bc <__pack_d>
    9540:	dfc01517 	ldw	ra,84(sp)
    9544:	dcc01417 	ldw	r19,80(sp)
    9548:	dc401317 	ldw	r17,76(sp)
    954c:	dec01604 	addi	sp,sp,88
    9550:	f800283a 	ret

00009554 <__adddf3>:
    9554:	deffea04 	addi	sp,sp,-88
    9558:	dcc01415 	stw	r19,80(sp)
    955c:	dcc00404 	addi	r19,sp,16
    9560:	2011883a 	mov	r8,r4
    9564:	2813883a 	mov	r9,r5
    9568:	dc401315 	stw	r17,76(sp)
    956c:	d809883a 	mov	r4,sp
    9570:	980b883a 	mov	r5,r19
    9574:	dc400904 	addi	r17,sp,36
    9578:	dfc01515 	stw	ra,84(sp)
    957c:	da400115 	stw	r9,4(sp)
    9580:	d9c00315 	stw	r7,12(sp)
    9584:	da000015 	stw	r8,0(sp)
    9588:	d9800215 	stw	r6,8(sp)
    958c:	000a6d00 	call	a6d0 <__unpack_d>
    9590:	d9000204 	addi	r4,sp,8
    9594:	880b883a 	mov	r5,r17
    9598:	000a6d00 	call	a6d0 <__unpack_d>
    959c:	d9800e04 	addi	r6,sp,56
    95a0:	9809883a 	mov	r4,r19
    95a4:	880b883a 	mov	r5,r17
    95a8:	00090c40 	call	90c4 <_fpadd_parts>
    95ac:	1009883a 	mov	r4,r2
    95b0:	000a3bc0 	call	a3bc <__pack_d>
    95b4:	dfc01517 	ldw	ra,84(sp)
    95b8:	dcc01417 	ldw	r19,80(sp)
    95bc:	dc401317 	ldw	r17,76(sp)
    95c0:	dec01604 	addi	sp,sp,88
    95c4:	f800283a 	ret

000095c8 <__muldf3>:
    95c8:	deffe004 	addi	sp,sp,-128
    95cc:	dc401815 	stw	r17,96(sp)
    95d0:	dc400404 	addi	r17,sp,16
    95d4:	2011883a 	mov	r8,r4
    95d8:	2813883a 	mov	r9,r5
    95dc:	dc001715 	stw	r16,92(sp)
    95e0:	d809883a 	mov	r4,sp
    95e4:	880b883a 	mov	r5,r17
    95e8:	dc000904 	addi	r16,sp,36
    95ec:	dfc01f15 	stw	ra,124(sp)
    95f0:	da400115 	stw	r9,4(sp)
    95f4:	d9c00315 	stw	r7,12(sp)
    95f8:	da000015 	stw	r8,0(sp)
    95fc:	d9800215 	stw	r6,8(sp)
    9600:	ddc01e15 	stw	r23,120(sp)
    9604:	dd801d15 	stw	r22,116(sp)
    9608:	dd401c15 	stw	r21,112(sp)
    960c:	dd001b15 	stw	r20,108(sp)
    9610:	dcc01a15 	stw	r19,104(sp)
    9614:	dc801915 	stw	r18,100(sp)
    9618:	000a6d00 	call	a6d0 <__unpack_d>
    961c:	d9000204 	addi	r4,sp,8
    9620:	800b883a 	mov	r5,r16
    9624:	000a6d00 	call	a6d0 <__unpack_d>
    9628:	d9000417 	ldw	r4,16(sp)
    962c:	00800044 	movi	r2,1
    9630:	1100102e 	bgeu	r2,r4,9674 <__muldf3+0xac>
    9634:	d8c00917 	ldw	r3,36(sp)
    9638:	10c0062e 	bgeu	r2,r3,9654 <__muldf3+0x8c>
    963c:	00800104 	movi	r2,4
    9640:	20800a26 	beq	r4,r2,966c <__muldf3+0xa4>
    9644:	1880cc26 	beq	r3,r2,9978 <__muldf3+0x3b0>
    9648:	00800084 	movi	r2,2
    964c:	20800926 	beq	r4,r2,9674 <__muldf3+0xac>
    9650:	1880191e 	bne	r3,r2,96b8 <__muldf3+0xf0>
    9654:	d8c00a17 	ldw	r3,40(sp)
    9658:	d8800517 	ldw	r2,20(sp)
    965c:	8009883a 	mov	r4,r16
    9660:	10c4c03a 	cmpne	r2,r2,r3
    9664:	d8800a15 	stw	r2,40(sp)
    9668:	00000706 	br	9688 <__muldf3+0xc0>
    966c:	00800084 	movi	r2,2
    9670:	1880c326 	beq	r3,r2,9980 <__muldf3+0x3b8>
    9674:	d8800517 	ldw	r2,20(sp)
    9678:	d8c00a17 	ldw	r3,40(sp)
    967c:	8809883a 	mov	r4,r17
    9680:	10c4c03a 	cmpne	r2,r2,r3
    9684:	d8800515 	stw	r2,20(sp)
    9688:	000a3bc0 	call	a3bc <__pack_d>
    968c:	dfc01f17 	ldw	ra,124(sp)
    9690:	ddc01e17 	ldw	r23,120(sp)
    9694:	dd801d17 	ldw	r22,116(sp)
    9698:	dd401c17 	ldw	r21,112(sp)
    969c:	dd001b17 	ldw	r20,108(sp)
    96a0:	dcc01a17 	ldw	r19,104(sp)
    96a4:	dc801917 	ldw	r18,100(sp)
    96a8:	dc401817 	ldw	r17,96(sp)
    96ac:	dc001717 	ldw	r16,92(sp)
    96b0:	dec02004 	addi	sp,sp,128
    96b4:	f800283a 	ret
    96b8:	dd800717 	ldw	r22,28(sp)
    96bc:	dc800c17 	ldw	r18,48(sp)
    96c0:	002b883a 	mov	r21,zero
    96c4:	0023883a 	mov	r17,zero
    96c8:	a80b883a 	mov	r5,r21
    96cc:	b00d883a 	mov	r6,r22
    96d0:	880f883a 	mov	r7,r17
    96d4:	ddc00817 	ldw	r23,32(sp)
    96d8:	dcc00d17 	ldw	r19,52(sp)
    96dc:	9009883a 	mov	r4,r18
    96e0:	00084a00 	call	84a0 <__muldi3>
    96e4:	001b883a 	mov	r13,zero
    96e8:	680f883a 	mov	r7,r13
    96ec:	b009883a 	mov	r4,r22
    96f0:	000b883a 	mov	r5,zero
    96f4:	980d883a 	mov	r6,r19
    96f8:	b82d883a 	mov	r22,r23
    96fc:	002f883a 	mov	r23,zero
    9700:	db401615 	stw	r13,88(sp)
    9704:	d8801315 	stw	r2,76(sp)
    9708:	d8c01415 	stw	r3,80(sp)
    970c:	dcc01515 	stw	r19,84(sp)
    9710:	00084a00 	call	84a0 <__muldi3>
    9714:	b00d883a 	mov	r6,r22
    9718:	000b883a 	mov	r5,zero
    971c:	9009883a 	mov	r4,r18
    9720:	b80f883a 	mov	r7,r23
    9724:	1021883a 	mov	r16,r2
    9728:	1823883a 	mov	r17,r3
    972c:	00084a00 	call	84a0 <__muldi3>
    9730:	8085883a 	add	r2,r16,r2
    9734:	140d803a 	cmpltu	r6,r2,r16
    9738:	88c7883a 	add	r3,r17,r3
    973c:	30cd883a 	add	r6,r6,r3
    9740:	1029883a 	mov	r20,r2
    9744:	302b883a 	mov	r21,r6
    9748:	da801317 	ldw	r10,76(sp)
    974c:	dac01417 	ldw	r11,80(sp)
    9750:	db001517 	ldw	r12,84(sp)
    9754:	db401617 	ldw	r13,88(sp)
    9758:	3440612e 	bgeu	r6,r17,98e0 <__muldf3+0x318>
    975c:	0009883a 	mov	r4,zero
    9760:	5105883a 	add	r2,r10,r4
    9764:	128d803a 	cmpltu	r6,r2,r10
    9768:	5d07883a 	add	r3,r11,r20
    976c:	30cd883a 	add	r6,r6,r3
    9770:	0021883a 	mov	r16,zero
    9774:	04400044 	movi	r17,1
    9778:	1025883a 	mov	r18,r2
    977c:	3027883a 	mov	r19,r6
    9780:	32c06236 	bltu	r6,r11,990c <__muldf3+0x344>
    9784:	59807a26 	beq	r11,r6,9970 <__muldf3+0x3a8>
    9788:	680b883a 	mov	r5,r13
    978c:	b80f883a 	mov	r7,r23
    9790:	6009883a 	mov	r4,r12
    9794:	b00d883a 	mov	r6,r22
    9798:	00084a00 	call	84a0 <__muldi3>
    979c:	1009883a 	mov	r4,r2
    97a0:	000f883a 	mov	r7,zero
    97a4:	1545883a 	add	r2,r2,r21
    97a8:	1111803a 	cmpltu	r8,r2,r4
    97ac:	19c7883a 	add	r3,r3,r7
    97b0:	40c7883a 	add	r3,r8,r3
    97b4:	88cb883a 	add	r5,r17,r3
    97b8:	d8c00617 	ldw	r3,24(sp)
    97bc:	8089883a 	add	r4,r16,r2
    97c0:	d8800b17 	ldw	r2,44(sp)
    97c4:	18c00104 	addi	r3,r3,4
    97c8:	240d803a 	cmpltu	r6,r4,r16
    97cc:	10c7883a 	add	r3,r2,r3
    97d0:	2013883a 	mov	r9,r4
    97d4:	d8800a17 	ldw	r2,40(sp)
    97d8:	d9000517 	ldw	r4,20(sp)
    97dc:	314d883a 	add	r6,r6,r5
    97e0:	3015883a 	mov	r10,r6
    97e4:	2088c03a 	cmpne	r4,r4,r2
    97e8:	00880034 	movhi	r2,8192
    97ec:	10bfffc4 	addi	r2,r2,-1
    97f0:	d9000f15 	stw	r4,60(sp)
    97f4:	d8c01015 	stw	r3,64(sp)
    97f8:	1180162e 	bgeu	r2,r6,9854 <__muldf3+0x28c>
    97fc:	1811883a 	mov	r8,r3
    9800:	101f883a 	mov	r15,r2
    9804:	980497fa 	slli	r2,r19,31
    9808:	9016d07a 	srli	r11,r18,1
    980c:	500697fa 	slli	r3,r10,31
    9810:	480cd07a 	srli	r6,r9,1
    9814:	500ed07a 	srli	r7,r10,1
    9818:	12d6b03a 	or	r11,r2,r11
    981c:	00800044 	movi	r2,1
    9820:	198cb03a 	or	r6,r3,r6
    9824:	4888703a 	and	r4,r9,r2
    9828:	9818d07a 	srli	r12,r19,1
    982c:	001b883a 	mov	r13,zero
    9830:	03a00034 	movhi	r14,32768
    9834:	3013883a 	mov	r9,r6
    9838:	3815883a 	mov	r10,r7
    983c:	4091883a 	add	r8,r8,r2
    9840:	20000226 	beq	r4,zero,984c <__muldf3+0x284>
    9844:	5b64b03a 	or	r18,r11,r13
    9848:	63a6b03a 	or	r19,r12,r14
    984c:	7abfed36 	bltu	r15,r10,9804 <__muldf3+0x23c>
    9850:	da001015 	stw	r8,64(sp)
    9854:	00840034 	movhi	r2,4096
    9858:	10bfffc4 	addi	r2,r2,-1
    985c:	12801436 	bltu	r2,r10,98b0 <__muldf3+0x2e8>
    9860:	da001017 	ldw	r8,64(sp)
    9864:	101f883a 	mov	r15,r2
    9868:	4a45883a 	add	r2,r9,r9
    986c:	124d803a 	cmpltu	r6,r2,r9
    9870:	5287883a 	add	r3,r10,r10
    9874:	9497883a 	add	r11,r18,r18
    9878:	5c8f803a 	cmpltu	r7,r11,r18
    987c:	9cd9883a 	add	r12,r19,r19
    9880:	01000044 	movi	r4,1
    9884:	30cd883a 	add	r6,r6,r3
    9888:	3b0f883a 	add	r7,r7,r12
    988c:	423fffc4 	addi	r8,r8,-1
    9890:	1013883a 	mov	r9,r2
    9894:	3015883a 	mov	r10,r6
    9898:	111ab03a 	or	r13,r2,r4
    989c:	98003016 	blt	r19,zero,9960 <__muldf3+0x398>
    98a0:	5825883a 	mov	r18,r11
    98a4:	3827883a 	mov	r19,r7
    98a8:	7abfef2e 	bgeu	r15,r10,9868 <__muldf3+0x2a0>
    98ac:	da001015 	stw	r8,64(sp)
    98b0:	00803fc4 	movi	r2,255
    98b4:	488e703a 	and	r7,r9,r2
    98b8:	00802004 	movi	r2,128
    98bc:	0007883a 	mov	r3,zero
    98c0:	0011883a 	mov	r8,zero
    98c4:	38801826 	beq	r7,r2,9928 <__muldf3+0x360>
    98c8:	008000c4 	movi	r2,3
    98cc:	d9000e04 	addi	r4,sp,56
    98d0:	da801215 	stw	r10,72(sp)
    98d4:	d8800e15 	stw	r2,56(sp)
    98d8:	da401115 	stw	r9,68(sp)
    98dc:	003f6a06 	br	9688 <__muldf3+0xc0>
    98e0:	89802126 	beq	r17,r6,9968 <__muldf3+0x3a0>
    98e4:	0009883a 	mov	r4,zero
    98e8:	5105883a 	add	r2,r10,r4
    98ec:	128d803a 	cmpltu	r6,r2,r10
    98f0:	5d07883a 	add	r3,r11,r20
    98f4:	30cd883a 	add	r6,r6,r3
    98f8:	0021883a 	mov	r16,zero
    98fc:	0023883a 	mov	r17,zero
    9900:	1025883a 	mov	r18,r2
    9904:	3027883a 	mov	r19,r6
    9908:	32ff9e2e 	bgeu	r6,r11,9784 <__muldf3+0x1bc>
    990c:	00800044 	movi	r2,1
    9910:	8089883a 	add	r4,r16,r2
    9914:	240d803a 	cmpltu	r6,r4,r16
    9918:	344d883a 	add	r6,r6,r17
    991c:	2021883a 	mov	r16,r4
    9920:	3023883a 	mov	r17,r6
    9924:	003f9806 	br	9788 <__muldf3+0x1c0>
    9928:	403fe71e 	bne	r8,zero,98c8 <__muldf3+0x300>
    992c:	01004004 	movi	r4,256
    9930:	4904703a 	and	r2,r9,r4
    9934:	10c4b03a 	or	r2,r2,r3
    9938:	103fe31e 	bne	r2,zero,98c8 <__muldf3+0x300>
    993c:	94c4b03a 	or	r2,r18,r19
    9940:	103fe126 	beq	r2,zero,98c8 <__muldf3+0x300>
    9944:	49c5883a 	add	r2,r9,r7
    9948:	1251803a 	cmpltu	r8,r2,r9
    994c:	4291883a 	add	r8,r8,r10
    9950:	013fc004 	movi	r4,-256
    9954:	1112703a 	and	r9,r2,r4
    9958:	4015883a 	mov	r10,r8
    995c:	003fda06 	br	98c8 <__muldf3+0x300>
    9960:	6813883a 	mov	r9,r13
    9964:	003fce06 	br	98a0 <__muldf3+0x2d8>
    9968:	143f7c36 	bltu	r2,r16,975c <__muldf3+0x194>
    996c:	003fdd06 	br	98e4 <__muldf3+0x31c>
    9970:	12bf852e 	bgeu	r2,r10,9788 <__muldf3+0x1c0>
    9974:	003fe506 	br	990c <__muldf3+0x344>
    9978:	00800084 	movi	r2,2
    997c:	20bf351e 	bne	r4,r2,9654 <__muldf3+0x8c>
    9980:	01000074 	movhi	r4,1
    9984:	213cc104 	addi	r4,r4,-3324
    9988:	003f3f06 	br	9688 <__muldf3+0xc0>

0000998c <__divdf3>:
    998c:	deffed04 	addi	sp,sp,-76
    9990:	dcc01115 	stw	r19,68(sp)
    9994:	dcc00404 	addi	r19,sp,16
    9998:	2011883a 	mov	r8,r4
    999c:	2813883a 	mov	r9,r5
    99a0:	dc000e15 	stw	r16,56(sp)
    99a4:	d809883a 	mov	r4,sp
    99a8:	980b883a 	mov	r5,r19
    99ac:	dc000904 	addi	r16,sp,36
    99b0:	dfc01215 	stw	ra,72(sp)
    99b4:	da400115 	stw	r9,4(sp)
    99b8:	d9c00315 	stw	r7,12(sp)
    99bc:	da000015 	stw	r8,0(sp)
    99c0:	d9800215 	stw	r6,8(sp)
    99c4:	dc801015 	stw	r18,64(sp)
    99c8:	dc400f15 	stw	r17,60(sp)
    99cc:	000a6d00 	call	a6d0 <__unpack_d>
    99d0:	d9000204 	addi	r4,sp,8
    99d4:	800b883a 	mov	r5,r16
    99d8:	000a6d00 	call	a6d0 <__unpack_d>
    99dc:	d9000417 	ldw	r4,16(sp)
    99e0:	00800044 	movi	r2,1
    99e4:	11000b2e 	bgeu	r2,r4,9a14 <__divdf3+0x88>
    99e8:	d9400917 	ldw	r5,36(sp)
    99ec:	1140762e 	bgeu	r2,r5,9bc8 <__divdf3+0x23c>
    99f0:	d8800517 	ldw	r2,20(sp)
    99f4:	d8c00a17 	ldw	r3,40(sp)
    99f8:	01800104 	movi	r6,4
    99fc:	10c4f03a 	xor	r2,r2,r3
    9a00:	d8800515 	stw	r2,20(sp)
    9a04:	21800226 	beq	r4,r6,9a10 <__divdf3+0x84>
    9a08:	00800084 	movi	r2,2
    9a0c:	2080141e 	bne	r4,r2,9a60 <__divdf3+0xd4>
    9a10:	29000926 	beq	r5,r4,9a38 <__divdf3+0xac>
    9a14:	9809883a 	mov	r4,r19
    9a18:	000a3bc0 	call	a3bc <__pack_d>
    9a1c:	dfc01217 	ldw	ra,72(sp)
    9a20:	dcc01117 	ldw	r19,68(sp)
    9a24:	dc801017 	ldw	r18,64(sp)
    9a28:	dc400f17 	ldw	r17,60(sp)
    9a2c:	dc000e17 	ldw	r16,56(sp)
    9a30:	dec01304 	addi	sp,sp,76
    9a34:	f800283a 	ret
    9a38:	01000074 	movhi	r4,1
    9a3c:	213cc104 	addi	r4,r4,-3324
    9a40:	000a3bc0 	call	a3bc <__pack_d>
    9a44:	dfc01217 	ldw	ra,72(sp)
    9a48:	dcc01117 	ldw	r19,68(sp)
    9a4c:	dc801017 	ldw	r18,64(sp)
    9a50:	dc400f17 	ldw	r17,60(sp)
    9a54:	dc000e17 	ldw	r16,56(sp)
    9a58:	dec01304 	addi	sp,sp,76
    9a5c:	f800283a 	ret
    9a60:	29805b26 	beq	r5,r6,9bd0 <__divdf3+0x244>
    9a64:	28802d26 	beq	r5,r2,9b1c <__divdf3+0x190>
    9a68:	d8c00617 	ldw	r3,24(sp)
    9a6c:	d8800b17 	ldw	r2,44(sp)
    9a70:	d9c00817 	ldw	r7,32(sp)
    9a74:	dc400d17 	ldw	r17,52(sp)
    9a78:	188bc83a 	sub	r5,r3,r2
    9a7c:	d9800717 	ldw	r6,28(sp)
    9a80:	dc000c17 	ldw	r16,48(sp)
    9a84:	d9400615 	stw	r5,24(sp)
    9a88:	3c403836 	bltu	r7,r17,9b6c <__divdf3+0x1e0>
    9a8c:	89c03626 	beq	r17,r7,9b68 <__divdf3+0x1dc>
    9a90:	0015883a 	mov	r10,zero
    9a94:	001d883a 	mov	r14,zero
    9a98:	02c40034 	movhi	r11,4096
    9a9c:	001f883a 	mov	r15,zero
    9aa0:	003f883a 	mov	ra,zero
    9aa4:	04800f44 	movi	r18,61
    9aa8:	00000f06 	br	9ae8 <__divdf3+0x15c>
    9aac:	601d883a 	mov	r14,r12
    9ab0:	681f883a 	mov	r15,r13
    9ab4:	400d883a 	mov	r6,r8
    9ab8:	100f883a 	mov	r7,r2
    9abc:	3191883a 	add	r8,r6,r6
    9ac0:	5808d07a 	srli	r4,r11,1
    9ac4:	4185803a 	cmpltu	r2,r8,r6
    9ac8:	39d3883a 	add	r9,r7,r7
    9acc:	28c6b03a 	or	r3,r5,r3
    9ad0:	1245883a 	add	r2,r2,r9
    9ad4:	1815883a 	mov	r10,r3
    9ad8:	2017883a 	mov	r11,r4
    9adc:	400d883a 	mov	r6,r8
    9ae0:	100f883a 	mov	r7,r2
    9ae4:	fc801726 	beq	ra,r18,9b44 <__divdf3+0x1b8>
    9ae8:	580a97fa 	slli	r5,r11,31
    9aec:	5006d07a 	srli	r3,r10,1
    9af0:	ffc00044 	addi	ra,ra,1
    9af4:	3c7ff136 	bltu	r7,r17,9abc <__divdf3+0x130>
    9af8:	3411c83a 	sub	r8,r6,r16
    9afc:	3205803a 	cmpltu	r2,r6,r8
    9b00:	3c53c83a 	sub	r9,r7,r17
    9b04:	7298b03a 	or	r12,r14,r10
    9b08:	7adab03a 	or	r13,r15,r11
    9b0c:	4885c83a 	sub	r2,r9,r2
    9b10:	89ffe61e 	bne	r17,r7,9aac <__divdf3+0x120>
    9b14:	343fe936 	bltu	r6,r16,9abc <__divdf3+0x130>
    9b18:	003fe406 	br	9aac <__divdf3+0x120>
    9b1c:	9809883a 	mov	r4,r19
    9b20:	d9800415 	stw	r6,16(sp)
    9b24:	000a3bc0 	call	a3bc <__pack_d>
    9b28:	dfc01217 	ldw	ra,72(sp)
    9b2c:	dcc01117 	ldw	r19,68(sp)
    9b30:	dc801017 	ldw	r18,64(sp)
    9b34:	dc400f17 	ldw	r17,60(sp)
    9b38:	dc000e17 	ldw	r16,56(sp)
    9b3c:	dec01304 	addi	sp,sp,76
    9b40:	f800283a 	ret
    9b44:	00803fc4 	movi	r2,255
    9b48:	7090703a 	and	r8,r14,r2
    9b4c:	00802004 	movi	r2,128
    9b50:	0007883a 	mov	r3,zero
    9b54:	0013883a 	mov	r9,zero
    9b58:	40800d26 	beq	r8,r2,9b90 <__divdf3+0x204>
    9b5c:	dbc00815 	stw	r15,32(sp)
    9b60:	db800715 	stw	r14,28(sp)
    9b64:	003fab06 	br	9a14 <__divdf3+0x88>
    9b68:	343fc92e 	bgeu	r6,r16,9a90 <__divdf3+0x104>
    9b6c:	3185883a 	add	r2,r6,r6
    9b70:	1189803a 	cmpltu	r4,r2,r6
    9b74:	39c7883a 	add	r3,r7,r7
    9b78:	20c9883a 	add	r4,r4,r3
    9b7c:	297fffc4 	addi	r5,r5,-1
    9b80:	100d883a 	mov	r6,r2
    9b84:	200f883a 	mov	r7,r4
    9b88:	d9400615 	stw	r5,24(sp)
    9b8c:	003fc006 	br	9a90 <__divdf3+0x104>
    9b90:	483ff21e 	bne	r9,zero,9b5c <__divdf3+0x1d0>
    9b94:	01004004 	movi	r4,256
    9b98:	7104703a 	and	r2,r14,r4
    9b9c:	10c4b03a 	or	r2,r2,r3
    9ba0:	103fee1e 	bne	r2,zero,9b5c <__divdf3+0x1d0>
    9ba4:	31c4b03a 	or	r2,r6,r7
    9ba8:	103fec26 	beq	r2,zero,9b5c <__divdf3+0x1d0>
    9bac:	7205883a 	add	r2,r14,r8
    9bb0:	1391803a 	cmpltu	r8,r2,r14
    9bb4:	43d1883a 	add	r8,r8,r15
    9bb8:	013fc004 	movi	r4,-256
    9bbc:	111c703a 	and	r14,r2,r4
    9bc0:	401f883a 	mov	r15,r8
    9bc4:	003fe506 	br	9b5c <__divdf3+0x1d0>
    9bc8:	8009883a 	mov	r4,r16
    9bcc:	003f9206 	br	9a18 <__divdf3+0x8c>
    9bd0:	9809883a 	mov	r4,r19
    9bd4:	d8000715 	stw	zero,28(sp)
    9bd8:	d8000815 	stw	zero,32(sp)
    9bdc:	d8000615 	stw	zero,24(sp)
    9be0:	003f8d06 	br	9a18 <__divdf3+0x8c>

00009be4 <__eqdf2>:
    9be4:	deffef04 	addi	sp,sp,-68
    9be8:	dc400f15 	stw	r17,60(sp)
    9bec:	dc400404 	addi	r17,sp,16
    9bf0:	2005883a 	mov	r2,r4
    9bf4:	2807883a 	mov	r3,r5
    9bf8:	dc000e15 	stw	r16,56(sp)
    9bfc:	d809883a 	mov	r4,sp
    9c00:	880b883a 	mov	r5,r17
    9c04:	dc000904 	addi	r16,sp,36
    9c08:	d8c00115 	stw	r3,4(sp)
    9c0c:	d8800015 	stw	r2,0(sp)
    9c10:	d9800215 	stw	r6,8(sp)
    9c14:	dfc01015 	stw	ra,64(sp)
    9c18:	d9c00315 	stw	r7,12(sp)
    9c1c:	000a6d00 	call	a6d0 <__unpack_d>
    9c20:	d9000204 	addi	r4,sp,8
    9c24:	800b883a 	mov	r5,r16
    9c28:	000a6d00 	call	a6d0 <__unpack_d>
    9c2c:	d8800417 	ldw	r2,16(sp)
    9c30:	00c00044 	movi	r3,1
    9c34:	180d883a 	mov	r6,r3
    9c38:	1880062e 	bgeu	r3,r2,9c54 <__eqdf2+0x70>
    9c3c:	d8800917 	ldw	r2,36(sp)
    9c40:	8809883a 	mov	r4,r17
    9c44:	800b883a 	mov	r5,r16
    9c48:	1880022e 	bgeu	r3,r2,9c54 <__eqdf2+0x70>
    9c4c:	000a8080 	call	a808 <__fpcmp_parts_d>
    9c50:	100d883a 	mov	r6,r2
    9c54:	3005883a 	mov	r2,r6
    9c58:	dfc01017 	ldw	ra,64(sp)
    9c5c:	dc400f17 	ldw	r17,60(sp)
    9c60:	dc000e17 	ldw	r16,56(sp)
    9c64:	dec01104 	addi	sp,sp,68
    9c68:	f800283a 	ret

00009c6c <__nedf2>:
    9c6c:	deffef04 	addi	sp,sp,-68
    9c70:	dc400f15 	stw	r17,60(sp)
    9c74:	dc400404 	addi	r17,sp,16
    9c78:	2005883a 	mov	r2,r4
    9c7c:	2807883a 	mov	r3,r5
    9c80:	dc000e15 	stw	r16,56(sp)
    9c84:	d809883a 	mov	r4,sp
    9c88:	880b883a 	mov	r5,r17
    9c8c:	dc000904 	addi	r16,sp,36
    9c90:	d8c00115 	stw	r3,4(sp)
    9c94:	d8800015 	stw	r2,0(sp)
    9c98:	d9800215 	stw	r6,8(sp)
    9c9c:	dfc01015 	stw	ra,64(sp)
    9ca0:	d9c00315 	stw	r7,12(sp)
    9ca4:	000a6d00 	call	a6d0 <__unpack_d>
    9ca8:	d9000204 	addi	r4,sp,8
    9cac:	800b883a 	mov	r5,r16
    9cb0:	000a6d00 	call	a6d0 <__unpack_d>
    9cb4:	d8800417 	ldw	r2,16(sp)
    9cb8:	00c00044 	movi	r3,1
    9cbc:	180d883a 	mov	r6,r3
    9cc0:	1880062e 	bgeu	r3,r2,9cdc <__nedf2+0x70>
    9cc4:	d8800917 	ldw	r2,36(sp)
    9cc8:	8809883a 	mov	r4,r17
    9ccc:	800b883a 	mov	r5,r16
    9cd0:	1880022e 	bgeu	r3,r2,9cdc <__nedf2+0x70>
    9cd4:	000a8080 	call	a808 <__fpcmp_parts_d>
    9cd8:	100d883a 	mov	r6,r2
    9cdc:	3005883a 	mov	r2,r6
    9ce0:	dfc01017 	ldw	ra,64(sp)
    9ce4:	dc400f17 	ldw	r17,60(sp)
    9ce8:	dc000e17 	ldw	r16,56(sp)
    9cec:	dec01104 	addi	sp,sp,68
    9cf0:	f800283a 	ret

00009cf4 <__gtdf2>:
    9cf4:	deffef04 	addi	sp,sp,-68
    9cf8:	dc400f15 	stw	r17,60(sp)
    9cfc:	dc400404 	addi	r17,sp,16
    9d00:	2005883a 	mov	r2,r4
    9d04:	2807883a 	mov	r3,r5
    9d08:	dc000e15 	stw	r16,56(sp)
    9d0c:	d809883a 	mov	r4,sp
    9d10:	880b883a 	mov	r5,r17
    9d14:	dc000904 	addi	r16,sp,36
    9d18:	d8c00115 	stw	r3,4(sp)
    9d1c:	d8800015 	stw	r2,0(sp)
    9d20:	d9800215 	stw	r6,8(sp)
    9d24:	dfc01015 	stw	ra,64(sp)
    9d28:	d9c00315 	stw	r7,12(sp)
    9d2c:	000a6d00 	call	a6d0 <__unpack_d>
    9d30:	d9000204 	addi	r4,sp,8
    9d34:	800b883a 	mov	r5,r16
    9d38:	000a6d00 	call	a6d0 <__unpack_d>
    9d3c:	d8800417 	ldw	r2,16(sp)
    9d40:	00c00044 	movi	r3,1
    9d44:	01bfffc4 	movi	r6,-1
    9d48:	1880062e 	bgeu	r3,r2,9d64 <__gtdf2+0x70>
    9d4c:	d8800917 	ldw	r2,36(sp)
    9d50:	8809883a 	mov	r4,r17
    9d54:	800b883a 	mov	r5,r16
    9d58:	1880022e 	bgeu	r3,r2,9d64 <__gtdf2+0x70>
    9d5c:	000a8080 	call	a808 <__fpcmp_parts_d>
    9d60:	100d883a 	mov	r6,r2
    9d64:	3005883a 	mov	r2,r6
    9d68:	dfc01017 	ldw	ra,64(sp)
    9d6c:	dc400f17 	ldw	r17,60(sp)
    9d70:	dc000e17 	ldw	r16,56(sp)
    9d74:	dec01104 	addi	sp,sp,68
    9d78:	f800283a 	ret

00009d7c <__gedf2>:
    9d7c:	deffef04 	addi	sp,sp,-68
    9d80:	dc400f15 	stw	r17,60(sp)
    9d84:	dc400404 	addi	r17,sp,16
    9d88:	2005883a 	mov	r2,r4
    9d8c:	2807883a 	mov	r3,r5
    9d90:	dc000e15 	stw	r16,56(sp)
    9d94:	d809883a 	mov	r4,sp
    9d98:	880b883a 	mov	r5,r17
    9d9c:	dc000904 	addi	r16,sp,36
    9da0:	d8c00115 	stw	r3,4(sp)
    9da4:	d8800015 	stw	r2,0(sp)
    9da8:	d9800215 	stw	r6,8(sp)
    9dac:	dfc01015 	stw	ra,64(sp)
    9db0:	d9c00315 	stw	r7,12(sp)
    9db4:	000a6d00 	call	a6d0 <__unpack_d>
    9db8:	d9000204 	addi	r4,sp,8
    9dbc:	800b883a 	mov	r5,r16
    9dc0:	000a6d00 	call	a6d0 <__unpack_d>
    9dc4:	d8800417 	ldw	r2,16(sp)
    9dc8:	00c00044 	movi	r3,1
    9dcc:	01bfffc4 	movi	r6,-1
    9dd0:	1880062e 	bgeu	r3,r2,9dec <__gedf2+0x70>
    9dd4:	d8800917 	ldw	r2,36(sp)
    9dd8:	8809883a 	mov	r4,r17
    9ddc:	800b883a 	mov	r5,r16
    9de0:	1880022e 	bgeu	r3,r2,9dec <__gedf2+0x70>
    9de4:	000a8080 	call	a808 <__fpcmp_parts_d>
    9de8:	100d883a 	mov	r6,r2
    9dec:	3005883a 	mov	r2,r6
    9df0:	dfc01017 	ldw	ra,64(sp)
    9df4:	dc400f17 	ldw	r17,60(sp)
    9df8:	dc000e17 	ldw	r16,56(sp)
    9dfc:	dec01104 	addi	sp,sp,68
    9e00:	f800283a 	ret

00009e04 <__ltdf2>:
    9e04:	deffef04 	addi	sp,sp,-68
    9e08:	dc400f15 	stw	r17,60(sp)
    9e0c:	dc400404 	addi	r17,sp,16
    9e10:	2005883a 	mov	r2,r4
    9e14:	2807883a 	mov	r3,r5
    9e18:	dc000e15 	stw	r16,56(sp)
    9e1c:	d809883a 	mov	r4,sp
    9e20:	880b883a 	mov	r5,r17
    9e24:	dc000904 	addi	r16,sp,36
    9e28:	d8c00115 	stw	r3,4(sp)
    9e2c:	d8800015 	stw	r2,0(sp)
    9e30:	d9800215 	stw	r6,8(sp)
    9e34:	dfc01015 	stw	ra,64(sp)
    9e38:	d9c00315 	stw	r7,12(sp)
    9e3c:	000a6d00 	call	a6d0 <__unpack_d>
    9e40:	d9000204 	addi	r4,sp,8
    9e44:	800b883a 	mov	r5,r16
    9e48:	000a6d00 	call	a6d0 <__unpack_d>
    9e4c:	d8800417 	ldw	r2,16(sp)
    9e50:	00c00044 	movi	r3,1
    9e54:	180d883a 	mov	r6,r3
    9e58:	1880062e 	bgeu	r3,r2,9e74 <__ltdf2+0x70>
    9e5c:	d8800917 	ldw	r2,36(sp)
    9e60:	8809883a 	mov	r4,r17
    9e64:	800b883a 	mov	r5,r16
    9e68:	1880022e 	bgeu	r3,r2,9e74 <__ltdf2+0x70>
    9e6c:	000a8080 	call	a808 <__fpcmp_parts_d>
    9e70:	100d883a 	mov	r6,r2
    9e74:	3005883a 	mov	r2,r6
    9e78:	dfc01017 	ldw	ra,64(sp)
    9e7c:	dc400f17 	ldw	r17,60(sp)
    9e80:	dc000e17 	ldw	r16,56(sp)
    9e84:	dec01104 	addi	sp,sp,68
    9e88:	f800283a 	ret

00009e8c <__floatsidf>:
    9e8c:	2006d7fa 	srli	r3,r4,31
    9e90:	defff604 	addi	sp,sp,-40
    9e94:	008000c4 	movi	r2,3
    9e98:	dfc00915 	stw	ra,36(sp)
    9e9c:	dcc00815 	stw	r19,32(sp)
    9ea0:	dc800715 	stw	r18,28(sp)
    9ea4:	dc400615 	stw	r17,24(sp)
    9ea8:	dc000515 	stw	r16,20(sp)
    9eac:	d8800015 	stw	r2,0(sp)
    9eb0:	d8c00115 	stw	r3,4(sp)
    9eb4:	20000f1e 	bne	r4,zero,9ef4 <__floatsidf+0x68>
    9eb8:	00800084 	movi	r2,2
    9ebc:	d8800015 	stw	r2,0(sp)
    9ec0:	d809883a 	mov	r4,sp
    9ec4:	000a3bc0 	call	a3bc <__pack_d>
    9ec8:	1009883a 	mov	r4,r2
    9ecc:	180b883a 	mov	r5,r3
    9ed0:	2005883a 	mov	r2,r4
    9ed4:	2807883a 	mov	r3,r5
    9ed8:	dfc00917 	ldw	ra,36(sp)
    9edc:	dcc00817 	ldw	r19,32(sp)
    9ee0:	dc800717 	ldw	r18,28(sp)
    9ee4:	dc400617 	ldw	r17,24(sp)
    9ee8:	dc000517 	ldw	r16,20(sp)
    9eec:	dec00a04 	addi	sp,sp,40
    9ef0:	f800283a 	ret
    9ef4:	00800f04 	movi	r2,60
    9ef8:	1807003a 	cmpeq	r3,r3,zero
    9efc:	d8800215 	stw	r2,8(sp)
    9f00:	18001126 	beq	r3,zero,9f48 <__floatsidf+0xbc>
    9f04:	0027883a 	mov	r19,zero
    9f08:	2025883a 	mov	r18,r4
    9f0c:	d9000315 	stw	r4,12(sp)
    9f10:	dcc00415 	stw	r19,16(sp)
    9f14:	000a33c0 	call	a33c <__clzsi2>
    9f18:	11000744 	addi	r4,r2,29
    9f1c:	013fe80e 	bge	zero,r4,9ec0 <__floatsidf+0x34>
    9f20:	10bfff44 	addi	r2,r2,-3
    9f24:	10000c16 	blt	r2,zero,9f58 <__floatsidf+0xcc>
    9f28:	90a2983a 	sll	r17,r18,r2
    9f2c:	0021883a 	mov	r16,zero
    9f30:	d8800217 	ldw	r2,8(sp)
    9f34:	dc400415 	stw	r17,16(sp)
    9f38:	dc000315 	stw	r16,12(sp)
    9f3c:	1105c83a 	sub	r2,r2,r4
    9f40:	d8800215 	stw	r2,8(sp)
    9f44:	003fde06 	br	9ec0 <__floatsidf+0x34>
    9f48:	00a00034 	movhi	r2,32768
    9f4c:	20800a26 	beq	r4,r2,9f78 <__floatsidf+0xec>
    9f50:	0109c83a 	sub	r4,zero,r4
    9f54:	003feb06 	br	9f04 <__floatsidf+0x78>
    9f58:	9006d07a 	srli	r3,r18,1
    9f5c:	008007c4 	movi	r2,31
    9f60:	1105c83a 	sub	r2,r2,r4
    9f64:	1886d83a 	srl	r3,r3,r2
    9f68:	9922983a 	sll	r17,r19,r4
    9f6c:	9120983a 	sll	r16,r18,r4
    9f70:	1c62b03a 	or	r17,r3,r17
    9f74:	003fee06 	br	9f30 <__floatsidf+0xa4>
    9f78:	0009883a 	mov	r4,zero
    9f7c:	01707834 	movhi	r5,49632
    9f80:	003fd306 	br	9ed0 <__floatsidf+0x44>

00009f84 <__fixdfsi>:
    9f84:	defff804 	addi	sp,sp,-32
    9f88:	2005883a 	mov	r2,r4
    9f8c:	2807883a 	mov	r3,r5
    9f90:	d809883a 	mov	r4,sp
    9f94:	d9400204 	addi	r5,sp,8
    9f98:	d8c00115 	stw	r3,4(sp)
    9f9c:	d8800015 	stw	r2,0(sp)
    9fa0:	dfc00715 	stw	ra,28(sp)
    9fa4:	000a6d00 	call	a6d0 <__unpack_d>
    9fa8:	d8c00217 	ldw	r3,8(sp)
    9fac:	00800084 	movi	r2,2
    9fb0:	1880051e 	bne	r3,r2,9fc8 <__fixdfsi+0x44>
    9fb4:	0007883a 	mov	r3,zero
    9fb8:	1805883a 	mov	r2,r3
    9fbc:	dfc00717 	ldw	ra,28(sp)
    9fc0:	dec00804 	addi	sp,sp,32
    9fc4:	f800283a 	ret
    9fc8:	00800044 	movi	r2,1
    9fcc:	10fff92e 	bgeu	r2,r3,9fb4 <__fixdfsi+0x30>
    9fd0:	00800104 	movi	r2,4
    9fd4:	18800426 	beq	r3,r2,9fe8 <__fixdfsi+0x64>
    9fd8:	d8c00417 	ldw	r3,16(sp)
    9fdc:	183ff516 	blt	r3,zero,9fb4 <__fixdfsi+0x30>
    9fe0:	00800784 	movi	r2,30
    9fe4:	10c0080e 	bge	r2,r3,a008 <__fixdfsi+0x84>
    9fe8:	d8800317 	ldw	r2,12(sp)
    9fec:	1000121e 	bne	r2,zero,a038 <__fixdfsi+0xb4>
    9ff0:	00e00034 	movhi	r3,32768
    9ff4:	18ffffc4 	addi	r3,r3,-1
    9ff8:	1805883a 	mov	r2,r3
    9ffc:	dfc00717 	ldw	ra,28(sp)
    a000:	dec00804 	addi	sp,sp,32
    a004:	f800283a 	ret
    a008:	00800f04 	movi	r2,60
    a00c:	10d1c83a 	sub	r8,r2,r3
    a010:	40bff804 	addi	r2,r8,-32
    a014:	d9800517 	ldw	r6,20(sp)
    a018:	d9c00617 	ldw	r7,24(sp)
    a01c:	10000816 	blt	r2,zero,a040 <__fixdfsi+0xbc>
    a020:	3888d83a 	srl	r4,r7,r2
    a024:	d8800317 	ldw	r2,12(sp)
    a028:	2007883a 	mov	r3,r4
    a02c:	103fe226 	beq	r2,zero,9fb8 <__fixdfsi+0x34>
    a030:	0107c83a 	sub	r3,zero,r4
    a034:	003fe006 	br	9fb8 <__fixdfsi+0x34>
    a038:	00e00034 	movhi	r3,32768
    a03c:	003fde06 	br	9fb8 <__fixdfsi+0x34>
    a040:	39c7883a 	add	r3,r7,r7
    a044:	008007c4 	movi	r2,31
    a048:	1205c83a 	sub	r2,r2,r8
    a04c:	1886983a 	sll	r3,r3,r2
    a050:	3208d83a 	srl	r4,r6,r8
    a054:	1908b03a 	or	r4,r3,r4
    a058:	003ff206 	br	a024 <__fixdfsi+0xa0>

0000a05c <__floatunsidf>:
    a05c:	defff204 	addi	sp,sp,-56
    a060:	dfc00d15 	stw	ra,52(sp)
    a064:	ddc00c15 	stw	r23,48(sp)
    a068:	dd800b15 	stw	r22,44(sp)
    a06c:	dd400a15 	stw	r21,40(sp)
    a070:	dd000915 	stw	r20,36(sp)
    a074:	dcc00815 	stw	r19,32(sp)
    a078:	dc800715 	stw	r18,28(sp)
    a07c:	dc400615 	stw	r17,24(sp)
    a080:	dc000515 	stw	r16,20(sp)
    a084:	d8000115 	stw	zero,4(sp)
    a088:	20000f1e 	bne	r4,zero,a0c8 <__floatunsidf+0x6c>
    a08c:	00800084 	movi	r2,2
    a090:	d8800015 	stw	r2,0(sp)
    a094:	d809883a 	mov	r4,sp
    a098:	000a3bc0 	call	a3bc <__pack_d>
    a09c:	dfc00d17 	ldw	ra,52(sp)
    a0a0:	ddc00c17 	ldw	r23,48(sp)
    a0a4:	dd800b17 	ldw	r22,44(sp)
    a0a8:	dd400a17 	ldw	r21,40(sp)
    a0ac:	dd000917 	ldw	r20,36(sp)
    a0b0:	dcc00817 	ldw	r19,32(sp)
    a0b4:	dc800717 	ldw	r18,28(sp)
    a0b8:	dc400617 	ldw	r17,24(sp)
    a0bc:	dc000517 	ldw	r16,20(sp)
    a0c0:	dec00e04 	addi	sp,sp,56
    a0c4:	f800283a 	ret
    a0c8:	008000c4 	movi	r2,3
    a0cc:	00c00f04 	movi	r3,60
    a0d0:	002f883a 	mov	r23,zero
    a0d4:	202d883a 	mov	r22,r4
    a0d8:	d8800015 	stw	r2,0(sp)
    a0dc:	d8c00215 	stw	r3,8(sp)
    a0e0:	d9000315 	stw	r4,12(sp)
    a0e4:	ddc00415 	stw	r23,16(sp)
    a0e8:	000a33c0 	call	a33c <__clzsi2>
    a0ec:	12400744 	addi	r9,r2,29
    a0f0:	48000b16 	blt	r9,zero,a120 <__floatunsidf+0xc4>
    a0f4:	483fe726 	beq	r9,zero,a094 <__floatunsidf+0x38>
    a0f8:	10bfff44 	addi	r2,r2,-3
    a0fc:	10002e16 	blt	r2,zero,a1b8 <__floatunsidf+0x15c>
    a100:	b0a2983a 	sll	r17,r22,r2
    a104:	0021883a 	mov	r16,zero
    a108:	d8800217 	ldw	r2,8(sp)
    a10c:	dc400415 	stw	r17,16(sp)
    a110:	dc000315 	stw	r16,12(sp)
    a114:	1245c83a 	sub	r2,r2,r9
    a118:	d8800215 	stw	r2,8(sp)
    a11c:	003fdd06 	br	a094 <__floatunsidf+0x38>
    a120:	0255c83a 	sub	r10,zero,r9
    a124:	51bff804 	addi	r6,r10,-32
    a128:	30001b16 	blt	r6,zero,a198 <__floatunsidf+0x13c>
    a12c:	b9a8d83a 	srl	r20,r23,r6
    a130:	002b883a 	mov	r21,zero
    a134:	000f883a 	mov	r7,zero
    a138:	01000044 	movi	r4,1
    a13c:	0011883a 	mov	r8,zero
    a140:	30002516 	blt	r6,zero,a1d8 <__floatunsidf+0x17c>
    a144:	21a6983a 	sll	r19,r4,r6
    a148:	0025883a 	mov	r18,zero
    a14c:	00bfffc4 	movi	r2,-1
    a150:	9089883a 	add	r4,r18,r2
    a154:	988b883a 	add	r5,r19,r2
    a158:	248d803a 	cmpltu	r6,r4,r18
    a15c:	314b883a 	add	r5,r6,r5
    a160:	b104703a 	and	r2,r22,r4
    a164:	b946703a 	and	r3,r23,r5
    a168:	10c4b03a 	or	r2,r2,r3
    a16c:	10000226 	beq	r2,zero,a178 <__floatunsidf+0x11c>
    a170:	01c00044 	movi	r7,1
    a174:	0011883a 	mov	r8,zero
    a178:	d9000217 	ldw	r4,8(sp)
    a17c:	a1c4b03a 	or	r2,r20,r7
    a180:	aa06b03a 	or	r3,r21,r8
    a184:	2249c83a 	sub	r4,r4,r9
    a188:	d8c00415 	stw	r3,16(sp)
    a18c:	d9000215 	stw	r4,8(sp)
    a190:	d8800315 	stw	r2,12(sp)
    a194:	003fbf06 	br	a094 <__floatunsidf+0x38>
    a198:	bdc7883a 	add	r3,r23,r23
    a19c:	008007c4 	movi	r2,31
    a1a0:	1285c83a 	sub	r2,r2,r10
    a1a4:	1886983a 	sll	r3,r3,r2
    a1a8:	b2a8d83a 	srl	r20,r22,r10
    a1ac:	baaad83a 	srl	r21,r23,r10
    a1b0:	1d28b03a 	or	r20,r3,r20
    a1b4:	003fdf06 	br	a134 <__floatunsidf+0xd8>
    a1b8:	b006d07a 	srli	r3,r22,1
    a1bc:	008007c4 	movi	r2,31
    a1c0:	1245c83a 	sub	r2,r2,r9
    a1c4:	1886d83a 	srl	r3,r3,r2
    a1c8:	ba62983a 	sll	r17,r23,r9
    a1cc:	b260983a 	sll	r16,r22,r9
    a1d0:	1c62b03a 	or	r17,r3,r17
    a1d4:	003fcc06 	br	a108 <__floatunsidf+0xac>
    a1d8:	2006d07a 	srli	r3,r4,1
    a1dc:	008007c4 	movi	r2,31
    a1e0:	1285c83a 	sub	r2,r2,r10
    a1e4:	18a6d83a 	srl	r19,r3,r2
    a1e8:	22a4983a 	sll	r18,r4,r10
    a1ec:	003fd706 	br	a14c <__floatunsidf+0xf0>

0000a1f0 <udivmodsi4>:
    a1f0:	29001b2e 	bgeu	r5,r4,a260 <udivmodsi4+0x70>
    a1f4:	28001a16 	blt	r5,zero,a260 <udivmodsi4+0x70>
    a1f8:	00800044 	movi	r2,1
    a1fc:	0007883a 	mov	r3,zero
    a200:	01c007c4 	movi	r7,31
    a204:	00000306 	br	a214 <udivmodsi4+0x24>
    a208:	19c01326 	beq	r3,r7,a258 <udivmodsi4+0x68>
    a20c:	18c00044 	addi	r3,r3,1
    a210:	28000416 	blt	r5,zero,a224 <udivmodsi4+0x34>
    a214:	294b883a 	add	r5,r5,r5
    a218:	1085883a 	add	r2,r2,r2
    a21c:	293ffa36 	bltu	r5,r4,a208 <udivmodsi4+0x18>
    a220:	10000d26 	beq	r2,zero,a258 <udivmodsi4+0x68>
    a224:	0007883a 	mov	r3,zero
    a228:	21400236 	bltu	r4,r5,a234 <udivmodsi4+0x44>
    a22c:	2149c83a 	sub	r4,r4,r5
    a230:	1886b03a 	or	r3,r3,r2
    a234:	1004d07a 	srli	r2,r2,1
    a238:	280ad07a 	srli	r5,r5,1
    a23c:	103ffa1e 	bne	r2,zero,a228 <udivmodsi4+0x38>
    a240:	30000226 	beq	r6,zero,a24c <udivmodsi4+0x5c>
    a244:	2005883a 	mov	r2,r4
    a248:	f800283a 	ret
    a24c:	1809883a 	mov	r4,r3
    a250:	2005883a 	mov	r2,r4
    a254:	f800283a 	ret
    a258:	0007883a 	mov	r3,zero
    a25c:	003ff806 	br	a240 <udivmodsi4+0x50>
    a260:	00800044 	movi	r2,1
    a264:	0007883a 	mov	r3,zero
    a268:	003fef06 	br	a228 <udivmodsi4+0x38>

0000a26c <__divsi3>:
    a26c:	defffe04 	addi	sp,sp,-8
    a270:	dc000015 	stw	r16,0(sp)
    a274:	dfc00115 	stw	ra,4(sp)
    a278:	0021883a 	mov	r16,zero
    a27c:	20000c16 	blt	r4,zero,a2b0 <__divsi3+0x44>
    a280:	000d883a 	mov	r6,zero
    a284:	28000e16 	blt	r5,zero,a2c0 <__divsi3+0x54>
    a288:	000a1f00 	call	a1f0 <udivmodsi4>
    a28c:	1007883a 	mov	r3,r2
    a290:	8005003a 	cmpeq	r2,r16,zero
    a294:	1000011e 	bne	r2,zero,a29c <__divsi3+0x30>
    a298:	00c7c83a 	sub	r3,zero,r3
    a29c:	1805883a 	mov	r2,r3
    a2a0:	dfc00117 	ldw	ra,4(sp)
    a2a4:	dc000017 	ldw	r16,0(sp)
    a2a8:	dec00204 	addi	sp,sp,8
    a2ac:	f800283a 	ret
    a2b0:	0109c83a 	sub	r4,zero,r4
    a2b4:	04000044 	movi	r16,1
    a2b8:	000d883a 	mov	r6,zero
    a2bc:	283ff20e 	bge	r5,zero,a288 <__divsi3+0x1c>
    a2c0:	014bc83a 	sub	r5,zero,r5
    a2c4:	8021003a 	cmpeq	r16,r16,zero
    a2c8:	003fef06 	br	a288 <__divsi3+0x1c>

0000a2cc <__modsi3>:
    a2cc:	deffff04 	addi	sp,sp,-4
    a2d0:	dfc00015 	stw	ra,0(sp)
    a2d4:	01800044 	movi	r6,1
    a2d8:	2807883a 	mov	r3,r5
    a2dc:	20000416 	blt	r4,zero,a2f0 <__modsi3+0x24>
    a2e0:	28000c16 	blt	r5,zero,a314 <__modsi3+0x48>
    a2e4:	dfc00017 	ldw	ra,0(sp)
    a2e8:	dec00104 	addi	sp,sp,4
    a2ec:	000a1f01 	jmpi	a1f0 <udivmodsi4>
    a2f0:	0109c83a 	sub	r4,zero,r4
    a2f4:	28000b16 	blt	r5,zero,a324 <__modsi3+0x58>
    a2f8:	180b883a 	mov	r5,r3
    a2fc:	01800044 	movi	r6,1
    a300:	000a1f00 	call	a1f0 <udivmodsi4>
    a304:	0085c83a 	sub	r2,zero,r2
    a308:	dfc00017 	ldw	ra,0(sp)
    a30c:	dec00104 	addi	sp,sp,4
    a310:	f800283a 	ret
    a314:	014bc83a 	sub	r5,zero,r5
    a318:	dfc00017 	ldw	ra,0(sp)
    a31c:	dec00104 	addi	sp,sp,4
    a320:	000a1f01 	jmpi	a1f0 <udivmodsi4>
    a324:	0147c83a 	sub	r3,zero,r5
    a328:	003ff306 	br	a2f8 <__modsi3+0x2c>

0000a32c <__udivsi3>:
    a32c:	000d883a 	mov	r6,zero
    a330:	000a1f01 	jmpi	a1f0 <udivmodsi4>

0000a334 <__umodsi3>:
    a334:	01800044 	movi	r6,1
    a338:	000a1f01 	jmpi	a1f0 <udivmodsi4>

0000a33c <__clzsi2>:
    a33c:	00bfffd4 	movui	r2,65535
    a340:	11000e36 	bltu	r2,r4,a37c <__clzsi2+0x40>
    a344:	00803fc4 	movi	r2,255
    a348:	01400204 	movi	r5,8
    a34c:	0007883a 	mov	r3,zero
    a350:	11001036 	bltu	r2,r4,a394 <__clzsi2+0x58>
    a354:	000b883a 	mov	r5,zero
    a358:	20c6d83a 	srl	r3,r4,r3
    a35c:	00800074 	movhi	r2,1
    a360:	10bcc604 	addi	r2,r2,-3304
    a364:	1887883a 	add	r3,r3,r2
    a368:	18800003 	ldbu	r2,0(r3)
    a36c:	00c00804 	movi	r3,32
    a370:	2885883a 	add	r2,r5,r2
    a374:	1885c83a 	sub	r2,r3,r2
    a378:	f800283a 	ret
    a37c:	01400404 	movi	r5,16
    a380:	00804034 	movhi	r2,256
    a384:	10bfffc4 	addi	r2,r2,-1
    a388:	2807883a 	mov	r3,r5
    a38c:	113ff22e 	bgeu	r2,r4,a358 <__clzsi2+0x1c>
    a390:	01400604 	movi	r5,24
    a394:	2807883a 	mov	r3,r5
    a398:	20c6d83a 	srl	r3,r4,r3
    a39c:	00800074 	movhi	r2,1
    a3a0:	10bcc604 	addi	r2,r2,-3304
    a3a4:	1887883a 	add	r3,r3,r2
    a3a8:	18800003 	ldbu	r2,0(r3)
    a3ac:	00c00804 	movi	r3,32
    a3b0:	2885883a 	add	r2,r5,r2
    a3b4:	1885c83a 	sub	r2,r3,r2
    a3b8:	f800283a 	ret

0000a3bc <__pack_d>:
    a3bc:	20c00017 	ldw	r3,0(r4)
    a3c0:	defffd04 	addi	sp,sp,-12
    a3c4:	dc000015 	stw	r16,0(sp)
    a3c8:	dc800215 	stw	r18,8(sp)
    a3cc:	dc400115 	stw	r17,4(sp)
    a3d0:	00800044 	movi	r2,1
    a3d4:	22000317 	ldw	r8,12(r4)
    a3d8:	001f883a 	mov	r15,zero
    a3dc:	22400417 	ldw	r9,16(r4)
    a3e0:	24000117 	ldw	r16,4(r4)
    a3e4:	10c0552e 	bgeu	r2,r3,a53c <__pack_d+0x180>
    a3e8:	00800104 	movi	r2,4
    a3ec:	18804f26 	beq	r3,r2,a52c <__pack_d+0x170>
    a3f0:	00800084 	movi	r2,2
    a3f4:	18800226 	beq	r3,r2,a400 <__pack_d+0x44>
    a3f8:	4244b03a 	or	r2,r8,r9
    a3fc:	10001a1e 	bne	r2,zero,a468 <__pack_d+0xac>
    a400:	000d883a 	mov	r6,zero
    a404:	000f883a 	mov	r7,zero
    a408:	0011883a 	mov	r8,zero
    a40c:	00800434 	movhi	r2,16
    a410:	10bfffc4 	addi	r2,r2,-1
    a414:	301d883a 	mov	r14,r6
    a418:	3884703a 	and	r2,r7,r2
    a41c:	400a953a 	slli	r5,r8,20
    a420:	79bffc2c 	andhi	r6,r15,65520
    a424:	308cb03a 	or	r6,r6,r2
    a428:	00e00434 	movhi	r3,32784
    a42c:	18ffffc4 	addi	r3,r3,-1
    a430:	800497fa 	slli	r2,r16,31
    a434:	30c6703a 	and	r3,r6,r3
    a438:	1946b03a 	or	r3,r3,r5
    a43c:	01600034 	movhi	r5,32768
    a440:	297fffc4 	addi	r5,r5,-1
    a444:	194a703a 	and	r5,r3,r5
    a448:	288ab03a 	or	r5,r5,r2
    a44c:	2807883a 	mov	r3,r5
    a450:	7005883a 	mov	r2,r14
    a454:	dc800217 	ldw	r18,8(sp)
    a458:	dc400117 	ldw	r17,4(sp)
    a45c:	dc000017 	ldw	r16,0(sp)
    a460:	dec00304 	addi	sp,sp,12
    a464:	f800283a 	ret
    a468:	21000217 	ldw	r4,8(r4)
    a46c:	00bf0084 	movi	r2,-1022
    a470:	20803f16 	blt	r4,r2,a570 <__pack_d+0x1b4>
    a474:	0080ffc4 	movi	r2,1023
    a478:	11002c16 	blt	r2,r4,a52c <__pack_d+0x170>
    a47c:	00803fc4 	movi	r2,255
    a480:	408c703a 	and	r6,r8,r2
    a484:	00802004 	movi	r2,128
    a488:	0007883a 	mov	r3,zero
    a48c:	000f883a 	mov	r7,zero
    a490:	2280ffc4 	addi	r10,r4,1023
    a494:	30801e26 	beq	r6,r2,a510 <__pack_d+0x154>
    a498:	00801fc4 	movi	r2,127
    a49c:	4089883a 	add	r4,r8,r2
    a4a0:	220d803a 	cmpltu	r6,r4,r8
    a4a4:	324d883a 	add	r6,r6,r9
    a4a8:	2011883a 	mov	r8,r4
    a4ac:	3013883a 	mov	r9,r6
    a4b0:	00880034 	movhi	r2,8192
    a4b4:	10bfffc4 	addi	r2,r2,-1
    a4b8:	12400d36 	bltu	r2,r9,a4f0 <__pack_d+0x134>
    a4bc:	4804963a 	slli	r2,r9,24
    a4c0:	400cd23a 	srli	r6,r8,8
    a4c4:	480ed23a 	srli	r7,r9,8
    a4c8:	013fffc4 	movi	r4,-1
    a4cc:	118cb03a 	or	r6,r2,r6
    a4d0:	01400434 	movhi	r5,16
    a4d4:	297fffc4 	addi	r5,r5,-1
    a4d8:	3104703a 	and	r2,r6,r4
    a4dc:	3946703a 	and	r3,r7,r5
    a4e0:	5201ffcc 	andi	r8,r10,2047
    a4e4:	100d883a 	mov	r6,r2
    a4e8:	180f883a 	mov	r7,r3
    a4ec:	003fc706 	br	a40c <__pack_d+0x50>
    a4f0:	480897fa 	slli	r4,r9,31
    a4f4:	4004d07a 	srli	r2,r8,1
    a4f8:	4806d07a 	srli	r3,r9,1
    a4fc:	52800044 	addi	r10,r10,1
    a500:	2084b03a 	or	r2,r4,r2
    a504:	1011883a 	mov	r8,r2
    a508:	1813883a 	mov	r9,r3
    a50c:	003feb06 	br	a4bc <__pack_d+0x100>
    a510:	383fe11e 	bne	r7,zero,a498 <__pack_d+0xdc>
    a514:	01004004 	movi	r4,256
    a518:	4104703a 	and	r2,r8,r4
    a51c:	10c4b03a 	or	r2,r2,r3
    a520:	103fe326 	beq	r2,zero,a4b0 <__pack_d+0xf4>
    a524:	3005883a 	mov	r2,r6
    a528:	003fdc06 	br	a49c <__pack_d+0xe0>
    a52c:	000d883a 	mov	r6,zero
    a530:	000f883a 	mov	r7,zero
    a534:	0201ffc4 	movi	r8,2047
    a538:	003fb406 	br	a40c <__pack_d+0x50>
    a53c:	0005883a 	mov	r2,zero
    a540:	00c00234 	movhi	r3,8
    a544:	408cb03a 	or	r6,r8,r2
    a548:	48ceb03a 	or	r7,r9,r3
    a54c:	013fffc4 	movi	r4,-1
    a550:	01400434 	movhi	r5,16
    a554:	297fffc4 	addi	r5,r5,-1
    a558:	3104703a 	and	r2,r6,r4
    a55c:	3946703a 	and	r3,r7,r5
    a560:	100d883a 	mov	r6,r2
    a564:	180f883a 	mov	r7,r3
    a568:	0201ffc4 	movi	r8,2047
    a56c:	003fa706 	br	a40c <__pack_d+0x50>
    a570:	1109c83a 	sub	r4,r2,r4
    a574:	00800e04 	movi	r2,56
    a578:	11004316 	blt	r2,r4,a688 <__pack_d+0x2cc>
    a57c:	21fff804 	addi	r7,r4,-32
    a580:	38004516 	blt	r7,zero,a698 <__pack_d+0x2dc>
    a584:	49d8d83a 	srl	r12,r9,r7
    a588:	001b883a 	mov	r13,zero
    a58c:	0023883a 	mov	r17,zero
    a590:	01400044 	movi	r5,1
    a594:	0025883a 	mov	r18,zero
    a598:	38004716 	blt	r7,zero,a6b8 <__pack_d+0x2fc>
    a59c:	29d6983a 	sll	r11,r5,r7
    a5a0:	0015883a 	mov	r10,zero
    a5a4:	00bfffc4 	movi	r2,-1
    a5a8:	5089883a 	add	r4,r10,r2
    a5ac:	588b883a 	add	r5,r11,r2
    a5b0:	228d803a 	cmpltu	r6,r4,r10
    a5b4:	314b883a 	add	r5,r6,r5
    a5b8:	4104703a 	and	r2,r8,r4
    a5bc:	4946703a 	and	r3,r9,r5
    a5c0:	10c4b03a 	or	r2,r2,r3
    a5c4:	10000226 	beq	r2,zero,a5d0 <__pack_d+0x214>
    a5c8:	04400044 	movi	r17,1
    a5cc:	0025883a 	mov	r18,zero
    a5d0:	00803fc4 	movi	r2,255
    a5d4:	644eb03a 	or	r7,r12,r17
    a5d8:	3892703a 	and	r9,r7,r2
    a5dc:	00802004 	movi	r2,128
    a5e0:	6c90b03a 	or	r8,r13,r18
    a5e4:	0015883a 	mov	r10,zero
    a5e8:	48801626 	beq	r9,r2,a644 <__pack_d+0x288>
    a5ec:	01001fc4 	movi	r4,127
    a5f0:	3905883a 	add	r2,r7,r4
    a5f4:	11cd803a 	cmpltu	r6,r2,r7
    a5f8:	320d883a 	add	r6,r6,r8
    a5fc:	100f883a 	mov	r7,r2
    a600:	00840034 	movhi	r2,4096
    a604:	10bfffc4 	addi	r2,r2,-1
    a608:	3011883a 	mov	r8,r6
    a60c:	0007883a 	mov	r3,zero
    a610:	11801b36 	bltu	r2,r6,a680 <__pack_d+0x2c4>
    a614:	4004963a 	slli	r2,r8,24
    a618:	3808d23a 	srli	r4,r7,8
    a61c:	400ad23a 	srli	r5,r8,8
    a620:	1813883a 	mov	r9,r3
    a624:	1108b03a 	or	r4,r2,r4
    a628:	00bfffc4 	movi	r2,-1
    a62c:	00c00434 	movhi	r3,16
    a630:	18ffffc4 	addi	r3,r3,-1
    a634:	208c703a 	and	r6,r4,r2
    a638:	28ce703a 	and	r7,r5,r3
    a63c:	4a01ffcc 	andi	r8,r9,2047
    a640:	003f7206 	br	a40c <__pack_d+0x50>
    a644:	503fe91e 	bne	r10,zero,a5ec <__pack_d+0x230>
    a648:	01004004 	movi	r4,256
    a64c:	3904703a 	and	r2,r7,r4
    a650:	0007883a 	mov	r3,zero
    a654:	10c4b03a 	or	r2,r2,r3
    a658:	10000626 	beq	r2,zero,a674 <__pack_d+0x2b8>
    a65c:	3a45883a 	add	r2,r7,r9
    a660:	11cd803a 	cmpltu	r6,r2,r7
    a664:	320d883a 	add	r6,r6,r8
    a668:	100f883a 	mov	r7,r2
    a66c:	3011883a 	mov	r8,r6
    a670:	0007883a 	mov	r3,zero
    a674:	00840034 	movhi	r2,4096
    a678:	10bfffc4 	addi	r2,r2,-1
    a67c:	123fe52e 	bgeu	r2,r8,a614 <__pack_d+0x258>
    a680:	00c00044 	movi	r3,1
    a684:	003fe306 	br	a614 <__pack_d+0x258>
    a688:	0009883a 	mov	r4,zero
    a68c:	0013883a 	mov	r9,zero
    a690:	000b883a 	mov	r5,zero
    a694:	003fe406 	br	a628 <__pack_d+0x26c>
    a698:	4a47883a 	add	r3,r9,r9
    a69c:	008007c4 	movi	r2,31
    a6a0:	1105c83a 	sub	r2,r2,r4
    a6a4:	1886983a 	sll	r3,r3,r2
    a6a8:	4118d83a 	srl	r12,r8,r4
    a6ac:	491ad83a 	srl	r13,r9,r4
    a6b0:	1b18b03a 	or	r12,r3,r12
    a6b4:	003fb506 	br	a58c <__pack_d+0x1d0>
    a6b8:	2806d07a 	srli	r3,r5,1
    a6bc:	008007c4 	movi	r2,31
    a6c0:	1105c83a 	sub	r2,r2,r4
    a6c4:	1896d83a 	srl	r11,r3,r2
    a6c8:	2914983a 	sll	r10,r5,r4
    a6cc:	003fb506 	br	a5a4 <__pack_d+0x1e8>

0000a6d0 <__unpack_d>:
    a6d0:	20c00117 	ldw	r3,4(r4)
    a6d4:	22400017 	ldw	r9,0(r4)
    a6d8:	00800434 	movhi	r2,16
    a6dc:	10bfffc4 	addi	r2,r2,-1
    a6e0:	1808d53a 	srli	r4,r3,20
    a6e4:	180cd7fa 	srli	r6,r3,31
    a6e8:	1894703a 	and	r10,r3,r2
    a6ec:	2201ffcc 	andi	r8,r4,2047
    a6f0:	281b883a 	mov	r13,r5
    a6f4:	4817883a 	mov	r11,r9
    a6f8:	29800115 	stw	r6,4(r5)
    a6fc:	5019883a 	mov	r12,r10
    a700:	40001e1e 	bne	r8,zero,a77c <__unpack_d+0xac>
    a704:	4a84b03a 	or	r2,r9,r10
    a708:	10001926 	beq	r2,zero,a770 <__unpack_d+0xa0>
    a70c:	4804d63a 	srli	r2,r9,24
    a710:	500c923a 	slli	r6,r10,8
    a714:	013f0084 	movi	r4,-1022
    a718:	00c40034 	movhi	r3,4096
    a71c:	18ffffc4 	addi	r3,r3,-1
    a720:	118cb03a 	or	r6,r2,r6
    a724:	008000c4 	movi	r2,3
    a728:	480a923a 	slli	r5,r9,8
    a72c:	68800015 	stw	r2,0(r13)
    a730:	69000215 	stw	r4,8(r13)
    a734:	19800b36 	bltu	r3,r6,a764 <__unpack_d+0x94>
    a738:	200f883a 	mov	r7,r4
    a73c:	1811883a 	mov	r8,r3
    a740:	2945883a 	add	r2,r5,r5
    a744:	1149803a 	cmpltu	r4,r2,r5
    a748:	3187883a 	add	r3,r6,r6
    a74c:	20c9883a 	add	r4,r4,r3
    a750:	100b883a 	mov	r5,r2
    a754:	200d883a 	mov	r6,r4
    a758:	39ffffc4 	addi	r7,r7,-1
    a75c:	413ff82e 	bgeu	r8,r4,a740 <__unpack_d+0x70>
    a760:	69c00215 	stw	r7,8(r13)
    a764:	69800415 	stw	r6,16(r13)
    a768:	69400315 	stw	r5,12(r13)
    a76c:	f800283a 	ret
    a770:	00800084 	movi	r2,2
    a774:	28800015 	stw	r2,0(r5)
    a778:	f800283a 	ret
    a77c:	0081ffc4 	movi	r2,2047
    a780:	40800f26 	beq	r8,r2,a7c0 <__unpack_d+0xf0>
    a784:	480cd63a 	srli	r6,r9,24
    a788:	5006923a 	slli	r3,r10,8
    a78c:	4804923a 	slli	r2,r9,8
    a790:	0009883a 	mov	r4,zero
    a794:	30c6b03a 	or	r3,r6,r3
    a798:	01440034 	movhi	r5,4096
    a79c:	110cb03a 	or	r6,r2,r4
    a7a0:	423f0044 	addi	r8,r8,-1023
    a7a4:	194eb03a 	or	r7,r3,r5
    a7a8:	008000c4 	movi	r2,3
    a7ac:	69c00415 	stw	r7,16(r13)
    a7b0:	6a000215 	stw	r8,8(r13)
    a7b4:	68800015 	stw	r2,0(r13)
    a7b8:	69800315 	stw	r6,12(r13)
    a7bc:	f800283a 	ret
    a7c0:	4a84b03a 	or	r2,r9,r10
    a7c4:	1000031e 	bne	r2,zero,a7d4 <__unpack_d+0x104>
    a7c8:	00800104 	movi	r2,4
    a7cc:	28800015 	stw	r2,0(r5)
    a7d0:	f800283a 	ret
    a7d4:	0009883a 	mov	r4,zero
    a7d8:	01400234 	movhi	r5,8
    a7dc:	4904703a 	and	r2,r9,r4
    a7e0:	5146703a 	and	r3,r10,r5
    a7e4:	10c4b03a 	or	r2,r2,r3
    a7e8:	10000526 	beq	r2,zero,a800 <__unpack_d+0x130>
    a7ec:	00800044 	movi	r2,1
    a7f0:	68800015 	stw	r2,0(r13)
    a7f4:	6b000415 	stw	r12,16(r13)
    a7f8:	6ac00315 	stw	r11,12(r13)
    a7fc:	f800283a 	ret
    a800:	68000015 	stw	zero,0(r13)
    a804:	003ffb06 	br	a7f4 <__unpack_d+0x124>

0000a808 <__fpcmp_parts_d>:
    a808:	21800017 	ldw	r6,0(r4)
    a80c:	00c00044 	movi	r3,1
    a810:	19800a2e 	bgeu	r3,r6,a83c <__fpcmp_parts_d+0x34>
    a814:	28800017 	ldw	r2,0(r5)
    a818:	1880082e 	bgeu	r3,r2,a83c <__fpcmp_parts_d+0x34>
    a81c:	00c00104 	movi	r3,4
    a820:	30c02626 	beq	r6,r3,a8bc <__fpcmp_parts_d+0xb4>
    a824:	10c02226 	beq	r2,r3,a8b0 <__fpcmp_parts_d+0xa8>
    a828:	00c00084 	movi	r3,2
    a82c:	30c00526 	beq	r6,r3,a844 <__fpcmp_parts_d+0x3c>
    a830:	10c0071e 	bne	r2,r3,a850 <__fpcmp_parts_d+0x48>
    a834:	20800117 	ldw	r2,4(r4)
    a838:	1000091e 	bne	r2,zero,a860 <__fpcmp_parts_d+0x58>
    a83c:	00800044 	movi	r2,1
    a840:	f800283a 	ret
    a844:	10c01a1e 	bne	r2,r3,a8b0 <__fpcmp_parts_d+0xa8>
    a848:	0005883a 	mov	r2,zero
    a84c:	f800283a 	ret
    a850:	22000117 	ldw	r8,4(r4)
    a854:	28800117 	ldw	r2,4(r5)
    a858:	40800326 	beq	r8,r2,a868 <__fpcmp_parts_d+0x60>
    a85c:	403ff726 	beq	r8,zero,a83c <__fpcmp_parts_d+0x34>
    a860:	00bfffc4 	movi	r2,-1
    a864:	f800283a 	ret
    a868:	20c00217 	ldw	r3,8(r4)
    a86c:	28800217 	ldw	r2,8(r5)
    a870:	10fffa16 	blt	r2,r3,a85c <__fpcmp_parts_d+0x54>
    a874:	18800916 	blt	r3,r2,a89c <__fpcmp_parts_d+0x94>
    a878:	21c00417 	ldw	r7,16(r4)
    a87c:	28c00417 	ldw	r3,16(r5)
    a880:	21800317 	ldw	r6,12(r4)
    a884:	28800317 	ldw	r2,12(r5)
    a888:	19fff436 	bltu	r3,r7,a85c <__fpcmp_parts_d+0x54>
    a88c:	38c00526 	beq	r7,r3,a8a4 <__fpcmp_parts_d+0x9c>
    a890:	38c00236 	bltu	r7,r3,a89c <__fpcmp_parts_d+0x94>
    a894:	19ffec1e 	bne	r3,r7,a848 <__fpcmp_parts_d+0x40>
    a898:	30bfeb2e 	bgeu	r6,r2,a848 <__fpcmp_parts_d+0x40>
    a89c:	403fe71e 	bne	r8,zero,a83c <__fpcmp_parts_d+0x34>
    a8a0:	003fef06 	br	a860 <__fpcmp_parts_d+0x58>
    a8a4:	11bffa2e 	bgeu	r2,r6,a890 <__fpcmp_parts_d+0x88>
    a8a8:	403fe426 	beq	r8,zero,a83c <__fpcmp_parts_d+0x34>
    a8ac:	003fec06 	br	a860 <__fpcmp_parts_d+0x58>
    a8b0:	28800117 	ldw	r2,4(r5)
    a8b4:	103fe11e 	bne	r2,zero,a83c <__fpcmp_parts_d+0x34>
    a8b8:	003fe906 	br	a860 <__fpcmp_parts_d+0x58>
    a8bc:	11bfdd1e 	bne	r2,r6,a834 <__fpcmp_parts_d+0x2c>
    a8c0:	28c00117 	ldw	r3,4(r5)
    a8c4:	20800117 	ldw	r2,4(r4)
    a8c8:	1885c83a 	sub	r2,r3,r2
    a8cc:	f800283a 	ret

0000a8d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a8d0:	defff804 	addi	sp,sp,-32
    a8d4:	dfc00715 	stw	ra,28(sp)
    a8d8:	df000615 	stw	fp,24(sp)
    a8dc:	df000604 	addi	fp,sp,24
    a8e0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a8e4:	e0bffc17 	ldw	r2,-16(fp)
    a8e8:	1004803a 	cmplt	r2,r2,zero
    a8ec:	1000081e 	bne	r2,zero,a910 <close+0x40>
    a8f0:	e0bffc17 	ldw	r2,-16(fp)
    a8f4:	10800324 	muli	r2,r2,12
    a8f8:	1007883a 	mov	r3,r2
    a8fc:	00800074 	movhi	r2,1
    a900:	10bf3304 	addi	r2,r2,-820
    a904:	1887883a 	add	r3,r3,r2
    a908:	e0ffff15 	stw	r3,-4(fp)
    a90c:	00000106 	br	a914 <close+0x44>
    a910:	e03fff15 	stw	zero,-4(fp)
    a914:	e0bfff17 	ldw	r2,-4(fp)
    a918:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    a91c:	e0bffb17 	ldw	r2,-20(fp)
    a920:	1005003a 	cmpeq	r2,r2,zero
    a924:	10001d1e 	bne	r2,zero,a99c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a928:	e0bffb17 	ldw	r2,-20(fp)
    a92c:	10800017 	ldw	r2,0(r2)
    a930:	10800417 	ldw	r2,16(r2)
    a934:	1005003a 	cmpeq	r2,r2,zero
    a938:	1000071e 	bne	r2,zero,a958 <close+0x88>
    a93c:	e0bffb17 	ldw	r2,-20(fp)
    a940:	10800017 	ldw	r2,0(r2)
    a944:	10800417 	ldw	r2,16(r2)
    a948:	e13ffb17 	ldw	r4,-20(fp)
    a94c:	103ee83a 	callr	r2
    a950:	e0bffe15 	stw	r2,-8(fp)
    a954:	00000106 	br	a95c <close+0x8c>
    a958:	e03ffe15 	stw	zero,-8(fp)
    a95c:	e0bffe17 	ldw	r2,-8(fp)
    a960:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a964:	e13ffc17 	ldw	r4,-16(fp)
    a968:	000b1580 	call	b158 <alt_release_fd>
    if (rval < 0)
    a96c:	e0bffa17 	ldw	r2,-24(fp)
    a970:	1004403a 	cmpge	r2,r2,zero
    a974:	1000071e 	bne	r2,zero,a994 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    a978:	000a9cc0 	call	a9cc <alt_get_errno>
    a97c:	e0fffa17 	ldw	r3,-24(fp)
    a980:	00c7c83a 	sub	r3,zero,r3
    a984:	10c00015 	stw	r3,0(r2)
      return -1;
    a988:	00bfffc4 	movi	r2,-1
    a98c:	e0bffd15 	stw	r2,-12(fp)
    a990:	00000806 	br	a9b4 <close+0xe4>
    }
    return 0;
    a994:	e03ffd15 	stw	zero,-12(fp)
    a998:	00000606 	br	a9b4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a99c:	000a9cc0 	call	a9cc <alt_get_errno>
    a9a0:	1007883a 	mov	r3,r2
    a9a4:	00801444 	movi	r2,81
    a9a8:	18800015 	stw	r2,0(r3)
    return -1;
    a9ac:	00bfffc4 	movi	r2,-1
    a9b0:	e0bffd15 	stw	r2,-12(fp)
    a9b4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    a9b8:	e037883a 	mov	sp,fp
    a9bc:	dfc00117 	ldw	ra,4(sp)
    a9c0:	df000017 	ldw	fp,0(sp)
    a9c4:	dec00204 	addi	sp,sp,8
    a9c8:	f800283a 	ret

0000a9cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a9cc:	defffd04 	addi	sp,sp,-12
    a9d0:	dfc00215 	stw	ra,8(sp)
    a9d4:	df000115 	stw	fp,4(sp)
    a9d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a9dc:	00800074 	movhi	r2,1
    a9e0:	10840b04 	addi	r2,r2,4140
    a9e4:	10800017 	ldw	r2,0(r2)
    a9e8:	1005003a 	cmpeq	r2,r2,zero
    a9ec:	1000061e 	bne	r2,zero,aa08 <alt_get_errno+0x3c>
    a9f0:	00800074 	movhi	r2,1
    a9f4:	10840b04 	addi	r2,r2,4140
    a9f8:	10800017 	ldw	r2,0(r2)
    a9fc:	103ee83a 	callr	r2
    aa00:	e0bfff15 	stw	r2,-4(fp)
    aa04:	00000306 	br	aa14 <alt_get_errno+0x48>
    aa08:	00800074 	movhi	r2,1
    aa0c:	108b0404 	addi	r2,r2,11280
    aa10:	e0bfff15 	stw	r2,-4(fp)
    aa14:	e0bfff17 	ldw	r2,-4(fp)
}
    aa18:	e037883a 	mov	sp,fp
    aa1c:	dfc00117 	ldw	ra,4(sp)
    aa20:	df000017 	ldw	fp,0(sp)
    aa24:	dec00204 	addi	sp,sp,8
    aa28:	f800283a 	ret

0000aa2c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    aa2c:	defffe04 	addi	sp,sp,-8
    aa30:	df000115 	stw	fp,4(sp)
    aa34:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    aa38:	e03fff15 	stw	zero,-4(fp)
    aa3c:	00000506 	br	aa54 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    aa40:	e0bfff17 	ldw	r2,-4(fp)
    aa44:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    aa48:	e0bfff17 	ldw	r2,-4(fp)
    aa4c:	10800804 	addi	r2,r2,32
    aa50:	e0bfff15 	stw	r2,-4(fp)
    aa54:	e0bfff17 	ldw	r2,-4(fp)
    aa58:	10820030 	cmpltui	r2,r2,2048
    aa5c:	103ff81e 	bne	r2,zero,aa40 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    aa60:	e037883a 	mov	sp,fp
    aa64:	df000017 	ldw	fp,0(sp)
    aa68:	dec00104 	addi	sp,sp,4
    aa6c:	f800283a 	ret

0000aa70 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    aa70:	defffc04 	addi	sp,sp,-16
    aa74:	df000315 	stw	fp,12(sp)
    aa78:	df000304 	addi	fp,sp,12
    aa7c:	e13ffd15 	stw	r4,-12(fp)
    aa80:	e17ffe15 	stw	r5,-8(fp)
    aa84:	e1bfff15 	stw	r6,-4(fp)
  return len;
    aa88:	e0bfff17 	ldw	r2,-4(fp)
}
    aa8c:	e037883a 	mov	sp,fp
    aa90:	df000017 	ldw	fp,0(sp)
    aa94:	dec00104 	addi	sp,sp,4
    aa98:	f800283a 	ret

0000aa9c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    aa9c:	defff904 	addi	sp,sp,-28
    aaa0:	dfc00615 	stw	ra,24(sp)
    aaa4:	df000515 	stw	fp,20(sp)
    aaa8:	df000504 	addi	fp,sp,20
    aaac:	e13ffc15 	stw	r4,-16(fp)
    aab0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    aab4:	e0bffc17 	ldw	r2,-16(fp)
    aab8:	1004803a 	cmplt	r2,r2,zero
    aabc:	1000081e 	bne	r2,zero,aae0 <fstat+0x44>
    aac0:	e0bffc17 	ldw	r2,-16(fp)
    aac4:	10800324 	muli	r2,r2,12
    aac8:	1007883a 	mov	r3,r2
    aacc:	00800074 	movhi	r2,1
    aad0:	10bf3304 	addi	r2,r2,-820
    aad4:	1887883a 	add	r3,r3,r2
    aad8:	e0ffff15 	stw	r3,-4(fp)
    aadc:	00000106 	br	aae4 <fstat+0x48>
    aae0:	e03fff15 	stw	zero,-4(fp)
    aae4:	e0bfff17 	ldw	r2,-4(fp)
    aae8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    aaec:	e0bffb17 	ldw	r2,-20(fp)
    aaf0:	1005003a 	cmpeq	r2,r2,zero
    aaf4:	1000121e 	bne	r2,zero,ab40 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    aaf8:	e0bffb17 	ldw	r2,-20(fp)
    aafc:	10800017 	ldw	r2,0(r2)
    ab00:	10800817 	ldw	r2,32(r2)
    ab04:	1005003a 	cmpeq	r2,r2,zero
    ab08:	1000081e 	bne	r2,zero,ab2c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    ab0c:	e0bffb17 	ldw	r2,-20(fp)
    ab10:	10800017 	ldw	r2,0(r2)
    ab14:	10800817 	ldw	r2,32(r2)
    ab18:	e13ffb17 	ldw	r4,-20(fp)
    ab1c:	e17ffd17 	ldw	r5,-12(fp)
    ab20:	103ee83a 	callr	r2
    ab24:	e0bffe15 	stw	r2,-8(fp)
    ab28:	00000b06 	br	ab58 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ab2c:	e0fffd17 	ldw	r3,-12(fp)
    ab30:	00880004 	movi	r2,8192
    ab34:	18800115 	stw	r2,4(r3)
      return 0;
    ab38:	e03ffe15 	stw	zero,-8(fp)
    ab3c:	00000606 	br	ab58 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ab40:	000ab700 	call	ab70 <alt_get_errno>
    ab44:	1007883a 	mov	r3,r2
    ab48:	00801444 	movi	r2,81
    ab4c:	18800015 	stw	r2,0(r3)
    return -1;
    ab50:	00bfffc4 	movi	r2,-1
    ab54:	e0bffe15 	stw	r2,-8(fp)
    ab58:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    ab5c:	e037883a 	mov	sp,fp
    ab60:	dfc00117 	ldw	ra,4(sp)
    ab64:	df000017 	ldw	fp,0(sp)
    ab68:	dec00204 	addi	sp,sp,8
    ab6c:	f800283a 	ret

0000ab70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ab70:	defffd04 	addi	sp,sp,-12
    ab74:	dfc00215 	stw	ra,8(sp)
    ab78:	df000115 	stw	fp,4(sp)
    ab7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ab80:	00800074 	movhi	r2,1
    ab84:	10840b04 	addi	r2,r2,4140
    ab88:	10800017 	ldw	r2,0(r2)
    ab8c:	1005003a 	cmpeq	r2,r2,zero
    ab90:	1000061e 	bne	r2,zero,abac <alt_get_errno+0x3c>
    ab94:	00800074 	movhi	r2,1
    ab98:	10840b04 	addi	r2,r2,4140
    ab9c:	10800017 	ldw	r2,0(r2)
    aba0:	103ee83a 	callr	r2
    aba4:	e0bfff15 	stw	r2,-4(fp)
    aba8:	00000306 	br	abb8 <alt_get_errno+0x48>
    abac:	00800074 	movhi	r2,1
    abb0:	108b0404 	addi	r2,r2,11280
    abb4:	e0bfff15 	stw	r2,-4(fp)
    abb8:	e0bfff17 	ldw	r2,-4(fp)
}
    abbc:	e037883a 	mov	sp,fp
    abc0:	dfc00117 	ldw	ra,4(sp)
    abc4:	df000017 	ldw	fp,0(sp)
    abc8:	dec00204 	addi	sp,sp,8
    abcc:	f800283a 	ret

0000abd0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    abd0:	deffeb04 	addi	sp,sp,-84
    abd4:	dfc01415 	stw	ra,80(sp)
    abd8:	df001315 	stw	fp,76(sp)
    abdc:	df001304 	addi	fp,sp,76
    abe0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    abe4:	e0bffd17 	ldw	r2,-12(fp)
    abe8:	1004803a 	cmplt	r2,r2,zero
    abec:	1000081e 	bne	r2,zero,ac10 <isatty+0x40>
    abf0:	e0bffd17 	ldw	r2,-12(fp)
    abf4:	10800324 	muli	r2,r2,12
    abf8:	1007883a 	mov	r3,r2
    abfc:	00800074 	movhi	r2,1
    ac00:	10bf3304 	addi	r2,r2,-820
    ac04:	1887883a 	add	r3,r3,r2
    ac08:	e0ffff15 	stw	r3,-4(fp)
    ac0c:	00000106 	br	ac14 <isatty+0x44>
    ac10:	e03fff15 	stw	zero,-4(fp)
    ac14:	e0bfff17 	ldw	r2,-4(fp)
    ac18:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    ac1c:	e0bfed17 	ldw	r2,-76(fp)
    ac20:	1005003a 	cmpeq	r2,r2,zero
    ac24:	10000f1e 	bne	r2,zero,ac64 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ac28:	e0bfed17 	ldw	r2,-76(fp)
    ac2c:	10800017 	ldw	r2,0(r2)
    ac30:	10800817 	ldw	r2,32(r2)
    ac34:	1004c03a 	cmpne	r2,r2,zero
    ac38:	1000031e 	bne	r2,zero,ac48 <isatty+0x78>
    {
      return 1;
    ac3c:	00800044 	movi	r2,1
    ac40:	e0bffe15 	stw	r2,-8(fp)
    ac44:	00000c06 	br	ac78 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ac48:	e17fee04 	addi	r5,fp,-72
    ac4c:	e13ffd17 	ldw	r4,-12(fp)
    ac50:	000aa9c0 	call	aa9c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ac54:	e0bfef17 	ldw	r2,-68(fp)
    ac58:	10880020 	cmpeqi	r2,r2,8192
    ac5c:	e0bffe15 	stw	r2,-8(fp)
    ac60:	00000506 	br	ac78 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ac64:	000ac900 	call	ac90 <alt_get_errno>
    ac68:	1007883a 	mov	r3,r2
    ac6c:	00801444 	movi	r2,81
    ac70:	18800015 	stw	r2,0(r3)
    return 0;
    ac74:	e03ffe15 	stw	zero,-8(fp)
    ac78:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    ac7c:	e037883a 	mov	sp,fp
    ac80:	dfc00117 	ldw	ra,4(sp)
    ac84:	df000017 	ldw	fp,0(sp)
    ac88:	dec00204 	addi	sp,sp,8
    ac8c:	f800283a 	ret

0000ac90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ac90:	defffd04 	addi	sp,sp,-12
    ac94:	dfc00215 	stw	ra,8(sp)
    ac98:	df000115 	stw	fp,4(sp)
    ac9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    aca0:	00800074 	movhi	r2,1
    aca4:	10840b04 	addi	r2,r2,4140
    aca8:	10800017 	ldw	r2,0(r2)
    acac:	1005003a 	cmpeq	r2,r2,zero
    acb0:	1000061e 	bne	r2,zero,accc <alt_get_errno+0x3c>
    acb4:	00800074 	movhi	r2,1
    acb8:	10840b04 	addi	r2,r2,4140
    acbc:	10800017 	ldw	r2,0(r2)
    acc0:	103ee83a 	callr	r2
    acc4:	e0bfff15 	stw	r2,-4(fp)
    acc8:	00000306 	br	acd8 <alt_get_errno+0x48>
    accc:	00800074 	movhi	r2,1
    acd0:	108b0404 	addi	r2,r2,11280
    acd4:	e0bfff15 	stw	r2,-4(fp)
    acd8:	e0bfff17 	ldw	r2,-4(fp)
}
    acdc:	e037883a 	mov	sp,fp
    ace0:	dfc00117 	ldw	ra,4(sp)
    ace4:	df000017 	ldw	fp,0(sp)
    ace8:	dec00204 	addi	sp,sp,8
    acec:	f800283a 	ret

0000acf0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    acf0:	defffe04 	addi	sp,sp,-8
    acf4:	dfc00115 	stw	ra,4(sp)
    acf8:	df000015 	stw	fp,0(sp)
    acfc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ad00:	01000074 	movhi	r4,1
    ad04:	21041204 	addi	r4,r4,4168
    ad08:	01400074 	movhi	r5,1
    ad0c:	297d2404 	addi	r5,r5,-2928
    ad10:	01800074 	movhi	r6,1
    ad14:	31841204 	addi	r6,r6,4168
    ad18:	000ad700 	call	ad70 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ad1c:	01000034 	movhi	r4,0
    ad20:	21000804 	addi	r4,r4,32
    ad24:	01400034 	movhi	r5,0
    ad28:	29400804 	addi	r5,r5,32
    ad2c:	01800034 	movhi	r6,0
    ad30:	31806d04 	addi	r6,r6,436
    ad34:	000ad700 	call	ad70 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ad38:	01000074 	movhi	r4,1
    ad3c:	213ae704 	addi	r4,r4,-5220
    ad40:	01400074 	movhi	r5,1
    ad44:	297ae704 	addi	r5,r5,-5220
    ad48:	01800074 	movhi	r6,1
    ad4c:	31bd2404 	addi	r6,r6,-2928
    ad50:	000ad700 	call	ad70 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ad54:	000aa2c0 	call	aa2c <alt_dcache_flush_all>
  alt_icache_flush_all();
    ad58:	000db440 	call	db44 <alt_icache_flush_all>
}
    ad5c:	e037883a 	mov	sp,fp
    ad60:	dfc00117 	ldw	ra,4(sp)
    ad64:	df000017 	ldw	fp,0(sp)
    ad68:	dec00204 	addi	sp,sp,8
    ad6c:	f800283a 	ret

0000ad70 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ad70:	defffc04 	addi	sp,sp,-16
    ad74:	df000315 	stw	fp,12(sp)
    ad78:	df000304 	addi	fp,sp,12
    ad7c:	e13ffd15 	stw	r4,-12(fp)
    ad80:	e17ffe15 	stw	r5,-8(fp)
    ad84:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ad88:	e0fffe17 	ldw	r3,-8(fp)
    ad8c:	e0bffd17 	ldw	r2,-12(fp)
    ad90:	18800e26 	beq	r3,r2,adcc <alt_load_section+0x5c>
  {
    while( to != end )
    ad94:	00000a06 	br	adc0 <alt_load_section+0x50>
    {
      *to++ = *from++;
    ad98:	e0bffd17 	ldw	r2,-12(fp)
    ad9c:	10c00017 	ldw	r3,0(r2)
    ada0:	e0bffe17 	ldw	r2,-8(fp)
    ada4:	10c00015 	stw	r3,0(r2)
    ada8:	e0bffe17 	ldw	r2,-8(fp)
    adac:	10800104 	addi	r2,r2,4
    adb0:	e0bffe15 	stw	r2,-8(fp)
    adb4:	e0bffd17 	ldw	r2,-12(fp)
    adb8:	10800104 	addi	r2,r2,4
    adbc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    adc0:	e0fffe17 	ldw	r3,-8(fp)
    adc4:	e0bfff17 	ldw	r2,-4(fp)
    adc8:	18bff31e 	bne	r3,r2,ad98 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    adcc:	e037883a 	mov	sp,fp
    add0:	df000017 	ldw	fp,0(sp)
    add4:	dec00104 	addi	sp,sp,4
    add8:	f800283a 	ret

0000addc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    addc:	defff804 	addi	sp,sp,-32
    ade0:	dfc00715 	stw	ra,28(sp)
    ade4:	df000615 	stw	fp,24(sp)
    ade8:	df000604 	addi	fp,sp,24
    adec:	e13ffc15 	stw	r4,-16(fp)
    adf0:	e17ffd15 	stw	r5,-12(fp)
    adf4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    adf8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    adfc:	e0bffc17 	ldw	r2,-16(fp)
    ae00:	1004803a 	cmplt	r2,r2,zero
    ae04:	1000081e 	bne	r2,zero,ae28 <lseek+0x4c>
    ae08:	e0bffc17 	ldw	r2,-16(fp)
    ae0c:	10800324 	muli	r2,r2,12
    ae10:	1007883a 	mov	r3,r2
    ae14:	00800074 	movhi	r2,1
    ae18:	10bf3304 	addi	r2,r2,-820
    ae1c:	1887883a 	add	r3,r3,r2
    ae20:	e0ffff15 	stw	r3,-4(fp)
    ae24:	00000106 	br	ae2c <lseek+0x50>
    ae28:	e03fff15 	stw	zero,-4(fp)
    ae2c:	e0bfff17 	ldw	r2,-4(fp)
    ae30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    ae34:	e0bffb17 	ldw	r2,-20(fp)
    ae38:	1005003a 	cmpeq	r2,r2,zero
    ae3c:	1000111e 	bne	r2,zero,ae84 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ae40:	e0bffb17 	ldw	r2,-20(fp)
    ae44:	10800017 	ldw	r2,0(r2)
    ae48:	10800717 	ldw	r2,28(r2)
    ae4c:	1005003a 	cmpeq	r2,r2,zero
    ae50:	1000091e 	bne	r2,zero,ae78 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ae54:	e0bffb17 	ldw	r2,-20(fp)
    ae58:	10800017 	ldw	r2,0(r2)
    ae5c:	10800717 	ldw	r2,28(r2)
    ae60:	e13ffb17 	ldw	r4,-20(fp)
    ae64:	e17ffd17 	ldw	r5,-12(fp)
    ae68:	e1bffe17 	ldw	r6,-8(fp)
    ae6c:	103ee83a 	callr	r2
    ae70:	e0bffa15 	stw	r2,-24(fp)
    ae74:	00000506 	br	ae8c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ae78:	00bfde84 	movi	r2,-134
    ae7c:	e0bffa15 	stw	r2,-24(fp)
    ae80:	00000206 	br	ae8c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    ae84:	00bfebc4 	movi	r2,-81
    ae88:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    ae8c:	e0bffa17 	ldw	r2,-24(fp)
    ae90:	1004403a 	cmpge	r2,r2,zero
    ae94:	1000071e 	bne	r2,zero,aeb4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    ae98:	000aecc0 	call	aecc <alt_get_errno>
    ae9c:	1007883a 	mov	r3,r2
    aea0:	e0bffa17 	ldw	r2,-24(fp)
    aea4:	0085c83a 	sub	r2,zero,r2
    aea8:	18800015 	stw	r2,0(r3)
    rc = -1;
    aeac:	00bfffc4 	movi	r2,-1
    aeb0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    aeb4:	e0bffa17 	ldw	r2,-24(fp)
}
    aeb8:	e037883a 	mov	sp,fp
    aebc:	dfc00117 	ldw	ra,4(sp)
    aec0:	df000017 	ldw	fp,0(sp)
    aec4:	dec00204 	addi	sp,sp,8
    aec8:	f800283a 	ret

0000aecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aecc:	defffd04 	addi	sp,sp,-12
    aed0:	dfc00215 	stw	ra,8(sp)
    aed4:	df000115 	stw	fp,4(sp)
    aed8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    aedc:	00800074 	movhi	r2,1
    aee0:	10840b04 	addi	r2,r2,4140
    aee4:	10800017 	ldw	r2,0(r2)
    aee8:	1005003a 	cmpeq	r2,r2,zero
    aeec:	1000061e 	bne	r2,zero,af08 <alt_get_errno+0x3c>
    aef0:	00800074 	movhi	r2,1
    aef4:	10840b04 	addi	r2,r2,4140
    aef8:	10800017 	ldw	r2,0(r2)
    aefc:	103ee83a 	callr	r2
    af00:	e0bfff15 	stw	r2,-4(fp)
    af04:	00000306 	br	af14 <alt_get_errno+0x48>
    af08:	00800074 	movhi	r2,1
    af0c:	108b0404 	addi	r2,r2,11280
    af10:	e0bfff15 	stw	r2,-4(fp)
    af14:	e0bfff17 	ldw	r2,-4(fp)
}
    af18:	e037883a 	mov	sp,fp
    af1c:	dfc00117 	ldw	ra,4(sp)
    af20:	df000017 	ldw	fp,0(sp)
    af24:	dec00204 	addi	sp,sp,8
    af28:	f800283a 	ret

0000af2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    af2c:	defffd04 	addi	sp,sp,-12
    af30:	dfc00215 	stw	ra,8(sp)
    af34:	df000115 	stw	fp,4(sp)
    af38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    af3c:	0009883a 	mov	r4,zero
    af40:	000b3f40 	call	b3f4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    af44:	000b4280 	call	b428 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    af48:	01000074 	movhi	r4,1
    af4c:	213d0904 	addi	r4,r4,-3036
    af50:	01400074 	movhi	r5,1
    af54:	297d0904 	addi	r5,r5,-3036
    af58:	01800074 	movhi	r6,1
    af5c:	31bd0904 	addi	r6,r6,-3036
    af60:	000df040 	call	df04 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    af64:	000d9e80 	call	d9e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    af68:	01000074 	movhi	r4,1
    af6c:	21369304 	addi	r4,r4,-9652
    af70:	000e7240 	call	e724 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    af74:	d1270817 	ldw	r4,-25568(gp)
    af78:	d1670917 	ldw	r5,-25564(gp)
    af7c:	d1a70a17 	ldw	r6,-25560(gp)
    af80:	00008ac0 	call	8ac <main>
    af84:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    af88:	01000044 	movi	r4,1
    af8c:	000a8d00 	call	a8d0 <close>
  exit (result);
    af90:	e13fff17 	ldw	r4,-4(fp)
    af94:	000e7380 	call	e738 <exit>

0000af98 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    af98:	defffe04 	addi	sp,sp,-8
    af9c:	df000115 	stw	fp,4(sp)
    afa0:	df000104 	addi	fp,sp,4
    afa4:	e13fff15 	stw	r4,-4(fp)
}
    afa8:	e037883a 	mov	sp,fp
    afac:	df000017 	ldw	fp,0(sp)
    afb0:	dec00104 	addi	sp,sp,4
    afb4:	f800283a 	ret

0000afb8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    afb8:	defffe04 	addi	sp,sp,-8
    afbc:	df000115 	stw	fp,4(sp)
    afc0:	df000104 	addi	fp,sp,4
    afc4:	e13fff15 	stw	r4,-4(fp)
}
    afc8:	e037883a 	mov	sp,fp
    afcc:	df000017 	ldw	fp,0(sp)
    afd0:	dec00104 	addi	sp,sp,4
    afd4:	f800283a 	ret

0000afd8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    afd8:	defff704 	addi	sp,sp,-36
    afdc:	dfc00815 	stw	ra,32(sp)
    afe0:	df000715 	stw	fp,28(sp)
    afe4:	df000704 	addi	fp,sp,28
    afe8:	e13ffb15 	stw	r4,-20(fp)
    afec:	e17ffc15 	stw	r5,-16(fp)
    aff0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    aff4:	e0bffb17 	ldw	r2,-20(fp)
    aff8:	1004803a 	cmplt	r2,r2,zero
    affc:	1000081e 	bne	r2,zero,b020 <read+0x48>
    b000:	e0bffb17 	ldw	r2,-20(fp)
    b004:	10800324 	muli	r2,r2,12
    b008:	1007883a 	mov	r3,r2
    b00c:	00800074 	movhi	r2,1
    b010:	10bf3304 	addi	r2,r2,-820
    b014:	1887883a 	add	r3,r3,r2
    b018:	e0ffff15 	stw	r3,-4(fp)
    b01c:	00000106 	br	b024 <read+0x4c>
    b020:	e03fff15 	stw	zero,-4(fp)
    b024:	e0bfff17 	ldw	r2,-4(fp)
    b028:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b02c:	e0bffa17 	ldw	r2,-24(fp)
    b030:	1005003a 	cmpeq	r2,r2,zero
    b034:	1000241e 	bne	r2,zero,b0c8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b038:	e0bffa17 	ldw	r2,-24(fp)
    b03c:	10800217 	ldw	r2,8(r2)
    b040:	108000cc 	andi	r2,r2,3
    b044:	10800060 	cmpeqi	r2,r2,1
    b048:	10001a1e 	bne	r2,zero,b0b4 <read+0xdc>
    b04c:	e0bffa17 	ldw	r2,-24(fp)
    b050:	10800017 	ldw	r2,0(r2)
    b054:	10800517 	ldw	r2,20(r2)
    b058:	1005003a 	cmpeq	r2,r2,zero
    b05c:	1000151e 	bne	r2,zero,b0b4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b060:	e0bffa17 	ldw	r2,-24(fp)
    b064:	10800017 	ldw	r2,0(r2)
    b068:	10800517 	ldw	r2,20(r2)
    b06c:	e17ffc17 	ldw	r5,-16(fp)
    b070:	e1bffd17 	ldw	r6,-12(fp)
    b074:	e13ffa17 	ldw	r4,-24(fp)
    b078:	103ee83a 	callr	r2
    b07c:	e0bff915 	stw	r2,-28(fp)
    b080:	e0bff917 	ldw	r2,-28(fp)
    b084:	1004403a 	cmpge	r2,r2,zero
    b088:	1000071e 	bne	r2,zero,b0a8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    b08c:	000b0f80 	call	b0f8 <alt_get_errno>
    b090:	e0fff917 	ldw	r3,-28(fp)
    b094:	00c7c83a 	sub	r3,zero,r3
    b098:	10c00015 	stw	r3,0(r2)
          return -1;
    b09c:	00bfffc4 	movi	r2,-1
    b0a0:	e0bffe15 	stw	r2,-8(fp)
    b0a4:	00000e06 	br	b0e0 <read+0x108>
        }
        return rval;
    b0a8:	e0bff917 	ldw	r2,-28(fp)
    b0ac:	e0bffe15 	stw	r2,-8(fp)
    b0b0:	00000b06 	br	b0e0 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b0b4:	000b0f80 	call	b0f8 <alt_get_errno>
    b0b8:	1007883a 	mov	r3,r2
    b0bc:	00800344 	movi	r2,13
    b0c0:	18800015 	stw	r2,0(r3)
    b0c4:	00000406 	br	b0d8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b0c8:	000b0f80 	call	b0f8 <alt_get_errno>
    b0cc:	1007883a 	mov	r3,r2
    b0d0:	00801444 	movi	r2,81
    b0d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b0d8:	00bfffc4 	movi	r2,-1
    b0dc:	e0bffe15 	stw	r2,-8(fp)
    b0e0:	e0bffe17 	ldw	r2,-8(fp)
}
    b0e4:	e037883a 	mov	sp,fp
    b0e8:	dfc00117 	ldw	ra,4(sp)
    b0ec:	df000017 	ldw	fp,0(sp)
    b0f0:	dec00204 	addi	sp,sp,8
    b0f4:	f800283a 	ret

0000b0f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b0f8:	defffd04 	addi	sp,sp,-12
    b0fc:	dfc00215 	stw	ra,8(sp)
    b100:	df000115 	stw	fp,4(sp)
    b104:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b108:	00800074 	movhi	r2,1
    b10c:	10840b04 	addi	r2,r2,4140
    b110:	10800017 	ldw	r2,0(r2)
    b114:	1005003a 	cmpeq	r2,r2,zero
    b118:	1000061e 	bne	r2,zero,b134 <alt_get_errno+0x3c>
    b11c:	00800074 	movhi	r2,1
    b120:	10840b04 	addi	r2,r2,4140
    b124:	10800017 	ldw	r2,0(r2)
    b128:	103ee83a 	callr	r2
    b12c:	e0bfff15 	stw	r2,-4(fp)
    b130:	00000306 	br	b140 <alt_get_errno+0x48>
    b134:	00800074 	movhi	r2,1
    b138:	108b0404 	addi	r2,r2,11280
    b13c:	e0bfff15 	stw	r2,-4(fp)
    b140:	e0bfff17 	ldw	r2,-4(fp)
}
    b144:	e037883a 	mov	sp,fp
    b148:	dfc00117 	ldw	ra,4(sp)
    b14c:	df000017 	ldw	fp,0(sp)
    b150:	dec00204 	addi	sp,sp,8
    b154:	f800283a 	ret

0000b158 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b158:	defffe04 	addi	sp,sp,-8
    b15c:	df000115 	stw	fp,4(sp)
    b160:	df000104 	addi	fp,sp,4
    b164:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b168:	e0bfff17 	ldw	r2,-4(fp)
    b16c:	108000d0 	cmplti	r2,r2,3
    b170:	10000d1e 	bne	r2,zero,b1a8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    b174:	e0bfff17 	ldw	r2,-4(fp)
    b178:	00c00074 	movhi	r3,1
    b17c:	18ff3304 	addi	r3,r3,-820
    b180:	10800324 	muli	r2,r2,12
    b184:	10c5883a 	add	r2,r2,r3
    b188:	10800204 	addi	r2,r2,8
    b18c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b190:	e0bfff17 	ldw	r2,-4(fp)
    b194:	00c00074 	movhi	r3,1
    b198:	18ff3304 	addi	r3,r3,-820
    b19c:	10800324 	muli	r2,r2,12
    b1a0:	10c5883a 	add	r2,r2,r3
    b1a4:	10000015 	stw	zero,0(r2)
  }
}
    b1a8:	e037883a 	mov	sp,fp
    b1ac:	df000017 	ldw	fp,0(sp)
    b1b0:	dec00104 	addi	sp,sp,4
    b1b4:	f800283a 	ret

0000b1b8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b1b8:	defff804 	addi	sp,sp,-32
    b1bc:	df000715 	stw	fp,28(sp)
    b1c0:	df000704 	addi	fp,sp,28
    b1c4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b1c8:	0005303a 	rdctl	r2,status
    b1cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b1d0:	e0fffb17 	ldw	r3,-20(fp)
    b1d4:	00bfff84 	movi	r2,-2
    b1d8:	1884703a 	and	r2,r3,r2
    b1dc:	1001703a 	wrctl	status,r2
  
  return context;
    b1e0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b1e4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b1e8:	d0a00c17 	ldw	r2,-32720(gp)
    b1ec:	10c000c4 	addi	r3,r2,3
    b1f0:	00bfff04 	movi	r2,-4
    b1f4:	1884703a 	and	r2,r3,r2
    b1f8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b1fc:	d0e00c17 	ldw	r3,-32720(gp)
    b200:	e0bffe17 	ldw	r2,-8(fp)
    b204:	1887883a 	add	r3,r3,r2
    b208:	00808034 	movhi	r2,512
    b20c:	10800004 	addi	r2,r2,0
    b210:	10c0072e 	bgeu	r2,r3,b230 <sbrk+0x78>
    b214:	e0bffd17 	ldw	r2,-12(fp)
    b218:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b21c:	e0bffa17 	ldw	r2,-24(fp)
    b220:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b224:	00bfffc4 	movi	r2,-1
    b228:	e0bfff15 	stw	r2,-4(fp)
    b22c:	00000c06 	br	b260 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    b230:	d0a00c17 	ldw	r2,-32720(gp)
    b234:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    b238:	d0e00c17 	ldw	r3,-32720(gp)
    b23c:	e0bffe17 	ldw	r2,-8(fp)
    b240:	1885883a 	add	r2,r3,r2
    b244:	d0a00c15 	stw	r2,-32720(gp)
    b248:	e0bffd17 	ldw	r2,-12(fp)
    b24c:	e0bff915 	stw	r2,-28(fp)
    b250:	e0bff917 	ldw	r2,-28(fp)
    b254:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b258:	e0bffc17 	ldw	r2,-16(fp)
    b25c:	e0bfff15 	stw	r2,-4(fp)
    b260:	e0bfff17 	ldw	r2,-4(fp)
} 
    b264:	e037883a 	mov	sp,fp
    b268:	df000017 	ldw	fp,0(sp)
    b26c:	dec00104 	addi	sp,sp,4
    b270:	f800283a 	ret

0000b274 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b274:	defff704 	addi	sp,sp,-36
    b278:	dfc00815 	stw	ra,32(sp)
    b27c:	df000715 	stw	fp,28(sp)
    b280:	df000704 	addi	fp,sp,28
    b284:	e13ffb15 	stw	r4,-20(fp)
    b288:	e17ffc15 	stw	r5,-16(fp)
    b28c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b290:	e0bffb17 	ldw	r2,-20(fp)
    b294:	1004803a 	cmplt	r2,r2,zero
    b298:	1000081e 	bne	r2,zero,b2bc <write+0x48>
    b29c:	e0bffb17 	ldw	r2,-20(fp)
    b2a0:	10800324 	muli	r2,r2,12
    b2a4:	1007883a 	mov	r3,r2
    b2a8:	00800074 	movhi	r2,1
    b2ac:	10bf3304 	addi	r2,r2,-820
    b2b0:	1887883a 	add	r3,r3,r2
    b2b4:	e0ffff15 	stw	r3,-4(fp)
    b2b8:	00000106 	br	b2c0 <write+0x4c>
    b2bc:	e03fff15 	stw	zero,-4(fp)
    b2c0:	e0bfff17 	ldw	r2,-4(fp)
    b2c4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b2c8:	e0bffa17 	ldw	r2,-24(fp)
    b2cc:	1005003a 	cmpeq	r2,r2,zero
    b2d0:	1000241e 	bne	r2,zero,b364 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b2d4:	e0bffa17 	ldw	r2,-24(fp)
    b2d8:	10800217 	ldw	r2,8(r2)
    b2dc:	108000cc 	andi	r2,r2,3
    b2e0:	1005003a 	cmpeq	r2,r2,zero
    b2e4:	10001a1e 	bne	r2,zero,b350 <write+0xdc>
    b2e8:	e0bffa17 	ldw	r2,-24(fp)
    b2ec:	10800017 	ldw	r2,0(r2)
    b2f0:	10800617 	ldw	r2,24(r2)
    b2f4:	1005003a 	cmpeq	r2,r2,zero
    b2f8:	1000151e 	bne	r2,zero,b350 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b2fc:	e0bffa17 	ldw	r2,-24(fp)
    b300:	10800017 	ldw	r2,0(r2)
    b304:	10800617 	ldw	r2,24(r2)
    b308:	e17ffc17 	ldw	r5,-16(fp)
    b30c:	e1bffd17 	ldw	r6,-12(fp)
    b310:	e13ffa17 	ldw	r4,-24(fp)
    b314:	103ee83a 	callr	r2
    b318:	e0bff915 	stw	r2,-28(fp)
    b31c:	e0bff917 	ldw	r2,-28(fp)
    b320:	1004403a 	cmpge	r2,r2,zero
    b324:	1000071e 	bne	r2,zero,b344 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    b328:	000b3940 	call	b394 <alt_get_errno>
    b32c:	e0fff917 	ldw	r3,-28(fp)
    b330:	00c7c83a 	sub	r3,zero,r3
    b334:	10c00015 	stw	r3,0(r2)
        return -1;
    b338:	00bfffc4 	movi	r2,-1
    b33c:	e0bffe15 	stw	r2,-8(fp)
    b340:	00000e06 	br	b37c <write+0x108>
      }
      return rval;
    b344:	e0bff917 	ldw	r2,-28(fp)
    b348:	e0bffe15 	stw	r2,-8(fp)
    b34c:	00000b06 	br	b37c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b350:	000b3940 	call	b394 <alt_get_errno>
    b354:	1007883a 	mov	r3,r2
    b358:	00800344 	movi	r2,13
    b35c:	18800015 	stw	r2,0(r3)
    b360:	00000406 	br	b374 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b364:	000b3940 	call	b394 <alt_get_errno>
    b368:	1007883a 	mov	r3,r2
    b36c:	00801444 	movi	r2,81
    b370:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b374:	00bfffc4 	movi	r2,-1
    b378:	e0bffe15 	stw	r2,-8(fp)
    b37c:	e0bffe17 	ldw	r2,-8(fp)
}
    b380:	e037883a 	mov	sp,fp
    b384:	dfc00117 	ldw	ra,4(sp)
    b388:	df000017 	ldw	fp,0(sp)
    b38c:	dec00204 	addi	sp,sp,8
    b390:	f800283a 	ret

0000b394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b394:	defffd04 	addi	sp,sp,-12
    b398:	dfc00215 	stw	ra,8(sp)
    b39c:	df000115 	stw	fp,4(sp)
    b3a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b3a4:	00800074 	movhi	r2,1
    b3a8:	10840b04 	addi	r2,r2,4140
    b3ac:	10800017 	ldw	r2,0(r2)
    b3b0:	1005003a 	cmpeq	r2,r2,zero
    b3b4:	1000061e 	bne	r2,zero,b3d0 <alt_get_errno+0x3c>
    b3b8:	00800074 	movhi	r2,1
    b3bc:	10840b04 	addi	r2,r2,4140
    b3c0:	10800017 	ldw	r2,0(r2)
    b3c4:	103ee83a 	callr	r2
    b3c8:	e0bfff15 	stw	r2,-4(fp)
    b3cc:	00000306 	br	b3dc <alt_get_errno+0x48>
    b3d0:	00800074 	movhi	r2,1
    b3d4:	108b0404 	addi	r2,r2,11280
    b3d8:	e0bfff15 	stw	r2,-4(fp)
    b3dc:	e0bfff17 	ldw	r2,-4(fp)
}
    b3e0:	e037883a 	mov	sp,fp
    b3e4:	dfc00117 	ldw	ra,4(sp)
    b3e8:	df000017 	ldw	fp,0(sp)
    b3ec:	dec00204 	addi	sp,sp,8
    b3f0:	f800283a 	ret

0000b3f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b3f4:	defffd04 	addi	sp,sp,-12
    b3f8:	dfc00215 	stw	ra,8(sp)
    b3fc:	df000115 	stw	fp,4(sp)
    b400:	df000104 	addi	fp,sp,4
    b404:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPUNIOS, cpuNios);
    b408:	000e4240 	call	e424 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b40c:	00800044 	movi	r2,1
    b410:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b414:	e037883a 	mov	sp,fp
    b418:	dfc00117 	ldw	ra,4(sp)
    b41c:	df000017 	ldw	fp,0(sp)
    b420:	dec00204 	addi	sp,sp,8
    b424:	f800283a 	ret

0000b428 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b428:	defffe04 	addi	sp,sp,-8
    b42c:	dfc00115 	stw	ra,4(sp)
    b430:	df000015 	stw	fp,0(sp)
    b434:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    b438:	01010034 	movhi	r4,1024
    b43c:	21040004 	addi	r4,r4,4096
    b440:	000b883a 	mov	r5,zero
    b444:	01800204 	movi	r6,8
    b448:	01c0fa04 	movi	r7,1000
    b44c:	000cd400 	call	cd40 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    b450:	01000074 	movhi	r4,1
    b454:	213f9d04 	addi	r4,r4,-396
    b458:	000b883a 	mov	r5,zero
    b45c:	000d883a 	mov	r6,zero
    b460:	000b6600 	call	b660 <altera_avalon_jtag_uart_init>
    b464:	01000074 	movhi	r4,1
    b468:	213f9304 	addi	r4,r4,-436
    b46c:	000b4e00 	call	b4e0 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( LCD_SGDMA, lcd_sgdma);
    b470:	01000074 	movhi	r4,1
    b474:	2103ab04 	addi	r4,r4,3756
    b478:	000b883a 	mov	r5,zero
    b47c:	01800084 	movi	r6,2
    b480:	000cc240 	call	cc24 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_MM_TO_ST, sgdma_mm_to_st);
    b484:	01000074 	movhi	r4,1
    b488:	2103b704 	addi	r4,r4,3804
    b48c:	000b883a 	mov	r5,zero
    b490:	01800044 	movi	r6,1
    b494:	000cc240 	call	cc24 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_ST_TO_MM, sgdma_st_to_mm);
    b498:	01000074 	movhi	r4,1
    b49c:	2103c304 	addi	r4,r4,3852
    b4a0:	000b883a 	mov	r5,zero
    b4a4:	01800144 	movi	r6,5
    b4a8:	000cc240 	call	cc24 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( PORTA_SERIAL, porta_serial);
    b4ac:	01000074 	movhi	r4,1
    b4b0:	2103d904 	addi	r4,r4,3940
    b4b4:	000b883a 	mov	r5,zero
    b4b8:	01800244 	movi	r6,9
    b4bc:	000cec80 	call	cec8 <altera_avalon_uart_init>
    b4c0:	01000074 	movhi	r4,1
    b4c4:	2103cf04 	addi	r4,r4,3900
    b4c8:	000b4e00 	call	b4e0 <alt_dev_reg>
}
    b4cc:	e037883a 	mov	sp,fp
    b4d0:	dfc00117 	ldw	ra,4(sp)
    b4d4:	df000017 	ldw	fp,0(sp)
    b4d8:	dec00204 	addi	sp,sp,8
    b4dc:	f800283a 	ret

0000b4e0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b4e0:	defffd04 	addi	sp,sp,-12
    b4e4:	dfc00215 	stw	ra,8(sp)
    b4e8:	df000115 	stw	fp,4(sp)
    b4ec:	df000104 	addi	fp,sp,4
    b4f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b4f4:	e13fff17 	ldw	r4,-4(fp)
    b4f8:	01400074 	movhi	r5,1
    b4fc:	29440804 	addi	r5,r5,4128
    b500:	000d8d40 	call	d8d4 <alt_dev_llist_insert>
}
    b504:	e037883a 	mov	sp,fp
    b508:	dfc00117 	ldw	ra,4(sp)
    b50c:	df000017 	ldw	fp,0(sp)
    b510:	dec00204 	addi	sp,sp,8
    b514:	f800283a 	ret

0000b518 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b518:	defffa04 	addi	sp,sp,-24
    b51c:	dfc00515 	stw	ra,20(sp)
    b520:	df000415 	stw	fp,16(sp)
    b524:	df000404 	addi	fp,sp,16
    b528:	e13ffd15 	stw	r4,-12(fp)
    b52c:	e17ffe15 	stw	r5,-8(fp)
    b530:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b534:	e0bffd17 	ldw	r2,-12(fp)
    b538:	10800017 	ldw	r2,0(r2)
    b53c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b540:	e0bffc17 	ldw	r2,-16(fp)
    b544:	11000a04 	addi	r4,r2,40
    b548:	e0bffd17 	ldw	r2,-12(fp)
    b54c:	11c00217 	ldw	r7,8(r2)
    b550:	e17ffe17 	ldw	r5,-8(fp)
    b554:	e1bfff17 	ldw	r6,-4(fp)
    b558:	000bb600 	call	bb60 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b55c:	e037883a 	mov	sp,fp
    b560:	dfc00117 	ldw	ra,4(sp)
    b564:	df000017 	ldw	fp,0(sp)
    b568:	dec00204 	addi	sp,sp,8
    b56c:	f800283a 	ret

0000b570 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b570:	defffa04 	addi	sp,sp,-24
    b574:	dfc00515 	stw	ra,20(sp)
    b578:	df000415 	stw	fp,16(sp)
    b57c:	df000404 	addi	fp,sp,16
    b580:	e13ffd15 	stw	r4,-12(fp)
    b584:	e17ffe15 	stw	r5,-8(fp)
    b588:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b58c:	e0bffd17 	ldw	r2,-12(fp)
    b590:	10800017 	ldw	r2,0(r2)
    b594:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b598:	e0bffc17 	ldw	r2,-16(fp)
    b59c:	11000a04 	addi	r4,r2,40
    b5a0:	e0bffd17 	ldw	r2,-12(fp)
    b5a4:	11c00217 	ldw	r7,8(r2)
    b5a8:	e17ffe17 	ldw	r5,-8(fp)
    b5ac:	e1bfff17 	ldw	r6,-4(fp)
    b5b0:	000bd840 	call	bd84 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b5b4:	e037883a 	mov	sp,fp
    b5b8:	dfc00117 	ldw	ra,4(sp)
    b5bc:	df000017 	ldw	fp,0(sp)
    b5c0:	dec00204 	addi	sp,sp,8
    b5c4:	f800283a 	ret

0000b5c8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b5c8:	defffc04 	addi	sp,sp,-16
    b5cc:	dfc00315 	stw	ra,12(sp)
    b5d0:	df000215 	stw	fp,8(sp)
    b5d4:	df000204 	addi	fp,sp,8
    b5d8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b5dc:	e0bfff17 	ldw	r2,-4(fp)
    b5e0:	10800017 	ldw	r2,0(r2)
    b5e4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b5e8:	e0bffe17 	ldw	r2,-8(fp)
    b5ec:	11000a04 	addi	r4,r2,40
    b5f0:	e0bfff17 	ldw	r2,-4(fp)
    b5f4:	11400217 	ldw	r5,8(r2)
    b5f8:	000b9f80 	call	b9f8 <altera_avalon_jtag_uart_close>
}
    b5fc:	e037883a 	mov	sp,fp
    b600:	dfc00117 	ldw	ra,4(sp)
    b604:	df000017 	ldw	fp,0(sp)
    b608:	dec00204 	addi	sp,sp,8
    b60c:	f800283a 	ret

0000b610 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b610:	defffa04 	addi	sp,sp,-24
    b614:	dfc00515 	stw	ra,20(sp)
    b618:	df000415 	stw	fp,16(sp)
    b61c:	df000404 	addi	fp,sp,16
    b620:	e13ffd15 	stw	r4,-12(fp)
    b624:	e17ffe15 	stw	r5,-8(fp)
    b628:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b62c:	e0bffd17 	ldw	r2,-12(fp)
    b630:	10800017 	ldw	r2,0(r2)
    b634:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b638:	e0bffc17 	ldw	r2,-16(fp)
    b63c:	11000a04 	addi	r4,r2,40
    b640:	e17ffe17 	ldw	r5,-8(fp)
    b644:	e1bfff17 	ldw	r6,-4(fp)
    b648:	000ba6c0 	call	ba6c <altera_avalon_jtag_uart_ioctl>
}
    b64c:	e037883a 	mov	sp,fp
    b650:	dfc00117 	ldw	ra,4(sp)
    b654:	df000017 	ldw	fp,0(sp)
    b658:	dec00204 	addi	sp,sp,8
    b65c:	f800283a 	ret

0000b660 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    b660:	defffa04 	addi	sp,sp,-24
    b664:	dfc00515 	stw	ra,20(sp)
    b668:	df000415 	stw	fp,16(sp)
    b66c:	df000404 	addi	fp,sp,16
    b670:	e13ffd15 	stw	r4,-12(fp)
    b674:	e17ffe15 	stw	r5,-8(fp)
    b678:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b67c:	e0fffd17 	ldw	r3,-12(fp)
    b680:	00800044 	movi	r2,1
    b684:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    b688:	e0bffd17 	ldw	r2,-12(fp)
    b68c:	10800017 	ldw	r2,0(r2)
    b690:	11000104 	addi	r4,r2,4
    b694:	e0bffd17 	ldw	r2,-12(fp)
    b698:	10800817 	ldw	r2,32(r2)
    b69c:	1007883a 	mov	r3,r2
    b6a0:	2005883a 	mov	r2,r4
    b6a4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    b6a8:	e13ffe17 	ldw	r4,-8(fp)
    b6ac:	e17fff17 	ldw	r5,-4(fp)
    b6b0:	d8000015 	stw	zero,0(sp)
    b6b4:	01800074 	movhi	r6,1
    b6b8:	31adc804 	addi	r6,r6,-18656
    b6bc:	e1fffd17 	ldw	r7,-12(fp)
    b6c0:	000db740 	call	db74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    b6c4:	e0bffd17 	ldw	r2,-12(fp)
    b6c8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    b6cc:	e0bffd17 	ldw	r2,-12(fp)
    b6d0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b6d4:	00800074 	movhi	r2,1
    b6d8:	108b0c04 	addi	r2,r2,11312
    b6dc:	10800017 	ldw	r2,0(r2)
    b6e0:	100b883a 	mov	r5,r2
    b6e4:	01800074 	movhi	r6,1
    b6e8:	31ae5204 	addi	r6,r6,-18104
    b6ec:	e1fffd17 	ldw	r7,-12(fp)
    b6f0:	000d7800 	call	d780 <alt_alarm_start>
    b6f4:	1004403a 	cmpge	r2,r2,zero
    b6f8:	1000041e 	bne	r2,zero,b70c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    b6fc:	e0fffd17 	ldw	r3,-12(fp)
    b700:	00a00034 	movhi	r2,32768
    b704:	10bfffc4 	addi	r2,r2,-1
    b708:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    b70c:	e037883a 	mov	sp,fp
    b710:	dfc00117 	ldw	ra,4(sp)
    b714:	df000017 	ldw	fp,0(sp)
    b718:	dec00204 	addi	sp,sp,8
    b71c:	f800283a 	ret

0000b720 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    b720:	defff804 	addi	sp,sp,-32
    b724:	df000715 	stw	fp,28(sp)
    b728:	df000704 	addi	fp,sp,28
    b72c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    b730:	e0bfff17 	ldw	r2,-4(fp)
    b734:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    b738:	e0bffe17 	ldw	r2,-8(fp)
    b73c:	10800017 	ldw	r2,0(r2)
    b740:	e0bffd15 	stw	r2,-12(fp)
    b744:	00000006 	br	b748 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b748:	e0bffd17 	ldw	r2,-12(fp)
    b74c:	10800104 	addi	r2,r2,4
    b750:	10800037 	ldwio	r2,0(r2)
    b754:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    b758:	e0bffc17 	ldw	r2,-16(fp)
    b75c:	1080c00c 	andi	r2,r2,768
    b760:	1005003a 	cmpeq	r2,r2,zero
    b764:	1000741e 	bne	r2,zero,b938 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    b768:	e0bffc17 	ldw	r2,-16(fp)
    b76c:	1080400c 	andi	r2,r2,256
    b770:	1005003a 	cmpeq	r2,r2,zero
    b774:	1000351e 	bne	r2,zero,b84c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    b778:	00800074 	movhi	r2,1
    b77c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b780:	e0bffe17 	ldw	r2,-8(fp)
    b784:	10800a17 	ldw	r2,40(r2)
    b788:	10800044 	addi	r2,r2,1
    b78c:	1081ffcc 	andi	r2,r2,2047
    b790:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    b794:	e0bffe17 	ldw	r2,-8(fp)
    b798:	10c00b17 	ldw	r3,44(r2)
    b79c:	e0bffa17 	ldw	r2,-24(fp)
    b7a0:	18801626 	beq	r3,r2,b7fc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b7a4:	e0bffd17 	ldw	r2,-12(fp)
    b7a8:	10800037 	ldwio	r2,0(r2)
    b7ac:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    b7b0:	e0bffb17 	ldw	r2,-20(fp)
    b7b4:	10a0000c 	andi	r2,r2,32768
    b7b8:	1005003a 	cmpeq	r2,r2,zero
    b7bc:	10000f1e 	bne	r2,zero,b7fc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b7c0:	e0bffe17 	ldw	r2,-8(fp)
    b7c4:	10c00a17 	ldw	r3,40(r2)
    b7c8:	e0bffb17 	ldw	r2,-20(fp)
    b7cc:	1009883a 	mov	r4,r2
    b7d0:	e0bffe17 	ldw	r2,-8(fp)
    b7d4:	1885883a 	add	r2,r3,r2
    b7d8:	10800e04 	addi	r2,r2,56
    b7dc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b7e0:	e0bffe17 	ldw	r2,-8(fp)
    b7e4:	10800a17 	ldw	r2,40(r2)
    b7e8:	10800044 	addi	r2,r2,1
    b7ec:	10c1ffcc 	andi	r3,r2,2047
    b7f0:	e0bffe17 	ldw	r2,-8(fp)
    b7f4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    b7f8:	003fe106 	br	b780 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    b7fc:	e0bffb17 	ldw	r2,-20(fp)
    b800:	10bfffec 	andhi	r2,r2,65535
    b804:	1005003a 	cmpeq	r2,r2,zero
    b808:	1000101e 	bne	r2,zero,b84c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b80c:	e0bffe17 	ldw	r2,-8(fp)
    b810:	10c00817 	ldw	r3,32(r2)
    b814:	00bfff84 	movi	r2,-2
    b818:	1886703a 	and	r3,r3,r2
    b81c:	e0bffe17 	ldw	r2,-8(fp)
    b820:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    b824:	e0bffd17 	ldw	r2,-12(fp)
    b828:	11000104 	addi	r4,r2,4
    b82c:	e0bffe17 	ldw	r2,-8(fp)
    b830:	10800817 	ldw	r2,32(r2)
    b834:	1007883a 	mov	r3,r2
    b838:	2005883a 	mov	r2,r4
    b83c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b840:	e0bffd17 	ldw	r2,-12(fp)
    b844:	10800104 	addi	r2,r2,4
    b848:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    b84c:	e0bffc17 	ldw	r2,-16(fp)
    b850:	1080800c 	andi	r2,r2,512
    b854:	1005003a 	cmpeq	r2,r2,zero
    b858:	103fbb1e 	bne	r2,zero,b748 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    b85c:	e0bffc17 	ldw	r2,-16(fp)
    b860:	10bfffec 	andhi	r2,r2,65535
    b864:	1004d43a 	srli	r2,r2,16
    b868:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    b86c:	00001506 	br	b8c4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    b870:	e13ffd17 	ldw	r4,-12(fp)
    b874:	e0bffe17 	ldw	r2,-8(fp)
    b878:	10c00d17 	ldw	r3,52(r2)
    b87c:	e0bffe17 	ldw	r2,-8(fp)
    b880:	1885883a 	add	r2,r3,r2
    b884:	10820e04 	addi	r2,r2,2104
    b888:	10800003 	ldbu	r2,0(r2)
    b88c:	10c03fcc 	andi	r3,r2,255
    b890:	18c0201c 	xori	r3,r3,128
    b894:	18ffe004 	addi	r3,r3,-128
    b898:	2005883a 	mov	r2,r4
    b89c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b8a0:	e0bffe17 	ldw	r2,-8(fp)
    b8a4:	10800d17 	ldw	r2,52(r2)
    b8a8:	10800044 	addi	r2,r2,1
    b8ac:	10c1ffcc 	andi	r3,r2,2047
    b8b0:	e0bffe17 	ldw	r2,-8(fp)
    b8b4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    b8b8:	e0bff917 	ldw	r2,-28(fp)
    b8bc:	10bfffc4 	addi	r2,r2,-1
    b8c0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    b8c4:	e0bff917 	ldw	r2,-28(fp)
    b8c8:	1005003a 	cmpeq	r2,r2,zero
    b8cc:	1000051e 	bne	r2,zero,b8e4 <altera_avalon_jtag_uart_irq+0x1c4>
    b8d0:	e0bffe17 	ldw	r2,-8(fp)
    b8d4:	10c00d17 	ldw	r3,52(r2)
    b8d8:	e0bffe17 	ldw	r2,-8(fp)
    b8dc:	10800c17 	ldw	r2,48(r2)
    b8e0:	18bfe31e 	bne	r3,r2,b870 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    b8e4:	e0bff917 	ldw	r2,-28(fp)
    b8e8:	1005003a 	cmpeq	r2,r2,zero
    b8ec:	103f961e 	bne	r2,zero,b748 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b8f0:	e0bffe17 	ldw	r2,-8(fp)
    b8f4:	10c00817 	ldw	r3,32(r2)
    b8f8:	00bfff44 	movi	r2,-3
    b8fc:	1886703a 	and	r3,r3,r2
    b900:	e0bffe17 	ldw	r2,-8(fp)
    b904:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b908:	e0bffe17 	ldw	r2,-8(fp)
    b90c:	10800017 	ldw	r2,0(r2)
    b910:	11000104 	addi	r4,r2,4
    b914:	e0bffe17 	ldw	r2,-8(fp)
    b918:	10800817 	ldw	r2,32(r2)
    b91c:	1007883a 	mov	r3,r2
    b920:	2005883a 	mov	r2,r4
    b924:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b928:	e0bffd17 	ldw	r2,-12(fp)
    b92c:	10800104 	addi	r2,r2,4
    b930:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    b934:	003f8406 	br	b748 <altera_avalon_jtag_uart_irq+0x28>
}
    b938:	e037883a 	mov	sp,fp
    b93c:	df000017 	ldw	fp,0(sp)
    b940:	dec00104 	addi	sp,sp,4
    b944:	f800283a 	ret

0000b948 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    b948:	defffc04 	addi	sp,sp,-16
    b94c:	df000315 	stw	fp,12(sp)
    b950:	df000304 	addi	fp,sp,12
    b954:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    b958:	e0bfff17 	ldw	r2,-4(fp)
    b95c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    b960:	e0bffe17 	ldw	r2,-8(fp)
    b964:	10800017 	ldw	r2,0(r2)
    b968:	10800104 	addi	r2,r2,4
    b96c:	10800037 	ldwio	r2,0(r2)
    b970:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    b974:	e0bffd17 	ldw	r2,-12(fp)
    b978:	1081000c 	andi	r2,r2,1024
    b97c:	1005003a 	cmpeq	r2,r2,zero
    b980:	10000c1e 	bne	r2,zero,b9b4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    b984:	e0bffe17 	ldw	r2,-8(fp)
    b988:	10800017 	ldw	r2,0(r2)
    b98c:	11000104 	addi	r4,r2,4
    b990:	e0bffe17 	ldw	r2,-8(fp)
    b994:	10800817 	ldw	r2,32(r2)
    b998:	10810014 	ori	r2,r2,1024
    b99c:	1007883a 	mov	r3,r2
    b9a0:	2005883a 	mov	r2,r4
    b9a4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    b9a8:	e0bffe17 	ldw	r2,-8(fp)
    b9ac:	10000915 	stw	zero,36(r2)
    b9b0:	00000a06 	br	b9dc <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    b9b4:	e0bffe17 	ldw	r2,-8(fp)
    b9b8:	10c00917 	ldw	r3,36(r2)
    b9bc:	00a00034 	movhi	r2,32768
    b9c0:	10bfff04 	addi	r2,r2,-4
    b9c4:	10c00536 	bltu	r2,r3,b9dc <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    b9c8:	e0bffe17 	ldw	r2,-8(fp)
    b9cc:	10800917 	ldw	r2,36(r2)
    b9d0:	10c00044 	addi	r3,r2,1
    b9d4:	e0bffe17 	ldw	r2,-8(fp)
    b9d8:	10c00915 	stw	r3,36(r2)
    b9dc:	00800074 	movhi	r2,1
    b9e0:	108b0c04 	addi	r2,r2,11312
    b9e4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    b9e8:	e037883a 	mov	sp,fp
    b9ec:	df000017 	ldw	fp,0(sp)
    b9f0:	dec00104 	addi	sp,sp,4
    b9f4:	f800283a 	ret

0000b9f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    b9f8:	defffc04 	addi	sp,sp,-16
    b9fc:	df000315 	stw	fp,12(sp)
    ba00:	df000304 	addi	fp,sp,12
    ba04:	e13ffd15 	stw	r4,-12(fp)
    ba08:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ba0c:	00000706 	br	ba2c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    ba10:	e0bffe17 	ldw	r2,-8(fp)
    ba14:	1090000c 	andi	r2,r2,16384
    ba18:	1005003a 	cmpeq	r2,r2,zero
    ba1c:	1000031e 	bne	r2,zero,ba2c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    ba20:	00bffd44 	movi	r2,-11
    ba24:	e0bfff15 	stw	r2,-4(fp)
    ba28:	00000b06 	br	ba58 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ba2c:	e0bffd17 	ldw	r2,-12(fp)
    ba30:	10c00d17 	ldw	r3,52(r2)
    ba34:	e0bffd17 	ldw	r2,-12(fp)
    ba38:	10800c17 	ldw	r2,48(r2)
    ba3c:	18800526 	beq	r3,r2,ba54 <altera_avalon_jtag_uart_close+0x5c>
    ba40:	e0bffd17 	ldw	r2,-12(fp)
    ba44:	10c00917 	ldw	r3,36(r2)
    ba48:	e0bffd17 	ldw	r2,-12(fp)
    ba4c:	10800117 	ldw	r2,4(r2)
    ba50:	18bfef36 	bltu	r3,r2,ba10 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ba54:	e03fff15 	stw	zero,-4(fp)
    ba58:	e0bfff17 	ldw	r2,-4(fp)
}
    ba5c:	e037883a 	mov	sp,fp
    ba60:	df000017 	ldw	fp,0(sp)
    ba64:	dec00104 	addi	sp,sp,4
    ba68:	f800283a 	ret

0000ba6c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ba6c:	defff804 	addi	sp,sp,-32
    ba70:	df000715 	stw	fp,28(sp)
    ba74:	df000704 	addi	fp,sp,28
    ba78:	e13ffb15 	stw	r4,-20(fp)
    ba7c:	e17ffc15 	stw	r5,-16(fp)
    ba80:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    ba84:	00bff9c4 	movi	r2,-25
    ba88:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    ba8c:	e0bffc17 	ldw	r2,-16(fp)
    ba90:	e0bfff15 	stw	r2,-4(fp)
    ba94:	e0ffff17 	ldw	r3,-4(fp)
    ba98:	189a8060 	cmpeqi	r2,r3,27137
    ba9c:	1000041e 	bne	r2,zero,bab0 <altera_avalon_jtag_uart_ioctl+0x44>
    baa0:	e0ffff17 	ldw	r3,-4(fp)
    baa4:	189a80a0 	cmpeqi	r2,r3,27138
    baa8:	10001b1e 	bne	r2,zero,bb18 <altera_avalon_jtag_uart_ioctl+0xac>
    baac:	00002706 	br	bb4c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    bab0:	e0bffb17 	ldw	r2,-20(fp)
    bab4:	10c00117 	ldw	r3,4(r2)
    bab8:	00a00034 	movhi	r2,32768
    babc:	10bfffc4 	addi	r2,r2,-1
    bac0:	18802226 	beq	r3,r2,bb4c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    bac4:	e0bffd17 	ldw	r2,-12(fp)
    bac8:	10800017 	ldw	r2,0(r2)
    bacc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    bad0:	e0bff917 	ldw	r2,-28(fp)
    bad4:	10800090 	cmplti	r2,r2,2
    bad8:	1000071e 	bne	r2,zero,baf8 <altera_avalon_jtag_uart_ioctl+0x8c>
    badc:	e0fff917 	ldw	r3,-28(fp)
    bae0:	00a00034 	movhi	r2,32768
    bae4:	10bfffc4 	addi	r2,r2,-1
    bae8:	18800326 	beq	r3,r2,baf8 <altera_avalon_jtag_uart_ioctl+0x8c>
    baec:	e0bff917 	ldw	r2,-28(fp)
    baf0:	e0bffe15 	stw	r2,-8(fp)
    baf4:	00000306 	br	bb04 <altera_avalon_jtag_uart_ioctl+0x98>
    baf8:	00e00034 	movhi	r3,32768
    bafc:	18ffff84 	addi	r3,r3,-2
    bb00:	e0fffe15 	stw	r3,-8(fp)
    bb04:	e0bffb17 	ldw	r2,-20(fp)
    bb08:	e0fffe17 	ldw	r3,-8(fp)
    bb0c:	10c00115 	stw	r3,4(r2)
      rc = 0;
    bb10:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    bb14:	00000d06 	br	bb4c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    bb18:	e0bffb17 	ldw	r2,-20(fp)
    bb1c:	10c00117 	ldw	r3,4(r2)
    bb20:	00a00034 	movhi	r2,32768
    bb24:	10bfffc4 	addi	r2,r2,-1
    bb28:	18800826 	beq	r3,r2,bb4c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    bb2c:	e13ffd17 	ldw	r4,-12(fp)
    bb30:	e0bffb17 	ldw	r2,-20(fp)
    bb34:	10c00917 	ldw	r3,36(r2)
    bb38:	e0bffb17 	ldw	r2,-20(fp)
    bb3c:	10800117 	ldw	r2,4(r2)
    bb40:	1885803a 	cmpltu	r2,r3,r2
    bb44:	20800015 	stw	r2,0(r4)
      rc = 0;
    bb48:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    bb4c:	e0bffa17 	ldw	r2,-24(fp)
}
    bb50:	e037883a 	mov	sp,fp
    bb54:	df000017 	ldw	fp,0(sp)
    bb58:	dec00104 	addi	sp,sp,4
    bb5c:	f800283a 	ret

0000bb60 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    bb60:	defff204 	addi	sp,sp,-56
    bb64:	dfc00d15 	stw	ra,52(sp)
    bb68:	df000c15 	stw	fp,48(sp)
    bb6c:	df000c04 	addi	fp,sp,48
    bb70:	e13ffb15 	stw	r4,-20(fp)
    bb74:	e17ffc15 	stw	r5,-16(fp)
    bb78:	e1bffd15 	stw	r6,-12(fp)
    bb7c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    bb80:	e0bffc17 	ldw	r2,-16(fp)
    bb84:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    bb88:	00004806 	br	bcac <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    bb8c:	e0bffb17 	ldw	r2,-20(fp)
    bb90:	10800a17 	ldw	r2,40(r2)
    bb94:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    bb98:	e0bffb17 	ldw	r2,-20(fp)
    bb9c:	10800b17 	ldw	r2,44(r2)
    bba0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    bba4:	e0fff717 	ldw	r3,-36(fp)
    bba8:	e0bff617 	ldw	r2,-40(fp)
    bbac:	18800536 	bltu	r3,r2,bbc4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    bbb0:	e0bff717 	ldw	r2,-36(fp)
    bbb4:	e0fff617 	ldw	r3,-40(fp)
    bbb8:	10c5c83a 	sub	r2,r2,r3
    bbbc:	e0bff815 	stw	r2,-32(fp)
    bbc0:	00000406 	br	bbd4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    bbc4:	00820004 	movi	r2,2048
    bbc8:	e0fff617 	ldw	r3,-40(fp)
    bbcc:	10c5c83a 	sub	r2,r2,r3
    bbd0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    bbd4:	e0bff817 	ldw	r2,-32(fp)
    bbd8:	1005003a 	cmpeq	r2,r2,zero
    bbdc:	10001f1e 	bne	r2,zero,bc5c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    bbe0:	e0fffd17 	ldw	r3,-12(fp)
    bbe4:	e0bff817 	ldw	r2,-32(fp)
    bbe8:	1880022e 	bgeu	r3,r2,bbf4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    bbec:	e0bffd17 	ldw	r2,-12(fp)
    bbf0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    bbf4:	e0bffb17 	ldw	r2,-20(fp)
    bbf8:	10c00e04 	addi	r3,r2,56
    bbfc:	e0bff617 	ldw	r2,-40(fp)
    bc00:	1887883a 	add	r3,r3,r2
    bc04:	e0bffa17 	ldw	r2,-24(fp)
    bc08:	1009883a 	mov	r4,r2
    bc0c:	180b883a 	mov	r5,r3
    bc10:	e1bff817 	ldw	r6,-32(fp)
    bc14:	00063b40 	call	63b4 <memcpy>
      ptr   += n;
    bc18:	e0fff817 	ldw	r3,-32(fp)
    bc1c:	e0bffa17 	ldw	r2,-24(fp)
    bc20:	10c5883a 	add	r2,r2,r3
    bc24:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    bc28:	e0fffd17 	ldw	r3,-12(fp)
    bc2c:	e0bff817 	ldw	r2,-32(fp)
    bc30:	1885c83a 	sub	r2,r3,r2
    bc34:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bc38:	e0fff617 	ldw	r3,-40(fp)
    bc3c:	e0bff817 	ldw	r2,-32(fp)
    bc40:	1885883a 	add	r2,r3,r2
    bc44:	10c1ffcc 	andi	r3,r2,2047
    bc48:	e0bffb17 	ldw	r2,-20(fp)
    bc4c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    bc50:	e0bffd17 	ldw	r2,-12(fp)
    bc54:	10800048 	cmpgei	r2,r2,1
    bc58:	103fcc1e 	bne	r2,zero,bb8c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    bc5c:	e0fffa17 	ldw	r3,-24(fp)
    bc60:	e0bffc17 	ldw	r2,-16(fp)
    bc64:	1880141e 	bne	r3,r2,bcb8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    bc68:	e0bffe17 	ldw	r2,-8(fp)
    bc6c:	1090000c 	andi	r2,r2,16384
    bc70:	1004c03a 	cmpne	r2,r2,zero
    bc74:	1000101e 	bne	r2,zero,bcb8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    bc78:	e0bffb17 	ldw	r2,-20(fp)
    bc7c:	10c00a17 	ldw	r3,40(r2)
    bc80:	e0bff717 	ldw	r2,-36(fp)
    bc84:	1880051e 	bne	r3,r2,bc9c <altera_avalon_jtag_uart_read+0x13c>
    bc88:	e0bffb17 	ldw	r2,-20(fp)
    bc8c:	10c00917 	ldw	r3,36(r2)
    bc90:	e0bffb17 	ldw	r2,-20(fp)
    bc94:	10800117 	ldw	r2,4(r2)
    bc98:	18bff736 	bltu	r3,r2,bc78 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    bc9c:	e0bffb17 	ldw	r2,-20(fp)
    bca0:	10c00a17 	ldw	r3,40(r2)
    bca4:	e0bff717 	ldw	r2,-36(fp)
    bca8:	18800326 	beq	r3,r2,bcb8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    bcac:	e0bffd17 	ldw	r2,-12(fp)
    bcb0:	10800048 	cmpgei	r2,r2,1
    bcb4:	103fb51e 	bne	r2,zero,bb8c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    bcb8:	e0fffa17 	ldw	r3,-24(fp)
    bcbc:	e0bffc17 	ldw	r2,-16(fp)
    bcc0:	18801926 	beq	r3,r2,bd28 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bcc4:	0005303a 	rdctl	r2,status
    bcc8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bccc:	e0fff517 	ldw	r3,-44(fp)
    bcd0:	00bfff84 	movi	r2,-2
    bcd4:	1884703a 	and	r2,r3,r2
    bcd8:	1001703a 	wrctl	status,r2
  
  return context;
    bcdc:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    bce0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bce4:	e0bffb17 	ldw	r2,-20(fp)
    bce8:	10800817 	ldw	r2,32(r2)
    bcec:	10c00054 	ori	r3,r2,1
    bcf0:	e0bffb17 	ldw	r2,-20(fp)
    bcf4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bcf8:	e0bffb17 	ldw	r2,-20(fp)
    bcfc:	10800017 	ldw	r2,0(r2)
    bd00:	11000104 	addi	r4,r2,4
    bd04:	e0bffb17 	ldw	r2,-20(fp)
    bd08:	10800817 	ldw	r2,32(r2)
    bd0c:	1007883a 	mov	r3,r2
    bd10:	2005883a 	mov	r2,r4
    bd14:	10c00035 	stwio	r3,0(r2)
    bd18:	e0bff917 	ldw	r2,-28(fp)
    bd1c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bd20:	e0bff417 	ldw	r2,-48(fp)
    bd24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    bd28:	e0fffa17 	ldw	r3,-24(fp)
    bd2c:	e0bffc17 	ldw	r2,-16(fp)
    bd30:	18800526 	beq	r3,r2,bd48 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    bd34:	e0fffa17 	ldw	r3,-24(fp)
    bd38:	e0bffc17 	ldw	r2,-16(fp)
    bd3c:	1887c83a 	sub	r3,r3,r2
    bd40:	e0ffff15 	stw	r3,-4(fp)
    bd44:	00000906 	br	bd6c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    bd48:	e0bffe17 	ldw	r2,-8(fp)
    bd4c:	1090000c 	andi	r2,r2,16384
    bd50:	1005003a 	cmpeq	r2,r2,zero
    bd54:	1000031e 	bne	r2,zero,bd64 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    bd58:	00bffd44 	movi	r2,-11
    bd5c:	e0bfff15 	stw	r2,-4(fp)
    bd60:	00000206 	br	bd6c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    bd64:	00bffec4 	movi	r2,-5
    bd68:	e0bfff15 	stw	r2,-4(fp)
    bd6c:	e0bfff17 	ldw	r2,-4(fp)
}
    bd70:	e037883a 	mov	sp,fp
    bd74:	dfc00117 	ldw	ra,4(sp)
    bd78:	df000017 	ldw	fp,0(sp)
    bd7c:	dec00204 	addi	sp,sp,8
    bd80:	f800283a 	ret

0000bd84 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bd84:	defff204 	addi	sp,sp,-56
    bd88:	dfc00d15 	stw	ra,52(sp)
    bd8c:	df000c15 	stw	fp,48(sp)
    bd90:	df000c04 	addi	fp,sp,48
    bd94:	e13ffb15 	stw	r4,-20(fp)
    bd98:	e17ffc15 	stw	r5,-16(fp)
    bd9c:	e1bffd15 	stw	r6,-12(fp)
    bda0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    bda4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    bda8:	e0bffc17 	ldw	r2,-16(fp)
    bdac:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    bdb0:	00003a06 	br	be9c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    bdb4:	e0bffb17 	ldw	r2,-20(fp)
    bdb8:	10800c17 	ldw	r2,48(r2)
    bdbc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    bdc0:	e0bffb17 	ldw	r2,-20(fp)
    bdc4:	10800d17 	ldw	r2,52(r2)
    bdc8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    bdcc:	e0fffa17 	ldw	r3,-24(fp)
    bdd0:	e0bff917 	ldw	r2,-28(fp)
    bdd4:	1880062e 	bgeu	r3,r2,bdf0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    bdd8:	e0fff917 	ldw	r3,-28(fp)
    bddc:	e0bffa17 	ldw	r2,-24(fp)
    bde0:	1885c83a 	sub	r2,r3,r2
    bde4:	10bfffc4 	addi	r2,r2,-1
    bde8:	e0bff815 	stw	r2,-32(fp)
    bdec:	00000c06 	br	be20 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    bdf0:	e0bff917 	ldw	r2,-28(fp)
    bdf4:	1005003a 	cmpeq	r2,r2,zero
    bdf8:	1000051e 	bne	r2,zero,be10 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    bdfc:	00820004 	movi	r2,2048
    be00:	e0fffa17 	ldw	r3,-24(fp)
    be04:	10c5c83a 	sub	r2,r2,r3
    be08:	e0bff815 	stw	r2,-32(fp)
    be0c:	00000406 	br	be20 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    be10:	0081ffc4 	movi	r2,2047
    be14:	e0fffa17 	ldw	r3,-24(fp)
    be18:	10c5c83a 	sub	r2,r2,r3
    be1c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    be20:	e0bff817 	ldw	r2,-32(fp)
    be24:	1005003a 	cmpeq	r2,r2,zero
    be28:	10001f1e 	bne	r2,zero,bea8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    be2c:	e0fffd17 	ldw	r3,-12(fp)
    be30:	e0bff817 	ldw	r2,-32(fp)
    be34:	1880022e 	bgeu	r3,r2,be40 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    be38:	e0bffd17 	ldw	r2,-12(fp)
    be3c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    be40:	e0bffb17 	ldw	r2,-20(fp)
    be44:	10c20e04 	addi	r3,r2,2104
    be48:	e0bffa17 	ldw	r2,-24(fp)
    be4c:	1885883a 	add	r2,r3,r2
    be50:	e0fffc17 	ldw	r3,-16(fp)
    be54:	1009883a 	mov	r4,r2
    be58:	180b883a 	mov	r5,r3
    be5c:	e1bff817 	ldw	r6,-32(fp)
    be60:	00063b40 	call	63b4 <memcpy>
      ptr   += n;
    be64:	e0fff817 	ldw	r3,-32(fp)
    be68:	e0bffc17 	ldw	r2,-16(fp)
    be6c:	10c5883a 	add	r2,r2,r3
    be70:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    be74:	e0fffd17 	ldw	r3,-12(fp)
    be78:	e0bff817 	ldw	r2,-32(fp)
    be7c:	1885c83a 	sub	r2,r3,r2
    be80:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    be84:	e0fffa17 	ldw	r3,-24(fp)
    be88:	e0bff817 	ldw	r2,-32(fp)
    be8c:	1885883a 	add	r2,r3,r2
    be90:	10c1ffcc 	andi	r3,r2,2047
    be94:	e0bffb17 	ldw	r2,-20(fp)
    be98:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    be9c:	e0bffd17 	ldw	r2,-12(fp)
    bea0:	10800048 	cmpgei	r2,r2,1
    bea4:	103fc31e 	bne	r2,zero,bdb4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bea8:	0005303a 	rdctl	r2,status
    beac:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    beb0:	e0fff517 	ldw	r3,-44(fp)
    beb4:	00bfff84 	movi	r2,-2
    beb8:	1884703a 	and	r2,r3,r2
    bebc:	1001703a 	wrctl	status,r2
  
  return context;
    bec0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    bec4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    bec8:	e0bffb17 	ldw	r2,-20(fp)
    becc:	10800817 	ldw	r2,32(r2)
    bed0:	10c00094 	ori	r3,r2,2
    bed4:	e0bffb17 	ldw	r2,-20(fp)
    bed8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bedc:	e0bffb17 	ldw	r2,-20(fp)
    bee0:	10800017 	ldw	r2,0(r2)
    bee4:	11000104 	addi	r4,r2,4
    bee8:	e0bffb17 	ldw	r2,-20(fp)
    beec:	10800817 	ldw	r2,32(r2)
    bef0:	1007883a 	mov	r3,r2
    bef4:	2005883a 	mov	r2,r4
    bef8:	10c00035 	stwio	r3,0(r2)
    befc:	e0bff717 	ldw	r2,-36(fp)
    bf00:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf04:	e0bff417 	ldw	r2,-48(fp)
    bf08:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    bf0c:	e0bffd17 	ldw	r2,-12(fp)
    bf10:	10800050 	cmplti	r2,r2,1
    bf14:	1000111e 	bne	r2,zero,bf5c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    bf18:	e0bffe17 	ldw	r2,-8(fp)
    bf1c:	1090000c 	andi	r2,r2,16384
    bf20:	1004c03a 	cmpne	r2,r2,zero
    bf24:	1000101e 	bne	r2,zero,bf68 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    bf28:	e0bffb17 	ldw	r2,-20(fp)
    bf2c:	10c00d17 	ldw	r3,52(r2)
    bf30:	e0bff917 	ldw	r2,-28(fp)
    bf34:	1880051e 	bne	r3,r2,bf4c <altera_avalon_jtag_uart_write+0x1c8>
    bf38:	e0bffb17 	ldw	r2,-20(fp)
    bf3c:	10c00917 	ldw	r3,36(r2)
    bf40:	e0bffb17 	ldw	r2,-20(fp)
    bf44:	10800117 	ldw	r2,4(r2)
    bf48:	18bff736 	bltu	r3,r2,bf28 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    bf4c:	e0bffb17 	ldw	r2,-20(fp)
    bf50:	10c00d17 	ldw	r3,52(r2)
    bf54:	e0bff917 	ldw	r2,-28(fp)
    bf58:	18800326 	beq	r3,r2,bf68 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    bf5c:	e0bffd17 	ldw	r2,-12(fp)
    bf60:	10800048 	cmpgei	r2,r2,1
    bf64:	103fcd1e 	bne	r2,zero,be9c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    bf68:	e0fffc17 	ldw	r3,-16(fp)
    bf6c:	e0bff617 	ldw	r2,-40(fp)
    bf70:	18800526 	beq	r3,r2,bf88 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    bf74:	e0fffc17 	ldw	r3,-16(fp)
    bf78:	e0bff617 	ldw	r2,-40(fp)
    bf7c:	1887c83a 	sub	r3,r3,r2
    bf80:	e0ffff15 	stw	r3,-4(fp)
    bf84:	00000906 	br	bfac <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    bf88:	e0bffe17 	ldw	r2,-8(fp)
    bf8c:	1090000c 	andi	r2,r2,16384
    bf90:	1005003a 	cmpeq	r2,r2,zero
    bf94:	1000031e 	bne	r2,zero,bfa4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    bf98:	00bffd44 	movi	r2,-11
    bf9c:	e0bfff15 	stw	r2,-4(fp)
    bfa0:	00000206 	br	bfac <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    bfa4:	00bffec4 	movi	r2,-5
    bfa8:	e0bfff15 	stw	r2,-4(fp)
    bfac:	e0bfff17 	ldw	r2,-4(fp)
}
    bfb0:	e037883a 	mov	sp,fp
    bfb4:	dfc00117 	ldw	ra,4(sp)
    bfb8:	df000017 	ldw	fp,0(sp)
    bfbc:	dec00204 	addi	sp,sp,8
    bfc0:	f800283a 	ret

0000bfc4 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
    bfc4:	defffb04 	addi	sp,sp,-20
    bfc8:	df000415 	stw	fp,16(sp)
    bfcc:	df000404 	addi	fp,sp,16
    bfd0:	e13ffd15 	stw	r4,-12(fp)
    bfd4:	e17ffe15 	stw	r5,-8(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    bfd8:	e0bffd17 	ldw	r2,-12(fp)
    bfdc:	10800317 	ldw	r2,12(r2)
    bfe0:	10800037 	ldwio	r2,0(r2)
    bfe4:	1080040c 	andi	r2,r2,16
    bfe8:	1005003a 	cmpeq	r2,r2,zero
    bfec:	1000031e 	bne	r2,zero,bffc <alt_avalon_sgdma_do_async_transfer+0x38>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
    bff0:	00bffc04 	movi	r2,-16
    bff4:	e0bfff15 	stw	r2,-4(fp)
    bff8:	00003c06 	br	c0ec <alt_avalon_sgdma_do_async_transfer+0x128>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    bffc:	e0bffd17 	ldw	r2,-12(fp)
    c000:	10800317 	ldw	r2,12(r2)
    c004:	11000404 	addi	r4,r2,16
    c008:	e0bffd17 	ldw	r2,-12(fp)
    c00c:	10800317 	ldw	r2,12(r2)
    c010:	10800404 	addi	r2,r2,16
    c014:	10c00037 	ldwio	r3,0(r2)
    c018:	00bff7c4 	movi	r2,-33
    c01c:	1886703a 	and	r3,r3,r2
    c020:	2005883a 	mov	r2,r4
    c024:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    c028:	e0bffd17 	ldw	r2,-12(fp)
    c02c:	10800317 	ldw	r2,12(r2)
    c030:	1007883a 	mov	r3,r2
    c034:	00803fc4 	movi	r2,255
    c038:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
    c03c:	e0bffd17 	ldw	r2,-12(fp)
    c040:	10800317 	ldw	r2,12(r2)
    c044:	10800804 	addi	r2,r2,32
    c048:	e0fffe17 	ldw	r3,-8(fp)
    c04c:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
    c050:	e0bffd17 	ldw	r2,-12(fp)
    c054:	10800917 	ldw	r2,36(r2)
    c058:	1005003a 	cmpeq	r2,r2,zero
    c05c:	1000111e 	bne	r2,zero,c0a4 <alt_avalon_sgdma_do_async_transfer+0xe0>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    c060:	e0bffd17 	ldw	r2,-12(fp)
    c064:	10800317 	ldw	r2,12(r2)
    c068:	10800404 	addi	r2,r2,16
    c06c:	10800037 	ldwio	r2,0(r2)
    c070:	e0bffc15 	stw	r2,-16(fp)

    control |= (dev->chain_control                          |
    c074:	e0bffd17 	ldw	r2,-12(fp)
    c078:	10c00b17 	ldw	r3,44(r2)
    c07c:	e0bffc17 	ldw	r2,-16(fp)
    c080:	1884b03a 	or	r2,r3,r2
    c084:	10801814 	ori	r2,r2,96
    c088:	e0bffc15 	stw	r2,-16(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    c08c:	e0bffd17 	ldw	r2,-12(fp)
    c090:	10800317 	ldw	r2,12(r2)
    c094:	10800404 	addi	r2,r2,16
    c098:	e0fffc17 	ldw	r3,-16(fp)
    c09c:	10c00035 	stwio	r3,0(r2)
    c0a0:	00001106 	br	c0e8 <alt_avalon_sgdma_do_async_transfer+0x124>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    c0a4:	e0bffd17 	ldw	r2,-12(fp)
    c0a8:	10800317 	ldw	r2,12(r2)
    c0ac:	10800404 	addi	r2,r2,16
    c0b0:	10800037 	ldwio	r2,0(r2)
    c0b4:	e0bffc15 	stw	r2,-16(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
    c0b8:	e0bffc17 	ldw	r2,-16(fp)
    c0bc:	10801814 	ori	r2,r2,96
    c0c0:	e0bffc15 	stw	r2,-16(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
    c0c4:	e0fffc17 	ldw	r3,-16(fp)
    c0c8:	00bffbc4 	movi	r2,-17
    c0cc:	1884703a 	and	r2,r3,r2
    c0d0:	e0bffc15 	stw	r2,-16(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    c0d4:	e0bffd17 	ldw	r2,-12(fp)
    c0d8:	10800317 	ldw	r2,12(r2)
    c0dc:	10800404 	addi	r2,r2,16
    c0e0:	e0fffc17 	ldw	r3,-16(fp)
    c0e4:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
    c0e8:	e03fff15 	stw	zero,-4(fp)
    c0ec:	e0bfff17 	ldw	r2,-4(fp)
}
    c0f0:	e037883a 	mov	sp,fp
    c0f4:	df000017 	ldw	fp,0(sp)
    c0f8:	dec00104 	addi	sp,sp,4
    c0fc:	f800283a 	ret

0000c100 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
    c100:	defffc04 	addi	sp,sp,-16
    c104:	df000315 	stw	fp,12(sp)
    c108:	df000304 	addi	fp,sp,12
    c10c:	e13ffe15 	stw	r4,-8(fp)
    c110:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    c114:	e0bffe17 	ldw	r2,-8(fp)
    c118:	10800317 	ldw	r2,12(r2)
    c11c:	10800037 	ldwio	r2,0(r2)
    c120:	1080040c 	andi	r2,r2,16
    c124:	1004c03a 	cmpne	r2,r2,zero
    c128:	103ffa1e 	bne	r2,zero,c114 <alt_avalon_sgdma_do_sync_transfer+0x14>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    c12c:	e0bffe17 	ldw	r2,-8(fp)
    c130:	10800317 	ldw	r2,12(r2)
    c134:	11000404 	addi	r4,r2,16
    c138:	e0bffe17 	ldw	r2,-8(fp)
    c13c:	10800317 	ldw	r2,12(r2)
    c140:	10800404 	addi	r2,r2,16
    c144:	10c00037 	ldwio	r3,0(r2)
    c148:	00bff7c4 	movi	r2,-33
    c14c:	1886703a 	and	r3,r3,r2
    c150:	2005883a 	mov	r2,r4
    c154:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    c158:	e0bffe17 	ldw	r2,-8(fp)
    c15c:	10800317 	ldw	r2,12(r2)
    c160:	1007883a 	mov	r3,r2
    c164:	00803fc4 	movi	r2,255
    c168:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
    c16c:	e0bffe17 	ldw	r2,-8(fp)
    c170:	10800317 	ldw	r2,12(r2)
    c174:	10800804 	addi	r2,r2,32
    c178:	e0ffff17 	ldw	r3,-4(fp)
    c17c:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    c180:	e0bffe17 	ldw	r2,-8(fp)
    c184:	10800317 	ldw	r2,12(r2)
    c188:	11000404 	addi	r4,r2,16
    c18c:	e0bffe17 	ldw	r2,-8(fp)
    c190:	10800317 	ldw	r2,12(r2)
    c194:	10800404 	addi	r2,r2,16
    c198:	10800037 	ldwio	r2,0(r2)
    c19c:	10c01814 	ori	r3,r2,96
    c1a0:	2005883a 	mov	r2,r4
    c1a4:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    c1a8:	e0bffe17 	ldw	r2,-8(fp)
    c1ac:	10800317 	ldw	r2,12(r2)
    c1b0:	10800037 	ldwio	r2,0(r2)
    c1b4:	1080040c 	andi	r2,r2,16
    c1b8:	1004c03a 	cmpne	r2,r2,zero
    c1bc:	103ffa1e 	bne	r2,zero,c1a8 <alt_avalon_sgdma_do_sync_transfer+0xa8>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
    c1c0:	e0bffe17 	ldw	r2,-8(fp)
    c1c4:	10800317 	ldw	r2,12(r2)
    c1c8:	11000404 	addi	r4,r2,16
    c1cc:	e0bffe17 	ldw	r2,-8(fp)
    c1d0:	10800317 	ldw	r2,12(r2)
    c1d4:	10800404 	addi	r2,r2,16
    c1d8:	10c00037 	ldwio	r3,0(r2)
    c1dc:	00bff7c4 	movi	r2,-33
    c1e0:	1886703a 	and	r3,r3,r2
    c1e4:	2005883a 	mov	r2,r4
    c1e8:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
    c1ec:	e0bffe17 	ldw	r2,-8(fp)
    c1f0:	10800317 	ldw	r2,12(r2)
    c1f4:	10800037 	ldwio	r2,0(r2)
    c1f8:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    c1fc:	e0bffe17 	ldw	r2,-8(fp)
    c200:	10800317 	ldw	r2,12(r2)
    c204:	1007883a 	mov	r3,r2
    c208:	00803fc4 	movi	r2,255
    c20c:	18800035 	stwio	r2,0(r3)

  return status;
    c210:	e0bffd03 	ldbu	r2,-12(fp)
}
    c214:	e037883a 	mov	sp,fp
    c218:	df000017 	ldw	fp,0(sp)
    c21c:	dec00104 	addi	sp,sp,4
    c220:	f800283a 	ret

0000c224 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
    c224:	defff404 	addi	sp,sp,-48
    c228:	dfc00b15 	stw	ra,44(sp)
    c22c:	df000a15 	stw	fp,40(sp)
    c230:	df000a04 	addi	fp,sp,40
    c234:	e13ffb15 	stw	r4,-20(fp)
    c238:	e17ffc15 	stw	r5,-16(fp)
    c23c:	e1bffd15 	stw	r6,-12(fp)
    c240:	e1fffe15 	stw	r7,-8(fp)
    c244:	e0800217 	ldw	r2,8(fp)
    c248:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
    c24c:	e0bfff0b 	ldhu	r2,-4(fp)
    c250:	d8800015 	stw	r2,0(sp)
    c254:	e0800317 	ldw	r2,12(fp)
    c258:	d8800115 	stw	r2,4(sp)
    c25c:	e0800417 	ldw	r2,16(fp)
    c260:	d8800215 	stw	r2,8(sp)
    c264:	d8000315 	stw	zero,12(sp)
    c268:	d8000415 	stw	zero,16(sp)
    c26c:	e13ffb17 	ldw	r4,-20(fp)
    c270:	e17ffc17 	ldw	r5,-16(fp)
    c274:	e1bffd17 	ldw	r6,-12(fp)
    c278:	e1fffe17 	ldw	r7,-8(fp)
    c27c:	000c2940 	call	c294 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
    c280:	e037883a 	mov	sp,fp
    c284:	dfc00117 	ldw	ra,4(sp)
    c288:	df000017 	ldw	fp,0(sp)
    c28c:	dec00204 	addi	sp,sp,8
    c290:	f800283a 	ret

0000c294 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
    c294:	defff204 	addi	sp,sp,-56
    c298:	dfc00d15 	stw	ra,52(sp)
    c29c:	df000c15 	stw	fp,48(sp)
    c2a0:	df000c04 	addi	fp,sp,48
    c2a4:	e13ffb15 	stw	r4,-20(fp)
    c2a8:	e17ffc15 	stw	r5,-16(fp)
    c2ac:	e1bffd15 	stw	r6,-12(fp)
    c2b0:	e1fffe15 	stw	r7,-8(fp)
    c2b4:	e0800217 	ldw	r2,8(fp)
    c2b8:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
    c2bc:	e0bfff0b 	ldhu	r2,-4(fp)
    c2c0:	d8800015 	stw	r2,0(sp)
    c2c4:	d8000115 	stw	zero,4(sp)
    c2c8:	e0800317 	ldw	r2,12(fp)
    c2cc:	d8800215 	stw	r2,8(sp)
    c2d0:	e0800417 	ldw	r2,16(fp)
    c2d4:	d8800315 	stw	r2,12(sp)
    c2d8:	e0800517 	ldw	r2,20(fp)
    c2dc:	d8800415 	stw	r2,16(sp)
    c2e0:	e0800617 	ldw	r2,24(fp)
    c2e4:	d8800515 	stw	r2,20(sp)
    c2e8:	d8000615 	stw	zero,24(sp)
    c2ec:	e13ffb17 	ldw	r4,-20(fp)
    c2f0:	e17ffc17 	ldw	r5,-16(fp)
    c2f4:	e1bffd17 	ldw	r6,-12(fp)
    c2f8:	e1fffe17 	ldw	r7,-8(fp)
    c2fc:	000c77c0 	call	c77c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
    c300:	e037883a 	mov	sp,fp
    c304:	dfc00117 	ldw	ra,4(sp)
    c308:	df000017 	ldw	fp,0(sp)
    c30c:	dec00204 	addi	sp,sp,8
    c310:	f800283a 	ret

0000c314 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
    c314:	defff804 	addi	sp,sp,-32
    c318:	dfc00715 	stw	ra,28(sp)
    c31c:	df000615 	stw	fp,24(sp)
    c320:	df000604 	addi	fp,sp,24
    c324:	e13ffc15 	stw	r4,-16(fp)
    c328:	e17ffd15 	stw	r5,-12(fp)
    c32c:	e1bffe15 	stw	r6,-8(fp)
    c330:	e1ffff0d 	sth	r7,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
    c334:	e1ffff0b 	ldhu	r7,-4(fp)
    c338:	e0800217 	ldw	r2,8(fp)
    c33c:	d8800015 	stw	r2,0(sp)
    c340:	d8000115 	stw	zero,4(sp)
    c344:	e13ffc17 	ldw	r4,-16(fp)
    c348:	e17ffd17 	ldw	r5,-12(fp)
    c34c:	e1bffe17 	ldw	r6,-8(fp)
    c350:	000c3680 	call	c368 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
    c354:	e037883a 	mov	sp,fp
    c358:	dfc00117 	ldw	ra,4(sp)
    c35c:	df000017 	ldw	fp,0(sp)
    c360:	dec00204 	addi	sp,sp,8
    c364:	f800283a 	ret

0000c368 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
    c368:	defff304 	addi	sp,sp,-52
    c36c:	dfc00c15 	stw	ra,48(sp)
    c370:	df000b15 	stw	fp,44(sp)
    c374:	df000b04 	addi	fp,sp,44
    c378:	e13ffc15 	stw	r4,-16(fp)
    c37c:	e17ffd15 	stw	r5,-12(fp)
    c380:	e1bffe15 	stw	r6,-8(fp)
    c384:	e1ffff0d 	sth	r7,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
    c388:	e0bfff0b 	ldhu	r2,-4(fp)
    c38c:	d8800015 	stw	r2,0(sp)
    c390:	d8000115 	stw	zero,4(sp)
    c394:	d8000215 	stw	zero,8(sp)
    c398:	e0800217 	ldw	r2,8(fp)
    c39c:	d8800315 	stw	r2,12(sp)
    c3a0:	d8000415 	stw	zero,16(sp)
    c3a4:	e0800317 	ldw	r2,12(fp)
    c3a8:	d8800515 	stw	r2,20(sp)
    c3ac:	d8000615 	stw	zero,24(sp)
    c3b0:	e13ffc17 	ldw	r4,-16(fp)
    c3b4:	e17ffd17 	ldw	r5,-12(fp)
    c3b8:	000d883a 	mov	r6,zero
    c3bc:	e1fffe17 	ldw	r7,-8(fp)
    c3c0:	000c77c0 	call	c77c <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
    c3c4:	e037883a 	mov	sp,fp
    c3c8:	dfc00117 	ldw	ra,4(sp)
    c3cc:	df000017 	ldw	fp,0(sp)
    c3d0:	dec00204 	addi	sp,sp,8
    c3d4:	f800283a 	ret

0000c3d8 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
    c3d8:	defff404 	addi	sp,sp,-48
    c3dc:	dfc00b15 	stw	ra,44(sp)
    c3e0:	df000a15 	stw	fp,40(sp)
    c3e4:	df000a04 	addi	fp,sp,40
    c3e8:	e13ffb15 	stw	r4,-20(fp)
    c3ec:	e17ffc15 	stw	r5,-16(fp)
    c3f0:	e1bffd15 	stw	r6,-12(fp)
    c3f4:	e0800517 	ldw	r2,20(fp)
    c3f8:	e1fffe0d 	sth	r7,-8(fp)
    c3fc:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
    c400:	e1fffe0b 	ldhu	r7,-8(fp)
    c404:	e0ffff03 	ldbu	r3,-4(fp)
    c408:	e0800217 	ldw	r2,8(fp)
    c40c:	d8800015 	stw	r2,0(sp)
    c410:	e0800317 	ldw	r2,12(fp)
    c414:	d8800115 	stw	r2,4(sp)
    c418:	e0800417 	ldw	r2,16(fp)
    c41c:	d8800215 	stw	r2,8(sp)
    c420:	d8000315 	stw	zero,12(sp)
    c424:	d8c00415 	stw	r3,16(sp)
    c428:	e13ffb17 	ldw	r4,-20(fp)
    c42c:	e17ffc17 	ldw	r5,-16(fp)
    c430:	e1bffd17 	ldw	r6,-12(fp)
    c434:	000c44c0 	call	c44c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
    c438:	e037883a 	mov	sp,fp
    c43c:	dfc00117 	ldw	ra,4(sp)
    c440:	df000017 	ldw	fp,0(sp)
    c444:	dec00204 	addi	sp,sp,8
    c448:	f800283a 	ret

0000c44c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
    c44c:	defff204 	addi	sp,sp,-56
    c450:	dfc00d15 	stw	ra,52(sp)
    c454:	df000c15 	stw	fp,48(sp)
    c458:	df000c04 	addi	fp,sp,48
    c45c:	e13ffb15 	stw	r4,-20(fp)
    c460:	e17ffc15 	stw	r5,-16(fp)
    c464:	e1bffd15 	stw	r6,-12(fp)
    c468:	e0800617 	ldw	r2,24(fp)
    c46c:	e1fffe0d 	sth	r7,-8(fp)
    c470:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
    c474:	e0bffe0b 	ldhu	r2,-8(fp)
    c478:	e0ffff03 	ldbu	r3,-4(fp)
    c47c:	d8800015 	stw	r2,0(sp)
    c480:	e0800417 	ldw	r2,16(fp)
    c484:	d8800115 	stw	r2,4(sp)
    c488:	e0800217 	ldw	r2,8(fp)
    c48c:	d8800215 	stw	r2,8(sp)
    c490:	e0800317 	ldw	r2,12(fp)
    c494:	d8800315 	stw	r2,12(sp)
    c498:	e0800517 	ldw	r2,20(fp)
    c49c:	d8800415 	stw	r2,16(sp)
    c4a0:	d8000515 	stw	zero,20(sp)
    c4a4:	d8c00615 	stw	r3,24(sp)
    c4a8:	e13ffb17 	ldw	r4,-20(fp)
    c4ac:	e17ffc17 	ldw	r5,-16(fp)
    c4b0:	e1bffd17 	ldw	r6,-12(fp)
    c4b4:	000f883a 	mov	r7,zero
    c4b8:	000c77c0 	call	c77c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
    c4bc:	e037883a 	mov	sp,fp
    c4c0:	dfc00117 	ldw	ra,4(sp)
    c4c4:	df000017 	ldw	fp,0(sp)
    c4c8:	dec00204 	addi	sp,sp,8
    c4cc:	f800283a 	ret

0000c4d0 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
    c4d0:	defffb04 	addi	sp,sp,-20
    c4d4:	df000415 	stw	fp,16(sp)
    c4d8:	df000404 	addi	fp,sp,16
    c4dc:	e13ffc15 	stw	r4,-16(fp)
    c4e0:	e17ffd15 	stw	r5,-12(fp)
    c4e4:	e1bffe15 	stw	r6,-8(fp)
    c4e8:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
    c4ec:	e0fffc17 	ldw	r3,-16(fp)
    c4f0:	e0bffd17 	ldw	r2,-12(fp)
    c4f4:	18800915 	stw	r2,36(r3)
  dev->callback_context = context;
    c4f8:	e0fffc17 	ldw	r3,-16(fp)
    c4fc:	e0bfff17 	ldw	r2,-4(fp)
    c500:	18800a15 	stw	r2,40(r3)
  dev->chain_control    = chain_control;
    c504:	e0fffc17 	ldw	r3,-16(fp)
    c508:	e0bffe17 	ldw	r2,-8(fp)
    c50c:	18800b15 	stw	r2,44(r3)
}
    c510:	e037883a 	mov	sp,fp
    c514:	df000017 	ldw	fp,0(sp)
    c518:	dec00104 	addi	sp,sp,4
    c51c:	f800283a 	ret

0000c520 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
    c520:	defffd04 	addi	sp,sp,-12
    c524:	df000215 	stw	fp,8(sp)
    c528:	df000204 	addi	fp,sp,8
    c52c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    c530:	e0bfff17 	ldw	r2,-4(fp)
    c534:	10800317 	ldw	r2,12(r2)
    c538:	10800404 	addi	r2,r2,16
    c53c:	10800037 	ldwio	r2,0(r2)
    c540:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
    c544:	e0bffe17 	ldw	r2,-8(fp)
    c548:	10800814 	ori	r2,r2,32
    c54c:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    c550:	e0bfff17 	ldw	r2,-4(fp)
    c554:	10800317 	ldw	r2,12(r2)
    c558:	10800404 	addi	r2,r2,16
    c55c:	e0fffe17 	ldw	r3,-8(fp)
    c560:	10c00035 	stwio	r3,0(r2)
}
    c564:	e037883a 	mov	sp,fp
    c568:	df000017 	ldw	fp,0(sp)
    c56c:	dec00104 	addi	sp,sp,4
    c570:	f800283a 	ret

0000c574 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
    c574:	defffd04 	addi	sp,sp,-12
    c578:	df000215 	stw	fp,8(sp)
    c57c:	df000204 	addi	fp,sp,8
    c580:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    c584:	e0bfff17 	ldw	r2,-4(fp)
    c588:	10800317 	ldw	r2,12(r2)
    c58c:	10800404 	addi	r2,r2,16
    c590:	10800037 	ldwio	r2,0(r2)
    c594:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
    c598:	e0fffe17 	ldw	r3,-8(fp)
    c59c:	00bff7c4 	movi	r2,-33
    c5a0:	1884703a 	and	r2,r3,r2
    c5a4:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    c5a8:	e0bfff17 	ldw	r2,-4(fp)
    c5ac:	10800317 	ldw	r2,12(r2)
    c5b0:	10800404 	addi	r2,r2,16
    c5b4:	e0fffe17 	ldw	r3,-8(fp)
    c5b8:	10c00035 	stwio	r3,0(r2)
}
    c5bc:	e037883a 	mov	sp,fp
    c5c0:	df000017 	ldw	fp,0(sp)
    c5c4:	dec00104 	addi	sp,sp,4
    c5c8:	f800283a 	ret

0000c5cc <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
    c5cc:	defffd04 	addi	sp,sp,-12
    c5d0:	df000215 	stw	fp,8(sp)
    c5d4:	df000204 	addi	fp,sp,8
    c5d8:	e13ffe15 	stw	r4,-8(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
    c5dc:	e0bffe17 	ldw	r2,-8(fp)
    c5e0:	10800784 	addi	r2,r2,30
    c5e4:	10800023 	ldbuio	r2,0(r2)
    c5e8:	10801fcc 	andi	r2,r2,127
    c5ec:	1005003a 	cmpeq	r2,r2,zero
    c5f0:	1000031e 	bne	r2,zero,c600 <alt_avalon_sgdma_check_descriptor_status+0x34>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
    c5f4:	00bffec4 	movi	r2,-5
    c5f8:	e0bfff15 	stw	r2,-4(fp)
    c5fc:	00000a06 	br	c628 <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
    c600:	e0bffe17 	ldw	r2,-8(fp)
    c604:	108007c4 	addi	r2,r2,31
    c608:	10800023 	ldbuio	r2,0(r2)
    c60c:	1080200c 	andi	r2,r2,128
    c610:	1005003a 	cmpeq	r2,r2,zero
    c614:	1000031e 	bne	r2,zero,c624 <alt_avalon_sgdma_check_descriptor_status+0x58>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
    c618:	00bfe244 	movi	r2,-119
    c61c:	e0bfff15 	stw	r2,-4(fp)
    c620:	00000106 	br	c628 <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

    return 0;
    c624:	e03fff15 	stw	zero,-4(fp)
    c628:	e0bfff17 	ldw	r2,-4(fp)
}
    c62c:	e037883a 	mov	sp,fp
    c630:	df000017 	ldw	fp,0(sp)
    c634:	dec00104 	addi	sp,sp,4
    c638:	f800283a 	ret

0000c63c <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
    c63c:	defffc04 	addi	sp,sp,-16
    c640:	dfc00315 	stw	ra,12(sp)
    c644:	df000215 	stw	fp,8(sp)
    c648:	df000204 	addi	fp,sp,8
    c64c:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
    c650:	e13fff17 	ldw	r4,-4(fp)
    c654:	d1600d04 	addi	r5,gp,-32716
    c658:	000dab00 	call	dab0 <alt_find_dev>
    c65c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
    c660:	e0bffe17 	ldw	r2,-8(fp)
    c664:	1004c03a 	cmpne	r2,r2,zero
    c668:	1000041e 	bne	r2,zero,c67c <alt_avalon_sgdma_open+0x40>
    ALT_ERRNO = ENODEV;
    c66c:	000c6940 	call	c694 <alt_get_errno>
    c670:	1007883a 	mov	r3,r2
    c674:	008004c4 	movi	r2,19
    c678:	18800015 	stw	r2,0(r3)
  }

  return dev;
    c67c:	e0bffe17 	ldw	r2,-8(fp)
}
    c680:	e037883a 	mov	sp,fp
    c684:	dfc00117 	ldw	ra,4(sp)
    c688:	df000017 	ldw	fp,0(sp)
    c68c:	dec00204 	addi	sp,sp,8
    c690:	f800283a 	ret

0000c694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c694:	defffd04 	addi	sp,sp,-12
    c698:	dfc00215 	stw	ra,8(sp)
    c69c:	df000115 	stw	fp,4(sp)
    c6a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c6a4:	00800074 	movhi	r2,1
    c6a8:	10840b04 	addi	r2,r2,4140
    c6ac:	10800017 	ldw	r2,0(r2)
    c6b0:	1005003a 	cmpeq	r2,r2,zero
    c6b4:	1000061e 	bne	r2,zero,c6d0 <alt_get_errno+0x3c>
    c6b8:	00800074 	movhi	r2,1
    c6bc:	10840b04 	addi	r2,r2,4140
    c6c0:	10800017 	ldw	r2,0(r2)
    c6c4:	103ee83a 	callr	r2
    c6c8:	e0bfff15 	stw	r2,-4(fp)
    c6cc:	00000306 	br	c6dc <alt_get_errno+0x48>
    c6d0:	00800074 	movhi	r2,1
    c6d4:	108b0404 	addi	r2,r2,11280
    c6d8:	e0bfff15 	stw	r2,-4(fp)
    c6dc:	e0bfff17 	ldw	r2,-4(fp)
}
    c6e0:	e037883a 	mov	sp,fp
    c6e4:	dfc00117 	ldw	ra,4(sp)
    c6e8:	df000017 	ldw	fp,0(sp)
    c6ec:	dec00204 	addi	sp,sp,8
    c6f0:	f800283a 	ret

0000c6f4 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
    c6f4:	defff104 	addi	sp,sp,-60
    c6f8:	dfc00e15 	stw	ra,56(sp)
    c6fc:	df000d15 	stw	fp,52(sp)
    c700:	df000d04 	addi	fp,sp,52
    c704:	e13ffa15 	stw	r4,-24(fp)
    c708:	e17ffb15 	stw	r5,-20(fp)
    c70c:	e1bffc15 	stw	r6,-16(fp)
    c710:	e1fffd15 	stw	r7,-12(fp)
    c714:	e0800217 	ldw	r2,8(fp)
    c718:	e0c00617 	ldw	r3,24(fp)
    c71c:	e0bffe0d 	sth	r2,-8(fp)
    c720:	e0ffff05 	stb	r3,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
    c724:	e0bffe0b 	ldhu	r2,-8(fp)
    c728:	e0ffff03 	ldbu	r3,-4(fp)
    c72c:	d8800015 	stw	r2,0(sp)
    c730:	e0800317 	ldw	r2,12(fp)
    c734:	d8800115 	stw	r2,4(sp)
    c738:	e0800417 	ldw	r2,16(fp)
    c73c:	d8800215 	stw	r2,8(sp)
    c740:	e0800517 	ldw	r2,20(fp)
    c744:	d8800315 	stw	r2,12(sp)
    c748:	d8000415 	stw	zero,16(sp)
    c74c:	d8000515 	stw	zero,20(sp)
    c750:	d8c00615 	stw	r3,24(sp)
    c754:	e13ffa17 	ldw	r4,-24(fp)
    c758:	e17ffb17 	ldw	r5,-20(fp)
    c75c:	e1bffc17 	ldw	r6,-16(fp)
    c760:	e1fffd17 	ldw	r7,-12(fp)
    c764:	000c77c0 	call	c77c <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
    c768:	e037883a 	mov	sp,fp
    c76c:	dfc00117 	ldw	ra,4(sp)
    c770:	df000017 	ldw	fp,0(sp)
    c774:	dec00204 	addi	sp,sp,8
    c778:	f800283a 	ret

0000c77c <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
    c77c:	defff204 	addi	sp,sp,-56
    c780:	dfc00d15 	stw	ra,52(sp)
    c784:	df000c15 	stw	fp,48(sp)
    c788:	df000c04 	addi	fp,sp,48
    c78c:	e13ff415 	stw	r4,-48(fp)
    c790:	e17ff515 	stw	r5,-44(fp)
    c794:	e1bff615 	stw	r6,-40(fp)
    c798:	e1fff715 	stw	r7,-36(fp)
    c79c:	e0800217 	ldw	r2,8(fp)
    c7a0:	e0c00817 	ldw	r3,32(fp)
    c7a4:	e0bff80d 	sth	r2,-32(fp)
    c7a8:	e0fff905 	stb	r3,-28(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    c7ac:	e0bff517 	ldw	r2,-44(fp)
    c7b0:	110007c4 	addi	r4,r2,31
    c7b4:	e0bff517 	ldw	r2,-44(fp)
    c7b8:	108007c3 	ldbu	r2,31(r2)
    c7bc:	10c03fcc 	andi	r3,r2,255
    c7c0:	00bfdfc4 	movi	r2,-129
    c7c4:	1886703a 	and	r3,r3,r2
    c7c8:	2005883a 	mov	r2,r4
    c7cc:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
    c7d0:	e13ff417 	ldw	r4,-48(fp)
    c7d4:	e0bff617 	ldw	r2,-40(fp)
    c7d8:	11403fcc 	andi	r5,r2,255
    c7dc:	20800003 	ldbu	r2,0(r4)
    c7e0:	1004703a 	and	r2,r2,zero
    c7e4:	1007883a 	mov	r3,r2
    c7e8:	2805883a 	mov	r2,r5
    c7ec:	1884b03a 	or	r2,r3,r2
    c7f0:	20800005 	stb	r2,0(r4)
    c7f4:	e0bff617 	ldw	r2,-40(fp)
    c7f8:	1004d23a 	srli	r2,r2,8
    c7fc:	11403fcc 	andi	r5,r2,255
    c800:	20800043 	ldbu	r2,1(r4)
    c804:	1004703a 	and	r2,r2,zero
    c808:	1007883a 	mov	r3,r2
    c80c:	2805883a 	mov	r2,r5
    c810:	1884b03a 	or	r2,r3,r2
    c814:	20800045 	stb	r2,1(r4)
    c818:	e0bff617 	ldw	r2,-40(fp)
    c81c:	1004d43a 	srli	r2,r2,16
    c820:	11403fcc 	andi	r5,r2,255
    c824:	20800083 	ldbu	r2,2(r4)
    c828:	1004703a 	and	r2,r2,zero
    c82c:	1007883a 	mov	r3,r2
    c830:	2805883a 	mov	r2,r5
    c834:	1884b03a 	or	r2,r3,r2
    c838:	20800085 	stb	r2,2(r4)
    c83c:	e0bff617 	ldw	r2,-40(fp)
    c840:	100ad63a 	srli	r5,r2,24
    c844:	208000c3 	ldbu	r2,3(r4)
    c848:	1004703a 	and	r2,r2,zero
    c84c:	1007883a 	mov	r3,r2
    c850:	2805883a 	mov	r2,r5
    c854:	1884b03a 	or	r2,r3,r2
    c858:	208000c5 	stb	r2,3(r4)
  desc->write_addr               = write_addr;
    c85c:	e13ff417 	ldw	r4,-48(fp)
    c860:	e0bff717 	ldw	r2,-36(fp)
    c864:	11403fcc 	andi	r5,r2,255
    c868:	20800203 	ldbu	r2,8(r4)
    c86c:	1004703a 	and	r2,r2,zero
    c870:	1007883a 	mov	r3,r2
    c874:	2805883a 	mov	r2,r5
    c878:	1884b03a 	or	r2,r3,r2
    c87c:	20800205 	stb	r2,8(r4)
    c880:	e0bff717 	ldw	r2,-36(fp)
    c884:	1004d23a 	srli	r2,r2,8
    c888:	11403fcc 	andi	r5,r2,255
    c88c:	20800243 	ldbu	r2,9(r4)
    c890:	1004703a 	and	r2,r2,zero
    c894:	1007883a 	mov	r3,r2
    c898:	2805883a 	mov	r2,r5
    c89c:	1884b03a 	or	r2,r3,r2
    c8a0:	20800245 	stb	r2,9(r4)
    c8a4:	e0bff717 	ldw	r2,-36(fp)
    c8a8:	1004d43a 	srli	r2,r2,16
    c8ac:	11403fcc 	andi	r5,r2,255
    c8b0:	20800283 	ldbu	r2,10(r4)
    c8b4:	1004703a 	and	r2,r2,zero
    c8b8:	1007883a 	mov	r3,r2
    c8bc:	2805883a 	mov	r2,r5
    c8c0:	1884b03a 	or	r2,r3,r2
    c8c4:	20800285 	stb	r2,10(r4)
    c8c8:	e0bff717 	ldw	r2,-36(fp)
    c8cc:	100ad63a 	srli	r5,r2,24
    c8d0:	208002c3 	ldbu	r2,11(r4)
    c8d4:	1004703a 	and	r2,r2,zero
    c8d8:	1007883a 	mov	r3,r2
    c8dc:	2805883a 	mov	r2,r5
    c8e0:	1884b03a 	or	r2,r3,r2
    c8e4:	208002c5 	stb	r2,11(r4)
  desc->next                     = (alt_u32 *) next;
    c8e8:	e1bff517 	ldw	r6,-44(fp)
    c8ec:	e13ff417 	ldw	r4,-48(fp)
    c8f0:	31403fcc 	andi	r5,r6,255
    c8f4:	20800403 	ldbu	r2,16(r4)
    c8f8:	1004703a 	and	r2,r2,zero
    c8fc:	1007883a 	mov	r3,r2
    c900:	2805883a 	mov	r2,r5
    c904:	1884b03a 	or	r2,r3,r2
    c908:	20800405 	stb	r2,16(r4)
    c90c:	3004d23a 	srli	r2,r6,8
    c910:	11403fcc 	andi	r5,r2,255
    c914:	20800443 	ldbu	r2,17(r4)
    c918:	1004703a 	and	r2,r2,zero
    c91c:	1007883a 	mov	r3,r2
    c920:	2805883a 	mov	r2,r5
    c924:	1884b03a 	or	r2,r3,r2
    c928:	20800445 	stb	r2,17(r4)
    c92c:	3004d43a 	srli	r2,r6,16
    c930:	11403fcc 	andi	r5,r2,255
    c934:	20800483 	ldbu	r2,18(r4)
    c938:	1004703a 	and	r2,r2,zero
    c93c:	1007883a 	mov	r3,r2
    c940:	2805883a 	mov	r2,r5
    c944:	1884b03a 	or	r2,r3,r2
    c948:	20800485 	stb	r2,18(r4)
    c94c:	300ad63a 	srli	r5,r6,24
    c950:	208004c3 	ldbu	r2,19(r4)
    c954:	1004703a 	and	r2,r2,zero
    c958:	1007883a 	mov	r3,r2
    c95c:	2805883a 	mov	r2,r5
    c960:	1884b03a 	or	r2,r3,r2
    c964:	208004c5 	stb	r2,19(r4)
  desc->read_addr_pad            = 0x0;
    c968:	e0fff417 	ldw	r3,-48(fp)
    c96c:	18800103 	ldbu	r2,4(r3)
    c970:	1004703a 	and	r2,r2,zero
    c974:	18800105 	stb	r2,4(r3)
    c978:	18800143 	ldbu	r2,5(r3)
    c97c:	1004703a 	and	r2,r2,zero
    c980:	18800145 	stb	r2,5(r3)
    c984:	18800183 	ldbu	r2,6(r3)
    c988:	1004703a 	and	r2,r2,zero
    c98c:	18800185 	stb	r2,6(r3)
    c990:	188001c3 	ldbu	r2,7(r3)
    c994:	1004703a 	and	r2,r2,zero
    c998:	188001c5 	stb	r2,7(r3)
  desc->write_addr_pad           = 0x0;
    c99c:	e0fff417 	ldw	r3,-48(fp)
    c9a0:	18800303 	ldbu	r2,12(r3)
    c9a4:	1004703a 	and	r2,r2,zero
    c9a8:	18800305 	stb	r2,12(r3)
    c9ac:	18800343 	ldbu	r2,13(r3)
    c9b0:	1004703a 	and	r2,r2,zero
    c9b4:	18800345 	stb	r2,13(r3)
    c9b8:	18800383 	ldbu	r2,14(r3)
    c9bc:	1004703a 	and	r2,r2,zero
    c9c0:	18800385 	stb	r2,14(r3)
    c9c4:	188003c3 	ldbu	r2,15(r3)
    c9c8:	1004703a 	and	r2,r2,zero
    c9cc:	188003c5 	stb	r2,15(r3)
  desc->next_pad                 = 0x0;
    c9d0:	e0fff417 	ldw	r3,-48(fp)
    c9d4:	18800503 	ldbu	r2,20(r3)
    c9d8:	1004703a 	and	r2,r2,zero
    c9dc:	18800505 	stb	r2,20(r3)
    c9e0:	18800543 	ldbu	r2,21(r3)
    c9e4:	1004703a 	and	r2,r2,zero
    c9e8:	18800545 	stb	r2,21(r3)
    c9ec:	18800583 	ldbu	r2,22(r3)
    c9f0:	1004703a 	and	r2,r2,zero
    c9f4:	18800585 	stb	r2,22(r3)
    c9f8:	188005c3 	ldbu	r2,23(r3)
    c9fc:	1004703a 	and	r2,r2,zero
    ca00:	188005c5 	stb	r2,23(r3)
  desc->bytes_to_transfer        = length_or_eop;
    ca04:	e13ff417 	ldw	r4,-48(fp)
    ca08:	e0bff80b 	ldhu	r2,-32(fp)
    ca0c:	11403fcc 	andi	r5,r2,255
    ca10:	20800603 	ldbu	r2,24(r4)
    ca14:	1004703a 	and	r2,r2,zero
    ca18:	1007883a 	mov	r3,r2
    ca1c:	2805883a 	mov	r2,r5
    ca20:	1884b03a 	or	r2,r3,r2
    ca24:	20800605 	stb	r2,24(r4)
    ca28:	e0bff80b 	ldhu	r2,-32(fp)
    ca2c:	1004d23a 	srli	r2,r2,8
    ca30:	117fffcc 	andi	r5,r2,65535
    ca34:	20800643 	ldbu	r2,25(r4)
    ca38:	1004703a 	and	r2,r2,zero
    ca3c:	1007883a 	mov	r3,r2
    ca40:	2805883a 	mov	r2,r5
    ca44:	1884b03a 	or	r2,r3,r2
    ca48:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
    ca4c:	e0fff417 	ldw	r3,-48(fp)
    ca50:	18800703 	ldbu	r2,28(r3)
    ca54:	1004703a 	and	r2,r2,zero
    ca58:	18800705 	stb	r2,28(r3)
    ca5c:	18800743 	ldbu	r2,29(r3)
    ca60:	1004703a 	and	r2,r2,zero
    ca64:	18800745 	stb	r2,29(r3)
  desc->status                   = 0x0;
    ca68:	e0bff417 	ldw	r2,-48(fp)
    ca6c:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
    ca70:	e0800617 	ldw	r2,24(fp)
    ca74:	1007883a 	mov	r3,r2
    ca78:	e0bff417 	ldw	r2,-48(fp)
    ca7c:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
    ca80:	e0800717 	ldw	r2,28(fp)
    ca84:	1007883a 	mov	r3,r2
    ca88:	e0bff417 	ldw	r2,-48(fp)
    ca8c:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
    ca90:	e0800317 	ldw	r2,12(fp)
    ca94:	1005003a 	cmpeq	r2,r2,zero
    ca98:	1000031e 	bne	r2,zero,caa8 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
    ca9c:	00bfe044 	movi	r2,-127
    caa0:	e0bfff05 	stb	r2,-4(fp)
    caa4:	00000206 	br	cab0 <alt_avalon_sgdma_construct_descriptor_burst+0x334>
    caa8:	00bfe004 	movi	r2,-128
    caac:	e0bfff05 	stb	r2,-4(fp)
    cab0:	e0800417 	ldw	r2,16(fp)
    cab4:	1005003a 	cmpeq	r2,r2,zero
    cab8:	1000031e 	bne	r2,zero,cac8 <alt_avalon_sgdma_construct_descriptor_burst+0x34c>
    cabc:	00800084 	movi	r2,2
    cac0:	e0bffe05 	stb	r2,-8(fp)
    cac4:	00000106 	br	cacc <alt_avalon_sgdma_construct_descriptor_burst+0x350>
    cac8:	e03ffe05 	stb	zero,-8(fp)
    cacc:	e0ffff03 	ldbu	r3,-4(fp)
    cad0:	e13ffe03 	ldbu	r4,-8(fp)
    cad4:	1904b03a 	or	r2,r3,r4
    cad8:	e0bffd05 	stb	r2,-12(fp)
    cadc:	e0800517 	ldw	r2,20(fp)
    cae0:	1005003a 	cmpeq	r2,r2,zero
    cae4:	1000031e 	bne	r2,zero,caf4 <alt_avalon_sgdma_construct_descriptor_burst+0x378>
    cae8:	00800104 	movi	r2,4
    caec:	e0bffc05 	stb	r2,-16(fp)
    caf0:	00000106 	br	caf8 <alt_avalon_sgdma_construct_descriptor_burst+0x37c>
    caf4:	e03ffc05 	stb	zero,-16(fp)
    caf8:	e0fffd03 	ldbu	r3,-12(fp)
    cafc:	e13ffc03 	ldbu	r4,-16(fp)
    cb00:	1904b03a 	or	r2,r3,r4
    cb04:	e0bffb05 	stb	r2,-20(fp)
    cb08:	e0bff903 	ldbu	r2,-28(fp)
    cb0c:	1005003a 	cmpeq	r2,r2,zero
    cb10:	1000051e 	bne	r2,zero,cb28 <alt_avalon_sgdma_construct_descriptor_burst+0x3ac>
    cb14:	e0bff903 	ldbu	r2,-28(fp)
    cb18:	108003cc 	andi	r2,r2,15
    cb1c:	100490fa 	slli	r2,r2,3
    cb20:	e0bffa05 	stb	r2,-24(fp)
    cb24:	00000106 	br	cb2c <alt_avalon_sgdma_construct_descriptor_burst+0x3b0>
    cb28:	e03ffa05 	stb	zero,-24(fp)
    cb2c:	e0fffb03 	ldbu	r3,-20(fp)
    cb30:	e13ffa03 	ldbu	r4,-24(fp)
    cb34:	1904b03a 	or	r2,r3,r4
    cb38:	1007883a 	mov	r3,r2
    cb3c:	e0bff417 	ldw	r2,-48(fp)
    cb40:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
    cb44:	e13ff417 	ldw	r4,-48(fp)
    cb48:	01400804 	movi	r5,32
    cb4c:	000e2400 	call	e240 <alt_remap_uncached>
}
    cb50:	e037883a 	mov	sp,fp
    cb54:	dfc00117 	ldw	ra,4(sp)
    cb58:	df000017 	ldw	fp,0(sp)
    cb5c:	dec00204 	addi	sp,sp,8
    cb60:	f800283a 	ret

0000cb64 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
    cb64:	defff904 	addi	sp,sp,-28
    cb68:	dfc00615 	stw	ra,24(sp)
    cb6c:	df000515 	stw	fp,20(sp)
    cb70:	df000504 	addi	fp,sp,20
    cb74:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
    cb78:	e0bfff17 	ldw	r2,-4(fp)
    cb7c:	e0bffe15 	stw	r2,-8(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
    cb80:	e0bffe17 	ldw	r2,-8(fp)
    cb84:	10800317 	ldw	r2,12(r2)
    cb88:	11000404 	addi	r4,r2,16
    cb8c:	e0bffe17 	ldw	r2,-8(fp)
    cb90:	10800317 	ldw	r2,12(r2)
    cb94:	10800404 	addi	r2,r2,16
    cb98:	10800037 	ldwio	r2,0(r2)
    cb9c:	10a00034 	orhi	r2,r2,32768
    cba0:	1007883a 	mov	r3,r2
    cba4:	2005883a 	mov	r2,r4
    cba8:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    cbac:	e0bffe17 	ldw	r2,-8(fp)
    cbb0:	10800317 	ldw	r2,12(r2)
    cbb4:	10800404 	addi	r2,r2,16
    cbb8:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
    cbbc:	e0bffe17 	ldw	r2,-8(fp)
    cbc0:	10800917 	ldw	r2,36(r2)
    cbc4:	1005003a 	cmpeq	r2,r2,zero
    cbc8:	1000111e 	bne	r2,zero,cc10 <alt_avalon_sgdma_irq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cbcc:	0005303a 	rdctl	r2,status
    cbd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cbd4:	e0fffc17 	ldw	r3,-16(fp)
    cbd8:	00bfff84 	movi	r2,-2
    cbdc:	1884703a 	and	r2,r3,r2
    cbe0:	1001703a 	wrctl	status,r2
  
  return context;
    cbe4:	e0bffc17 	ldw	r2,-16(fp)
    cpu_sr = alt_irq_disable_all();
    cbe8:	e0bffd15 	stw	r2,-12(fp)
    (dev->callback)(dev->callback_context);
    cbec:	e0bffe17 	ldw	r2,-8(fp)
    cbf0:	10c00917 	ldw	r3,36(r2)
    cbf4:	e0bffe17 	ldw	r2,-8(fp)
    cbf8:	11000a17 	ldw	r4,40(r2)
    cbfc:	183ee83a 	callr	r3
    cc00:	e0bffd17 	ldw	r2,-12(fp)
    cc04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cc08:	e0bffb17 	ldw	r2,-20(fp)
    cc0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
    cc10:	e037883a 	mov	sp,fp
    cc14:	dfc00117 	ldw	ra,4(sp)
    cc18:	df000017 	ldw	fp,0(sp)
    cc1c:	dec00204 	addi	sp,sp,8
    cc20:	f800283a 	ret

0000cc24 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
    cc24:	defffa04 	addi	sp,sp,-24
    cc28:	dfc00515 	stw	ra,20(sp)
    cc2c:	df000415 	stw	fp,16(sp)
    cc30:	df000404 	addi	fp,sp,16
    cc34:	e13ffd15 	stw	r4,-12(fp)
    cc38:	e17ffe15 	stw	r5,-8(fp)
    cc3c:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    cc40:	e0bffd17 	ldw	r2,-12(fp)
    cc44:	10800317 	ldw	r2,12(r2)
    cc48:	10800404 	addi	r2,r2,16
    cc4c:	1007883a 	mov	r3,r2
    cc50:	00800074 	movhi	r2,1
    cc54:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    cc58:	e0bffd17 	ldw	r2,-12(fp)
    cc5c:	10800317 	ldw	r2,12(r2)
    cc60:	10800404 	addi	r2,r2,16
    cc64:	1007883a 	mov	r3,r2
    cc68:	00800074 	movhi	r2,1
    cc6c:	18800035 	stwio	r2,0(r3)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
    cc70:	e0bffd17 	ldw	r2,-12(fp)
    cc74:	10800317 	ldw	r2,12(r2)
    cc78:	10800404 	addi	r2,r2,16
    cc7c:	10000035 	stwio	zero,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    cc80:	e0bffd17 	ldw	r2,-12(fp)
    cc84:	10800317 	ldw	r2,12(r2)
    cc88:	1007883a 	mov	r3,r2
    cc8c:	00803fc4 	movi	r2,255
    cc90:	18800035 	stwio	r2,0(r3)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
    cc94:	e13ffd17 	ldw	r4,-12(fp)
    cc98:	d1600d04 	addi	r5,gp,-32716
    cc9c:	000d8d40 	call	d8d4 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
    cca0:	d8000015 	stw	zero,0(sp)
    cca4:	e13ffe17 	ldw	r4,-8(fp)
    cca8:	e17fff17 	ldw	r5,-4(fp)
    ccac:	01800074 	movhi	r6,1
    ccb0:	31b2d904 	addi	r6,r6,-13468
    ccb4:	e1fffd17 	ldw	r7,-12(fp)
    ccb8:	000db740 	call	db74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
    ccbc:	e037883a 	mov	sp,fp
    ccc0:	dfc00117 	ldw	ra,4(sp)
    ccc4:	df000017 	ldw	fp,0(sp)
    ccc8:	dec00204 	addi	sp,sp,8
    cccc:	f800283a 	ret

0000ccd0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    ccd0:	defffa04 	addi	sp,sp,-24
    ccd4:	dfc00515 	stw	ra,20(sp)
    ccd8:	df000415 	stw	fp,16(sp)
    ccdc:	df000404 	addi	fp,sp,16
    cce0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    cce4:	e0bfff17 	ldw	r2,-4(fp)
    cce8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    ccec:	e0bfff17 	ldw	r2,-4(fp)
    ccf0:	10800104 	addi	r2,r2,4
    ccf4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ccf8:	0005303a 	rdctl	r2,status
    ccfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cd00:	e0fffd17 	ldw	r3,-12(fp)
    cd04:	00bfff84 	movi	r2,-2
    cd08:	1884703a 	and	r2,r3,r2
    cd0c:	1001703a 	wrctl	status,r2
  
  return context;
    cd10:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    cd14:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    cd18:	000e3180 	call	e318 <alt_tick>
    cd1c:	e0bffe17 	ldw	r2,-8(fp)
    cd20:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cd24:	e0bffc17 	ldw	r2,-16(fp)
    cd28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    cd2c:	e037883a 	mov	sp,fp
    cd30:	dfc00117 	ldw	ra,4(sp)
    cd34:	df000017 	ldw	fp,0(sp)
    cd38:	dec00204 	addi	sp,sp,8
    cd3c:	f800283a 	ret

0000cd40 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    cd40:	defff804 	addi	sp,sp,-32
    cd44:	dfc00715 	stw	ra,28(sp)
    cd48:	df000615 	stw	fp,24(sp)
    cd4c:	df000604 	addi	fp,sp,24
    cd50:	e13ffc15 	stw	r4,-16(fp)
    cd54:	e17ffd15 	stw	r5,-12(fp)
    cd58:	e1bffe15 	stw	r6,-8(fp)
    cd5c:	e1ffff15 	stw	r7,-4(fp)
    cd60:	e0bfff17 	ldw	r2,-4(fp)
    cd64:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    cd68:	00800074 	movhi	r2,1
    cd6c:	108b0c04 	addi	r2,r2,11312
    cd70:	10800017 	ldw	r2,0(r2)
    cd74:	1004c03a 	cmpne	r2,r2,zero
    cd78:	1000041e 	bne	r2,zero,cd8c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    cd7c:	00c00074 	movhi	r3,1
    cd80:	18cb0c04 	addi	r3,r3,11312
    cd84:	e0bffb17 	ldw	r2,-20(fp)
    cd88:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    cd8c:	e0bffc17 	ldw	r2,-16(fp)
    cd90:	10800104 	addi	r2,r2,4
    cd94:	1007883a 	mov	r3,r2
    cd98:	008001c4 	movi	r2,7
    cd9c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    cda0:	d8000015 	stw	zero,0(sp)
    cda4:	e13ffd17 	ldw	r4,-12(fp)
    cda8:	e17ffe17 	ldw	r5,-8(fp)
    cdac:	01800074 	movhi	r6,1
    cdb0:	31b33404 	addi	r6,r6,-13104
    cdb4:	e1fffc17 	ldw	r7,-16(fp)
    cdb8:	000db740 	call	db74 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    cdbc:	e037883a 	mov	sp,fp
    cdc0:	dfc00117 	ldw	ra,4(sp)
    cdc4:	df000017 	ldw	fp,0(sp)
    cdc8:	dec00204 	addi	sp,sp,8
    cdcc:	f800283a 	ret

0000cdd0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    cdd0:	defffa04 	addi	sp,sp,-24
    cdd4:	dfc00515 	stw	ra,20(sp)
    cdd8:	df000415 	stw	fp,16(sp)
    cddc:	df000404 	addi	fp,sp,16
    cde0:	e13ffd15 	stw	r4,-12(fp)
    cde4:	e17ffe15 	stw	r5,-8(fp)
    cde8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    cdec:	e0bffd17 	ldw	r2,-12(fp)
    cdf0:	10800017 	ldw	r2,0(r2)
    cdf4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    cdf8:	e0bffc17 	ldw	r2,-16(fp)
    cdfc:	11000a04 	addi	r4,r2,40
    ce00:	e0bffd17 	ldw	r2,-12(fp)
    ce04:	11c00217 	ldw	r7,8(r2)
    ce08:	e17ffe17 	ldw	r5,-8(fp)
    ce0c:	e1bfff17 	ldw	r6,-4(fp)
    ce10:	000d2c80 	call	d2c8 <altera_avalon_uart_read>
      fd->fd_flags);
}
    ce14:	e037883a 	mov	sp,fp
    ce18:	dfc00117 	ldw	ra,4(sp)
    ce1c:	df000017 	ldw	fp,0(sp)
    ce20:	dec00204 	addi	sp,sp,8
    ce24:	f800283a 	ret

0000ce28 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ce28:	defffa04 	addi	sp,sp,-24
    ce2c:	dfc00515 	stw	ra,20(sp)
    ce30:	df000415 	stw	fp,16(sp)
    ce34:	df000404 	addi	fp,sp,16
    ce38:	e13ffd15 	stw	r4,-12(fp)
    ce3c:	e17ffe15 	stw	r5,-8(fp)
    ce40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    ce44:	e0bffd17 	ldw	r2,-12(fp)
    ce48:	10800017 	ldw	r2,0(r2)
    ce4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    ce50:	e0bffc17 	ldw	r2,-16(fp)
    ce54:	11000a04 	addi	r4,r2,40
    ce58:	e0bffd17 	ldw	r2,-12(fp)
    ce5c:	11c00217 	ldw	r7,8(r2)
    ce60:	e17ffe17 	ldw	r5,-8(fp)
    ce64:	e1bfff17 	ldw	r6,-4(fp)
    ce68:	000d5580 	call	d558 <altera_avalon_uart_write>
      fd->fd_flags);
}
    ce6c:	e037883a 	mov	sp,fp
    ce70:	dfc00117 	ldw	ra,4(sp)
    ce74:	df000017 	ldw	fp,0(sp)
    ce78:	dec00204 	addi	sp,sp,8
    ce7c:	f800283a 	ret

0000ce80 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    ce80:	defffc04 	addi	sp,sp,-16
    ce84:	dfc00315 	stw	ra,12(sp)
    ce88:	df000215 	stw	fp,8(sp)
    ce8c:	df000204 	addi	fp,sp,8
    ce90:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    ce94:	e0bfff17 	ldw	r2,-4(fp)
    ce98:	10800017 	ldw	r2,0(r2)
    ce9c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    cea0:	e0bffe17 	ldw	r2,-8(fp)
    cea4:	11000a04 	addi	r4,r2,40
    cea8:	e0bfff17 	ldw	r2,-4(fp)
    ceac:	11400217 	ldw	r5,8(r2)
    ceb0:	000d2680 	call	d268 <altera_avalon_uart_close>
}
    ceb4:	e037883a 	mov	sp,fp
    ceb8:	dfc00117 	ldw	ra,4(sp)
    cebc:	df000017 	ldw	fp,0(sp)
    cec0:	dec00204 	addi	sp,sp,8
    cec4:	f800283a 	ret

0000cec8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    cec8:	defff704 	addi	sp,sp,-36
    cecc:	dfc00815 	stw	ra,32(sp)
    ced0:	df000715 	stw	fp,28(sp)
    ced4:	df000704 	addi	fp,sp,28
    ced8:	e13ffc15 	stw	r4,-16(fp)
    cedc:	e17ffd15 	stw	r5,-12(fp)
    cee0:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    cee4:	e0bffc17 	ldw	r2,-16(fp)
    cee8:	10800017 	ldw	r2,0(r2)
    ceec:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    cef0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    cef4:	1004c03a 	cmpne	r2,r2,zero
    cef8:	1000061e 	bne	r2,zero,cf14 <altera_avalon_uart_init+0x4c>
    cefc:	0005883a 	mov	r2,zero
    cf00:	1004c03a 	cmpne	r2,r2,zero
    cf04:	1000031e 	bne	r2,zero,cf14 <altera_avalon_uart_init+0x4c>
    cf08:	0005883a 	mov	r2,zero
    cf0c:	1005003a 	cmpeq	r2,r2,zero
    cf10:	1000031e 	bne	r2,zero,cf20 <altera_avalon_uart_init+0x58>
    cf14:	00800044 	movi	r2,1
    cf18:	e0bfff15 	stw	r2,-4(fp)
    cf1c:	00000106 	br	cf24 <altera_avalon_uart_init+0x5c>
    cf20:	e03fff15 	stw	zero,-4(fp)
    cf24:	e0bfff17 	ldw	r2,-4(fp)
    cf28:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    cf2c:	e0bffa17 	ldw	r2,-24(fp)
    cf30:	1004c03a 	cmpne	r2,r2,zero
    cf34:	1000111e 	bne	r2,zero,cf7c <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    cf38:	e0fffc17 	ldw	r3,-16(fp)
    cf3c:	00832004 	movi	r2,3200
    cf40:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    cf44:	e0bffb17 	ldw	r2,-20(fp)
    cf48:	11000304 	addi	r4,r2,12
    cf4c:	e0bffc17 	ldw	r2,-16(fp)
    cf50:	10800117 	ldw	r2,4(r2)
    cf54:	1007883a 	mov	r3,r2
    cf58:	2005883a 	mov	r2,r4
    cf5c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    cf60:	d8000015 	stw	zero,0(sp)
    cf64:	e13ffd17 	ldw	r4,-12(fp)
    cf68:	e17ffe17 	ldw	r5,-8(fp)
    cf6c:	01800074 	movhi	r6,1
    cf70:	31b3e404 	addi	r6,r6,-12400
    cf74:	e1fffc17 	ldw	r7,-16(fp)
    cf78:	000db740 	call	db74 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    cf7c:	e037883a 	mov	sp,fp
    cf80:	dfc00117 	ldw	ra,4(sp)
    cf84:	df000017 	ldw	fp,0(sp)
    cf88:	dec00204 	addi	sp,sp,8
    cf8c:	f800283a 	ret

0000cf90 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    cf90:	defffa04 	addi	sp,sp,-24
    cf94:	dfc00515 	stw	ra,20(sp)
    cf98:	df000415 	stw	fp,16(sp)
    cf9c:	df000404 	addi	fp,sp,16
    cfa0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    cfa4:	e0bfff17 	ldw	r2,-4(fp)
    cfa8:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    cfac:	e0bffd17 	ldw	r2,-12(fp)
    cfb0:	10800017 	ldw	r2,0(r2)
    cfb4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    cfb8:	e0bffc17 	ldw	r2,-16(fp)
    cfbc:	10800204 	addi	r2,r2,8
    cfc0:	10800037 	ldwio	r2,0(r2)
    cfc4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    cfc8:	e0bffc17 	ldw	r2,-16(fp)
    cfcc:	10800204 	addi	r2,r2,8
    cfd0:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    cfd4:	e0bffc17 	ldw	r2,-16(fp)
    cfd8:	10800204 	addi	r2,r2,8
    cfdc:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    cfe0:	e0bffe17 	ldw	r2,-8(fp)
    cfe4:	1080200c 	andi	r2,r2,128
    cfe8:	1005003a 	cmpeq	r2,r2,zero
    cfec:	1000031e 	bne	r2,zero,cffc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    cff0:	e13ffd17 	ldw	r4,-12(fp)
    cff4:	e17ffe17 	ldw	r5,-8(fp)
    cff8:	000d02c0 	call	d02c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    cffc:	e0bffe17 	ldw	r2,-8(fp)
    d000:	1081100c 	andi	r2,r2,1088
    d004:	1005003a 	cmpeq	r2,r2,zero
    d008:	1000031e 	bne	r2,zero,d018 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    d00c:	e13ffd17 	ldw	r4,-12(fp)
    d010:	e17ffe17 	ldw	r5,-8(fp)
    d014:	000d10c0 	call	d10c <altera_avalon_uart_txirq>
  }
  

}
    d018:	e037883a 	mov	sp,fp
    d01c:	dfc00117 	ldw	ra,4(sp)
    d020:	df000017 	ldw	fp,0(sp)
    d024:	dec00204 	addi	sp,sp,8
    d028:	f800283a 	ret

0000d02c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    d02c:	defffc04 	addi	sp,sp,-16
    d030:	df000315 	stw	fp,12(sp)
    d034:	df000304 	addi	fp,sp,12
    d038:	e13ffe15 	stw	r4,-8(fp)
    d03c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    d040:	e0bfff17 	ldw	r2,-4(fp)
    d044:	108000cc 	andi	r2,r2,3
    d048:	1004c03a 	cmpne	r2,r2,zero
    d04c:	10002b1e 	bne	r2,zero,d0fc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    d050:	e0bffe17 	ldw	r2,-8(fp)
    d054:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    d058:	e0bffe17 	ldw	r2,-8(fp)
    d05c:	10800317 	ldw	r2,12(r2)
    d060:	10800044 	addi	r2,r2,1
    d064:	10800fcc 	andi	r2,r2,63
    d068:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    d06c:	e0bffe17 	ldw	r2,-8(fp)
    d070:	11000317 	ldw	r4,12(r2)
    d074:	e0bffe17 	ldw	r2,-8(fp)
    d078:	10800017 	ldw	r2,0(r2)
    d07c:	10800037 	ldwio	r2,0(r2)
    d080:	1007883a 	mov	r3,r2
    d084:	e0bffe17 	ldw	r2,-8(fp)
    d088:	2085883a 	add	r2,r4,r2
    d08c:	10800704 	addi	r2,r2,28
    d090:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    d094:	e0fffe17 	ldw	r3,-8(fp)
    d098:	e0bffd17 	ldw	r2,-12(fp)
    d09c:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    d0a0:	e0bffe17 	ldw	r2,-8(fp)
    d0a4:	10800317 	ldw	r2,12(r2)
    d0a8:	10800044 	addi	r2,r2,1
    d0ac:	10800fcc 	andi	r2,r2,63
    d0b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    d0b4:	e0bffe17 	ldw	r2,-8(fp)
    d0b8:	10c00217 	ldw	r3,8(r2)
    d0bc:	e0bffd17 	ldw	r2,-12(fp)
    d0c0:	18800e1e 	bne	r3,r2,d0fc <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    d0c4:	e0bffe17 	ldw	r2,-8(fp)
    d0c8:	10c00117 	ldw	r3,4(r2)
    d0cc:	00bfdfc4 	movi	r2,-129
    d0d0:	1886703a 	and	r3,r3,r2
    d0d4:	e0bffe17 	ldw	r2,-8(fp)
    d0d8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    d0dc:	e0bffe17 	ldw	r2,-8(fp)
    d0e0:	10800017 	ldw	r2,0(r2)
    d0e4:	11000304 	addi	r4,r2,12
    d0e8:	e0bffe17 	ldw	r2,-8(fp)
    d0ec:	10800117 	ldw	r2,4(r2)
    d0f0:	1007883a 	mov	r3,r2
    d0f4:	2005883a 	mov	r2,r4
    d0f8:	10c00035 	stwio	r3,0(r2)
  }   
}
    d0fc:	e037883a 	mov	sp,fp
    d100:	df000017 	ldw	fp,0(sp)
    d104:	dec00104 	addi	sp,sp,4
    d108:	f800283a 	ret

0000d10c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    d10c:	defffd04 	addi	sp,sp,-12
    d110:	df000215 	stw	fp,8(sp)
    d114:	df000204 	addi	fp,sp,8
    d118:	e13ffe15 	stw	r4,-8(fp)
    d11c:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    d120:	e0bffe17 	ldw	r2,-8(fp)
    d124:	10c00417 	ldw	r3,16(r2)
    d128:	e0bffe17 	ldw	r2,-8(fp)
    d12c:	10800517 	ldw	r2,20(r2)
    d130:	18803626 	beq	r3,r2,d20c <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    d134:	e0bffe17 	ldw	r2,-8(fp)
    d138:	10800617 	ldw	r2,24(r2)
    d13c:	1080008c 	andi	r2,r2,2
    d140:	1005003a 	cmpeq	r2,r2,zero
    d144:	1000041e 	bne	r2,zero,d158 <altera_avalon_uart_txirq+0x4c>
    d148:	e0bfff17 	ldw	r2,-4(fp)
    d14c:	1082000c 	andi	r2,r2,2048
    d150:	1005003a 	cmpeq	r2,r2,zero
    d154:	10001e1e 	bne	r2,zero,d1d0 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    d158:	e0bffe17 	ldw	r2,-8(fp)
    d15c:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    d160:	e0bffe17 	ldw	r2,-8(fp)
    d164:	10800017 	ldw	r2,0(r2)
    d168:	11000104 	addi	r4,r2,4
    d16c:	e0bffe17 	ldw	r2,-8(fp)
    d170:	10c00417 	ldw	r3,16(r2)
    d174:	e0bffe17 	ldw	r2,-8(fp)
    d178:	1885883a 	add	r2,r3,r2
    d17c:	10801704 	addi	r2,r2,92
    d180:	10800003 	ldbu	r2,0(r2)
    d184:	10c03fcc 	andi	r3,r2,255
    d188:	2005883a 	mov	r2,r4
    d18c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    d190:	e0bffe17 	ldw	r2,-8(fp)
    d194:	10800417 	ldw	r2,16(r2)
    d198:	10c00044 	addi	r3,r2,1
    d19c:	e0bffe17 	ldw	r2,-8(fp)
    d1a0:	10c00415 	stw	r3,16(r2)
    d1a4:	e0bffe17 	ldw	r2,-8(fp)
    d1a8:	10800417 	ldw	r2,16(r2)
    d1ac:	10c00fcc 	andi	r3,r2,63
    d1b0:	e0bffe17 	ldw	r2,-8(fp)
    d1b4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    d1b8:	e0bffe17 	ldw	r2,-8(fp)
    d1bc:	10800117 	ldw	r2,4(r2)
    d1c0:	10c01014 	ori	r3,r2,64
    d1c4:	e0bffe17 	ldw	r2,-8(fp)
    d1c8:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    d1cc:	00000f06 	br	d20c <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    d1d0:	e0bffe17 	ldw	r2,-8(fp)
    d1d4:	10800017 	ldw	r2,0(r2)
    d1d8:	10800204 	addi	r2,r2,8
    d1dc:	10800037 	ldwio	r2,0(r2)
    d1e0:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    d1e4:	e0bfff17 	ldw	r2,-4(fp)
    d1e8:	1082000c 	andi	r2,r2,2048
    d1ec:	1004c03a 	cmpne	r2,r2,zero
    d1f0:	1000061e 	bne	r2,zero,d20c <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    d1f4:	e0bffe17 	ldw	r2,-8(fp)
    d1f8:	10c00117 	ldw	r3,4(r2)
    d1fc:	00bfefc4 	movi	r2,-65
    d200:	1886703a 	and	r3,r3,r2
    d204:	e0bffe17 	ldw	r2,-8(fp)
    d208:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    d20c:	e0bffe17 	ldw	r2,-8(fp)
    d210:	10c00417 	ldw	r3,16(r2)
    d214:	e0bffe17 	ldw	r2,-8(fp)
    d218:	10800517 	ldw	r2,20(r2)
    d21c:	1880061e 	bne	r3,r2,d238 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    d220:	e0bffe17 	ldw	r2,-8(fp)
    d224:	10c00117 	ldw	r3,4(r2)
    d228:	00beefc4 	movi	r2,-1089
    d22c:	1886703a 	and	r3,r3,r2
    d230:	e0bffe17 	ldw	r2,-8(fp)
    d234:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    d238:	e0bffe17 	ldw	r2,-8(fp)
    d23c:	10800017 	ldw	r2,0(r2)
    d240:	11000304 	addi	r4,r2,12
    d244:	e0bffe17 	ldw	r2,-8(fp)
    d248:	10800117 	ldw	r2,4(r2)
    d24c:	1007883a 	mov	r3,r2
    d250:	2005883a 	mov	r2,r4
    d254:	10c00035 	stwio	r3,0(r2)
}
    d258:	e037883a 	mov	sp,fp
    d25c:	df000017 	ldw	fp,0(sp)
    d260:	dec00104 	addi	sp,sp,4
    d264:	f800283a 	ret

0000d268 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    d268:	defffc04 	addi	sp,sp,-16
    d26c:	df000315 	stw	fp,12(sp)
    d270:	df000304 	addi	fp,sp,12
    d274:	e13ffd15 	stw	r4,-12(fp)
    d278:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    d27c:	00000706 	br	d29c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    d280:	e0bffe17 	ldw	r2,-8(fp)
    d284:	1090000c 	andi	r2,r2,16384
    d288:	1005003a 	cmpeq	r2,r2,zero
    d28c:	1000031e 	bne	r2,zero,d29c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    d290:	00bffd44 	movi	r2,-11
    d294:	e0bfff15 	stw	r2,-4(fp)
    d298:	00000606 	br	d2b4 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    d29c:	e0bffd17 	ldw	r2,-12(fp)
    d2a0:	10c00417 	ldw	r3,16(r2)
    d2a4:	e0bffd17 	ldw	r2,-12(fp)
    d2a8:	10800517 	ldw	r2,20(r2)
    d2ac:	18bff41e 	bne	r3,r2,d280 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    d2b0:	e03fff15 	stw	zero,-4(fp)
    d2b4:	e0bfff17 	ldw	r2,-4(fp)
}
    d2b8:	e037883a 	mov	sp,fp
    d2bc:	df000017 	ldw	fp,0(sp)
    d2c0:	dec00104 	addi	sp,sp,4
    d2c4:	f800283a 	ret

0000d2c8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    d2c8:	defff004 	addi	sp,sp,-64
    d2cc:	dfc00f15 	stw	ra,60(sp)
    d2d0:	df000e15 	stw	fp,56(sp)
    d2d4:	df000e04 	addi	fp,sp,56
    d2d8:	e13ffb15 	stw	r4,-20(fp)
    d2dc:	e17ffc15 	stw	r5,-16(fp)
    d2e0:	e1bffd15 	stw	r6,-12(fp)
    d2e4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    d2e8:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    d2ec:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    d2f0:	e0bffe17 	ldw	r2,-8(fp)
    d2f4:	1090000c 	andi	r2,r2,16384
    d2f8:	1005003a 	cmpeq	r2,r2,zero
    d2fc:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    d300:	e0bffb17 	ldw	r2,-20(fp)
    d304:	10800217 	ldw	r2,8(r2)
    d308:	10800044 	addi	r2,r2,1
    d30c:	10800fcc 	andi	r2,r2,63
    d310:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    d314:	00001906 	br	d37c <altera_avalon_uart_read+0xb4>
    {
      count++;
    d318:	e0bff617 	ldw	r2,-40(fp)
    d31c:	10800044 	addi	r2,r2,1
    d320:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    d324:	e0bffb17 	ldw	r2,-20(fp)
    d328:	10c00217 	ldw	r3,8(r2)
    d32c:	e0bffb17 	ldw	r2,-20(fp)
    d330:	1885883a 	add	r2,r3,r2
    d334:	10800704 	addi	r2,r2,28
    d338:	10800003 	ldbu	r2,0(r2)
    d33c:	1007883a 	mov	r3,r2
    d340:	e0bffc17 	ldw	r2,-16(fp)
    d344:	10c00005 	stb	r3,0(r2)
    d348:	e0bffc17 	ldw	r2,-16(fp)
    d34c:	10800044 	addi	r2,r2,1
    d350:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    d354:	e0bffb17 	ldw	r2,-20(fp)
    d358:	10800217 	ldw	r2,8(r2)
    d35c:	10c00044 	addi	r3,r2,1
    d360:	e0bffb17 	ldw	r2,-20(fp)
    d364:	10c00215 	stw	r3,8(r2)
    d368:	e0bffb17 	ldw	r2,-20(fp)
    d36c:	10800217 	ldw	r2,8(r2)
    d370:	10c00fcc 	andi	r3,r2,63
    d374:	e0bffb17 	ldw	r2,-20(fp)
    d378:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    d37c:	e0fff617 	ldw	r3,-40(fp)
    d380:	e0bffd17 	ldw	r2,-12(fp)
    d384:	1880050e 	bge	r3,r2,d39c <altera_avalon_uart_read+0xd4>
    d388:	e0bffb17 	ldw	r2,-20(fp)
    d38c:	10c00217 	ldw	r3,8(r2)
    d390:	e0bffb17 	ldw	r2,-20(fp)
    d394:	10800317 	ldw	r2,12(r2)
    d398:	18bfdf1e 	bne	r3,r2,d318 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    d39c:	e0bff617 	ldw	r2,-40(fp)
    d3a0:	1004c03a 	cmpne	r2,r2,zero
    d3a4:	1000271e 	bne	r2,zero,d444 <altera_avalon_uart_read+0x17c>
    d3a8:	e0bffb17 	ldw	r2,-20(fp)
    d3ac:	10c00217 	ldw	r3,8(r2)
    d3b0:	e0bffb17 	ldw	r2,-20(fp)
    d3b4:	10800317 	ldw	r2,12(r2)
    d3b8:	1880221e 	bne	r3,r2,d444 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    d3bc:	e0bff917 	ldw	r2,-28(fp)
    d3c0:	1004c03a 	cmpne	r2,r2,zero
    d3c4:	1000061e 	bne	r2,zero,d3e0 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    d3c8:	000d4f80 	call	d4f8 <alt_get_errno>
    d3cc:	00c002c4 	movi	r3,11
    d3d0:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    d3d4:	00800044 	movi	r2,1
    d3d8:	e0bff705 	stb	r2,-36(fp)
        break;
    d3dc:	00001f06 	br	d45c <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d3e0:	0005303a 	rdctl	r2,status
    d3e4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d3e8:	e0fff517 	ldw	r3,-44(fp)
    d3ec:	00bfff84 	movi	r2,-2
    d3f0:	1884703a 	and	r2,r3,r2
    d3f4:	1001703a 	wrctl	status,r2
  
  return context;
    d3f8:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    d3fc:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    d400:	e0bffb17 	ldw	r2,-20(fp)
    d404:	10800117 	ldw	r2,4(r2)
    d408:	10c02014 	ori	r3,r2,128
    d40c:	e0bffb17 	ldw	r2,-20(fp)
    d410:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    d414:	e0bffb17 	ldw	r2,-20(fp)
    d418:	10800017 	ldw	r2,0(r2)
    d41c:	11000304 	addi	r4,r2,12
    d420:	e0bffb17 	ldw	r2,-20(fp)
    d424:	10800117 	ldw	r2,4(r2)
    d428:	1007883a 	mov	r3,r2
    d42c:	2005883a 	mov	r2,r4
    d430:	10c00035 	stwio	r3,0(r2)
    d434:	e0bffa17 	ldw	r2,-24(fp)
    d438:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d43c:	e0bff417 	ldw	r2,-48(fp)
    d440:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    d444:	e0bff617 	ldw	r2,-40(fp)
    d448:	1004c03a 	cmpne	r2,r2,zero
    d44c:	1000031e 	bne	r2,zero,d45c <altera_avalon_uart_read+0x194>
    d450:	e0bffd17 	ldw	r2,-12(fp)
    d454:	1004c03a 	cmpne	r2,r2,zero
    d458:	103fc81e 	bne	r2,zero,d37c <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d45c:	0005303a 	rdctl	r2,status
    d460:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d464:	e0fff317 	ldw	r3,-52(fp)
    d468:	00bfff84 	movi	r2,-2
    d46c:	1884703a 	and	r2,r3,r2
    d470:	1001703a 	wrctl	status,r2
  
  return context;
    d474:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    d478:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    d47c:	e0bffb17 	ldw	r2,-20(fp)
    d480:	10800117 	ldw	r2,4(r2)
    d484:	10c02014 	ori	r3,r2,128
    d488:	e0bffb17 	ldw	r2,-20(fp)
    d48c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    d490:	e0bffb17 	ldw	r2,-20(fp)
    d494:	10800017 	ldw	r2,0(r2)
    d498:	11000304 	addi	r4,r2,12
    d49c:	e0bffb17 	ldw	r2,-20(fp)
    d4a0:	10800117 	ldw	r2,4(r2)
    d4a4:	1007883a 	mov	r3,r2
    d4a8:	2005883a 	mov	r2,r4
    d4ac:	10c00035 	stwio	r3,0(r2)
    d4b0:	e0bffa17 	ldw	r2,-24(fp)
    d4b4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d4b8:	e0bff217 	ldw	r2,-56(fp)
    d4bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    d4c0:	e0bff703 	ldbu	r2,-36(fp)
    d4c4:	1005003a 	cmpeq	r2,r2,zero
    d4c8:	1000031e 	bne	r2,zero,d4d8 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    d4cc:	00bffd04 	movi	r2,-12
    d4d0:	e0bfff15 	stw	r2,-4(fp)
    d4d4:	00000206 	br	d4e0 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    d4d8:	e0bff617 	ldw	r2,-40(fp)
    d4dc:	e0bfff15 	stw	r2,-4(fp)
    d4e0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    d4e4:	e037883a 	mov	sp,fp
    d4e8:	dfc00117 	ldw	ra,4(sp)
    d4ec:	df000017 	ldw	fp,0(sp)
    d4f0:	dec00204 	addi	sp,sp,8
    d4f4:	f800283a 	ret

0000d4f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d4f8:	defffd04 	addi	sp,sp,-12
    d4fc:	dfc00215 	stw	ra,8(sp)
    d500:	df000115 	stw	fp,4(sp)
    d504:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d508:	00800074 	movhi	r2,1
    d50c:	10840b04 	addi	r2,r2,4140
    d510:	10800017 	ldw	r2,0(r2)
    d514:	1005003a 	cmpeq	r2,r2,zero
    d518:	1000061e 	bne	r2,zero,d534 <alt_get_errno+0x3c>
    d51c:	00800074 	movhi	r2,1
    d520:	10840b04 	addi	r2,r2,4140
    d524:	10800017 	ldw	r2,0(r2)
    d528:	103ee83a 	callr	r2
    d52c:	e0bfff15 	stw	r2,-4(fp)
    d530:	00000306 	br	d540 <alt_get_errno+0x48>
    d534:	00800074 	movhi	r2,1
    d538:	108b0404 	addi	r2,r2,11280
    d53c:	e0bfff15 	stw	r2,-4(fp)
    d540:	e0bfff17 	ldw	r2,-4(fp)
}
    d544:	e037883a 	mov	sp,fp
    d548:	dfc00117 	ldw	ra,4(sp)
    d54c:	df000017 	ldw	fp,0(sp)
    d550:	dec00204 	addi	sp,sp,8
    d554:	f800283a 	ret

0000d558 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    d558:	defff204 	addi	sp,sp,-56
    d55c:	dfc00d15 	stw	ra,52(sp)
    d560:	df000c15 	stw	fp,48(sp)
    d564:	df000c04 	addi	fp,sp,48
    d568:	e13ffc15 	stw	r4,-16(fp)
    d56c:	e17ffd15 	stw	r5,-12(fp)
    d570:	e1bffe15 	stw	r6,-8(fp)
    d574:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    d578:	e0bffe17 	ldw	r2,-8(fp)
    d57c:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    d580:	e0bfff17 	ldw	r2,-4(fp)
    d584:	1090000c 	andi	r2,r2,16384
    d588:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    d58c:	00004006 	br	d690 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    d590:	e0bffc17 	ldw	r2,-16(fp)
    d594:	10800517 	ldw	r2,20(r2)
    d598:	10800044 	addi	r2,r2,1
    d59c:	10800fcc 	andi	r2,r2,63
    d5a0:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    d5a4:	e0bffc17 	ldw	r2,-16(fp)
    d5a8:	10c00417 	ldw	r3,16(r2)
    d5ac:	e0bff917 	ldw	r2,-28(fp)
    d5b0:	1880251e 	bne	r3,r2,d648 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    d5b4:	e0bffa17 	ldw	r2,-24(fp)
    d5b8:	1005003a 	cmpeq	r2,r2,zero
    d5bc:	1000051e 	bne	r2,zero,d5d4 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    d5c0:	000d7200 	call	d720 <alt_get_errno>
    d5c4:	1007883a 	mov	r3,r2
    d5c8:	008002c4 	movi	r2,11
    d5cc:	18800015 	stw	r2,0(r3)
        break;
    d5d0:	00003206 	br	d69c <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d5d4:	0005303a 	rdctl	r2,status
    d5d8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d5dc:	e0fff717 	ldw	r3,-36(fp)
    d5e0:	00bfff84 	movi	r2,-2
    d5e4:	1884703a 	and	r2,r3,r2
    d5e8:	1001703a 	wrctl	status,r2
  
  return context;
    d5ec:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    d5f0:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    d5f4:	e0bffc17 	ldw	r2,-16(fp)
    d5f8:	10800117 	ldw	r2,4(r2)
    d5fc:	10c11014 	ori	r3,r2,1088
    d600:	e0bffc17 	ldw	r2,-16(fp)
    d604:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    d608:	e0bffc17 	ldw	r2,-16(fp)
    d60c:	10800017 	ldw	r2,0(r2)
    d610:	11000304 	addi	r4,r2,12
    d614:	e0bffc17 	ldw	r2,-16(fp)
    d618:	10800117 	ldw	r2,4(r2)
    d61c:	1007883a 	mov	r3,r2
    d620:	2005883a 	mov	r2,r4
    d624:	10c00035 	stwio	r3,0(r2)
    d628:	e0bffb17 	ldw	r2,-20(fp)
    d62c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d630:	e0bff617 	ldw	r2,-40(fp)
    d634:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    d638:	e0bffc17 	ldw	r2,-16(fp)
    d63c:	10c00417 	ldw	r3,16(r2)
    d640:	e0bff917 	ldw	r2,-28(fp)
    d644:	18bffc26 	beq	r3,r2,d638 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    d648:	e0bff817 	ldw	r2,-32(fp)
    d64c:	10bfffc4 	addi	r2,r2,-1
    d650:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    d654:	e0bffc17 	ldw	r2,-16(fp)
    d658:	10c00517 	ldw	r3,20(r2)
    d65c:	e0bffd17 	ldw	r2,-12(fp)
    d660:	10800003 	ldbu	r2,0(r2)
    d664:	1009883a 	mov	r4,r2
    d668:	e0bffc17 	ldw	r2,-16(fp)
    d66c:	1885883a 	add	r2,r3,r2
    d670:	10801704 	addi	r2,r2,92
    d674:	11000005 	stb	r4,0(r2)
    d678:	e0bffd17 	ldw	r2,-12(fp)
    d67c:	10800044 	addi	r2,r2,1
    d680:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    d684:	e0fffc17 	ldw	r3,-16(fp)
    d688:	e0bff917 	ldw	r2,-28(fp)
    d68c:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    d690:	e0bff817 	ldw	r2,-32(fp)
    d694:	1004c03a 	cmpne	r2,r2,zero
    d698:	103fbd1e 	bne	r2,zero,d590 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d69c:	0005303a 	rdctl	r2,status
    d6a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d6a4:	e0fff517 	ldw	r3,-44(fp)
    d6a8:	00bfff84 	movi	r2,-2
    d6ac:	1884703a 	and	r2,r3,r2
    d6b0:	1001703a 	wrctl	status,r2
  
  return context;
    d6b4:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    d6b8:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    d6bc:	e0bffc17 	ldw	r2,-16(fp)
    d6c0:	10800117 	ldw	r2,4(r2)
    d6c4:	10c11014 	ori	r3,r2,1088
    d6c8:	e0bffc17 	ldw	r2,-16(fp)
    d6cc:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    d6d0:	e0bffc17 	ldw	r2,-16(fp)
    d6d4:	10800017 	ldw	r2,0(r2)
    d6d8:	11000304 	addi	r4,r2,12
    d6dc:	e0bffc17 	ldw	r2,-16(fp)
    d6e0:	10800117 	ldw	r2,4(r2)
    d6e4:	1007883a 	mov	r3,r2
    d6e8:	2005883a 	mov	r2,r4
    d6ec:	10c00035 	stwio	r3,0(r2)
    d6f0:	e0bffb17 	ldw	r2,-20(fp)
    d6f4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d6f8:	e0bff417 	ldw	r2,-48(fp)
    d6fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    d700:	e0fffe17 	ldw	r3,-8(fp)
    d704:	e0bff817 	ldw	r2,-32(fp)
    d708:	1885c83a 	sub	r2,r3,r2
}
    d70c:	e037883a 	mov	sp,fp
    d710:	dfc00117 	ldw	ra,4(sp)
    d714:	df000017 	ldw	fp,0(sp)
    d718:	dec00204 	addi	sp,sp,8
    d71c:	f800283a 	ret

0000d720 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d720:	defffd04 	addi	sp,sp,-12
    d724:	dfc00215 	stw	ra,8(sp)
    d728:	df000115 	stw	fp,4(sp)
    d72c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d730:	00800074 	movhi	r2,1
    d734:	10840b04 	addi	r2,r2,4140
    d738:	10800017 	ldw	r2,0(r2)
    d73c:	1005003a 	cmpeq	r2,r2,zero
    d740:	1000061e 	bne	r2,zero,d75c <alt_get_errno+0x3c>
    d744:	00800074 	movhi	r2,1
    d748:	10840b04 	addi	r2,r2,4140
    d74c:	10800017 	ldw	r2,0(r2)
    d750:	103ee83a 	callr	r2
    d754:	e0bfff15 	stw	r2,-4(fp)
    d758:	00000306 	br	d768 <alt_get_errno+0x48>
    d75c:	00800074 	movhi	r2,1
    d760:	108b0404 	addi	r2,r2,11280
    d764:	e0bfff15 	stw	r2,-4(fp)
    d768:	e0bfff17 	ldw	r2,-4(fp)
}
    d76c:	e037883a 	mov	sp,fp
    d770:	dfc00117 	ldw	ra,4(sp)
    d774:	df000017 	ldw	fp,0(sp)
    d778:	dec00204 	addi	sp,sp,8
    d77c:	f800283a 	ret

0000d780 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    d780:	defff404 	addi	sp,sp,-48
    d784:	df000b15 	stw	fp,44(sp)
    d788:	df000b04 	addi	fp,sp,44
    d78c:	e13ffb15 	stw	r4,-20(fp)
    d790:	e17ffc15 	stw	r5,-16(fp)
    d794:	e1bffd15 	stw	r6,-12(fp)
    d798:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    d79c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d7a0:	00800074 	movhi	r2,1
    d7a4:	108b0c04 	addi	r2,r2,11312
    d7a8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    d7ac:	1005003a 	cmpeq	r2,r2,zero
    d7b0:	1000411e 	bne	r2,zero,d8b8 <alt_alarm_start+0x138>
  {
    if (alarm)
    d7b4:	e0bffb17 	ldw	r2,-20(fp)
    d7b8:	1005003a 	cmpeq	r2,r2,zero
    d7bc:	10003b1e 	bne	r2,zero,d8ac <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    d7c0:	e0fffb17 	ldw	r3,-20(fp)
    d7c4:	e0bffd17 	ldw	r2,-12(fp)
    d7c8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    d7cc:	e0fffb17 	ldw	r3,-20(fp)
    d7d0:	e0bffe17 	ldw	r2,-8(fp)
    d7d4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d7d8:	0005303a 	rdctl	r2,status
    d7dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d7e0:	e0fff817 	ldw	r3,-32(fp)
    d7e4:	00bfff84 	movi	r2,-2
    d7e8:	1884703a 	and	r2,r3,r2
    d7ec:	1001703a 	wrctl	status,r2
  
  return context;
    d7f0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    d7f4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    d7f8:	00800074 	movhi	r2,1
    d7fc:	108b0d04 	addi	r2,r2,11316
    d800:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    d804:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    d808:	e0fffc17 	ldw	r3,-16(fp)
    d80c:	e0bff917 	ldw	r2,-28(fp)
    d810:	1885883a 	add	r2,r3,r2
    d814:	10c00044 	addi	r3,r2,1
    d818:	e0bffb17 	ldw	r2,-20(fp)
    d81c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    d820:	e0bffb17 	ldw	r2,-20(fp)
    d824:	10c00217 	ldw	r3,8(r2)
    d828:	e0bff917 	ldw	r2,-28(fp)
    d82c:	1880042e 	bgeu	r3,r2,d840 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    d830:	e0fffb17 	ldw	r3,-20(fp)
    d834:	00800044 	movi	r2,1
    d838:	18800405 	stb	r2,16(r3)
    d83c:	00000206 	br	d848 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    d840:	e0bffb17 	ldw	r2,-20(fp)
    d844:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    d848:	e0fffb17 	ldw	r3,-20(fp)
    d84c:	00800074 	movhi	r2,1
    d850:	10841004 	addi	r2,r2,4160
    d854:	e0bff615 	stw	r2,-40(fp)
    d858:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d85c:	e0fff717 	ldw	r3,-36(fp)
    d860:	e0bff617 	ldw	r2,-40(fp)
    d864:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    d868:	e0bff617 	ldw	r2,-40(fp)
    d86c:	10c00017 	ldw	r3,0(r2)
    d870:	e0bff717 	ldw	r2,-36(fp)
    d874:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d878:	e0bff617 	ldw	r2,-40(fp)
    d87c:	10c00017 	ldw	r3,0(r2)
    d880:	e0bff717 	ldw	r2,-36(fp)
    d884:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    d888:	e0fff617 	ldw	r3,-40(fp)
    d88c:	e0bff717 	ldw	r2,-36(fp)
    d890:	18800015 	stw	r2,0(r3)
    d894:	e0bffa17 	ldw	r2,-24(fp)
    d898:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d89c:	e0bff517 	ldw	r2,-44(fp)
    d8a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    d8a4:	e03fff15 	stw	zero,-4(fp)
    d8a8:	00000506 	br	d8c0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    d8ac:	00bffa84 	movi	r2,-22
    d8b0:	e0bfff15 	stw	r2,-4(fp)
    d8b4:	00000206 	br	d8c0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    d8b8:	00bfde84 	movi	r2,-134
    d8bc:	e0bfff15 	stw	r2,-4(fp)
    d8c0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    d8c4:	e037883a 	mov	sp,fp
    d8c8:	df000017 	ldw	fp,0(sp)
    d8cc:	dec00104 	addi	sp,sp,4
    d8d0:	f800283a 	ret

0000d8d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    d8d4:	defff904 	addi	sp,sp,-28
    d8d8:	dfc00615 	stw	ra,24(sp)
    d8dc:	df000515 	stw	fp,20(sp)
    d8e0:	df000504 	addi	fp,sp,20
    d8e4:	e13ffd15 	stw	r4,-12(fp)
    d8e8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    d8ec:	e0bffd17 	ldw	r2,-12(fp)
    d8f0:	1005003a 	cmpeq	r2,r2,zero
    d8f4:	1000041e 	bne	r2,zero,d908 <alt_dev_llist_insert+0x34>
    d8f8:	e0bffd17 	ldw	r2,-12(fp)
    d8fc:	10800217 	ldw	r2,8(r2)
    d900:	1004c03a 	cmpne	r2,r2,zero
    d904:	1000071e 	bne	r2,zero,d924 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    d908:	000d9880 	call	d988 <alt_get_errno>
    d90c:	1007883a 	mov	r3,r2
    d910:	00800584 	movi	r2,22
    d914:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    d918:	00bffa84 	movi	r2,-22
    d91c:	e0bfff15 	stw	r2,-4(fp)
    d920:	00001306 	br	d970 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    d924:	e0fffd17 	ldw	r3,-12(fp)
    d928:	e0bffe17 	ldw	r2,-8(fp)
    d92c:	e0bffb15 	stw	r2,-20(fp)
    d930:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d934:	e0fffc17 	ldw	r3,-16(fp)
    d938:	e0bffb17 	ldw	r2,-20(fp)
    d93c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    d940:	e0bffb17 	ldw	r2,-20(fp)
    d944:	10c00017 	ldw	r3,0(r2)
    d948:	e0bffc17 	ldw	r2,-16(fp)
    d94c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d950:	e0bffb17 	ldw	r2,-20(fp)
    d954:	10c00017 	ldw	r3,0(r2)
    d958:	e0bffc17 	ldw	r2,-16(fp)
    d95c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    d960:	e0fffb17 	ldw	r3,-20(fp)
    d964:	e0bffc17 	ldw	r2,-16(fp)
    d968:	18800015 	stw	r2,0(r3)

  return 0;  
    d96c:	e03fff15 	stw	zero,-4(fp)
    d970:	e0bfff17 	ldw	r2,-4(fp)
}
    d974:	e037883a 	mov	sp,fp
    d978:	dfc00117 	ldw	ra,4(sp)
    d97c:	df000017 	ldw	fp,0(sp)
    d980:	dec00204 	addi	sp,sp,8
    d984:	f800283a 	ret

0000d988 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d988:	defffd04 	addi	sp,sp,-12
    d98c:	dfc00215 	stw	ra,8(sp)
    d990:	df000115 	stw	fp,4(sp)
    d994:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d998:	00800074 	movhi	r2,1
    d99c:	10840b04 	addi	r2,r2,4140
    d9a0:	10800017 	ldw	r2,0(r2)
    d9a4:	1005003a 	cmpeq	r2,r2,zero
    d9a8:	1000061e 	bne	r2,zero,d9c4 <alt_get_errno+0x3c>
    d9ac:	00800074 	movhi	r2,1
    d9b0:	10840b04 	addi	r2,r2,4140
    d9b4:	10800017 	ldw	r2,0(r2)
    d9b8:	103ee83a 	callr	r2
    d9bc:	e0bfff15 	stw	r2,-4(fp)
    d9c0:	00000306 	br	d9d0 <alt_get_errno+0x48>
    d9c4:	00800074 	movhi	r2,1
    d9c8:	108b0404 	addi	r2,r2,11280
    d9cc:	e0bfff15 	stw	r2,-4(fp)
    d9d0:	e0bfff17 	ldw	r2,-4(fp)
}
    d9d4:	e037883a 	mov	sp,fp
    d9d8:	dfc00117 	ldw	ra,4(sp)
    d9dc:	df000017 	ldw	fp,0(sp)
    d9e0:	dec00204 	addi	sp,sp,8
    d9e4:	f800283a 	ret

0000d9e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    d9e8:	defffd04 	addi	sp,sp,-12
    d9ec:	dfc00215 	stw	ra,8(sp)
    d9f0:	df000115 	stw	fp,4(sp)
    d9f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d9f8:	00bfff04 	movi	r2,-4
    d9fc:	00c00074 	movhi	r3,1
    da00:	18fae704 	addi	r3,r3,-5220
    da04:	1885883a 	add	r2,r3,r2
    da08:	e0bfff15 	stw	r2,-4(fp)
    da0c:	00000606 	br	da28 <_do_ctors+0x40>
        (*ctor) (); 
    da10:	e0bfff17 	ldw	r2,-4(fp)
    da14:	10800017 	ldw	r2,0(r2)
    da18:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    da1c:	e0bfff17 	ldw	r2,-4(fp)
    da20:	10bfff04 	addi	r2,r2,-4
    da24:	e0bfff15 	stw	r2,-4(fp)
    da28:	e0ffff17 	ldw	r3,-4(fp)
    da2c:	00800074 	movhi	r2,1
    da30:	10bae604 	addi	r2,r2,-5224
    da34:	18bff62e 	bgeu	r3,r2,da10 <_do_ctors+0x28>
        (*ctor) (); 
}
    da38:	e037883a 	mov	sp,fp
    da3c:	dfc00117 	ldw	ra,4(sp)
    da40:	df000017 	ldw	fp,0(sp)
    da44:	dec00204 	addi	sp,sp,8
    da48:	f800283a 	ret

0000da4c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    da4c:	defffd04 	addi	sp,sp,-12
    da50:	dfc00215 	stw	ra,8(sp)
    da54:	df000115 	stw	fp,4(sp)
    da58:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    da5c:	00bfff04 	movi	r2,-4
    da60:	00c00074 	movhi	r3,1
    da64:	18fae704 	addi	r3,r3,-5220
    da68:	1885883a 	add	r2,r3,r2
    da6c:	e0bfff15 	stw	r2,-4(fp)
    da70:	00000606 	br	da8c <_do_dtors+0x40>
        (*dtor) (); 
    da74:	e0bfff17 	ldw	r2,-4(fp)
    da78:	10800017 	ldw	r2,0(r2)
    da7c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    da80:	e0bfff17 	ldw	r2,-4(fp)
    da84:	10bfff04 	addi	r2,r2,-4
    da88:	e0bfff15 	stw	r2,-4(fp)
    da8c:	e0ffff17 	ldw	r3,-4(fp)
    da90:	00800074 	movhi	r2,1
    da94:	10bae704 	addi	r2,r2,-5220
    da98:	18bff62e 	bgeu	r3,r2,da74 <_do_dtors+0x28>
        (*dtor) (); 
}
    da9c:	e037883a 	mov	sp,fp
    daa0:	dfc00117 	ldw	ra,4(sp)
    daa4:	df000017 	ldw	fp,0(sp)
    daa8:	dec00204 	addi	sp,sp,8
    daac:	f800283a 	ret

0000dab0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    dab0:	defff904 	addi	sp,sp,-28
    dab4:	dfc00615 	stw	ra,24(sp)
    dab8:	df000515 	stw	fp,20(sp)
    dabc:	df000504 	addi	fp,sp,20
    dac0:	e13ffd15 	stw	r4,-12(fp)
    dac4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    dac8:	e0bffe17 	ldw	r2,-8(fp)
    dacc:	10800017 	ldw	r2,0(r2)
    dad0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    dad4:	e13ffd17 	ldw	r4,-12(fp)
    dad8:	00018880 	call	1888 <strlen>
    dadc:	10800044 	addi	r2,r2,1
    dae0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    dae4:	00000d06 	br	db1c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    dae8:	e0bffc17 	ldw	r2,-16(fp)
    daec:	11000217 	ldw	r4,8(r2)
    daf0:	e1bffb17 	ldw	r6,-20(fp)
    daf4:	e17ffd17 	ldw	r5,-12(fp)
    daf8:	000e7700 	call	e770 <memcmp>
    dafc:	1004c03a 	cmpne	r2,r2,zero
    db00:	1000031e 	bne	r2,zero,db10 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    db04:	e0bffc17 	ldw	r2,-16(fp)
    db08:	e0bfff15 	stw	r2,-4(fp)
    db0c:	00000706 	br	db2c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    db10:	e0bffc17 	ldw	r2,-16(fp)
    db14:	10800017 	ldw	r2,0(r2)
    db18:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    db1c:	e0fffe17 	ldw	r3,-8(fp)
    db20:	e0bffc17 	ldw	r2,-16(fp)
    db24:	10fff01e 	bne	r2,r3,dae8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    db28:	e03fff15 	stw	zero,-4(fp)
    db2c:	e0bfff17 	ldw	r2,-4(fp)
}
    db30:	e037883a 	mov	sp,fp
    db34:	dfc00117 	ldw	ra,4(sp)
    db38:	df000017 	ldw	fp,0(sp)
    db3c:	dec00204 	addi	sp,sp,8
    db40:	f800283a 	ret

0000db44 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    db44:	defffe04 	addi	sp,sp,-8
    db48:	dfc00115 	stw	ra,4(sp)
    db4c:	df000015 	stw	fp,0(sp)
    db50:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    db54:	0009883a 	mov	r4,zero
    db58:	01440004 	movi	r5,4096
    db5c:	000e6940 	call	e694 <alt_icache_flush>
#endif
}
    db60:	e037883a 	mov	sp,fp
    db64:	dfc00117 	ldw	ra,4(sp)
    db68:	df000017 	ldw	fp,0(sp)
    db6c:	dec00204 	addi	sp,sp,8
    db70:	f800283a 	ret

0000db74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    db74:	defff904 	addi	sp,sp,-28
    db78:	dfc00615 	stw	ra,24(sp)
    db7c:	df000515 	stw	fp,20(sp)
    db80:	df000504 	addi	fp,sp,20
    db84:	e13ffc15 	stw	r4,-16(fp)
    db88:	e17ffd15 	stw	r5,-12(fp)
    db8c:	e1bffe15 	stw	r6,-8(fp)
    db90:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    db94:	e0800217 	ldw	r2,8(fp)
    db98:	d8800015 	stw	r2,0(sp)
    db9c:	e13ffc17 	ldw	r4,-16(fp)
    dba0:	e17ffd17 	ldw	r5,-12(fp)
    dba4:	e1bffe17 	ldw	r6,-8(fp)
    dba8:	e1ffff17 	ldw	r7,-4(fp)
    dbac:	000dd480 	call	dd48 <alt_iic_isr_register>
}  
    dbb0:	e037883a 	mov	sp,fp
    dbb4:	dfc00117 	ldw	ra,4(sp)
    dbb8:	df000017 	ldw	fp,0(sp)
    dbbc:	dec00204 	addi	sp,sp,8
    dbc0:	f800283a 	ret

0000dbc4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    dbc4:	defff904 	addi	sp,sp,-28
    dbc8:	df000615 	stw	fp,24(sp)
    dbcc:	df000604 	addi	fp,sp,24
    dbd0:	e13ffe15 	stw	r4,-8(fp)
    dbd4:	e17fff15 	stw	r5,-4(fp)
    dbd8:	e0bfff17 	ldw	r2,-4(fp)
    dbdc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dbe0:	0005303a 	rdctl	r2,status
    dbe4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dbe8:	e0fffb17 	ldw	r3,-20(fp)
    dbec:	00bfff84 	movi	r2,-2
    dbf0:	1884703a 	and	r2,r3,r2
    dbf4:	1001703a 	wrctl	status,r2
  
  return context;
    dbf8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    dbfc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    dc00:	e0fffc17 	ldw	r3,-16(fp)
    dc04:	00800044 	movi	r2,1
    dc08:	10c4983a 	sll	r2,r2,r3
    dc0c:	1007883a 	mov	r3,r2
    dc10:	00800074 	movhi	r2,1
    dc14:	108b0b04 	addi	r2,r2,11308
    dc18:	10800017 	ldw	r2,0(r2)
    dc1c:	1886b03a 	or	r3,r3,r2
    dc20:	00800074 	movhi	r2,1
    dc24:	108b0b04 	addi	r2,r2,11308
    dc28:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    dc2c:	00800074 	movhi	r2,1
    dc30:	108b0b04 	addi	r2,r2,11308
    dc34:	10800017 	ldw	r2,0(r2)
    dc38:	100170fa 	wrctl	ienable,r2
    dc3c:	e0bffd17 	ldw	r2,-12(fp)
    dc40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dc44:	e0bffa17 	ldw	r2,-24(fp)
    dc48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    dc4c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    dc50:	e037883a 	mov	sp,fp
    dc54:	df000017 	ldw	fp,0(sp)
    dc58:	dec00104 	addi	sp,sp,4
    dc5c:	f800283a 	ret

0000dc60 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    dc60:	defff904 	addi	sp,sp,-28
    dc64:	df000615 	stw	fp,24(sp)
    dc68:	df000604 	addi	fp,sp,24
    dc6c:	e13ffe15 	stw	r4,-8(fp)
    dc70:	e17fff15 	stw	r5,-4(fp)
    dc74:	e0bfff17 	ldw	r2,-4(fp)
    dc78:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dc7c:	0005303a 	rdctl	r2,status
    dc80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dc84:	e0fffb17 	ldw	r3,-20(fp)
    dc88:	00bfff84 	movi	r2,-2
    dc8c:	1884703a 	and	r2,r3,r2
    dc90:	1001703a 	wrctl	status,r2
  
  return context;
    dc94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    dc98:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    dc9c:	e0fffc17 	ldw	r3,-16(fp)
    dca0:	00800044 	movi	r2,1
    dca4:	10c4983a 	sll	r2,r2,r3
    dca8:	0084303a 	nor	r2,zero,r2
    dcac:	1007883a 	mov	r3,r2
    dcb0:	00800074 	movhi	r2,1
    dcb4:	108b0b04 	addi	r2,r2,11308
    dcb8:	10800017 	ldw	r2,0(r2)
    dcbc:	1886703a 	and	r3,r3,r2
    dcc0:	00800074 	movhi	r2,1
    dcc4:	108b0b04 	addi	r2,r2,11308
    dcc8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    dccc:	00800074 	movhi	r2,1
    dcd0:	108b0b04 	addi	r2,r2,11308
    dcd4:	10800017 	ldw	r2,0(r2)
    dcd8:	100170fa 	wrctl	ienable,r2
    dcdc:	e0bffd17 	ldw	r2,-12(fp)
    dce0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dce4:	e0bffa17 	ldw	r2,-24(fp)
    dce8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    dcec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    dcf0:	e037883a 	mov	sp,fp
    dcf4:	df000017 	ldw	fp,0(sp)
    dcf8:	dec00104 	addi	sp,sp,4
    dcfc:	f800283a 	ret

0000dd00 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    dd00:	defffc04 	addi	sp,sp,-16
    dd04:	df000315 	stw	fp,12(sp)
    dd08:	df000304 	addi	fp,sp,12
    dd0c:	e13ffe15 	stw	r4,-8(fp)
    dd10:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    dd14:	000530fa 	rdctl	r2,ienable
    dd18:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    dd1c:	e0ffff17 	ldw	r3,-4(fp)
    dd20:	00800044 	movi	r2,1
    dd24:	10c4983a 	sll	r2,r2,r3
    dd28:	1007883a 	mov	r3,r2
    dd2c:	e0bffd17 	ldw	r2,-12(fp)
    dd30:	1884703a 	and	r2,r3,r2
    dd34:	1004c03a 	cmpne	r2,r2,zero
}
    dd38:	e037883a 	mov	sp,fp
    dd3c:	df000017 	ldw	fp,0(sp)
    dd40:	dec00104 	addi	sp,sp,4
    dd44:	f800283a 	ret

0000dd48 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    dd48:	defff404 	addi	sp,sp,-48
    dd4c:	dfc00b15 	stw	ra,44(sp)
    dd50:	df000a15 	stw	fp,40(sp)
    dd54:	df000a04 	addi	fp,sp,40
    dd58:	e13ffb15 	stw	r4,-20(fp)
    dd5c:	e17ffc15 	stw	r5,-16(fp)
    dd60:	e1bffd15 	stw	r6,-12(fp)
    dd64:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    dd68:	00bffa84 	movi	r2,-22
    dd6c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    dd70:	e0bffc17 	ldw	r2,-16(fp)
    dd74:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    dd78:	e0bff917 	ldw	r2,-28(fp)
    dd7c:	10800808 	cmpgei	r2,r2,32
    dd80:	1000291e 	bne	r2,zero,de28 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dd84:	0005303a 	rdctl	r2,status
    dd88:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd8c:	e0fff717 	ldw	r3,-36(fp)
    dd90:	00bfff84 	movi	r2,-2
    dd94:	1884703a 	and	r2,r3,r2
    dd98:	1001703a 	wrctl	status,r2
  
  return context;
    dd9c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    dda0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    dda4:	e0bff917 	ldw	r2,-28(fp)
    dda8:	00c00074 	movhi	r3,1
    ddac:	18cb1804 	addi	r3,r3,11360
    ddb0:	100490fa 	slli	r2,r2,3
    ddb4:	10c7883a 	add	r3,r2,r3
    ddb8:	e0bffd17 	ldw	r2,-12(fp)
    ddbc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    ddc0:	e0bff917 	ldw	r2,-28(fp)
    ddc4:	00c00074 	movhi	r3,1
    ddc8:	18cb1804 	addi	r3,r3,11360
    ddcc:	100490fa 	slli	r2,r2,3
    ddd0:	10c5883a 	add	r2,r2,r3
    ddd4:	10c00104 	addi	r3,r2,4
    ddd8:	e0bffe17 	ldw	r2,-8(fp)
    dddc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    dde0:	e0bffd17 	ldw	r2,-12(fp)
    dde4:	1005003a 	cmpeq	r2,r2,zero
    dde8:	1000051e 	bne	r2,zero,de00 <alt_iic_isr_register+0xb8>
    ddec:	e17ff917 	ldw	r5,-28(fp)
    ddf0:	e13ffb17 	ldw	r4,-20(fp)
    ddf4:	000dbc40 	call	dbc4 <alt_ic_irq_enable>
    ddf8:	e0bfff15 	stw	r2,-4(fp)
    ddfc:	00000406 	br	de10 <alt_iic_isr_register+0xc8>
    de00:	e17ff917 	ldw	r5,-28(fp)
    de04:	e13ffb17 	ldw	r4,-20(fp)
    de08:	000dc600 	call	dc60 <alt_ic_irq_disable>
    de0c:	e0bfff15 	stw	r2,-4(fp)
    de10:	e0bfff17 	ldw	r2,-4(fp)
    de14:	e0bffa15 	stw	r2,-24(fp)
    de18:	e0bff817 	ldw	r2,-32(fp)
    de1c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    de20:	e0bff617 	ldw	r2,-40(fp)
    de24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    de28:	e0bffa17 	ldw	r2,-24(fp)
}
    de2c:	e037883a 	mov	sp,fp
    de30:	dfc00117 	ldw	ra,4(sp)
    de34:	df000017 	ldw	fp,0(sp)
    de38:	dec00204 	addi	sp,sp,8
    de3c:	f800283a 	ret

0000de40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    de40:	defff904 	addi	sp,sp,-28
    de44:	dfc00615 	stw	ra,24(sp)
    de48:	df000515 	stw	fp,20(sp)
    de4c:	df000504 	addi	fp,sp,20
    de50:	e13ffc15 	stw	r4,-16(fp)
    de54:	e17ffd15 	stw	r5,-12(fp)
    de58:	e1bffe15 	stw	r6,-8(fp)
    de5c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    de60:	e13ffd17 	ldw	r4,-12(fp)
    de64:	e17ffe17 	ldw	r5,-8(fp)
    de68:	e1bfff17 	ldw	r6,-4(fp)
    de6c:	000e0580 	call	e058 <open>
    de70:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    de74:	e0bffb17 	ldw	r2,-20(fp)
    de78:	1004803a 	cmplt	r2,r2,zero
    de7c:	10001c1e 	bne	r2,zero,def0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    de80:	e0bffb17 	ldw	r2,-20(fp)
    de84:	00c00074 	movhi	r3,1
    de88:	18ff3304 	addi	r3,r3,-820
    de8c:	10800324 	muli	r2,r2,12
    de90:	10c5883a 	add	r2,r2,r3
    de94:	10c00017 	ldw	r3,0(r2)
    de98:	e0bffc17 	ldw	r2,-16(fp)
    de9c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    dea0:	e0bffb17 	ldw	r2,-20(fp)
    dea4:	00c00074 	movhi	r3,1
    dea8:	18ff3304 	addi	r3,r3,-820
    deac:	10800324 	muli	r2,r2,12
    deb0:	10c5883a 	add	r2,r2,r3
    deb4:	10800104 	addi	r2,r2,4
    deb8:	10c00017 	ldw	r3,0(r2)
    debc:	e0bffc17 	ldw	r2,-16(fp)
    dec0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    dec4:	e0bffb17 	ldw	r2,-20(fp)
    dec8:	00c00074 	movhi	r3,1
    decc:	18ff3304 	addi	r3,r3,-820
    ded0:	10800324 	muli	r2,r2,12
    ded4:	10c5883a 	add	r2,r2,r3
    ded8:	10800204 	addi	r2,r2,8
    dedc:	10c00017 	ldw	r3,0(r2)
    dee0:	e0bffc17 	ldw	r2,-16(fp)
    dee4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    dee8:	e13ffb17 	ldw	r4,-20(fp)
    deec:	000b1580 	call	b158 <alt_release_fd>
  }
} 
    def0:	e037883a 	mov	sp,fp
    def4:	dfc00117 	ldw	ra,4(sp)
    def8:	df000017 	ldw	fp,0(sp)
    defc:	dec00204 	addi	sp,sp,8
    df00:	f800283a 	ret

0000df04 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    df04:	defffb04 	addi	sp,sp,-20
    df08:	dfc00415 	stw	ra,16(sp)
    df0c:	df000315 	stw	fp,12(sp)
    df10:	df000304 	addi	fp,sp,12
    df14:	e13ffd15 	stw	r4,-12(fp)
    df18:	e17ffe15 	stw	r5,-8(fp)
    df1c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    df20:	01000074 	movhi	r4,1
    df24:	213f3604 	addi	r4,r4,-808
    df28:	e17ffd17 	ldw	r5,-12(fp)
    df2c:	01800044 	movi	r6,1
    df30:	01c07fc4 	movi	r7,511
    df34:	000de400 	call	de40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    df38:	01000074 	movhi	r4,1
    df3c:	213f3304 	addi	r4,r4,-820
    df40:	e17ffe17 	ldw	r5,-8(fp)
    df44:	000d883a 	mov	r6,zero
    df48:	01c07fc4 	movi	r7,511
    df4c:	000de400 	call	de40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    df50:	01000074 	movhi	r4,1
    df54:	213f3904 	addi	r4,r4,-796
    df58:	e17fff17 	ldw	r5,-4(fp)
    df5c:	01800044 	movi	r6,1
    df60:	01c07fc4 	movi	r7,511
    df64:	000de400 	call	de40 <alt_open_fd>
}  
    df68:	e037883a 	mov	sp,fp
    df6c:	dfc00117 	ldw	ra,4(sp)
    df70:	df000017 	ldw	fp,0(sp)
    df74:	dec00204 	addi	sp,sp,8
    df78:	f800283a 	ret

0000df7c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    df7c:	defffc04 	addi	sp,sp,-16
    df80:	df000315 	stw	fp,12(sp)
    df84:	df000304 	addi	fp,sp,12
    df88:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    df8c:	e0bffe17 	ldw	r2,-8(fp)
    df90:	10800217 	ldw	r2,8(r2)
    df94:	10d00034 	orhi	r3,r2,16384
    df98:	e0bffe17 	ldw	r2,-8(fp)
    df9c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    dfa0:	e03ffd15 	stw	zero,-12(fp)
    dfa4:	00002006 	br	e028 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    dfa8:	e0bffd17 	ldw	r2,-12(fp)
    dfac:	00c00074 	movhi	r3,1
    dfb0:	18ff3304 	addi	r3,r3,-820
    dfb4:	10800324 	muli	r2,r2,12
    dfb8:	10c5883a 	add	r2,r2,r3
    dfbc:	10c00017 	ldw	r3,0(r2)
    dfc0:	e0bffe17 	ldw	r2,-8(fp)
    dfc4:	10800017 	ldw	r2,0(r2)
    dfc8:	1880141e 	bne	r3,r2,e01c <alt_file_locked+0xa0>
    dfcc:	e0bffd17 	ldw	r2,-12(fp)
    dfd0:	00c00074 	movhi	r3,1
    dfd4:	18ff3304 	addi	r3,r3,-820
    dfd8:	10800324 	muli	r2,r2,12
    dfdc:	10c5883a 	add	r2,r2,r3
    dfe0:	10800204 	addi	r2,r2,8
    dfe4:	10800017 	ldw	r2,0(r2)
    dfe8:	1004403a 	cmpge	r2,r2,zero
    dfec:	10000b1e 	bne	r2,zero,e01c <alt_file_locked+0xa0>
    dff0:	e0bffd17 	ldw	r2,-12(fp)
    dff4:	10800324 	muli	r2,r2,12
    dff8:	1007883a 	mov	r3,r2
    dffc:	00800074 	movhi	r2,1
    e000:	10bf3304 	addi	r2,r2,-820
    e004:	1887883a 	add	r3,r3,r2
    e008:	e0bffe17 	ldw	r2,-8(fp)
    e00c:	18800326 	beq	r3,r2,e01c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    e010:	00bffcc4 	movi	r2,-13
    e014:	e0bfff15 	stw	r2,-4(fp)
    e018:	00000a06 	br	e044 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e01c:	e0bffd17 	ldw	r2,-12(fp)
    e020:	10800044 	addi	r2,r2,1
    e024:	e0bffd15 	stw	r2,-12(fp)
    e028:	00800074 	movhi	r2,1
    e02c:	10840a04 	addi	r2,r2,4136
    e030:	10800017 	ldw	r2,0(r2)
    e034:	1007883a 	mov	r3,r2
    e038:	e0bffd17 	ldw	r2,-12(fp)
    e03c:	18bfda2e 	bgeu	r3,r2,dfa8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    e040:	e03fff15 	stw	zero,-4(fp)
    e044:	e0bfff17 	ldw	r2,-4(fp)
}
    e048:	e037883a 	mov	sp,fp
    e04c:	df000017 	ldw	fp,0(sp)
    e050:	dec00104 	addi	sp,sp,4
    e054:	f800283a 	ret

0000e058 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    e058:	defff404 	addi	sp,sp,-48
    e05c:	dfc00b15 	stw	ra,44(sp)
    e060:	df000a15 	stw	fp,40(sp)
    e064:	df000a04 	addi	fp,sp,40
    e068:	e13ffb15 	stw	r4,-20(fp)
    e06c:	e17ffc15 	stw	r5,-16(fp)
    e070:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    e074:	00bfffc4 	movi	r2,-1
    e078:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    e07c:	00bffb44 	movi	r2,-19
    e080:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    e084:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    e088:	e13ffb17 	ldw	r4,-20(fp)
    e08c:	01400074 	movhi	r5,1
    e090:	29440804 	addi	r5,r5,4128
    e094:	000dab00 	call	dab0 <alt_find_dev>
    e098:	e0bffa15 	stw	r2,-24(fp)
    e09c:	e0bffa17 	ldw	r2,-24(fp)
    e0a0:	1004c03a 	cmpne	r2,r2,zero
    e0a4:	1000051e 	bne	r2,zero,e0bc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    e0a8:	e13ffb17 	ldw	r4,-20(fp)
    e0ac:	000e4bc0 	call	e4bc <alt_find_file>
    e0b0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    e0b4:	00800044 	movi	r2,1
    e0b8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    e0bc:	e0bffa17 	ldw	r2,-24(fp)
    e0c0:	1005003a 	cmpeq	r2,r2,zero
    e0c4:	1000301e 	bne	r2,zero,e188 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    e0c8:	e13ffa17 	ldw	r4,-24(fp)
    e0cc:	000e5dc0 	call	e5dc <alt_get_fd>
    e0d0:	e0bff815 	stw	r2,-32(fp)
    e0d4:	e0bff817 	ldw	r2,-32(fp)
    e0d8:	1004403a 	cmpge	r2,r2,zero
    e0dc:	1000031e 	bne	r2,zero,e0ec <open+0x94>
    {
      status = index;
    e0e0:	e0bff817 	ldw	r2,-32(fp)
    e0e4:	e0bff715 	stw	r2,-36(fp)
    e0e8:	00002906 	br	e190 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    e0ec:	e0bff817 	ldw	r2,-32(fp)
    e0f0:	10800324 	muli	r2,r2,12
    e0f4:	1007883a 	mov	r3,r2
    e0f8:	00800074 	movhi	r2,1
    e0fc:	10bf3304 	addi	r2,r2,-820
    e100:	1885883a 	add	r2,r3,r2
    e104:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    e108:	e0fffc17 	ldw	r3,-16(fp)
    e10c:	00900034 	movhi	r2,16384
    e110:	10bfffc4 	addi	r2,r2,-1
    e114:	1886703a 	and	r3,r3,r2
    e118:	e0bff917 	ldw	r2,-28(fp)
    e11c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    e120:	e0bff617 	ldw	r2,-40(fp)
    e124:	1004c03a 	cmpne	r2,r2,zero
    e128:	1000061e 	bne	r2,zero,e144 <open+0xec>
    e12c:	e13ff917 	ldw	r4,-28(fp)
    e130:	000df7c0 	call	df7c <alt_file_locked>
    e134:	e0bff715 	stw	r2,-36(fp)
    e138:	e0bff717 	ldw	r2,-36(fp)
    e13c:	1004803a 	cmplt	r2,r2,zero
    e140:	1000131e 	bne	r2,zero,e190 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    e144:	e0bffa17 	ldw	r2,-24(fp)
    e148:	10800317 	ldw	r2,12(r2)
    e14c:	1005003a 	cmpeq	r2,r2,zero
    e150:	1000091e 	bne	r2,zero,e178 <open+0x120>
    e154:	e0bffa17 	ldw	r2,-24(fp)
    e158:	10800317 	ldw	r2,12(r2)
    e15c:	e13ff917 	ldw	r4,-28(fp)
    e160:	e17ffb17 	ldw	r5,-20(fp)
    e164:	e1bffc17 	ldw	r6,-16(fp)
    e168:	e1fffd17 	ldw	r7,-12(fp)
    e16c:	103ee83a 	callr	r2
    e170:	e0bfff15 	stw	r2,-4(fp)
    e174:	00000106 	br	e17c <open+0x124>
    e178:	e03fff15 	stw	zero,-4(fp)
    e17c:	e0bfff17 	ldw	r2,-4(fp)
    e180:	e0bff715 	stw	r2,-36(fp)
    e184:	00000206 	br	e190 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    e188:	00bffb44 	movi	r2,-19
    e18c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    e190:	e0bff717 	ldw	r2,-36(fp)
    e194:	1004403a 	cmpge	r2,r2,zero
    e198:	1000091e 	bne	r2,zero,e1c0 <open+0x168>
  {
    alt_release_fd (index);  
    e19c:	e13ff817 	ldw	r4,-32(fp)
    e1a0:	000b1580 	call	b158 <alt_release_fd>
    ALT_ERRNO = -status;
    e1a4:	000e1e00 	call	e1e0 <alt_get_errno>
    e1a8:	e0fff717 	ldw	r3,-36(fp)
    e1ac:	00c7c83a 	sub	r3,zero,r3
    e1b0:	10c00015 	stw	r3,0(r2)
    return -1;
    e1b4:	00bfffc4 	movi	r2,-1
    e1b8:	e0bffe15 	stw	r2,-8(fp)
    e1bc:	00000206 	br	e1c8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    e1c0:	e0bff817 	ldw	r2,-32(fp)
    e1c4:	e0bffe15 	stw	r2,-8(fp)
    e1c8:	e0bffe17 	ldw	r2,-8(fp)
}
    e1cc:	e037883a 	mov	sp,fp
    e1d0:	dfc00117 	ldw	ra,4(sp)
    e1d4:	df000017 	ldw	fp,0(sp)
    e1d8:	dec00204 	addi	sp,sp,8
    e1dc:	f800283a 	ret

0000e1e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e1e0:	defffd04 	addi	sp,sp,-12
    e1e4:	dfc00215 	stw	ra,8(sp)
    e1e8:	df000115 	stw	fp,4(sp)
    e1ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    e1f0:	00800074 	movhi	r2,1
    e1f4:	10840b04 	addi	r2,r2,4140
    e1f8:	10800017 	ldw	r2,0(r2)
    e1fc:	1005003a 	cmpeq	r2,r2,zero
    e200:	1000061e 	bne	r2,zero,e21c <alt_get_errno+0x3c>
    e204:	00800074 	movhi	r2,1
    e208:	10840b04 	addi	r2,r2,4140
    e20c:	10800017 	ldw	r2,0(r2)
    e210:	103ee83a 	callr	r2
    e214:	e0bfff15 	stw	r2,-4(fp)
    e218:	00000306 	br	e228 <alt_get_errno+0x48>
    e21c:	00800074 	movhi	r2,1
    e220:	108b0404 	addi	r2,r2,11280
    e224:	e0bfff15 	stw	r2,-4(fp)
    e228:	e0bfff17 	ldw	r2,-4(fp)
}
    e22c:	e037883a 	mov	sp,fp
    e230:	dfc00117 	ldw	ra,4(sp)
    e234:	df000017 	ldw	fp,0(sp)
    e238:	dec00204 	addi	sp,sp,8
    e23c:	f800283a 	ret

0000e240 <alt_remap_uncached>:
 * Convert a pointer to a block of cached memory, into a block of
 * uncached memory.
 */

volatile void* alt_remap_uncached (void* ptr, alt_u32 len)
{
    e240:	defffc04 	addi	sp,sp,-16
    e244:	dfc00315 	stw	ra,12(sp)
    e248:	df000215 	stw	fp,8(sp)
    e24c:	df000204 	addi	fp,sp,8
    e250:	e13ffe15 	stw	r4,-8(fp)
    e254:	e17fff15 	stw	r5,-4(fp)
  alt_dcache_flush (ptr, len);
    e258:	e13ffe17 	ldw	r4,-8(fp)
    e25c:	e17fff17 	ldw	r5,-4(fp)
    e260:	000e4440 	call	e444 <alt_dcache_flush>
  return (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK);
    e264:	e0bffe17 	ldw	r2,-8(fp)
    e268:	10a00034 	orhi	r2,r2,32768
}
    e26c:	e037883a 	mov	sp,fp
    e270:	dfc00117 	ldw	ra,4(sp)
    e274:	df000017 	ldw	fp,0(sp)
    e278:	dec00204 	addi	sp,sp,8
    e27c:	f800283a 	ret

0000e280 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    e280:	defffa04 	addi	sp,sp,-24
    e284:	df000515 	stw	fp,20(sp)
    e288:	df000504 	addi	fp,sp,20
    e28c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e290:	0005303a 	rdctl	r2,status
    e294:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e298:	e0fffd17 	ldw	r3,-12(fp)
    e29c:	00bfff84 	movi	r2,-2
    e2a0:	1884703a 	and	r2,r3,r2
    e2a4:	1001703a 	wrctl	status,r2
  
  return context;
    e2a8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    e2ac:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    e2b0:	e0bfff17 	ldw	r2,-4(fp)
    e2b4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    e2b8:	e0bffc17 	ldw	r2,-16(fp)
    e2bc:	10c00017 	ldw	r3,0(r2)
    e2c0:	e0bffc17 	ldw	r2,-16(fp)
    e2c4:	10800117 	ldw	r2,4(r2)
    e2c8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    e2cc:	e0bffc17 	ldw	r2,-16(fp)
    e2d0:	10c00117 	ldw	r3,4(r2)
    e2d4:	e0bffc17 	ldw	r2,-16(fp)
    e2d8:	10800017 	ldw	r2,0(r2)
    e2dc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    e2e0:	e0fffc17 	ldw	r3,-16(fp)
    e2e4:	e0bffc17 	ldw	r2,-16(fp)
    e2e8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    e2ec:	e0fffc17 	ldw	r3,-16(fp)
    e2f0:	e0bffc17 	ldw	r2,-16(fp)
    e2f4:	18800015 	stw	r2,0(r3)
    e2f8:	e0bffe17 	ldw	r2,-8(fp)
    e2fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e300:	e0bffb17 	ldw	r2,-20(fp)
    e304:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    e308:	e037883a 	mov	sp,fp
    e30c:	df000017 	ldw	fp,0(sp)
    e310:	dec00104 	addi	sp,sp,4
    e314:	f800283a 	ret

0000e318 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    e318:	defffb04 	addi	sp,sp,-20
    e31c:	dfc00415 	stw	ra,16(sp)
    e320:	df000315 	stw	fp,12(sp)
    e324:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    e328:	d0a01017 	ldw	r2,-32704(gp)
    e32c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    e330:	d0a70d17 	ldw	r2,-25548(gp)
    e334:	10800044 	addi	r2,r2,1
    e338:	d0a70d15 	stw	r2,-25548(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    e33c:	00003106 	br	e404 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    e340:	e0bffe17 	ldw	r2,-8(fp)
    e344:	10800017 	ldw	r2,0(r2)
    e348:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    e34c:	e0bffe17 	ldw	r2,-8(fp)
    e350:	10800403 	ldbu	r2,16(r2)
    e354:	10803fcc 	andi	r2,r2,255
    e358:	1005003a 	cmpeq	r2,r2,zero
    e35c:	1000051e 	bne	r2,zero,e374 <alt_tick+0x5c>
    e360:	d0a70d17 	ldw	r2,-25548(gp)
    e364:	1004c03a 	cmpne	r2,r2,zero
    e368:	1000021e 	bne	r2,zero,e374 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    e36c:	e0bffe17 	ldw	r2,-8(fp)
    e370:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    e374:	e0bffe17 	ldw	r2,-8(fp)
    e378:	10c00217 	ldw	r3,8(r2)
    e37c:	d0a70d17 	ldw	r2,-25548(gp)
    e380:	10c01e36 	bltu	r2,r3,e3fc <alt_tick+0xe4>
    e384:	e0bffe17 	ldw	r2,-8(fp)
    e388:	10800403 	ldbu	r2,16(r2)
    e38c:	10803fcc 	andi	r2,r2,255
    e390:	1004c03a 	cmpne	r2,r2,zero
    e394:	1000191e 	bne	r2,zero,e3fc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    e398:	e0bffe17 	ldw	r2,-8(fp)
    e39c:	10c00317 	ldw	r3,12(r2)
    e3a0:	e0bffe17 	ldw	r2,-8(fp)
    e3a4:	11000517 	ldw	r4,20(r2)
    e3a8:	183ee83a 	callr	r3
    e3ac:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    e3b0:	e0bffd17 	ldw	r2,-12(fp)
    e3b4:	1004c03a 	cmpne	r2,r2,zero
    e3b8:	1000031e 	bne	r2,zero,e3c8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    e3bc:	e13ffe17 	ldw	r4,-8(fp)
    e3c0:	000e2800 	call	e280 <alt_alarm_stop>
    e3c4:	00000d06 	br	e3fc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    e3c8:	e0bffe17 	ldw	r2,-8(fp)
    e3cc:	10c00217 	ldw	r3,8(r2)
    e3d0:	e0bffd17 	ldw	r2,-12(fp)
    e3d4:	1887883a 	add	r3,r3,r2
    e3d8:	e0bffe17 	ldw	r2,-8(fp)
    e3dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    e3e0:	e0bffe17 	ldw	r2,-8(fp)
    e3e4:	10c00217 	ldw	r3,8(r2)
    e3e8:	d0a70d17 	ldw	r2,-25548(gp)
    e3ec:	1880032e 	bgeu	r3,r2,e3fc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    e3f0:	e0fffe17 	ldw	r3,-8(fp)
    e3f4:	00800044 	movi	r2,1
    e3f8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    e3fc:	e0bfff17 	ldw	r2,-4(fp)
    e400:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    e404:	d0e01004 	addi	r3,gp,-32704
    e408:	e0bffe17 	ldw	r2,-8(fp)
    e40c:	10ffcc1e 	bne	r2,r3,e340 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    e410:	e037883a 	mov	sp,fp
    e414:	dfc00117 	ldw	ra,4(sp)
    e418:	df000017 	ldw	fp,0(sp)
    e41c:	dec00204 	addi	sp,sp,8
    e420:	f800283a 	ret

0000e424 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    e424:	deffff04 	addi	sp,sp,-4
    e428:	df000015 	stw	fp,0(sp)
    e42c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    e430:	000170fa 	wrctl	ienable,zero
}
    e434:	e037883a 	mov	sp,fp
    e438:	df000017 	ldw	fp,0(sp)
    e43c:	dec00104 	addi	sp,sp,4
    e440:	f800283a 	ret

0000e444 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
    e444:	defffb04 	addi	sp,sp,-20
    e448:	df000415 	stw	fp,16(sp)
    e44c:	df000404 	addi	fp,sp,16
    e450:	e13ffe15 	stw	r4,-8(fp)
    e454:	e17fff15 	stw	r5,-4(fp)
  {
    len = NIOS2_DCACHE_SIZE;
  }
  #endif

  end = ((char*) start) + len; 
    e458:	e0fffe17 	ldw	r3,-8(fp)
    e45c:	e0bfff17 	ldw	r2,-4(fp)
    e460:	1885883a 	add	r2,r3,r2
    e464:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    e468:	e0bffe17 	ldw	r2,-8(fp)
    e46c:	e0bffd15 	stw	r2,-12(fp)
    e470:	00000506 	br	e488 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
    e474:	e0bffd17 	ldw	r2,-12(fp)
    e478:	1000001b 	flushda	0(r2)
  }
  #endif

  end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    e47c:	e0bffd17 	ldw	r2,-12(fp)
    e480:	10800804 	addi	r2,r2,32
    e484:	e0bffd15 	stw	r2,-12(fp)
    e488:	e0fffd17 	ldw	r3,-12(fp)
    e48c:	e0bffc17 	ldw	r2,-16(fp)
    e490:	18bff836 	bltu	r3,r2,e474 <alt_dcache_flush+0x30>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
    e494:	e0bffe17 	ldw	r2,-8(fp)
    e498:	108007cc 	andi	r2,r2,31
    e49c:	1005003a 	cmpeq	r2,r2,zero
    e4a0:	1000021e 	bne	r2,zero,e4ac <alt_dcache_flush+0x68>
  {
    ALT_FLUSH_DATA(i);
    e4a4:	e0bffd17 	ldw	r2,-12(fp)
    e4a8:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e4ac:	e037883a 	mov	sp,fp
    e4b0:	df000017 	ldw	fp,0(sp)
    e4b4:	dec00104 	addi	sp,sp,4
    e4b8:	f800283a 	ret

0000e4bc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    e4bc:	defffa04 	addi	sp,sp,-24
    e4c0:	dfc00515 	stw	ra,20(sp)
    e4c4:	df000415 	stw	fp,16(sp)
    e4c8:	df000404 	addi	fp,sp,16
    e4cc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    e4d0:	00800074 	movhi	r2,1
    e4d4:	10840604 	addi	r2,r2,4120
    e4d8:	10800017 	ldw	r2,0(r2)
    e4dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e4e0:	00003306 	br	e5b0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    e4e4:	e0bffd17 	ldw	r2,-12(fp)
    e4e8:	11000217 	ldw	r4,8(r2)
    e4ec:	00018880 	call	1888 <strlen>
    e4f0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    e4f4:	e0bffd17 	ldw	r2,-12(fp)
    e4f8:	10c00217 	ldw	r3,8(r2)
    e4fc:	e0bffc17 	ldw	r2,-16(fp)
    e500:	1885883a 	add	r2,r3,r2
    e504:	10bfffc4 	addi	r2,r2,-1
    e508:	10800003 	ldbu	r2,0(r2)
    e50c:	10803fcc 	andi	r2,r2,255
    e510:	1080201c 	xori	r2,r2,128
    e514:	10bfe004 	addi	r2,r2,-128
    e518:	10800bd8 	cmpnei	r2,r2,47
    e51c:	1000031e 	bne	r2,zero,e52c <alt_find_file+0x70>
    {
      len -= 1;
    e520:	e0bffc17 	ldw	r2,-16(fp)
    e524:	10bfffc4 	addi	r2,r2,-1
    e528:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    e52c:	e0bffc17 	ldw	r2,-16(fp)
    e530:	1007883a 	mov	r3,r2
    e534:	e0bffe17 	ldw	r2,-8(fp)
    e538:	1885883a 	add	r2,r3,r2
    e53c:	10800003 	ldbu	r2,0(r2)
    e540:	10803fcc 	andi	r2,r2,255
    e544:	1080201c 	xori	r2,r2,128
    e548:	10bfe004 	addi	r2,r2,-128
    e54c:	10800be0 	cmpeqi	r2,r2,47
    e550:	10000a1e 	bne	r2,zero,e57c <alt_find_file+0xc0>
    e554:	e0bffc17 	ldw	r2,-16(fp)
    e558:	1007883a 	mov	r3,r2
    e55c:	e0bffe17 	ldw	r2,-8(fp)
    e560:	1885883a 	add	r2,r3,r2
    e564:	10800003 	ldbu	r2,0(r2)
    e568:	10803fcc 	andi	r2,r2,255
    e56c:	1080201c 	xori	r2,r2,128
    e570:	10bfe004 	addi	r2,r2,-128
    e574:	1004c03a 	cmpne	r2,r2,zero
    e578:	10000a1e 	bne	r2,zero,e5a4 <alt_find_file+0xe8>
    e57c:	e0bffd17 	ldw	r2,-12(fp)
    e580:	11000217 	ldw	r4,8(r2)
    e584:	e1bffc17 	ldw	r6,-16(fp)
    e588:	e17ffe17 	ldw	r5,-8(fp)
    e58c:	000e7700 	call	e770 <memcmp>
    e590:	1004c03a 	cmpne	r2,r2,zero
    e594:	1000031e 	bne	r2,zero,e5a4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    e598:	e0bffd17 	ldw	r2,-12(fp)
    e59c:	e0bfff15 	stw	r2,-4(fp)
    e5a0:	00000806 	br	e5c4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    e5a4:	e0bffd17 	ldw	r2,-12(fp)
    e5a8:	10800017 	ldw	r2,0(r2)
    e5ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e5b0:	00c00074 	movhi	r3,1
    e5b4:	18c40604 	addi	r3,r3,4120
    e5b8:	e0bffd17 	ldw	r2,-12(fp)
    e5bc:	10ffc91e 	bne	r2,r3,e4e4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    e5c0:	e03fff15 	stw	zero,-4(fp)
    e5c4:	e0bfff17 	ldw	r2,-4(fp)
}
    e5c8:	e037883a 	mov	sp,fp
    e5cc:	dfc00117 	ldw	ra,4(sp)
    e5d0:	df000017 	ldw	fp,0(sp)
    e5d4:	dec00204 	addi	sp,sp,8
    e5d8:	f800283a 	ret

0000e5dc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    e5dc:	defffc04 	addi	sp,sp,-16
    e5e0:	df000315 	stw	fp,12(sp)
    e5e4:	df000304 	addi	fp,sp,12
    e5e8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    e5ec:	00bffa04 	movi	r2,-24
    e5f0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e5f4:	e03ffe15 	stw	zero,-8(fp)
    e5f8:	00001e06 	br	e674 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    e5fc:	e0bffe17 	ldw	r2,-8(fp)
    e600:	00c00074 	movhi	r3,1
    e604:	18ff3304 	addi	r3,r3,-820
    e608:	10800324 	muli	r2,r2,12
    e60c:	10c5883a 	add	r2,r2,r3
    e610:	10800017 	ldw	r2,0(r2)
    e614:	1004c03a 	cmpne	r2,r2,zero
    e618:	1000131e 	bne	r2,zero,e668 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    e61c:	e0bffe17 	ldw	r2,-8(fp)
    e620:	00c00074 	movhi	r3,1
    e624:	18ff3304 	addi	r3,r3,-820
    e628:	10800324 	muli	r2,r2,12
    e62c:	10c7883a 	add	r3,r2,r3
    e630:	e0bfff17 	ldw	r2,-4(fp)
    e634:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    e638:	00800074 	movhi	r2,1
    e63c:	10840a04 	addi	r2,r2,4136
    e640:	10c00017 	ldw	r3,0(r2)
    e644:	e0bffe17 	ldw	r2,-8(fp)
    e648:	1880040e 	bge	r3,r2,e65c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    e64c:	00c00074 	movhi	r3,1
    e650:	18c40a04 	addi	r3,r3,4136
    e654:	e0bffe17 	ldw	r2,-8(fp)
    e658:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    e65c:	e0bffe17 	ldw	r2,-8(fp)
    e660:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    e664:	00000606 	br	e680 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e668:	e0bffe17 	ldw	r2,-8(fp)
    e66c:	10800044 	addi	r2,r2,1
    e670:	e0bffe15 	stw	r2,-8(fp)
    e674:	e0bffe17 	ldw	r2,-8(fp)
    e678:	10800810 	cmplti	r2,r2,32
    e67c:	103fdf1e 	bne	r2,zero,e5fc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    e680:	e0bffd17 	ldw	r2,-12(fp)
}
    e684:	e037883a 	mov	sp,fp
    e688:	df000017 	ldw	fp,0(sp)
    e68c:	dec00104 	addi	sp,sp,4
    e690:	f800283a 	ret

0000e694 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    e694:	defffb04 	addi	sp,sp,-20
    e698:	df000415 	stw	fp,16(sp)
    e69c:	df000404 	addi	fp,sp,16
    e6a0:	e13ffe15 	stw	r4,-8(fp)
    e6a4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    e6a8:	e0bfff17 	ldw	r2,-4(fp)
    e6ac:	10840070 	cmpltui	r2,r2,4097
    e6b0:	1000021e 	bne	r2,zero,e6bc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    e6b4:	00840004 	movi	r2,4096
    e6b8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    e6bc:	e0fffe17 	ldw	r3,-8(fp)
    e6c0:	e0bfff17 	ldw	r2,-4(fp)
    e6c4:	1885883a 	add	r2,r3,r2
    e6c8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e6cc:	e0bffe17 	ldw	r2,-8(fp)
    e6d0:	e0bffd15 	stw	r2,-12(fp)
    e6d4:	00000506 	br	e6ec <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    e6d8:	e0bffd17 	ldw	r2,-12(fp)
    e6dc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e6e0:	e0bffd17 	ldw	r2,-12(fp)
    e6e4:	10800804 	addi	r2,r2,32
    e6e8:	e0bffd15 	stw	r2,-12(fp)
    e6ec:	e0fffd17 	ldw	r3,-12(fp)
    e6f0:	e0bffc17 	ldw	r2,-16(fp)
    e6f4:	18bff836 	bltu	r3,r2,e6d8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    e6f8:	e0bffe17 	ldw	r2,-8(fp)
    e6fc:	108007cc 	andi	r2,r2,31
    e700:	1005003a 	cmpeq	r2,r2,zero
    e704:	1000021e 	bne	r2,zero,e710 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    e708:	e0bffd17 	ldw	r2,-12(fp)
    e70c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    e710:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    e714:	e037883a 	mov	sp,fp
    e718:	df000017 	ldw	fp,0(sp)
    e71c:	dec00104 	addi	sp,sp,4
    e720:	f800283a 	ret

0000e724 <atexit>:
    e724:	200b883a 	mov	r5,r4
    e728:	000d883a 	mov	r6,zero
    e72c:	0009883a 	mov	r4,zero
    e730:	000f883a 	mov	r7,zero
    e734:	000e7e41 	jmpi	e7e4 <__register_exitproc>

0000e738 <exit>:
    e738:	defffe04 	addi	sp,sp,-8
    e73c:	000b883a 	mov	r5,zero
    e740:	dc000015 	stw	r16,0(sp)
    e744:	dfc00115 	stw	ra,4(sp)
    e748:	2021883a 	mov	r16,r4
    e74c:	000e91c0 	call	e91c <__call_exitprocs>
    e750:	00800074 	movhi	r2,1
    e754:	10840104 	addi	r2,r2,4100
    e758:	11000017 	ldw	r4,0(r2)
    e75c:	20800f17 	ldw	r2,60(r4)
    e760:	10000126 	beq	r2,zero,e768 <exit+0x30>
    e764:	103ee83a 	callr	r2
    e768:	8009883a 	mov	r4,r16
    e76c:	000eb0c0 	call	eb0c <_exit>

0000e770 <memcmp>:
    e770:	00c000c4 	movi	r3,3
    e774:	1980032e 	bgeu	r3,r6,e784 <memcmp+0x14>
    e778:	2144b03a 	or	r2,r4,r5
    e77c:	10c4703a 	and	r2,r2,r3
    e780:	10000f26 	beq	r2,zero,e7c0 <memcmp+0x50>
    e784:	31ffffc4 	addi	r7,r6,-1
    e788:	3000061e 	bne	r6,zero,e7a4 <memcmp+0x34>
    e78c:	00000a06 	br	e7b8 <memcmp+0x48>
    e790:	39ffffc4 	addi	r7,r7,-1
    e794:	00bfffc4 	movi	r2,-1
    e798:	21000044 	addi	r4,r4,1
    e79c:	29400044 	addi	r5,r5,1
    e7a0:	38800526 	beq	r7,r2,e7b8 <memcmp+0x48>
    e7a4:	20c00003 	ldbu	r3,0(r4)
    e7a8:	28800003 	ldbu	r2,0(r5)
    e7ac:	18bff826 	beq	r3,r2,e790 <memcmp+0x20>
    e7b0:	1885c83a 	sub	r2,r3,r2
    e7b4:	f800283a 	ret
    e7b8:	0005883a 	mov	r2,zero
    e7bc:	f800283a 	ret
    e7c0:	180f883a 	mov	r7,r3
    e7c4:	20c00017 	ldw	r3,0(r4)
    e7c8:	28800017 	ldw	r2,0(r5)
    e7cc:	18bfed1e 	bne	r3,r2,e784 <memcmp+0x14>
    e7d0:	31bfff04 	addi	r6,r6,-4
    e7d4:	21000104 	addi	r4,r4,4
    e7d8:	29400104 	addi	r5,r5,4
    e7dc:	39bff936 	bltu	r7,r6,e7c4 <memcmp+0x54>
    e7e0:	003fe806 	br	e784 <memcmp+0x14>

0000e7e4 <__register_exitproc>:
    e7e4:	defffa04 	addi	sp,sp,-24
    e7e8:	00800074 	movhi	r2,1
    e7ec:	10840104 	addi	r2,r2,4100
    e7f0:	dc000015 	stw	r16,0(sp)
    e7f4:	14000017 	ldw	r16,0(r2)
    e7f8:	dd000415 	stw	r20,16(sp)
    e7fc:	2829883a 	mov	r20,r5
    e800:	81405217 	ldw	r5,328(r16)
    e804:	dcc00315 	stw	r19,12(sp)
    e808:	dc800215 	stw	r18,8(sp)
    e80c:	dc400115 	stw	r17,4(sp)
    e810:	dfc00515 	stw	ra,20(sp)
    e814:	2023883a 	mov	r17,r4
    e818:	3027883a 	mov	r19,r6
    e81c:	3825883a 	mov	r18,r7
    e820:	28002526 	beq	r5,zero,e8b8 <__register_exitproc+0xd4>
    e824:	29000117 	ldw	r4,4(r5)
    e828:	008007c4 	movi	r2,31
    e82c:	11002716 	blt	r2,r4,e8cc <__register_exitproc+0xe8>
    e830:	8800101e 	bne	r17,zero,e874 <__register_exitproc+0x90>
    e834:	2105883a 	add	r2,r4,r4
    e838:	1085883a 	add	r2,r2,r2
    e83c:	20c00044 	addi	r3,r4,1
    e840:	1145883a 	add	r2,r2,r5
    e844:	0009883a 	mov	r4,zero
    e848:	15000215 	stw	r20,8(r2)
    e84c:	28c00115 	stw	r3,4(r5)
    e850:	2005883a 	mov	r2,r4
    e854:	dfc00517 	ldw	ra,20(sp)
    e858:	dd000417 	ldw	r20,16(sp)
    e85c:	dcc00317 	ldw	r19,12(sp)
    e860:	dc800217 	ldw	r18,8(sp)
    e864:	dc400117 	ldw	r17,4(sp)
    e868:	dc000017 	ldw	r16,0(sp)
    e86c:	dec00604 	addi	sp,sp,24
    e870:	f800283a 	ret
    e874:	29802204 	addi	r6,r5,136
    e878:	00800044 	movi	r2,1
    e87c:	110e983a 	sll	r7,r2,r4
    e880:	30c04017 	ldw	r3,256(r6)
    e884:	2105883a 	add	r2,r4,r4
    e888:	1085883a 	add	r2,r2,r2
    e88c:	1185883a 	add	r2,r2,r6
    e890:	19c6b03a 	or	r3,r3,r7
    e894:	14802015 	stw	r18,128(r2)
    e898:	14c00015 	stw	r19,0(r2)
    e89c:	00800084 	movi	r2,2
    e8a0:	30c04015 	stw	r3,256(r6)
    e8a4:	88bfe31e 	bne	r17,r2,e834 <__register_exitproc+0x50>
    e8a8:	30804117 	ldw	r2,260(r6)
    e8ac:	11c4b03a 	or	r2,r2,r7
    e8b0:	30804115 	stw	r2,260(r6)
    e8b4:	003fdf06 	br	e834 <__register_exitproc+0x50>
    e8b8:	00800074 	movhi	r2,1
    e8bc:	108b5804 	addi	r2,r2,11616
    e8c0:	100b883a 	mov	r5,r2
    e8c4:	80805215 	stw	r2,328(r16)
    e8c8:	003fd606 	br	e824 <__register_exitproc+0x40>
    e8cc:	00800034 	movhi	r2,0
    e8d0:	1083a904 	addi	r2,r2,3748
    e8d4:	1000021e 	bne	r2,zero,e8e0 <__register_exitproc+0xfc>
    e8d8:	013fffc4 	movi	r4,-1
    e8dc:	003fdc06 	br	e850 <__register_exitproc+0x6c>
    e8e0:	01006404 	movi	r4,400
    e8e4:	103ee83a 	callr	r2
    e8e8:	1007883a 	mov	r3,r2
    e8ec:	103ffa26 	beq	r2,zero,e8d8 <__register_exitproc+0xf4>
    e8f0:	80805217 	ldw	r2,328(r16)
    e8f4:	180b883a 	mov	r5,r3
    e8f8:	18000115 	stw	zero,4(r3)
    e8fc:	18800015 	stw	r2,0(r3)
    e900:	80c05215 	stw	r3,328(r16)
    e904:	18006215 	stw	zero,392(r3)
    e908:	18006315 	stw	zero,396(r3)
    e90c:	0009883a 	mov	r4,zero
    e910:	883fc826 	beq	r17,zero,e834 <__register_exitproc+0x50>
    e914:	003fd706 	br	e874 <__register_exitproc+0x90>

0000e918 <register_fini>:
    e918:	f800283a 	ret

0000e91c <__call_exitprocs>:
    e91c:	00800074 	movhi	r2,1
    e920:	10840104 	addi	r2,r2,4100
    e924:	10800017 	ldw	r2,0(r2)
    e928:	defff304 	addi	sp,sp,-52
    e92c:	df000b15 	stw	fp,44(sp)
    e930:	d8800115 	stw	r2,4(sp)
    e934:	00800034 	movhi	r2,0
    e938:	1083a404 	addi	r2,r2,3728
    e93c:	1005003a 	cmpeq	r2,r2,zero
    e940:	d8800215 	stw	r2,8(sp)
    e944:	d8800117 	ldw	r2,4(sp)
    e948:	dd400815 	stw	r21,32(sp)
    e94c:	dd000715 	stw	r20,28(sp)
    e950:	10805204 	addi	r2,r2,328
    e954:	dfc00c15 	stw	ra,48(sp)
    e958:	ddc00a15 	stw	r23,40(sp)
    e95c:	dd800915 	stw	r22,36(sp)
    e960:	dcc00615 	stw	r19,24(sp)
    e964:	dc800515 	stw	r18,20(sp)
    e968:	dc400415 	stw	r17,16(sp)
    e96c:	dc000315 	stw	r16,12(sp)
    e970:	282b883a 	mov	r21,r5
    e974:	2039883a 	mov	fp,r4
    e978:	d8800015 	stw	r2,0(sp)
    e97c:	2829003a 	cmpeq	r20,r5,zero
    e980:	d8800117 	ldw	r2,4(sp)
    e984:	14405217 	ldw	r17,328(r2)
    e988:	88001026 	beq	r17,zero,e9cc <__call_exitprocs+0xb0>
    e98c:	ddc00017 	ldw	r23,0(sp)
    e990:	88800117 	ldw	r2,4(r17)
    e994:	8c802204 	addi	r18,r17,136
    e998:	143fffc4 	addi	r16,r2,-1
    e99c:	80000916 	blt	r16,zero,e9c4 <__call_exitprocs+0xa8>
    e9a0:	05bfffc4 	movi	r22,-1
    e9a4:	a000151e 	bne	r20,zero,e9fc <__call_exitprocs+0xe0>
    e9a8:	8409883a 	add	r4,r16,r16
    e9ac:	2105883a 	add	r2,r4,r4
    e9b0:	1485883a 	add	r2,r2,r18
    e9b4:	10c02017 	ldw	r3,128(r2)
    e9b8:	a8c01126 	beq	r21,r3,ea00 <__call_exitprocs+0xe4>
    e9bc:	843fffc4 	addi	r16,r16,-1
    e9c0:	85bff81e 	bne	r16,r22,e9a4 <__call_exitprocs+0x88>
    e9c4:	d8800217 	ldw	r2,8(sp)
    e9c8:	10003126 	beq	r2,zero,ea90 <__call_exitprocs+0x174>
    e9cc:	dfc00c17 	ldw	ra,48(sp)
    e9d0:	df000b17 	ldw	fp,44(sp)
    e9d4:	ddc00a17 	ldw	r23,40(sp)
    e9d8:	dd800917 	ldw	r22,36(sp)
    e9dc:	dd400817 	ldw	r21,32(sp)
    e9e0:	dd000717 	ldw	r20,28(sp)
    e9e4:	dcc00617 	ldw	r19,24(sp)
    e9e8:	dc800517 	ldw	r18,20(sp)
    e9ec:	dc400417 	ldw	r17,16(sp)
    e9f0:	dc000317 	ldw	r16,12(sp)
    e9f4:	dec00d04 	addi	sp,sp,52
    e9f8:	f800283a 	ret
    e9fc:	8409883a 	add	r4,r16,r16
    ea00:	88c00117 	ldw	r3,4(r17)
    ea04:	2105883a 	add	r2,r4,r4
    ea08:	1445883a 	add	r2,r2,r17
    ea0c:	18ffffc4 	addi	r3,r3,-1
    ea10:	11800217 	ldw	r6,8(r2)
    ea14:	1c001526 	beq	r3,r16,ea6c <__call_exitprocs+0x150>
    ea18:	10000215 	stw	zero,8(r2)
    ea1c:	303fe726 	beq	r6,zero,e9bc <__call_exitprocs+0xa0>
    ea20:	00c00044 	movi	r3,1
    ea24:	1c06983a 	sll	r3,r3,r16
    ea28:	90804017 	ldw	r2,256(r18)
    ea2c:	8cc00117 	ldw	r19,4(r17)
    ea30:	1884703a 	and	r2,r3,r2
    ea34:	10001426 	beq	r2,zero,ea88 <__call_exitprocs+0x16c>
    ea38:	90804117 	ldw	r2,260(r18)
    ea3c:	1884703a 	and	r2,r3,r2
    ea40:	10000c1e 	bne	r2,zero,ea74 <__call_exitprocs+0x158>
    ea44:	2105883a 	add	r2,r4,r4
    ea48:	1485883a 	add	r2,r2,r18
    ea4c:	11400017 	ldw	r5,0(r2)
    ea50:	e009883a 	mov	r4,fp
    ea54:	303ee83a 	callr	r6
    ea58:	88800117 	ldw	r2,4(r17)
    ea5c:	98bfc81e 	bne	r19,r2,e980 <__call_exitprocs+0x64>
    ea60:	b8800017 	ldw	r2,0(r23)
    ea64:	147fd526 	beq	r2,r17,e9bc <__call_exitprocs+0xa0>
    ea68:	003fc506 	br	e980 <__call_exitprocs+0x64>
    ea6c:	8c000115 	stw	r16,4(r17)
    ea70:	003fea06 	br	ea1c <__call_exitprocs+0x100>
    ea74:	2105883a 	add	r2,r4,r4
    ea78:	1485883a 	add	r2,r2,r18
    ea7c:	11000017 	ldw	r4,0(r2)
    ea80:	303ee83a 	callr	r6
    ea84:	003ff406 	br	ea58 <__call_exitprocs+0x13c>
    ea88:	303ee83a 	callr	r6
    ea8c:	003ff206 	br	ea58 <__call_exitprocs+0x13c>
    ea90:	88800117 	ldw	r2,4(r17)
    ea94:	1000081e 	bne	r2,zero,eab8 <__call_exitprocs+0x19c>
    ea98:	89000017 	ldw	r4,0(r17)
    ea9c:	20000726 	beq	r4,zero,eabc <__call_exitprocs+0x1a0>
    eaa0:	b9000015 	stw	r4,0(r23)
    eaa4:	8809883a 	mov	r4,r17
    eaa8:	0000e900 	call	e90 <free>
    eaac:	bc400017 	ldw	r17,0(r23)
    eab0:	883fb71e 	bne	r17,zero,e990 <__call_exitprocs+0x74>
    eab4:	003fc506 	br	e9cc <__call_exitprocs+0xb0>
    eab8:	89000017 	ldw	r4,0(r17)
    eabc:	882f883a 	mov	r23,r17
    eac0:	2023883a 	mov	r17,r4
    eac4:	883fb21e 	bne	r17,zero,e990 <__call_exitprocs+0x74>
    eac8:	003fc006 	br	e9cc <__call_exitprocs+0xb0>

0000eacc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    eacc:	defffd04 	addi	sp,sp,-12
    ead0:	df000215 	stw	fp,8(sp)
    ead4:	df000204 	addi	fp,sp,8
    ead8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    eadc:	e0bfff17 	ldw	r2,-4(fp)
    eae0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    eae4:	e0bffe17 	ldw	r2,-8(fp)
    eae8:	1005003a 	cmpeq	r2,r2,zero
    eaec:	1000021e 	bne	r2,zero,eaf8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    eaf0:	002af070 	cmpltui	zero,zero,43969
    eaf4:	00000106 	br	eafc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    eaf8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    eafc:	e037883a 	mov	sp,fp
    eb00:	df000017 	ldw	fp,0(sp)
    eb04:	dec00104 	addi	sp,sp,4
    eb08:	f800283a 	ret

0000eb0c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    eb0c:	defffd04 	addi	sp,sp,-12
    eb10:	dfc00215 	stw	ra,8(sp)
    eb14:	df000115 	stw	fp,4(sp)
    eb18:	df000104 	addi	fp,sp,4
    eb1c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    eb20:	e13fff17 	ldw	r4,-4(fp)
    eb24:	000eacc0 	call	eacc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    eb28:	003fff06 	br	eb28 <_exit+0x1c>
    eb2c:	00000010 	cmplti	zero,zero,0
    eb30:	00000000 	call	0 <__reset>
    eb34:	00527a01 	jmpi	527a0 <_gp+0x397a0>
    eb38:	011f7c01 	jmpi	11f7c0 <_gp+0x1067c0>
    eb3c:	001b0c0b 	ldhu	zero,27696(zero)
    eb40:	00000028 	cmpgeui	zero,zero,0
    eb44:	00000018 	cmpnei	zero,zero,0
    eb48:	00008538 	rdprs	zero,zero,532
    eb4c:	000005dc 	xori	zero,zero,23
    eb50:	400e4400 	call	400e440 <__alt_data_end+0x200e440>
    eb54:	92099170 	cmpltui	r8,r18,9797
    eb58:	95079308 	cmpgei	r20,r18,7756
    eb5c:	97049605 	stb	fp,4696(r18)
    eb60:	90019f03 	ldbu	zero,1660(r18)
    eb64:	9c06940a 	0x9c06940a
    eb68:	00000002 	0x2
    eb6c:	00000028 	cmpgeui	zero,zero,0
    eb70:	00000044 	movi	zero,1
    eb74:	00008b14 	movui	zero,556
    eb78:	000005b0 	cmpltui	zero,zero,22
    eb7c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x1c0e440>
    eb80:	92099168 	cmpgeui	r8,r18,9797
    eb84:	95079308 	cmpgei	r20,r18,7756
    eb88:	9c039705 	stb	r16,3676(r19)
    eb8c:	90019f02 	0x90019f02
    eb90:	9606940a 	0x9606940a
    eb94:	00000004 	movi	zero,0
    eb98:	0000e918 	cmpnei	zero,zero,932
