
FFT_TESTER.elf:     file format elf32-littlenios2
FFT_TESTER.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011fc8 memsz 0x00011fc8 flags r-x
    LOAD off    0x00012fe8 vaddr 0x00011fe8 paddr 0x00013adc align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x000155d0 vaddr 0x000155d0 paddr 0x000155d0 align 2**12
         filesz 0x00000000 memsz 0x000012ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000116c4  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000770  00011878  00011878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  00011fe8  00013adc  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000012ec  000155d0  000155d0  000155d0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00014adc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001098  00000000  00000000  00014b00  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b7c  00000000  00000000  00015b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002beff  00000000  00000000  00017714  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a169  00000000  00000000  00043613  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00018d88  00000000  00000000  0004d77c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000021c4  00000000  00000000  00066504  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002920  00000000  00000000  000686c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e8d4  00000000  00000000  0006afe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000798bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b90  00000000  00000000  000798d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007e042  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  0007e045  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0007e04c  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0007e04d  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0007e051  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0007e055  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0007e059  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0007e062  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0007e06b  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0007e074  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001a  00000000  00000000  0007e07f  2**0
                  CONTENTS, READONLY
 28 .jdi          00004366  00000000  00000000  0007e099  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00011878 l    d  .rodata	00000000 .rodata
00011fe8 l    d  .rwdata	00000000 .rwdata
000155d0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 fixedpoint2_16.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00011a14 l     O .rodata	00000108 two_over_pi
00011994 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00011b1c l     O .rodata	00000010 init_jk
00011b2c l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00003164 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
000038d4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00004808 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
00005388 l     F .text	00000058 std
00005494 l     F .text	00000008 __fp_lock
0000549c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00011fe8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00006570 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000068f0 l     F .text	00000058 __sprint_r
00011d06 l     O .rodata	00000010 blanks.3452
00011cf6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00008a54 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00013aa8 l     O .rwdata	00000004 charset
00011d38 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00011e80 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000dc6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000dccc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ddd0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000def4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000dfd4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e134 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e364 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013ac4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000e61c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000129a4 l     O .rwdata	00001060 jtag_uart
00013a04 l     O .rwdata	00000030 lcd_sgdma
00013a34 l     O .rwdata	00000030 sgdma_rx
00013a64 l     O .rwdata	00000030 sgdma_tx
0000e758 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e998 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000ebc0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0000f90c l     F .text	00000060 alt_get_errno
0000fddc l     F .text	000000c0 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000ff48 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010500 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000109a4 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010af4 l     F .text	000000f8 alt_file_locked
00010d78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001156c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
000117a8 l     F .text	00000040 alt_sim_halt
0000b638 g     F .text	00000094 _mprec_log10
00000230 g     F .text	000000d4 FIXED2_16toBinary
0000b724 g     F .text	00000088 __any_on
0000cb8c g     F .text	00000070 _isatty_r
00011e58 g     O .rodata	00000028 __mprec_tinytens
0000e194 g     F .text	0000006c alt_main
000062f8 g     F .text	000000a0 _puts_r
0001662c g     O .bss	00000100 alt_irq
00002c00 g     F .text	00000018 fabs
0000af40 g     F .text	00000078 _lseek_r
00013adc g       *ABS*	00000000 __flash_rwdata_start
000043f4 g     F .text	00000088 __eqdf2
000168bc g       *ABS*	00000000 __alt_heap_start
00006280 g     F .text	00000044 printf
0000f378 g     F .text	00000124 alt_avalon_sgdma_do_sync_transfer
000008ec g     F .text	000002b8 caso_teste
00006738 g     F .text	00000068 __sseek
000053f0 g     F .text	000000a4 __sinit
00011140 g     F .text	00000024 alt_get_cpu_freq
0000aea0 g     F .text	00000084 _setlocale_r
000054f0 g     F .text	0000009c __sfmoreglue
0000e220 g     F .text	00000020 __malloc_unlock
00000304 g     F .text	000000a4 imprimeFIXED2_16
000035fc g     F .text	00000174 __divsf3
0000f9f4 g     F .text	000003e8 alt_avalon_sgdma_construct_descriptor_burst
0000b14c g     F .text	000000e0 memmove
00010048 g     F .text	00000294 perf_print_formatted_report
000054e0 g     F .text	00000010 _cleanup
0001562c g     O .bss	00001000 vetor
0000b7ac g     F .text	000000bc _Balloc
0000447c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
0000f5e0 g     F .text	00000070 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000cb18 g     F .text	00000074 _fstat_r
000155dc g     O .bss	00000004 errno
0000475c g     F .text	00000038 __make_dp
000065d8 g     F .text	00000014 __srget
00002c18 g     F .text	00000224 floor
00004cdc g     F .text	0000002c __make_fp
000155f0 g     O .bss	00000004 alt_argv
0001ba94 g       *ABS*	00000000 _gp
00003348 g     F .text	00000070 __subsf3
00005364 g     F .text	00000024 fgets
00012824 g     O .rwdata	00000180 alt_fd_list
00005894 g     F .text	00000090 _getc_r
00000d10 g     F .text	00000828 __ieee754_rem_pio2
000057fc g     F .text	00000098 getc
00010628 g     F .text	00000094 alt_find_dev
00006148 g     F .text	000000a0 memcpy
000054d4 g     F .text	0000000c _cleanup_r
0000458c g     F .text	000000f8 __floatsidf
00010a7c g     F .text	00000078 alt_io_redirect
0000d950 g     F .text	00000088 __ltdf2
00011878 g       *ABS*	00000000 __DTOR_END__
00006398 g     F .text	00000014 puts
00010fbc g     F .text	00000020 altera_nios2_irq_init
0000b588 g     F .text	000000b0 __ratio
0000f6c4 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0000edd8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000062c4 g     F .text	00000034 _printf_r
00004944 g     F .text	00000008 __udivsi3
0000de30 g     F .text	000000c4 isatty
00011d68 g     O .rodata	000000c8 __mprec_tens
0000ae7c g     F .text	00000008 __locale_charset
00001538 g     F .text	0000052c __kernel_cos
000155d0 g     O .bss	00000004 __malloc_top_pad
000110e0 g     F .text	00000040 perf_get_num_starts
00013aa4 g     O .rwdata	00000004 __mb_cur_max
0000ae84 g     F .text	0000000c _localeconv_r
0000bf10 g     F .text	0000003c __i2b
0000a9e0 g     F .text	0000049c __sfvwrite_r
0000f7ec g     F .text	00000058 alt_avalon_sgdma_stop
000065ec g     F .text	00000070 _sbrk_r
0000c2b8 g     F .text	00000078 _read_r
00011164 g     F .text	00000024 alt_dcache_flush
000127f0 g     O .rwdata	0000000c __lc_ctype
00013abc g     O .rwdata	00000004 alt_max_fd
0000501c g     F .text	00000138 __unpack_d
0000a24c g     F .text	00000110 _fclose_r
0000a56c g     F .text	00000034 fflush
000155d4 g     O .bss	00000004 __malloc_max_sbrked_mem
000028e8 g     F .text	00000318 __kernel_sin
00003880 g     F .text	00000054 __extendsfdf2
00003d64 g     F .text	00000074 __adddf3
0000b468 g     F .text	00000120 __b2d
0000d268 g     F .text	00000660 __umoddi3
0000e040 g     F .text	000000f4 lseek
00013a98 g     O .rwdata	00000004 _global_impure_ptr
0000c330 g     F .text	000005f4 _realloc_r
000168bc g       *ABS*	00000000 __bss_end
000108ac g     F .text	000000f8 alt_iic_isr_register
0000f23c g     F .text	0000013c alt_avalon_sgdma_do_async_transfer
00010eb0 g     F .text	0000010c alt_tick
0000cbfc g     F .text	0000066c __udivdi3
00011e30 g     O .rodata	00000028 __mprec_bigtens
0000c198 g     F .text	00000120 __s2b
0000d9d8 g     F .text	00000194 __floatunsidf
0000b388 g     F .text	00000060 __mcmp
000054bc g     F .text	00000018 __fp_lock_all
00010864 g     F .text	00000048 alt_ic_irq_enabled
00010e18 g     F .text	00000098 alt_alarm_stop
04002000 g       *ABS*	00000000 __alt_mem_descriptor_memory
000155f8 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
000127fc g     O .rwdata	00000028 alt_dev_null
00001a64 g     F .text	00000e84 __kernel_rem_pio2
00004b6c g     F .text	000000c8 __unpack_f
0000f844 g     F .text	00000070 alt_avalon_sgdma_check_descriptor_status
00010430 g     F .text	0000001c alt_dcache_flush_all
0000b254 g     F .text	00000070 __hi0bits
00004684 g     F .text	000000d8 __fixdfsi
000003a8 g     F .text	00000038 soma2_16
00013adc g       *ABS*	00000000 __ram_rwdata_end
00013ab4 g     O .rwdata	00000008 alt_dev_list
0000e4f8 g     F .text	00000124 write
00011fe8 g       *ABS*	00000000 __ram_rodata_end
00000418 g     F .text	000000c0 mult2_16
0000dcf8 g     F .text	000000d8 fstat
0000c078 g     F .text	00000120 __pow5mult
000155e0 g     O .bss	00000004 __nlocale_changed
0000494c g     F .text	00000008 __umodsi3
0000f650 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_stream_desc
0000f748 g     F .text	00000050 alt_avalon_sgdma_register_callback
000168bc g       *ABS*	00000000 end
00004a0c g     F .text	00000160 __pack_f
0000e8d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
00011874 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000ffb8 g     F .text	00000090 alt_avalon_timer_sc_init
0000498c g     F .text	00000080 __clzsi2
0000effc g     F .text	00000240 altera_avalon_jtag_uart_write
0000f49c g     F .text	00000070 alt_avalon_sgdma_construct_mem_to_mem_desc
000053e0 g     F .text	00000004 __sfp_lock_acquire
00006064 g     F .text	000000e4 memchr
00006948 g     F .text	00001ec4 ___vfprintf_internal_r
000066d0 g     F .text	00000060 _sprintf_r
0000f58c g     F .text	00000054 alt_avalon_sgdma_construct_stream_to_mem_desc
0000a6cc g     F .text	00000314 _free_r
00000590 g     F .text	00000048 FIXED2_16toReal
00011570 g     F .text	000001b0 __call_exitprocs
0000658c g     F .text	0000004c __srget_r
000155e4 g     O .bss	00000004 __mlocale_changed
00013aa0 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
000155fc g     O .bss	00000004 _alt_tick_rate
0000f8b4 g     F .text	00000058 alt_avalon_sgdma_open
00000ba4 g     F .text	0000016c sin
00011720 g     F .text	00000088 __floatundidf
0000bb70 g     F .text	0000014c __lshift
00015600 g     O .bss	00000004 _alt_nticks
0000e240 g     F .text	00000124 read
0000e6b0 g     F .text	000000a8 alt_sys_init
000037e8 g     F .text	00000098 __floatsisf
00011438 g     F .text	00000134 __register_exitproc
00010dd8 g     F .text	00000040 alt_remap_uncached
0000bcbc g     F .text	00000254 __multiply
0000ec70 g     F .text	00000074 altera_avalon_jtag_uart_close
00004954 g     F .text	00000038 __mulsi3
00011fe8 g       *ABS*	00000000 __ram_rwdata_start
00011878 g       *ABS*	00000000 __ram_rodata_start
00015604 g     O .bss	00000028 __malloc_current_mallinfo
0000b868 g     F .text	0000017c __d2b
0000e790 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000112a8 g     F .text	000000d0 alt_get_fd
00005154 g     F .text	000000c8 __fpcmp_parts_d
000089e4 g     F .text	00000070 _close_r
00010fdc g     F .text	000000b0 perf_get_section_time
000113c4 g     F .text	00000074 memcmp
0000e840 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000168bc g       *ABS*	00000000 __alt_stack_base
0000e888 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000088a8 g     F .text	0000013c __swsetup_r
0000419c g     F .text	00000258 __divdf3
0000558c g     F .text	000000f0 __sfp
0000b6cc g     F .text	00000058 __copybits
0001108c g     F .text	00000054 perf_get_total_time
000123e8 g     O .rwdata	00000408 __malloc_av_
000053ec g     F .text	00000004 __sinit_lock_release
00003dd8 g     F .text	000003c4 __muldf3
0000681c g     F .text	00000060 __sread
00011b6c g     O .rodata	00000010 __thenan_sf
00011188 g     F .text	00000120 alt_find_file
0001044c g     F .text	000000b4 alt_dev_llist_insert
0000e200 g     F .text	00000020 __malloc_lock
0000e43c g     F .text	000000bc sbrk
0000f798 g     F .text	00000054 alt_avalon_sgdma_start
0000a370 g     F .text	000001fc _fflush_r
0000ca50 g     F .text	000000c8 _calloc_r
000155d0 g       *ABS*	00000000 __bss_start
000061e8 g     F .text	00000098 memset
00000650 g     F .text	0000029c main
000155f4 g     O .bss	00000004 alt_envp
000155d8 g     O .bss	00000004 __malloc_max_total_mem
0000e7e8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00013ac8 g     O .rwdata	00000008 alt_sgdma_list
00006730 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
0000a35c g     F .text	00000014 fclose
00004794 g     F .text	00000074 __truncdfsf2
0001672c g     O .bss	00000190 _atexit0
00008c98 g     F .text	000015b4 _dtoa_r
00005924 g     F .text	00000740 _malloc_r
00013ac0 g     O .rwdata	00000004 alt_errno
00005744 g     F .text	000000b8 _fwalk
0000521c g     F .text	00000148 _fgets_r
00004884 g     F .text	00000060 __divsi3
00011b7c g     O .rodata	00000014 __thenan_df
0000a5a0 g     F .text	0000012c _malloc_trim_r
00011878 g       *ABS*	00000000 __CTOR_END__
0000341c g     F .text	000001e0 __mulsf3
0000c994 g     F .text	000000bc strcmp
00011878 g       *ABS*	00000000 __flash_rodata_start
00011878 g       *ABS*	00000000 __DTOR_LIST__
0000301c g     F .text	00000024 copysign
000005d8 g     F .text	00000078 delay
0000d8c8 g     F .text	00000088 __nedf2
0000e67c g     F .text	00000034 alt_irq_init
0000e3c4 g     F .text	00000078 alt_release_fd
0000665c g     F .text	00000074 sprintf
00011b90 g     O .rodata	00000100 __clz_tab
000155e8 g     O .bss	00000004 _PathLocale
00011378 g     F .text	00000014 atexit
00003770 g     F .text	00000078 __gesf2
00008830 g     F .text	00000078 _write_r
0000af24 g     F .text	0000001c setlocale
00013a94 g     O .rwdata	00000004 _impure_ptr
000155ec g     O .bss	00000004 alt_argc
00002e3c g     F .text	000001e0 scalbn
000105c4 g     F .text	00000064 _do_dtors
000063ac g     F .text	000001c4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
0000b3e8 g     F .text	00000080 __ulp
0000c924 g     F .text	00000040 __isinfd
000054a4 g     F .text	00000018 __fp_unlock_all
00013aac g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000ae90 g     F .text	00000010 localeconv
000106d8 g     F .text	00000050 alt_ic_isr_register
00013adc g       *ABS*	00000000 _edata
000168bc g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000ece4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000107c4 g     F .text	000000a0 alt_ic_irq_disable
0000f96c g     F .text	00000088 alt_avalon_sgdma_construct_descriptor
000067a0 g     F .text	0000007c __swrite
00013a9c g     O .rwdata	00000004 __malloc_trim_threshold
00011120 g     F .text	00000020 alt_get_performance_counter_base
0001138c g     F .text	00000038 exit
0000567c g     F .text	000000c8 _fwalk_reent
0000b9e4 g     F .text	0000018c __mdiff
000048e4 g     F .text	00000060 __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000053e4 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000004d8 g     F .text	000000b8 real2FIXED2_16
00004c34 g     F .text	000000a8 __fpcmp_parts_f
000117e8 g     F .text	00000020 _exit
0000c964 g     F .text	00000030 __isnand
000102dc g     F .text	00000154 alt_alarm_start
00003040 g     F .text	00000124 __muldi3
0000afb8 g     F .text	00000194 __smakebuf_r
0000687c g     F .text	00000074 strlen
00010bec g     F .text	0000018c open
00004504 g     F .text	00000088 __gedf2
000003e0 g     F .text	00000038 sub2_16
000106bc g     F .text	0000001c alt_icache_flush_all
00013ad0 g     O .rwdata	00000004 alt_priority_mask
00010728 g     F .text	0000009c alt_ic_irq_enable
0000880c g     F .text	00000024 __vfprintf_internal
0000f50c g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00003ce4 g     F .text	00000080 __subdf3
0000b2c4 g     F .text	000000c4 __lo0bits
00013ad4 g     O .rwdata	00000008 alt_alarm_list
00010560 g     F .text	00000064 _do_ctors
0000db6c g     F .text	00000100 close
000033b8 g     F .text	00000064 __addsf3
000001f0 g     F .text	00000040 BitTest
0000df54 g     F .text	00000080 alt_load
00004d08 g     F .text	00000314 __pack_d
0000fe9c g     F .text	000000ac alt_avalon_sgdma_init
00000000  w      *UND*	00000000 free
000053e8 g     F .text	00000004 __sinit_lock_acquire
0000bf4c g     F .text	0000012c __multadd
0000b22c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406d14 	ori	at,at,436
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18d98b04 	addi	r3,r3,26156
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18d98b04 	addi	r3,r3,26156
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d6aea514 	ori	gp,gp,47764
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	10957414 	ori	r2,r2,21968

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18da2f14 	ori	r3,r3,26812

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000df540 	call	df54 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000e1940 	call	e194 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <BitTest>:
 *  Created on: 26/01/2012
 *      Author: Danilo
 */
#include "fixedpoint2_16.h"

char BitTest(unsigned int test, int pos){
     1f0:	defffc04 	addi	sp,sp,-16
     1f4:	df000315 	stw	fp,12(sp)
     1f8:	df000304 	addi	fp,sp,12
     1fc:	e13ffe15 	stw	r4,-8(fp)
     200:	e17fff15 	stw	r5,-4(fp)

     char bit=0;
     204:	e03ffd05 	stb	zero,-12(fp)

     bit = (test>>pos)&0x01;
     208:	e0fffe17 	ldw	r3,-8(fp)
     20c:	e0bfff17 	ldw	r2,-4(fp)
     210:	1884d83a 	srl	r2,r3,r2
     214:	1080004c 	andi	r2,r2,1
     218:	e0bffd05 	stb	r2,-12(fp)

     return bit;
     21c:	e0bffd07 	ldb	r2,-12(fp)
}
     220:	e037883a 	mov	sp,fp
     224:	df000017 	ldw	fp,0(sp)
     228:	dec00104 	addi	sp,sp,4
     22c:	f800283a 	ret

00000230 <FIXED2_16toBinary>:

void FIXED2_16toBinary(FIXED2_16 fixo, char* binario){
     230:	defff104 	addi	sp,sp,-60
     234:	dfc00e15 	stw	ra,56(sp)
     238:	df000d15 	stw	fp,52(sp)
     23c:	df000d04 	addi	fp,sp,52
     240:	e13ffe15 	stw	r4,-8(fp)
     244:	e17fff15 	stw	r5,-4(fp)
     int i=0, j=0;
     248:	e03ff415 	stw	zero,-48(fp)
     24c:	e03ff315 	stw	zero,-52(fp)
     char bin[33];
     j=0;
     250:	e03ff315 	stw	zero,-52(fp)
     for(i=17; i>=0; i--){
     254:	00800444 	movi	r2,17
     258:	e0bff415 	stw	r2,-48(fp)
     25c:	00001a06 	br	2c8 <FIXED2_16toBinary+0x98>
               if(BitTest(fixo.full, i)){
     260:	e0bffe17 	ldw	r2,-8(fp)
     264:	1009883a 	mov	r4,r2
     268:	e17ff417 	ldw	r5,-48(fp)
     26c:	00001f00 	call	1f0 <BitTest>
     270:	10803fcc 	andi	r2,r2,255
     274:	1080201c 	xori	r2,r2,128
     278:	10bfe004 	addi	r2,r2,-128
     27c:	1005003a 	cmpeq	r2,r2,zero
     280:	1000061e 	bne	r2,zero,29c <FIXED2_16toBinary+0x6c>
                     bin[j]='1';
     284:	e0fff317 	ldw	r3,-52(fp)
     288:	e0bff504 	addi	r2,fp,-44
     28c:	10c7883a 	add	r3,r2,r3
     290:	00800c44 	movi	r2,49
     294:	18800005 	stb	r2,0(r3)
     298:	00000506 	br	2b0 <FIXED2_16toBinary+0x80>
               }else{
                     bin[j]='0';
     29c:	e0fff317 	ldw	r3,-52(fp)
     2a0:	e0bff504 	addi	r2,fp,-44
     2a4:	10c7883a 	add	r3,r2,r3
     2a8:	00800c04 	movi	r2,48
     2ac:	18800005 	stb	r2,0(r3)
               }
               j++;
     2b0:	e0bff317 	ldw	r2,-52(fp)
     2b4:	10800044 	addi	r2,r2,1
     2b8:	e0bff315 	stw	r2,-52(fp)

void FIXED2_16toBinary(FIXED2_16 fixo, char* binario){
     int i=0, j=0;
     char bin[33];
     j=0;
     for(i=17; i>=0; i--){
     2bc:	e0bff417 	ldw	r2,-48(fp)
     2c0:	10bfffc4 	addi	r2,r2,-1
     2c4:	e0bff415 	stw	r2,-48(fp)
     2c8:	e0bff417 	ldw	r2,-48(fp)
     2cc:	1004403a 	cmpge	r2,r2,zero
     2d0:	103fe31e 	bne	r2,zero,260 <FIXED2_16toBinary+0x30>
               }else{
                     bin[j]='0';
               }
               j++;
     }
     bin[j]='\0';
     2d4:	e0fff317 	ldw	r3,-52(fp)
     2d8:	e0bff504 	addi	r2,fp,-44
     2dc:	10c5883a 	add	r2,r2,r3
     2e0:	10000005 	stb	zero,0(r2)
     sprintf(binario, bin);
     2e4:	e17ff504 	addi	r5,fp,-44
     2e8:	e13fff17 	ldw	r4,-4(fp)
     2ec:	000665c0 	call	665c <sprintf>
}
     2f0:	e037883a 	mov	sp,fp
     2f4:	dfc00117 	ldw	ra,4(sp)
     2f8:	df000017 	ldw	fp,0(sp)
     2fc:	dec00204 	addi	sp,sp,8
     300:	f800283a 	ret

00000304 <imprimeFIXED2_16>:

void imprimeFIXED2_16(char * s, FIXED2_16 a){
     304:	defff804 	addi	sp,sp,-32
     308:	dfc00715 	stw	ra,28(sp)
     30c:	df000615 	stw	fp,24(sp)
     310:	df000604 	addi	fp,sp,24
     314:	e13ffe15 	stw	r4,-8(fp)
     318:	e17fff15 	stw	r5,-4(fp)
     long integer=0, fraction=0, full=0;
     31c:	e03ffd15 	stw	zero,-12(fp)
     320:	e03ffc15 	stw	zero,-16(fp)
     324:	e03ffb15 	stw	zero,-20(fp)

     full = (a.full & 0x3FFFF);
     328:	e0ffff17 	ldw	r3,-4(fp)
     32c:	00800134 	movhi	r2,4
     330:	10bfffc4 	addi	r2,r2,-1
     334:	1884703a 	and	r2,r3,r2
     338:	e0bffb15 	stw	r2,-20(fp)
     integer = (a.part.integer) & 0x3;
     33c:	e0bfff17 	ldw	r2,-4(fp)
     340:	100493ba 	slli	r2,r2,14
     344:	1005d7ba 	srai	r2,r2,30
     348:	10803fcc 	andi	r2,r2,255
     34c:	1080201c 	xori	r2,r2,128
     350:	10bfe004 	addi	r2,r2,-128
     354:	108000cc 	andi	r2,r2,3
     358:	e0bffd15 	stw	r2,-12(fp)
     fraction = (a.part.fraction) & 0xFFFF;
     35c:	e0bfff0b 	ldhu	r2,-4(fp)
     360:	10bfffcc 	andi	r2,r2,65535
     364:	10a0001c 	xori	r2,r2,32768
     368:	10a00004 	addi	r2,r2,-32768
     36c:	10bfffcc 	andi	r2,r2,65535
     370:	e0bffc15 	stw	r2,-16(fp)
     printf("\n%s = %x.%x ou %04x", s, integer, fraction, full);
     374:	e0bffb17 	ldw	r2,-20(fp)
     378:	d8800015 	stw	r2,0(sp)
     37c:	01000074 	movhi	r4,1
     380:	21061e04 	addi	r4,r4,6264
     384:	e17ffe17 	ldw	r5,-8(fp)
     388:	e1bffd17 	ldw	r6,-12(fp)
     38c:	e1fffc17 	ldw	r7,-16(fp)
     390:	00062800 	call	6280 <printf>
}
     394:	e037883a 	mov	sp,fp
     398:	dfc00117 	ldw	ra,4(sp)
     39c:	df000017 	ldw	fp,0(sp)
     3a0:	dec00204 	addi	sp,sp,8
     3a4:	f800283a 	ret

000003a8 <soma2_16>:

FIXED2_16 soma2_16(FIXED2_16 a, FIXED2_16 b){
     3a8:	defffc04 	addi	sp,sp,-16
     3ac:	df000315 	stw	fp,12(sp)
     3b0:	df000304 	addi	fp,sp,12
     3b4:	e13ffe15 	stw	r4,-8(fp)
     3b8:	e17fff15 	stw	r5,-4(fp)
         FIXED2_16 temp;
         temp.full = a.full + b.full;
     3bc:	e0fffe17 	ldw	r3,-8(fp)
     3c0:	e0bfff17 	ldw	r2,-4(fp)
     3c4:	1885883a 	add	r2,r3,r2
     3c8:	e0bffd15 	stw	r2,-12(fp)
         return temp;
     3cc:	e0bffd17 	ldw	r2,-12(fp)
}
     3d0:	e037883a 	mov	sp,fp
     3d4:	df000017 	ldw	fp,0(sp)
     3d8:	dec00104 	addi	sp,sp,4
     3dc:	f800283a 	ret

000003e0 <sub2_16>:
FIXED2_16 sub2_16(FIXED2_16 a, FIXED2_16 b){
     3e0:	defffc04 	addi	sp,sp,-16
     3e4:	df000315 	stw	fp,12(sp)
     3e8:	df000304 	addi	fp,sp,12
     3ec:	e13ffe15 	stw	r4,-8(fp)
     3f0:	e17fff15 	stw	r5,-4(fp)
         FIXED2_16 temp;
         temp.full = a.full - b.full;
     3f4:	e0fffe17 	ldw	r3,-8(fp)
     3f8:	e0bfff17 	ldw	r2,-4(fp)
     3fc:	1885c83a 	sub	r2,r3,r2
     400:	e0bffd15 	stw	r2,-12(fp)
         return temp;
     404:	e0bffd17 	ldw	r2,-12(fp)
}
     408:	e037883a 	mov	sp,fp
     40c:	df000017 	ldw	fp,0(sp)
     410:	dec00104 	addi	sp,sp,4
     414:	f800283a 	ret

00000418 <mult2_16>:
FIXED2_16 mult2_16(FIXED2_16 a, FIXED2_16 b){
     418:	defff904 	addi	sp,sp,-28
     41c:	dfc00615 	stw	ra,24(sp)
     420:	df000515 	stw	fp,20(sp)
     424:	df000504 	addi	fp,sp,20
     428:	e13ffe15 	stw	r4,-8(fp)
     42c:	e17fff15 	stw	r5,-4(fp)
         FIXED2_16 temp;
         long long i;
        // printf("\n\nA= %04x * B= %04x", a.full, b.full);
         i = ((long long)a.full * (long long)b.full + 2^15)>>16;
     430:	e0bffe17 	ldw	r2,-8(fp)
     434:	1007d7fa 	srai	r3,r2,31
     438:	100b883a 	mov	r5,r2
     43c:	180d883a 	mov	r6,r3
     440:	e13fff17 	ldw	r4,-4(fp)
     444:	200fd7fa 	srai	r7,r4,31
     448:	2005883a 	mov	r2,r4
     44c:	3807883a 	mov	r3,r7
     450:	2809883a 	mov	r4,r5
     454:	300b883a 	mov	r5,r6
     458:	100d883a 	mov	r6,r2
     45c:	180f883a 	mov	r7,r3
     460:	00030400 	call	3040 <__muldi3>
     464:	1009883a 	mov	r4,r2
     468:	180b883a 	mov	r5,r3
     46c:	200d883a 	mov	r6,r4
     470:	280f883a 	mov	r7,r5
     474:	01000084 	movi	r4,2
     478:	000b883a 	mov	r5,zero
     47c:	3105883a 	add	r2,r6,r4
     480:	1191803a 	cmpltu	r8,r2,r6
     484:	3947883a 	add	r3,r7,r5
     488:	40c9883a 	add	r4,r8,r3
     48c:	2007883a 	mov	r3,r4
     490:	1009883a 	mov	r4,r2
     494:	180b883a 	mov	r5,r3
     498:	208003dc 	xori	r2,r4,15
     49c:	2806f03a 	xor	r3,r5,zero
     4a0:	180a943a 	slli	r5,r3,16
     4a4:	1008d43a 	srli	r4,r2,16
     4a8:	2148b03a 	or	r4,r4,r5
     4ac:	e13ffb15 	stw	r4,-20(fp)
     4b0:	1805d43a 	srai	r2,r3,16
     4b4:	e0bffc15 	stw	r2,-16(fp)
         temp.full = (int) i;
     4b8:	e0bffb17 	ldw	r2,-20(fp)
     4bc:	e0bffd15 	stw	r2,-12(fp)
         return temp;
     4c0:	e0bffd17 	ldw	r2,-12(fp)
}
     4c4:	e037883a 	mov	sp,fp
     4c8:	dfc00117 	ldw	ra,4(sp)
     4cc:	df000017 	ldw	fp,0(sp)
     4d0:	dec00204 	addi	sp,sp,8
     4d4:	f800283a 	ret

000004d8 <real2FIXED2_16>:

FIXED2_16 real2FIXED2_16(float R){
     4d8:	defff804 	addi	sp,sp,-32
     4dc:	dfc00715 	stw	ra,28(sp)
     4e0:	df000615 	stw	fp,24(sp)
     4e4:	df000604 	addi	fp,sp,24
     4e8:	e13ffb15 	stw	r4,-20(fp)

         FIXED2_16 temp;
         temp.full=(int)(R * (1<<16) + (R>=0 ? 0.5 : -0.5));
     4ec:	e13ffb17 	ldw	r4,-20(fp)
     4f0:	0151e034 	movhi	r5,18304
     4f4:	000341c0 	call	341c <__mulsf3>
     4f8:	1009883a 	mov	r4,r2
     4fc:	00038800 	call	3880 <__extendsfdf2>
     500:	e0bffe15 	stw	r2,-8(fp)
     504:	e0ffff15 	stw	r3,-4(fp)
     508:	e13ffb17 	ldw	r4,-20(fp)
     50c:	000b883a 	mov	r5,zero
     510:	00037700 	call	3770 <__gesf2>
     514:	1004403a 	cmpge	r2,r2,zero
     518:	1000011e 	bne	r2,zero,520 <real2FIXED2_16+0x48>
     51c:	00000506 	br	534 <real2FIXED2_16+0x5c>
     520:	0005883a 	mov	r2,zero
     524:	e0bffc15 	stw	r2,-16(fp)
     528:	008ff834 	movhi	r2,16352
     52c:	e0bffd15 	stw	r2,-12(fp)
     530:	00000406 	br	544 <real2FIXED2_16+0x6c>
     534:	0005883a 	mov	r2,zero
     538:	e0bffc15 	stw	r2,-16(fp)
     53c:	00aff834 	movhi	r2,49120
     540:	e0bffd15 	stw	r2,-12(fp)
     544:	e13ffe17 	ldw	r4,-8(fp)
     548:	e17fff17 	ldw	r5,-4(fp)
     54c:	e1bffc17 	ldw	r6,-16(fp)
     550:	e1fffd17 	ldw	r7,-12(fp)
     554:	0003d640 	call	3d64 <__adddf3>
     558:	1009883a 	mov	r4,r2
     55c:	180b883a 	mov	r5,r3
     560:	2005883a 	mov	r2,r4
     564:	2807883a 	mov	r3,r5
     568:	1009883a 	mov	r4,r2
     56c:	180b883a 	mov	r5,r3
     570:	00046840 	call	4684 <__fixdfsi>
     574:	e0bffa15 	stw	r2,-24(fp)
         return temp;
     578:	e0bffa17 	ldw	r2,-24(fp)
}
     57c:	e037883a 	mov	sp,fp
     580:	dfc00117 	ldw	ra,4(sp)
     584:	df000017 	ldw	fp,0(sp)
     588:	dec00204 	addi	sp,sp,8
     58c:	f800283a 	ret

00000590 <FIXED2_16toReal>:

float FIXED2_16toReal(FIXED2_16 F){
     590:	defffc04 	addi	sp,sp,-16
     594:	dfc00315 	stw	ra,12(sp)
     598:	df000215 	stw	fp,8(sp)
     59c:	df000204 	addi	fp,sp,8
     5a0:	e13fff15 	stw	r4,-4(fp)
      float res=0.0;
     5a4:	e03ffe15 	stw	zero,-8(fp)

      res = (float)F.full / (1<<16);
     5a8:	e13fff17 	ldw	r4,-4(fp)
     5ac:	00037e80 	call	37e8 <__floatsisf>
     5b0:	1009883a 	mov	r4,r2
     5b4:	0151e034 	movhi	r5,18304
     5b8:	00035fc0 	call	35fc <__divsf3>
     5bc:	e0bffe15 	stw	r2,-8(fp)
      return res;
     5c0:	e0bffe17 	ldw	r2,-8(fp)
}
     5c4:	e037883a 	mov	sp,fp
     5c8:	dfc00117 	ldw	ra,4(sp)
     5cc:	df000017 	ldw	fp,0(sp)
     5d0:	dec00204 	addi	sp,sp,8
     5d4:	f800283a 	ret

000005d8 <delay>:
#define PI		3.14159265358979323846
    FIXED2_16 vetor[1024];

void caso_teste(void);

int delay(int i){
     5d8:	defffd04 	addi	sp,sp,-12
     5dc:	df000215 	stw	fp,8(sp)
     5e0:	df000204 	addi	fp,sp,8
     5e4:	e13fff15 	stw	r4,-4(fp)
	int j = 1000;
     5e8:	0080fa04 	movi	r2,1000
     5ec:	e0bffe15 	stw	r2,-8(fp)
	while(i-->0){
     5f0:	00000906 	br	618 <delay+0x40>
		while(j-->0);
     5f4:	e0bffe17 	ldw	r2,-8(fp)
     5f8:	10800048 	cmpgei	r2,r2,1
     5fc:	1007883a 	mov	r3,r2
     600:	e0bffe17 	ldw	r2,-8(fp)
     604:	10bfffc4 	addi	r2,r2,-1
     608:	e0bffe15 	stw	r2,-8(fp)
     60c:	18803fcc 	andi	r2,r3,255
     610:	1004c03a 	cmpne	r2,r2,zero
     614:	103ff71e 	bne	r2,zero,5f4 <delay+0x1c>

void caso_teste(void);

int delay(int i){
	int j = 1000;
	while(i-->0){
     618:	e0bfff17 	ldw	r2,-4(fp)
     61c:	10800048 	cmpgei	r2,r2,1
     620:	1007883a 	mov	r3,r2
     624:	e0bfff17 	ldw	r2,-4(fp)
     628:	10bfffc4 	addi	r2,r2,-1
     62c:	e0bfff15 	stw	r2,-4(fp)
     630:	18803fcc 	andi	r2,r3,255
     634:	1004c03a 	cmpne	r2,r2,zero
     638:	103fee1e 	bne	r2,zero,5f4 <delay+0x1c>
		while(j-->0);
	}

	return 0;
     63c:	0005883a 	mov	r2,zero
}
     640:	e037883a 	mov	sp,fp
     644:	df000017 	ldw	fp,0(sp)
     648:	dec00104 	addi	sp,sp,4
     64c:	f800283a 	ret

00000650 <main>:


int main()
{
     650:	deffd604 	addi	sp,sp,-168
     654:	dfc02915 	stw	ra,164(sp)
     658:	df002815 	stw	fp,160(sp)
     65c:	dc402715 	stw	r17,156(sp)
     660:	dc002615 	stw	r16,152(sp)
     664:	df002604 	addi	fp,sp,152
	int i,j=0;
     668:	e03fe415 	stw	zero,-112(fp)
	int rx_char=0;
     66c:	e03fe315 	stw	zero,-116(fp)
	int estado= 0;
     670:	e03fe215 	stw	zero,-120(fp)
    char line[100]="";
     674:	00800074 	movhi	r2,1
     678:	10863f04 	addi	r2,r2,6396
     67c:	10800003 	ldbu	r2,0(r2)
     680:	e0bfe605 	stb	r2,-104(fp)
     684:	e13fe644 	addi	r4,fp,-103
     688:	018018c4 	movi	r6,99
     68c:	000b883a 	mov	r5,zero
     690:	00061e80 	call	61e8 <memset>

    FIXED2_16 dado;
    int Nps, N, NS, T;
    float dt,  t = 0, y, F;
     694:	e03fdc15 	stw	zero,-144(fp)

    printf("Nios is alive!\n");
     698:	01000074 	movhi	r4,1
     69c:	21062304 	addi	r4,r4,6284
     6a0:	00063980 	call	6398 <puts>
    N = 256;
     6a4:	00804004 	movi	r2,256
     6a8:	e0bfe015 	stw	r2,-128(fp)
	NS = 16;
     6ac:	00800404 	movi	r2,16
     6b0:	e0bfdf15 	stw	r2,-132(fp)
	Nps = N/NS;
     6b4:	e13fe017 	ldw	r4,-128(fp)
     6b8:	e17fdf17 	ldw	r5,-132(fp)
     6bc:	00048840 	call	4884 <__divsi3>
     6c0:	e0bfe115 	stw	r2,-124(fp)
	T = 1;
     6c4:	00800044 	movi	r2,1
     6c8:	e0bfde15 	stw	r2,-136(fp)
	dt= ((float) T)/((float)(NS*Nps));
     6cc:	e13fde17 	ldw	r4,-136(fp)
     6d0:	00037e80 	call	37e8 <__floatsisf>
     6d4:	1021883a 	mov	r16,r2
     6d8:	e13fdf17 	ldw	r4,-132(fp)
     6dc:	e17fe117 	ldw	r5,-124(fp)
     6e0:	00049540 	call	4954 <__mulsi3>
     6e4:	1009883a 	mov	r4,r2
     6e8:	00037e80 	call	37e8 <__floatsisf>
     6ec:	8009883a 	mov	r4,r16
     6f0:	100b883a 	mov	r5,r2
     6f4:	00035fc0 	call	35fc <__divsf3>
     6f8:	e0bfdd15 	stw	r2,-140(fp)
	F= (float)NS/(float)T;
     6fc:	e13fdf17 	ldw	r4,-132(fp)
     700:	00037e80 	call	37e8 <__floatsisf>
     704:	1021883a 	mov	r16,r2
     708:	e13fde17 	ldw	r4,-136(fp)
     70c:	00037e80 	call	37e8 <__floatsisf>
     710:	8009883a 	mov	r4,r16
     714:	100b883a 	mov	r5,r2
     718:	00035fc0 	call	35fc <__divsf3>
     71c:	e0bfda15 	stw	r2,-152(fp)
	t = 0;
     720:	e03fdc15 	stw	zero,-144(fp)
	printf("Inicializando sinal... \n");
     724:	01000074 	movhi	r4,1
     728:	21062704 	addi	r4,r4,6300
     72c:	00063980 	call	6398 <puts>
	for(i=0; i < N/*1023*/; i++){
     730:	e03fe515 	stw	zero,-108(fp)
     734:	00004506 	br	84c <main+0x1fc>
			  y = sin(t*2*PI*F) / 1000;
     738:	e0bfdc17 	ldw	r2,-144(fp)
     73c:	1009883a 	mov	r4,r2
     740:	100b883a 	mov	r5,r2
     744:	00033b80 	call	33b8 <__addsf3>
     748:	1009883a 	mov	r4,r2
     74c:	00038800 	call	3880 <__extendsfdf2>
     750:	100b883a 	mov	r5,r2
     754:	180d883a 	mov	r6,r3
     758:	2809883a 	mov	r4,r5
     75c:	300b883a 	mov	r5,r6
     760:	01951134 	movhi	r6,21572
     764:	318b4604 	addi	r6,r6,11544
     768:	01d00274 	movhi	r7,16393
     76c:	39c87ec4 	addi	r7,r7,8699
     770:	0003dd80 	call	3dd8 <__muldf3>
     774:	1009883a 	mov	r4,r2
     778:	180b883a 	mov	r5,r3
     77c:	2021883a 	mov	r16,r4
     780:	2823883a 	mov	r17,r5
     784:	e13fda17 	ldw	r4,-152(fp)
     788:	00038800 	call	3880 <__extendsfdf2>
     78c:	100f883a 	mov	r7,r2
     790:	1811883a 	mov	r8,r3
     794:	8009883a 	mov	r4,r16
     798:	880b883a 	mov	r5,r17
     79c:	380d883a 	mov	r6,r7
     7a0:	400f883a 	mov	r7,r8
     7a4:	0003dd80 	call	3dd8 <__muldf3>
     7a8:	1009883a 	mov	r4,r2
     7ac:	180b883a 	mov	r5,r3
     7b0:	2005883a 	mov	r2,r4
     7b4:	2807883a 	mov	r3,r5
     7b8:	1009883a 	mov	r4,r2
     7bc:	180b883a 	mov	r5,r3
     7c0:	0000ba40 	call	ba4 <sin>
     7c4:	100b883a 	mov	r5,r2
     7c8:	180d883a 	mov	r6,r3
     7cc:	2809883a 	mov	r4,r5
     7d0:	300b883a 	mov	r5,r6
     7d4:	000d883a 	mov	r6,zero
     7d8:	01d023f4 	movhi	r7,16527
     7dc:	39d00004 	addi	r7,r7,16384
     7e0:	000419c0 	call	419c <__divdf3>
     7e4:	1009883a 	mov	r4,r2
     7e8:	180b883a 	mov	r5,r3
     7ec:	2005883a 	mov	r2,r4
     7f0:	2807883a 	mov	r3,r5
     7f4:	1009883a 	mov	r4,r2
     7f8:	180b883a 	mov	r5,r3
     7fc:	00047940 	call	4794 <__truncdfsf2>
     800:	e0bfdb15 	stw	r2,-148(fp)
			  t=t+dt;
     804:	e13fdc17 	ldw	r4,-144(fp)
     808:	e17fdd17 	ldw	r5,-140(fp)
     80c:	00033b80 	call	33b8 <__addsf3>
     810:	e0bfdc15 	stw	r2,-144(fp)
			  dado = real2FIXED2_16(y);
     814:	e13fdb17 	ldw	r4,-148(fp)
     818:	00004d80 	call	4d8 <real2FIXED2_16>
     81c:	e0bfff15 	stw	r2,-4(fp)
			  vetor[i] = dado;
     820:	e0bfe517 	ldw	r2,-108(fp)
     824:	00c00074 	movhi	r3,1
     828:	18d58b04 	addi	r3,r3,22060
     82c:	1085883a 	add	r2,r2,r2
     830:	1085883a 	add	r2,r2,r2
     834:	10c7883a 	add	r3,r2,r3
     838:	e0bfff17 	ldw	r2,-4(fp)
     83c:	18800015 	stw	r2,0(r3)
	T = 1;
	dt= ((float) T)/((float)(NS*Nps));
	F= (float)NS/(float)T;
	t = 0;
	printf("Inicializando sinal... \n");
	for(i=0; i < N/*1023*/; i++){
     840:	e0bfe517 	ldw	r2,-108(fp)
     844:	10800044 	addi	r2,r2,1
     848:	e0bfe515 	stw	r2,-108(fp)
     84c:	e0ffe517 	ldw	r3,-108(fp)
     850:	e0bfe017 	ldw	r2,-128(fp)
     854:	18bfb816 	blt	r3,r2,738 <main+0xe8>
     858:	00000006 	br	85c <main+0x20c>
			  vetor[i] = dado;
	 }

    while(1){

			printf("Informe o delay: ");
     85c:	01000074 	movhi	r4,1
     860:	21062d04 	addi	r4,r4,6324
     864:	00062800 	call	6280 <printf>

			rx_char = getchar();
     868:	00800074 	movhi	r2,1
     86c:	108ea504 	addi	r2,r2,14996
     870:	10800017 	ldw	r2,0(r2)
     874:	11000117 	ldw	r4,4(r2)
     878:	00057fc0 	call	57fc <getc>
     87c:	e0bfe315 	stw	r2,-116(fp)
			fgets(line, sizeof(line), stdin);
     880:	00800074 	movhi	r2,1
     884:	108ea504 	addi	r2,r2,14996
     888:	10800017 	ldw	r2,0(r2)
     88c:	11800117 	ldw	r6,4(r2)
     890:	e13fe604 	addi	r4,fp,-104
     894:	01401904 	movi	r5,100
     898:	00053640 	call	5364 <fgets>
			//sscanf(line, "%d" , &rx_char);
			printf("\nrx_char=%d", rx_char);
     89c:	01000074 	movhi	r4,1
     8a0:	21063204 	addi	r4,r4,6344
     8a4:	e17fe317 	ldw	r5,-116(fp)
     8a8:	00062800 	call	6280 <printf>
			if(rx_char == '0'){
     8ac:	e0bfe317 	ldw	r2,-116(fp)
     8b0:	10800c18 	cmpnei	r2,r2,48
     8b4:	103fe91e 	bne	r2,zero,85c <main+0x20c>

				estado = FFT_FINISHED();
     8b8:	00810034 	movhi	r2,1024
     8bc:	10840004 	addi	r2,r2,4096
     8c0:	10800037 	ldwio	r2,0(r2)
     8c4:	e0bfe215 	stw	r2,-120(fp)
				printf("Estado FFT: %d\n", estado);
     8c8:	01000074 	movhi	r4,1
     8cc:	21063504 	addi	r4,r4,6356
     8d0:	e17fe217 	ldw	r5,-120(fp)
     8d4:	00062800 	call	6280 <printf>
				printf("Inicializando FFT... \n");
     8d8:	01000074 	movhi	r4,1
     8dc:	21063904 	addi	r4,r4,6372
     8e0:	00063980 	call	6398 <puts>

				caso_teste();
     8e4:	00008ec0 	call	8ec <caso_teste>
		  //  for(i=0; i<8*N; i++){
		    //	  dado.full =  FFT_LE_DADO(i);
		    //	  printf("%d: %f\n", i, FIXED2_16toReal(dado));
		 //   }

	}
     8e8:	003fdc06 	br	85c <main+0x20c>

000008ec <caso_teste>:
  return 0;
}


void caso_teste(void){
     8ec:	defdf904 	addi	sp,sp,-2076
     8f0:	dfc20615 	stw	ra,2072(sp)
     8f4:	df020515 	stw	fp,2068(sp)
     8f8:	df020504 	addi	fp,sp,2068
	int i,j;
	FIXED2_16 vetorXreal[256], vetorXimag[256];
	FIXED2_16 ponto;


	PERF_RESET(PERFORMANCE_COUNTER_BASE);
     8fc:	00c10034 	movhi	r3,1024
     900:	18d10004 	addi	r3,r3,17408
     904:	00800044 	movi	r2,1
     908:	18800035 	stwio	r2,0(r3)
	PERF_START_MEASURING(PERFORMANCE_COUNTER_BASE);
     90c:	00810034 	movhi	r2,1024
     910:	10910104 	addi	r2,r2,17412
     914:	10000035 	stwio	zero,0(r2)
	PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 1);
     918:	00810034 	movhi	r2,1024
     91c:	10910504 	addi	r2,r2,17428
     920:	10000035 	stwio	zero,0(r2)

	for(i=0; i<256; i++){
     924:	e03dfe15 	stw	zero,-2056(fp)
     928:	00001306 	br	978 <caso_teste+0x8c>
			    ponto = vetor[i];
     92c:	e0bdfe17 	ldw	r2,-2056(fp)
     930:	00c00074 	movhi	r3,1
     934:	18d58b04 	addi	r3,r3,22060
     938:	1085883a 	add	r2,r2,r2
     93c:	1085883a 	add	r2,r2,r2
     940:	10c5883a 	add	r2,r2,r3
     944:	10800017 	ldw	r2,0(r2)
     948:	e0bfff15 	stw	r2,-4(fp)
				FFT_ESCREVE_DADO(i, ponto.full);
     94c:	e0bdfe17 	ldw	r2,-2056(fp)
     950:	1085883a 	add	r2,r2,r2
     954:	1085883a 	add	r2,r2,r2
     958:	1007883a 	mov	r3,r2
     95c:	00810034 	movhi	r2,1024
     960:	1885883a 	add	r2,r3,r2
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	10c00035 	stwio	r3,0(r2)

	PERF_RESET(PERFORMANCE_COUNTER_BASE);
	PERF_START_MEASURING(PERFORMANCE_COUNTER_BASE);
	PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 1);

	for(i=0; i<256; i++){
     96c:	e0bdfe17 	ldw	r2,-2056(fp)
     970:	10800044 	addi	r2,r2,1
     974:	e0bdfe15 	stw	r2,-2056(fp)
     978:	e0bdfe17 	ldw	r2,-2056(fp)
     97c:	10804010 	cmplti	r2,r2,256
     980:	103fea1e 	bne	r2,zero,92c <caso_teste+0x40>
			    ponto = vetor[i];
				FFT_ESCREVE_DADO(i, ponto.full);
	}
	PERF_END (PERFORMANCE_COUNTER_BASE, 1);
     984:	00810034 	movhi	r2,1024
     988:	10910404 	addi	r2,r2,17424
     98c:	10000035 	stwio	zero,0(r2)
	i=0;
     990:	e03dfe15 	stw	zero,-2056(fp)

	FFT_START();
     994:	00c10034 	movhi	r3,1024
     998:	18c40004 	addi	r3,r3,4096
     99c:	00800044 	movi	r2,1
     9a0:	18800035 	stwio	r2,0(r3)
	PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 2);
     9a4:	00810034 	movhi	r2,1024
     9a8:	10910904 	addi	r2,r2,17444
     9ac:	10000035 	stwio	zero,0(r2)


	while(FFT_FINISHED() == 0){
     9b0:	00000b06 	br	9e0 <caso_teste+0xf4>
				if(i++>100000)break;
     9b4:	e0fdfe17 	ldw	r3,-2056(fp)
     9b8:	008000b4 	movhi	r2,2
     9bc:	10a1a804 	addi	r2,r2,-31072
     9c0:	10c4803a 	cmplt	r2,r2,r3
     9c4:	1007883a 	mov	r3,r2
     9c8:	e0bdfe17 	ldw	r2,-2056(fp)
     9cc:	10800044 	addi	r2,r2,1
     9d0:	e0bdfe15 	stw	r2,-2056(fp)
     9d4:	18803fcc 	andi	r2,r3,255
     9d8:	1004c03a 	cmpne	r2,r2,zero
     9dc:	1000051e 	bne	r2,zero,9f4 <caso_teste+0x108>

	FFT_START();
	PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 2);


	while(FFT_FINISHED() == 0){
     9e0:	00810034 	movhi	r2,1024
     9e4:	10840004 	addi	r2,r2,4096
     9e8:	10800037 	ldwio	r2,0(r2)
     9ec:	1005003a 	cmpeq	r2,r2,zero
     9f0:	103ff01e 	bne	r2,zero,9b4 <caso_teste+0xc8>
				if(i++>100000)break;
		//i++;
		}
	PERF_END (PERFORMANCE_COUNTER_BASE, 2);
     9f4:	00810034 	movhi	r2,1024
     9f8:	10910804 	addi	r2,r2,17440
     9fc:	10000035 	stwio	zero,0(r2)
	printf("\ni = %d", i);
     a00:	01000074 	movhi	r4,1
     a04:	21065804 	addi	r4,r4,6496
     a08:	e17dfe17 	ldw	r5,-2056(fp)
     a0c:	00062800 	call	6280 <printf>

	PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 3);
     a10:	00810034 	movhi	r2,1024
     a14:	10910d04 	addi	r2,r2,17460
     a18:	10000035 	stwio	zero,0(r2)
	#define real1base 0
	#define imag1base 512
	#define real2base 1024
	#define imag2base 1536
	j=0;
     a1c:	e03dfd15 	stw	zero,-2060(fp)
	for(i=0; i<256; i+=2){
     a20:	e03dfe15 	stw	zero,-2056(fp)
     a24:	00004306 	br	b34 <caso_teste+0x248>
			vetorXreal[i].full = FFT_LE_DADO(j+real1base);
     a28:	e13dfe17 	ldw	r4,-2056(fp)
     a2c:	e0bdfd17 	ldw	r2,-2060(fp)
     a30:	1085883a 	add	r2,r2,r2
     a34:	1085883a 	add	r2,r2,r2
     a38:	1007883a 	mov	r3,r2
     a3c:	00810034 	movhi	r2,1024
     a40:	1885883a 	add	r2,r3,r2
     a44:	10c00037 	ldwio	r3,0(r2)
     a48:	2105883a 	add	r2,r4,r4
     a4c:	1085883a 	add	r2,r2,r2
     a50:	e13dfd04 	addi	r4,fp,-2060
     a54:	1105883a 	add	r2,r2,r4
     a58:	10800204 	addi	r2,r2,8
     a5c:	10c00015 	stw	r3,0(r2)
			vetorXreal[i+1].full = FFT_LE_DADO(j+real2base);
     a60:	e0bdfe17 	ldw	r2,-2056(fp)
     a64:	11000044 	addi	r4,r2,1
     a68:	e0bdfd17 	ldw	r2,-2060(fp)
     a6c:	1085883a 	add	r2,r2,r2
     a70:	1085883a 	add	r2,r2,r2
     a74:	1007883a 	mov	r3,r2
     a78:	00810034 	movhi	r2,1024
     a7c:	10840004 	addi	r2,r2,4096
     a80:	1885883a 	add	r2,r3,r2
     a84:	10c00037 	ldwio	r3,0(r2)
     a88:	2105883a 	add	r2,r4,r4
     a8c:	1085883a 	add	r2,r2,r2
     a90:	e13dfd04 	addi	r4,fp,-2060
     a94:	1105883a 	add	r2,r2,r4
     a98:	10800204 	addi	r2,r2,8
     a9c:	10c00015 	stw	r3,0(r2)
			vetorXimag[i].full = FFT_LE_DADO(j+imag1base);
     aa0:	e13dfe17 	ldw	r4,-2056(fp)
     aa4:	e0bdfd17 	ldw	r2,-2060(fp)
     aa8:	1085883a 	add	r2,r2,r2
     aac:	1085883a 	add	r2,r2,r2
     ab0:	1007883a 	mov	r3,r2
     ab4:	00810034 	movhi	r2,1024
     ab8:	10820004 	addi	r2,r2,2048
     abc:	1885883a 	add	r2,r3,r2
     ac0:	10c00037 	ldwio	r3,0(r2)
     ac4:	2105883a 	add	r2,r4,r4
     ac8:	1085883a 	add	r2,r2,r2
     acc:	e13dfd04 	addi	r4,fp,-2060
     ad0:	1105883a 	add	r2,r2,r4
     ad4:	10810204 	addi	r2,r2,1032
     ad8:	10c00015 	stw	r3,0(r2)
			vetorXimag[i+1].full = FFT_LE_DADO(j+imag2base);
     adc:	e0bdfe17 	ldw	r2,-2056(fp)
     ae0:	11000044 	addi	r4,r2,1
     ae4:	e0bdfd17 	ldw	r2,-2060(fp)
     ae8:	1085883a 	add	r2,r2,r2
     aec:	1085883a 	add	r2,r2,r2
     af0:	1007883a 	mov	r3,r2
     af4:	00810034 	movhi	r2,1024
     af8:	10860004 	addi	r2,r2,6144
     afc:	1885883a 	add	r2,r3,r2
     b00:	10c00037 	ldwio	r3,0(r2)
     b04:	2105883a 	add	r2,r4,r4
     b08:	1085883a 	add	r2,r2,r2
     b0c:	e13dfd04 	addi	r4,fp,-2060
     b10:	1105883a 	add	r2,r2,r4
     b14:	10810204 	addi	r2,r2,1032
     b18:	10c00015 	stw	r3,0(r2)
			j++;
     b1c:	e0bdfd17 	ldw	r2,-2060(fp)
     b20:	10800044 	addi	r2,r2,1
     b24:	e0bdfd15 	stw	r2,-2060(fp)
	#define real1base 0
	#define imag1base 512
	#define real2base 1024
	#define imag2base 1536
	j=0;
	for(i=0; i<256; i+=2){
     b28:	e0bdfe17 	ldw	r2,-2056(fp)
     b2c:	10800084 	addi	r2,r2,2
     b30:	e0bdfe15 	stw	r2,-2056(fp)
     b34:	e0bdfe17 	ldw	r2,-2056(fp)
     b38:	10804010 	cmplti	r2,r2,256
     b3c:	103fba1e 	bne	r2,zero,a28 <caso_teste+0x13c>
			vetorXreal[i+1].full = FFT_LE_DADO(j+real2base);
			vetorXimag[i].full = FFT_LE_DADO(j+imag1base);
			vetorXimag[i+1].full = FFT_LE_DADO(j+imag2base);
			j++;
	}
	PERF_END (PERFORMANCE_COUNTER_BASE, 3);
     b40:	00810034 	movhi	r2,1024
     b44:	10910c04 	addi	r2,r2,17456
     b48:	10000035 	stwio	zero,0(r2)
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_BASE);
     b4c:	00810034 	movhi	r2,1024
     b50:	10910004 	addi	r2,r2,17408
     b54:	10000035 	stwio	zero,0(r2)
    perf_print_formatted_report((void *)PERFORMANCE_COUNTER_BASE,
     b58:	00800074 	movhi	r2,1
     b5c:	10865e04 	addi	r2,r2,6520
     b60:	d8800015 	stw	r2,0(sp)
     b64:	00800074 	movhi	r2,1
     b68:	10866104 	addi	r2,r2,6532
     b6c:	d8800115 	stw	r2,4(sp)
     b70:	01010034 	movhi	r4,1024
     b74:	21110004 	addi	r4,r4,17408
     b78:	01417db4 	movhi	r5,1526
     b7c:	29784004 	addi	r5,r5,-7936
     b80:	018000c4 	movi	r6,3
     b84:	01c00074 	movhi	r7,1
     b88:	39c65a04 	addi	r7,r7,6504
     b8c:	00100480 	call	10048 <perf_print_formatted_report>
	   ALT_CPU_FREQ, 3,  "Envio dos dados", "Executa FFT", "Leitura dados");

}
     b90:	e037883a 	mov	sp,fp
     b94:	dfc00117 	ldw	ra,4(sp)
     b98:	df000017 	ldw	fp,0(sp)
     b9c:	dec00204 	addi	sp,sp,8
     ba0:	f800283a 	ret

00000ba4 <sin>:
     ba4:	00a00034 	movhi	r2,32768
     ba8:	10bfffc4 	addi	r2,r2,-1
     bac:	defffa04 	addi	sp,sp,-24
     bb0:	114c703a 	and	r6,r2,r5
     bb4:	008ffa74 	movhi	r2,16361
     bb8:	10887ec4 	addi	r2,r2,8699
     bbc:	dfc00515 	stw	ra,20(sp)
     bc0:	2011883a 	mov	r8,r4
     bc4:	1180220e 	bge	r2,r6,c50 <sin+0xac>
     bc8:	009ffc34 	movhi	r2,32752
     bcc:	10bfffc4 	addi	r2,r2,-1
     bd0:	11800a0e 	bge	r2,r6,bfc <sin+0x58>
     bd4:	280f883a 	mov	r7,r5
     bd8:	400d883a 	mov	r6,r8
     bdc:	0003ce40 	call	3ce4 <__subdf3>
     be0:	100d883a 	mov	r6,r2
     be4:	180f883a 	mov	r7,r3
     be8:	3005883a 	mov	r2,r6
     bec:	3807883a 	mov	r3,r7
     bf0:	dfc00517 	ldw	ra,20(sp)
     bf4:	dec00604 	addi	sp,sp,24
     bf8:	f800283a 	ret
     bfc:	d9800104 	addi	r6,sp,4
     c00:	0000d100 	call	d10 <__ieee754_rem_pio2>
     c04:	10c000cc 	andi	r3,r2,3
     c08:	01000044 	movi	r4,1
     c0c:	19001b26 	beq	r3,r4,c7c <sin+0xd8>
     c10:	00800084 	movi	r2,2
     c14:	18803126 	beq	r3,r2,cdc <sin+0x138>
     c18:	1800241e 	bne	r3,zero,cac <sin+0x108>
     c1c:	d8800117 	ldw	r2,4(sp)
     c20:	da000317 	ldw	r8,12(sp)
     c24:	d8c00217 	ldw	r3,8(sp)
     c28:	da400417 	ldw	r9,16(sp)
     c2c:	d9000015 	stw	r4,0(sp)
     c30:	400d883a 	mov	r6,r8
     c34:	480f883a 	mov	r7,r9
     c38:	180b883a 	mov	r5,r3
     c3c:	1009883a 	mov	r4,r2
     c40:	00028e80 	call	28e8 <__kernel_sin>
     c44:	100d883a 	mov	r6,r2
     c48:	180f883a 	mov	r7,r3
     c4c:	003fe606 	br	be8 <sin+0x44>
     c50:	000d883a 	mov	r6,zero
     c54:	000f883a 	mov	r7,zero
     c58:	d8000015 	stw	zero,0(sp)
     c5c:	00028e80 	call	28e8 <__kernel_sin>
     c60:	100d883a 	mov	r6,r2
     c64:	180f883a 	mov	r7,r3
     c68:	3005883a 	mov	r2,r6
     c6c:	3807883a 	mov	r3,r7
     c70:	dfc00517 	ldw	ra,20(sp)
     c74:	dec00604 	addi	sp,sp,24
     c78:	f800283a 	ret
     c7c:	d8800117 	ldw	r2,4(sp)
     c80:	da000317 	ldw	r8,12(sp)
     c84:	d8c00217 	ldw	r3,8(sp)
     c88:	da400417 	ldw	r9,16(sp)
     c8c:	400d883a 	mov	r6,r8
     c90:	180b883a 	mov	r5,r3
     c94:	480f883a 	mov	r7,r9
     c98:	1009883a 	mov	r4,r2
     c9c:	00015380 	call	1538 <__kernel_cos>
     ca0:	100d883a 	mov	r6,r2
     ca4:	180f883a 	mov	r7,r3
     ca8:	003fcf06 	br	be8 <sin+0x44>
     cac:	d8800117 	ldw	r2,4(sp)
     cb0:	da000317 	ldw	r8,12(sp)
     cb4:	d8c00217 	ldw	r3,8(sp)
     cb8:	da400417 	ldw	r9,16(sp)
     cbc:	400d883a 	mov	r6,r8
     cc0:	180b883a 	mov	r5,r3
     cc4:	480f883a 	mov	r7,r9
     cc8:	1009883a 	mov	r4,r2
     ccc:	00015380 	call	1538 <__kernel_cos>
     cd0:	100d883a 	mov	r6,r2
     cd4:	19e0003c 	xorhi	r7,r3,32768
     cd8:	003fc306 	br	be8 <sin+0x44>
     cdc:	d8800117 	ldw	r2,4(sp)
     ce0:	da000317 	ldw	r8,12(sp)
     ce4:	d8c00217 	ldw	r3,8(sp)
     ce8:	da400417 	ldw	r9,16(sp)
     cec:	d9000015 	stw	r4,0(sp)
     cf0:	400d883a 	mov	r6,r8
     cf4:	480f883a 	mov	r7,r9
     cf8:	180b883a 	mov	r5,r3
     cfc:	1009883a 	mov	r4,r2
     d00:	00028e80 	call	28e8 <__kernel_sin>
     d04:	100d883a 	mov	r6,r2
     d08:	19e0003c 	xorhi	r7,r3,32768
     d0c:	003fb606 	br	be8 <sin+0x44>

00000d10 <__ieee754_rem_pio2>:
     d10:	deffe304 	addi	sp,sp,-116
     d14:	00a00034 	movhi	r2,32768
     d18:	10bfffc4 	addi	r2,r2,-1
     d1c:	dd801915 	stw	r22,100(sp)
     d20:	28ac703a 	and	r22,r5,r2
     d24:	008ffa74 	movhi	r2,16361
     d28:	10887ec4 	addi	r2,r2,8699
     d2c:	df001b15 	stw	fp,108(sp)
     d30:	dfc01c15 	stw	ra,112(sp)
     d34:	ddc01a15 	stw	r23,104(sp)
     d38:	dd401815 	stw	r21,96(sp)
     d3c:	dd001715 	stw	r20,92(sp)
     d40:	dcc01615 	stw	r19,88(sp)
     d44:	dc801515 	stw	r18,84(sp)
     d48:	dc401415 	stw	r17,80(sp)
     d4c:	dc001315 	stw	r16,76(sp)
     d50:	2013883a 	mov	r9,r4
     d54:	d9400a15 	stw	r5,40(sp)
     d58:	3039883a 	mov	fp,r6
     d5c:	15801216 	blt	r2,r22,da8 <__ieee754_rem_pio2+0x98>
     d60:	e1400115 	stw	r5,4(fp)
     d64:	30000315 	stw	zero,12(r6)
     d68:	e1000015 	stw	r4,0(fp)
     d6c:	d8000b15 	stw	zero,44(sp)
     d70:	30000215 	stw	zero,8(r6)
     d74:	d8800b17 	ldw	r2,44(sp)
     d78:	dfc01c17 	ldw	ra,112(sp)
     d7c:	df001b17 	ldw	fp,108(sp)
     d80:	ddc01a17 	ldw	r23,104(sp)
     d84:	dd801917 	ldw	r22,100(sp)
     d88:	dd401817 	ldw	r21,96(sp)
     d8c:	dd001717 	ldw	r20,92(sp)
     d90:	dcc01617 	ldw	r19,88(sp)
     d94:	dc801517 	ldw	r18,84(sp)
     d98:	dc401417 	ldw	r17,80(sp)
     d9c:	dc001317 	ldw	r16,76(sp)
     da0:	dec01d04 	addi	sp,sp,116
     da4:	f800283a 	ret
     da8:	009000f4 	movhi	r2,16387
     dac:	10b65ec4 	addi	r2,r2,-9861
     db0:	15800f0e 	bge	r2,r22,df0 <__ieee754_rem_pio2+0xe0>
     db4:	00904e74 	movhi	r2,16697
     db8:	10887ec4 	addi	r2,r2,8699
     dbc:	1580330e 	bge	r2,r22,e8c <__ieee754_rem_pio2+0x17c>
     dc0:	009ffc34 	movhi	r2,32752
     dc4:	10bfffc4 	addi	r2,r2,-1
     dc8:	1580fe0e 	bge	r2,r22,11c4 <__ieee754_rem_pio2+0x4b4>
     dcc:	280f883a 	mov	r7,r5
     dd0:	480d883a 	mov	r6,r9
     dd4:	0003ce40 	call	3ce4 <__subdf3>
     dd8:	e0c00115 	stw	r3,4(fp)
     ddc:	d8000b15 	stw	zero,44(sp)
     de0:	e0800015 	stw	r2,0(fp)
     de4:	e0800215 	stw	r2,8(fp)
     de8:	e0c00315 	stw	r3,12(fp)
     dec:	003fe106 	br	d74 <__ieee754_rem_pio2+0x64>
     df0:	d9000a17 	ldw	r4,40(sp)
     df4:	0100ce0e 	bge	zero,r4,1130 <__ieee754_rem_pio2+0x420>
     df8:	04151034 	movhi	r16,21568
     dfc:	044ffe74 	movhi	r17,16377
     e00:	8c487ec4 	addi	r17,r17,8699
     e04:	4809883a 	mov	r4,r9
     e08:	800d883a 	mov	r6,r16
     e0c:	880f883a 	mov	r7,r17
     e10:	0003ce40 	call	3ce4 <__subdf3>
     e14:	1025883a 	mov	r18,r2
     e18:	1827883a 	mov	r19,r3
     e1c:	b4413c26 	beq	r22,r17,1310 <__ieee754_rem_pio2+0x600>
     e20:	040698b4 	movhi	r16,6754
     e24:	8418cc44 	addi	r16,r16,25393
     e28:	044f7474 	movhi	r17,15825
     e2c:	8c6d1844 	addi	r17,r17,-19359
     e30:	1009883a 	mov	r4,r2
     e34:	180b883a 	mov	r5,r3
     e38:	800d883a 	mov	r6,r16
     e3c:	880f883a 	mov	r7,r17
     e40:	0003ce40 	call	3ce4 <__subdf3>
     e44:	100d883a 	mov	r6,r2
     e48:	9009883a 	mov	r4,r18
     e4c:	980b883a 	mov	r5,r19
     e50:	180f883a 	mov	r7,r3
     e54:	e0800015 	stw	r2,0(fp)
     e58:	e0c00115 	stw	r3,4(fp)
     e5c:	0003ce40 	call	3ce4 <__subdf3>
     e60:	1009883a 	mov	r4,r2
     e64:	800d883a 	mov	r6,r16
     e68:	880f883a 	mov	r7,r17
     e6c:	180b883a 	mov	r5,r3
     e70:	0003ce40 	call	3ce4 <__subdf3>
     e74:	1009883a 	mov	r4,r2
     e78:	00800044 	movi	r2,1
     e7c:	d8800b15 	stw	r2,44(sp)
     e80:	e0c00315 	stw	r3,12(fp)
     e84:	e1000215 	stw	r4,8(fp)
     e88:	003fba06 	br	d74 <__ieee754_rem_pio2+0x64>
     e8c:	0002c000 	call	2c00 <fabs>
     e90:	021b72b4 	movhi	r8,28106
     e94:	423220c4 	addi	r8,r8,-14205
     e98:	024ff934 	movhi	r9,16356
     e9c:	4a57cc04 	addi	r9,r9,24368
     ea0:	480f883a 	mov	r7,r9
     ea4:	400d883a 	mov	r6,r8
     ea8:	1009883a 	mov	r4,r2
     eac:	180b883a 	mov	r5,r3
     eb0:	1025883a 	mov	r18,r2
     eb4:	1827883a 	mov	r19,r3
     eb8:	0003dd80 	call	3dd8 <__muldf3>
     ebc:	0011883a 	mov	r8,zero
     ec0:	024ff834 	movhi	r9,16352
     ec4:	480f883a 	mov	r7,r9
     ec8:	400d883a 	mov	r6,r8
     ecc:	180b883a 	mov	r5,r3
     ed0:	1009883a 	mov	r4,r2
     ed4:	0003d640 	call	3d64 <__adddf3>
     ed8:	180b883a 	mov	r5,r3
     edc:	1009883a 	mov	r4,r2
     ee0:	00046840 	call	4684 <__fixdfsi>
     ee4:	1009883a 	mov	r4,r2
     ee8:	d8800b15 	stw	r2,44(sp)
     eec:	000458c0 	call	458c <__floatsidf>
     ef0:	1823883a 	mov	r17,r3
     ef4:	1009883a 	mov	r4,r2
     ef8:	d8800c15 	stw	r2,48(sp)
     efc:	00effe74 	movhi	r3,49145
     f00:	18c87ec4 	addi	r3,r3,8699
     f04:	00951034 	movhi	r2,21568
     f08:	880b883a 	mov	r5,r17
     f0c:	180f883a 	mov	r7,r3
     f10:	100d883a 	mov	r6,r2
     f14:	dc400d15 	stw	r17,52(sp)
     f18:	0003dd80 	call	3dd8 <__muldf3>
     f1c:	180f883a 	mov	r7,r3
     f20:	980b883a 	mov	r5,r19
     f24:	9009883a 	mov	r4,r18
     f28:	100d883a 	mov	r6,r2
     f2c:	0003d640 	call	3d64 <__adddf3>
     f30:	d9000c17 	ldw	r4,48(sp)
     f34:	020698b4 	movhi	r8,6754
     f38:	4218cc44 	addi	r8,r8,25393
     f3c:	024f7474 	movhi	r9,15825
     f40:	4a6d1844 	addi	r9,r9,-19359
     f44:	880b883a 	mov	r5,r17
     f48:	480f883a 	mov	r7,r9
     f4c:	400d883a 	mov	r6,r8
     f50:	1025883a 	mov	r18,r2
     f54:	1827883a 	mov	r19,r3
     f58:	0003dd80 	call	3dd8 <__muldf3>
     f5c:	d9000b17 	ldw	r4,44(sp)
     f60:	100f883a 	mov	r7,r2
     f64:	1811883a 	mov	r8,r3
     f68:	008007c4 	movi	r2,31
     f6c:	dc800e15 	stw	r18,56(sp)
     f70:	3821883a 	mov	r16,r7
     f74:	dcc00f15 	stw	r19,60(sp)
     f78:	4023883a 	mov	r17,r8
     f7c:	11010a0e 	bge	r2,r4,13a8 <__ieee754_rem_pio2+0x698>
     f80:	d9000e17 	ldw	r4,56(sp)
     f84:	d9400f17 	ldw	r5,60(sp)
     f88:	800d883a 	mov	r6,r16
     f8c:	880f883a 	mov	r7,r17
     f90:	0003ce40 	call	3ce4 <__subdf3>
     f94:	1810d53a 	srli	r8,r3,20
     f98:	b02dd53a 	srai	r22,r22,20
     f9c:	1009883a 	mov	r4,r2
     fa0:	4201ffcc 	andi	r8,r8,2047
     fa4:	180b883a 	mov	r5,r3
     fa8:	b211c83a 	sub	r8,r22,r8
     fac:	00800404 	movi	r2,16
     fb0:	dd801015 	stw	r22,64(sp)
     fb4:	e1000015 	stw	r4,0(fp)
     fb8:	e1400115 	stw	r5,4(fp)
     fbc:	1200430e 	bge	r2,r8,10cc <__ieee754_rem_pio2+0x3bc>
     fc0:	d9000c17 	ldw	r4,48(sp)
     fc4:	d9400d17 	ldw	r5,52(sp)
     fc8:	00869834 	movhi	r2,6752
     fcc:	00cf7474 	movhi	r3,15825
     fd0:	18ed1844 	addi	r3,r3,-19359
     fd4:	180f883a 	mov	r7,r3
     fd8:	100d883a 	mov	r6,r2
     fdc:	0003dd80 	call	3dd8 <__muldf3>
     fe0:	d9000e17 	ldw	r4,56(sp)
     fe4:	d9400f17 	ldw	r5,60(sp)
     fe8:	100d883a 	mov	r6,r2
     fec:	180f883a 	mov	r7,r3
     ff0:	1025883a 	mov	r18,r2
     ff4:	1827883a 	mov	r19,r3
     ff8:	0003ce40 	call	3ce4 <__subdf3>
     ffc:	d9000c17 	ldw	r4,48(sp)
    1000:	d9400d17 	ldw	r5,52(sp)
    1004:	058b80f4 	movhi	r22,11779
    1008:	b59c1cc4 	addi	r22,r22,28787
    100c:	05cee8f4 	movhi	r23,15267
    1010:	bdc66284 	addi	r23,r23,6538
    1014:	b00d883a 	mov	r6,r22
    1018:	b80f883a 	mov	r7,r23
    101c:	d8801115 	stw	r2,68(sp)
    1020:	d8c01215 	stw	r3,72(sp)
    1024:	d8800815 	stw	r2,32(sp)
    1028:	0003dd80 	call	3dd8 <__muldf3>
    102c:	d9001217 	ldw	r4,72(sp)
    1030:	d9400f17 	ldw	r5,60(sp)
    1034:	d9800817 	ldw	r6,32(sp)
    1038:	d9000915 	stw	r4,36(sp)
    103c:	d9c01217 	ldw	r7,72(sp)
    1040:	d9000e17 	ldw	r4,56(sp)
    1044:	1021883a 	mov	r16,r2
    1048:	1823883a 	mov	r17,r3
    104c:	0003ce40 	call	3ce4 <__subdf3>
    1050:	180b883a 	mov	r5,r3
    1054:	900d883a 	mov	r6,r18
    1058:	980f883a 	mov	r7,r19
    105c:	1009883a 	mov	r4,r2
    1060:	0003ce40 	call	3ce4 <__subdf3>
    1064:	180f883a 	mov	r7,r3
    1068:	880b883a 	mov	r5,r17
    106c:	8009883a 	mov	r4,r16
    1070:	100d883a 	mov	r6,r2
    1074:	0003ce40 	call	3ce4 <__subdf3>
    1078:	d9000817 	ldw	r4,32(sp)
    107c:	d9401217 	ldw	r5,72(sp)
    1080:	180f883a 	mov	r7,r3
    1084:	100d883a 	mov	r6,r2
    1088:	1021883a 	mov	r16,r2
    108c:	1823883a 	mov	r17,r3
    1090:	0003ce40 	call	3ce4 <__subdf3>
    1094:	1810d53a 	srli	r8,r3,20
    1098:	1009883a 	mov	r4,r2
    109c:	d8801017 	ldw	r2,64(sp)
    10a0:	4201ffcc 	andi	r8,r8,2047
    10a4:	180b883a 	mov	r5,r3
    10a8:	1211c83a 	sub	r8,r2,r8
    10ac:	00800c44 	movi	r2,49
    10b0:	e1000015 	stw	r4,0(fp)
    10b4:	e1400115 	stw	r5,4(fp)
    10b8:	1200f016 	blt	r2,r8,147c <__ieee754_rem_pio2+0x76c>
    10bc:	d8c00817 	ldw	r3,32(sp)
    10c0:	d9001217 	ldw	r4,72(sp)
    10c4:	d8c00e15 	stw	r3,56(sp)
    10c8:	d9000f15 	stw	r4,60(sp)
    10cc:	e1800017 	ldw	r6,0(fp)
    10d0:	e1c00117 	ldw	r7,4(fp)
    10d4:	d9400f17 	ldw	r5,60(sp)
    10d8:	d9000e17 	ldw	r4,56(sp)
    10dc:	0003ce40 	call	3ce4 <__subdf3>
    10e0:	180b883a 	mov	r5,r3
    10e4:	800d883a 	mov	r6,r16
    10e8:	880f883a 	mov	r7,r17
    10ec:	1009883a 	mov	r4,r2
    10f0:	0003ce40 	call	3ce4 <__subdf3>
    10f4:	d9400a17 	ldw	r5,40(sp)
    10f8:	e0800215 	stw	r2,8(fp)
    10fc:	e1800204 	addi	r6,fp,8
    1100:	30c00115 	stw	r3,4(r6)
    1104:	283f1b0e 	bge	r5,zero,d74 <__ieee754_rem_pio2+0x64>
    1108:	e0c00117 	ldw	r3,4(fp)
    110c:	d8800b17 	ldw	r2,44(sp)
    1110:	18e0003c 	xorhi	r3,r3,32768
    1114:	0085c83a 	sub	r2,zero,r2
    1118:	e0c00115 	stw	r3,4(fp)
    111c:	d8800b15 	stw	r2,44(sp)
    1120:	30800117 	ldw	r2,4(r6)
    1124:	10a0003c 	xorhi	r2,r2,32768
    1128:	30800115 	stw	r2,4(r6)
    112c:	003f1106 	br	d74 <__ieee754_rem_pio2+0x64>
    1130:	04151034 	movhi	r16,21568
    1134:	044ffe74 	movhi	r17,16377
    1138:	8c487ec4 	addi	r17,r17,8699
    113c:	4809883a 	mov	r4,r9
    1140:	800d883a 	mov	r6,r16
    1144:	880f883a 	mov	r7,r17
    1148:	0003d640 	call	3d64 <__adddf3>
    114c:	1025883a 	mov	r18,r2
    1150:	1827883a 	mov	r19,r3
    1154:	b440a326 	beq	r22,r17,13e4 <__ieee754_rem_pio2+0x6d4>
    1158:	040698b4 	movhi	r16,6754
    115c:	8418cc44 	addi	r16,r16,25393
    1160:	044f7474 	movhi	r17,15825
    1164:	8c6d1844 	addi	r17,r17,-19359
    1168:	1009883a 	mov	r4,r2
    116c:	180b883a 	mov	r5,r3
    1170:	800d883a 	mov	r6,r16
    1174:	880f883a 	mov	r7,r17
    1178:	0003d640 	call	3d64 <__adddf3>
    117c:	100d883a 	mov	r6,r2
    1180:	9009883a 	mov	r4,r18
    1184:	980b883a 	mov	r5,r19
    1188:	180f883a 	mov	r7,r3
    118c:	e0800015 	stw	r2,0(fp)
    1190:	e0c00115 	stw	r3,4(fp)
    1194:	0003ce40 	call	3ce4 <__subdf3>
    1198:	1009883a 	mov	r4,r2
    119c:	800d883a 	mov	r6,r16
    11a0:	880f883a 	mov	r7,r17
    11a4:	180b883a 	mov	r5,r3
    11a8:	0003d640 	call	3d64 <__adddf3>
    11ac:	1009883a 	mov	r4,r2
    11b0:	00bfffc4 	movi	r2,-1
    11b4:	d8800b15 	stw	r2,44(sp)
    11b8:	e0c00315 	stw	r3,12(fp)
    11bc:	e1000215 	stw	r4,8(fp)
    11c0:	003eec06 	br	d74 <__ieee754_rem_pio2+0x64>
    11c4:	b005d53a 	srai	r2,r22,20
    11c8:	4821883a 	mov	r16,r9
    11cc:	05505c34 	movhi	r21,16752
    11d0:	15fefa84 	addi	r23,r2,-1046
    11d4:	b826953a 	slli	r19,r23,20
    11d8:	0029883a 	mov	r20,zero
    11dc:	048000c4 	movi	r18,3
    11e0:	b4e7c83a 	sub	r19,r22,r19
    11e4:	980b883a 	mov	r5,r19
    11e8:	00046840 	call	4684 <__fixdfsi>
    11ec:	1009883a 	mov	r4,r2
    11f0:	000458c0 	call	458c <__floatsidf>
    11f4:	980b883a 	mov	r5,r19
    11f8:	8009883a 	mov	r4,r16
    11fc:	180f883a 	mov	r7,r3
    1200:	100d883a 	mov	r6,r2
    1204:	d8800215 	stw	r2,8(sp)
    1208:	d8c00315 	stw	r3,12(sp)
    120c:	0003ce40 	call	3ce4 <__subdf3>
    1210:	180b883a 	mov	r5,r3
    1214:	a00d883a 	mov	r6,r20
    1218:	a80f883a 	mov	r7,r21
    121c:	1009883a 	mov	r4,r2
    1220:	0003dd80 	call	3dd8 <__muldf3>
    1224:	180b883a 	mov	r5,r3
    1228:	1009883a 	mov	r4,r2
    122c:	1823883a 	mov	r17,r3
    1230:	1021883a 	mov	r16,r2
    1234:	00046840 	call	4684 <__fixdfsi>
    1238:	1009883a 	mov	r4,r2
    123c:	000458c0 	call	458c <__floatsidf>
    1240:	880b883a 	mov	r5,r17
    1244:	8009883a 	mov	r4,r16
    1248:	180f883a 	mov	r7,r3
    124c:	100d883a 	mov	r6,r2
    1250:	d8800415 	stw	r2,16(sp)
    1254:	d8c00515 	stw	r3,20(sp)
    1258:	0003ce40 	call	3ce4 <__subdf3>
    125c:	180b883a 	mov	r5,r3
    1260:	000d883a 	mov	r6,zero
    1264:	a80f883a 	mov	r7,r21
    1268:	1009883a 	mov	r4,r2
    126c:	0003dd80 	call	3dd8 <__muldf3>
    1270:	d8c00715 	stw	r3,28(sp)
    1274:	d8800615 	stw	r2,24(sp)
    1278:	00000106 	br	1280 <__ieee754_rem_pio2+0x570>
    127c:	8025883a 	mov	r18,r16
    1280:	943fffc4 	addi	r16,r18,-1
    1284:	800890fa 	slli	r4,r16,3
    1288:	d9400204 	addi	r5,sp,8
    128c:	000d883a 	mov	r6,zero
    1290:	2149883a 	add	r4,r4,r5
    1294:	20c00117 	ldw	r3,4(r4)
    1298:	20800017 	ldw	r2,0(r4)
    129c:	000f883a 	mov	r7,zero
    12a0:	180b883a 	mov	r5,r3
    12a4:	1009883a 	mov	r4,r2
    12a8:	00043f40 	call	43f4 <__eqdf2>
    12ac:	103ff326 	beq	r2,zero,127c <__ieee754_rem_pio2+0x56c>
    12b0:	00800084 	movi	r2,2
    12b4:	00c00074 	movhi	r3,1
    12b8:	18c68504 	addi	r3,r3,6676
    12bc:	b80d883a 	mov	r6,r23
    12c0:	900f883a 	mov	r7,r18
    12c4:	d9000204 	addi	r4,sp,8
    12c8:	e00b883a 	mov	r5,fp
    12cc:	d8800015 	stw	r2,0(sp)
    12d0:	d8c00115 	stw	r3,4(sp)
    12d4:	0001a640 	call	1a64 <__kernel_rem_pio2>
    12d8:	d8800b15 	stw	r2,44(sp)
    12dc:	d8800a17 	ldw	r2,40(sp)
    12e0:	103ea40e 	bge	r2,zero,d74 <__ieee754_rem_pio2+0x64>
    12e4:	e0800117 	ldw	r2,4(fp)
    12e8:	d8c00b17 	ldw	r3,44(sp)
    12ec:	e1000204 	addi	r4,fp,8
    12f0:	10a0003c 	xorhi	r2,r2,32768
    12f4:	00c7c83a 	sub	r3,zero,r3
    12f8:	e0800115 	stw	r2,4(fp)
    12fc:	d8c00b15 	stw	r3,44(sp)
    1300:	20c00117 	ldw	r3,4(r4)
    1304:	18e0003c 	xorhi	r3,r3,32768
    1308:	20c00115 	stw	r3,4(r4)
    130c:	003e9906 	br	d74 <__ieee754_rem_pio2+0x64>
    1310:	00869834 	movhi	r2,6752
    1314:	00cf7474 	movhi	r3,15825
    1318:	18ed1844 	addi	r3,r3,-19359
    131c:	9009883a 	mov	r4,r18
    1320:	980b883a 	mov	r5,r19
    1324:	180f883a 	mov	r7,r3
    1328:	100d883a 	mov	r6,r2
    132c:	0003ce40 	call	3ce4 <__subdf3>
    1330:	048b80f4 	movhi	r18,11779
    1334:	949c1cc4 	addi	r18,r18,28787
    1338:	04cee8f4 	movhi	r19,15267
    133c:	9cc66284 	addi	r19,r19,6538
    1340:	1009883a 	mov	r4,r2
    1344:	180b883a 	mov	r5,r3
    1348:	900d883a 	mov	r6,r18
    134c:	980f883a 	mov	r7,r19
    1350:	1021883a 	mov	r16,r2
    1354:	1823883a 	mov	r17,r3
    1358:	0003ce40 	call	3ce4 <__subdf3>
    135c:	100d883a 	mov	r6,r2
    1360:	8009883a 	mov	r4,r16
    1364:	880b883a 	mov	r5,r17
    1368:	180f883a 	mov	r7,r3
    136c:	e0800015 	stw	r2,0(fp)
    1370:	e0c00115 	stw	r3,4(fp)
    1374:	0003ce40 	call	3ce4 <__subdf3>
    1378:	180b883a 	mov	r5,r3
    137c:	1009883a 	mov	r4,r2
    1380:	900d883a 	mov	r6,r18
    1384:	980f883a 	mov	r7,r19
    1388:	0003ce40 	call	3ce4 <__subdf3>
    138c:	180b883a 	mov	r5,r3
    1390:	1009883a 	mov	r4,r2
    1394:	00c00044 	movi	r3,1
    1398:	d8c00b15 	stw	r3,44(sp)
    139c:	e1400315 	stw	r5,12(fp)
    13a0:	e1000215 	stw	r4,8(fp)
    13a4:	003e7306 	br	d74 <__ieee754_rem_pio2+0x64>
    13a8:	2105883a 	add	r2,r4,r4
    13ac:	1085883a 	add	r2,r2,r2
    13b0:	00c00074 	movhi	r3,1
    13b4:	18c66504 	addi	r3,r3,6548
    13b8:	10c5883a 	add	r2,r2,r3
    13bc:	113fff17 	ldw	r4,-4(r2)
    13c0:	b13eef26 	beq	r22,r4,f80 <__ieee754_rem_pio2+0x270>
    13c4:	980b883a 	mov	r5,r19
    13c8:	400f883a 	mov	r7,r8
    13cc:	9009883a 	mov	r4,r18
    13d0:	800d883a 	mov	r6,r16
    13d4:	0003ce40 	call	3ce4 <__subdf3>
    13d8:	e0c00115 	stw	r3,4(fp)
    13dc:	e0800015 	stw	r2,0(fp)
    13e0:	003f3a06 	br	10cc <__ieee754_rem_pio2+0x3bc>
    13e4:	00869834 	movhi	r2,6752
    13e8:	00cf7474 	movhi	r3,15825
    13ec:	18ed1844 	addi	r3,r3,-19359
    13f0:	9009883a 	mov	r4,r18
    13f4:	980b883a 	mov	r5,r19
    13f8:	180f883a 	mov	r7,r3
    13fc:	100d883a 	mov	r6,r2
    1400:	0003d640 	call	3d64 <__adddf3>
    1404:	048b80f4 	movhi	r18,11779
    1408:	949c1cc4 	addi	r18,r18,28787
    140c:	04cee8f4 	movhi	r19,15267
    1410:	9cc66284 	addi	r19,r19,6538
    1414:	1009883a 	mov	r4,r2
    1418:	180b883a 	mov	r5,r3
    141c:	900d883a 	mov	r6,r18
    1420:	980f883a 	mov	r7,r19
    1424:	1021883a 	mov	r16,r2
    1428:	1823883a 	mov	r17,r3
    142c:	0003d640 	call	3d64 <__adddf3>
    1430:	100d883a 	mov	r6,r2
    1434:	8009883a 	mov	r4,r16
    1438:	880b883a 	mov	r5,r17
    143c:	180f883a 	mov	r7,r3
    1440:	e0800015 	stw	r2,0(fp)
    1444:	e0c00115 	stw	r3,4(fp)
    1448:	0003ce40 	call	3ce4 <__subdf3>
    144c:	180b883a 	mov	r5,r3
    1450:	1009883a 	mov	r4,r2
    1454:	900d883a 	mov	r6,r18
    1458:	980f883a 	mov	r7,r19
    145c:	0003d640 	call	3d64 <__adddf3>
    1460:	180b883a 	mov	r5,r3
    1464:	1009883a 	mov	r4,r2
    1468:	00ffffc4 	movi	r3,-1
    146c:	d8c00b15 	stw	r3,44(sp)
    1470:	e1400315 	stw	r5,12(fp)
    1474:	e1000215 	stw	r4,8(fp)
    1478:	003e3e06 	br	d74 <__ieee754_rem_pio2+0x64>
    147c:	d9000c17 	ldw	r4,48(sp)
    1480:	d9400d17 	ldw	r5,52(sp)
    1484:	018b8034 	movhi	r6,11776
    1488:	b80f883a 	mov	r7,r23
    148c:	0003dd80 	call	3dd8 <__muldf3>
    1490:	d9000817 	ldw	r4,32(sp)
    1494:	d9401217 	ldw	r5,72(sp)
    1498:	100d883a 	mov	r6,r2
    149c:	180f883a 	mov	r7,r3
    14a0:	1025883a 	mov	r18,r2
    14a4:	1827883a 	mov	r19,r3
    14a8:	0003ce40 	call	3ce4 <__subdf3>
    14ac:	d9400d17 	ldw	r5,52(sp)
    14b0:	d9000c17 	ldw	r4,48(sp)
    14b4:	02094834 	movhi	r8,9504
    14b8:	42127044 	addi	r8,r8,18881
    14bc:	024e5f34 	movhi	r9,14716
    14c0:	4a60e684 	addi	r9,r9,-31846
    14c4:	480f883a 	mov	r7,r9
    14c8:	400d883a 	mov	r6,r8
    14cc:	182b883a 	mov	r21,r3
    14d0:	d8800e15 	stw	r2,56(sp)
    14d4:	0003dd80 	call	3dd8 <__muldf3>
    14d8:	d9000817 	ldw	r4,32(sp)
    14dc:	d9401217 	ldw	r5,72(sp)
    14e0:	d9800e17 	ldw	r6,56(sp)
    14e4:	a80f883a 	mov	r7,r21
    14e8:	1021883a 	mov	r16,r2
    14ec:	1823883a 	mov	r17,r3
    14f0:	dd400f15 	stw	r21,60(sp)
    14f4:	0003ce40 	call	3ce4 <__subdf3>
    14f8:	180b883a 	mov	r5,r3
    14fc:	900d883a 	mov	r6,r18
    1500:	980f883a 	mov	r7,r19
    1504:	1009883a 	mov	r4,r2
    1508:	0003ce40 	call	3ce4 <__subdf3>
    150c:	180f883a 	mov	r7,r3
    1510:	880b883a 	mov	r5,r17
    1514:	8009883a 	mov	r4,r16
    1518:	100d883a 	mov	r6,r2
    151c:	0003ce40 	call	3ce4 <__subdf3>
    1520:	d9000e17 	ldw	r4,56(sp)
    1524:	1021883a 	mov	r16,r2
    1528:	1823883a 	mov	r17,r3
    152c:	a80b883a 	mov	r5,r21
    1530:	180f883a 	mov	r7,r3
    1534:	003fa606 	br	13d0 <__ieee754_rem_pio2+0x6c0>

00001538 <__kernel_cos>:
    1538:	defff104 	addi	sp,sp,-60
    153c:	00a00034 	movhi	r2,32768
    1540:	10bfffc4 	addi	r2,r2,-1
    1544:	dd800c15 	stw	r22,48(sp)
    1548:	116c703a 	and	r22,r2,r5
    154c:	0005883a 	mov	r2,zero
    1550:	dd000a15 	stw	r20,40(sp)
    1554:	d8800215 	stw	r2,8(sp)
    1558:	2029883a 	mov	r20,r4
    155c:	008f9034 	movhi	r2,15936
    1560:	10bfffc4 	addi	r2,r2,-1
    1564:	0009883a 	mov	r4,zero
    1568:	dd400b15 	stw	r21,44(sp)
    156c:	dfc00e15 	stw	ra,56(sp)
    1570:	ddc00d15 	stw	r23,52(sp)
    1574:	dcc00915 	stw	r19,36(sp)
    1578:	dc800815 	stw	r18,32(sp)
    157c:	dc400715 	stw	r17,28(sp)
    1580:	dc000615 	stw	r16,24(sp)
    1584:	282b883a 	mov	r21,r5
    1588:	d9800415 	stw	r6,16(sp)
    158c:	d9c00515 	stw	r7,20(sp)
    1590:	d9000315 	stw	r4,12(sp)
    1594:	15809216 	blt	r2,r22,17e0 <__kernel_cos+0x2a8>
    1598:	a009883a 	mov	r4,r20
    159c:	00046840 	call	4684 <__fixdfsi>
    15a0:	10011c26 	beq	r2,zero,1a14 <__kernel_cos+0x4dc>
    15a4:	a009883a 	mov	r4,r20
    15a8:	a80b883a 	mov	r5,r21
    15ac:	a00d883a 	mov	r6,r20
    15b0:	a80f883a 	mov	r7,r21
    15b4:	0003dd80 	call	3dd8 <__muldf3>
    15b8:	1021883a 	mov	r16,r2
    15bc:	1823883a 	mov	r17,r3
    15c0:	1025883a 	mov	r18,r2
    15c4:	1827883a 	mov	r19,r3
    15c8:	00afa234 	movhi	r2,48776
    15cc:	108e3504 	addi	r2,r2,14548
    15d0:	00ef6a74 	movhi	r3,48553
    15d4:	18feba44 	addi	r3,r3,-1303
    15d8:	8009883a 	mov	r4,r16
    15dc:	880b883a 	mov	r5,r17
    15e0:	180f883a 	mov	r7,r3
    15e4:	100d883a 	mov	r6,r2
    15e8:	0003dd80 	call	3dd8 <__muldf3>
    15ec:	022f6d74 	movhi	r8,48565
    15f0:	422c7104 	addi	r8,r8,-20028
    15f4:	024f88b4 	movhi	r9,15906
    15f8:	4a7ba784 	addi	r9,r9,-4450
    15fc:	480f883a 	mov	r7,r9
    1600:	400d883a 	mov	r6,r8
    1604:	180b883a 	mov	r5,r3
    1608:	1009883a 	mov	r4,r2
    160c:	0003d640 	call	3d64 <__adddf3>
    1610:	180f883a 	mov	r7,r3
    1614:	8009883a 	mov	r4,r16
    1618:	880b883a 	mov	r5,r17
    161c:	100d883a 	mov	r6,r2
    1620:	0003dd80 	call	3dd8 <__muldf3>
    1624:	02202734 	movhi	r8,32924
    1628:	4214ab44 	addi	r8,r8,21165
    162c:	024fa4b4 	movhi	r9,16018
    1630:	4a5f93c4 	addi	r9,r9,32335
    1634:	480f883a 	mov	r7,r9
    1638:	400d883a 	mov	r6,r8
    163c:	180b883a 	mov	r5,r3
    1640:	1009883a 	mov	r4,r2
    1644:	0003ce40 	call	3ce4 <__subdf3>
    1648:	180f883a 	mov	r7,r3
    164c:	8009883a 	mov	r4,r16
    1650:	880b883a 	mov	r5,r17
    1654:	100d883a 	mov	r6,r2
    1658:	0003dd80 	call	3dd8 <__muldf3>
    165c:	020672f4 	movhi	r8,6603
    1660:	42056404 	addi	r8,r8,5520
    1664:	024fbeb4 	movhi	r9,16122
    1668:	4a406804 	addi	r9,r9,416
    166c:	480f883a 	mov	r7,r9
    1670:	400d883a 	mov	r6,r8
    1674:	180b883a 	mov	r5,r3
    1678:	1009883a 	mov	r4,r2
    167c:	0003d640 	call	3d64 <__adddf3>
    1680:	180f883a 	mov	r7,r3
    1684:	8009883a 	mov	r4,r16
    1688:	880b883a 	mov	r5,r17
    168c:	100d883a 	mov	r6,r2
    1690:	0003dd80 	call	3dd8 <__muldf3>
    1694:	0205b074 	movhi	r8,5825
    1698:	42145dc4 	addi	r8,r8,20855
    169c:	024fd5f4 	movhi	r9,16215
    16a0:	4a705b04 	addi	r9,r9,-16020
    16a4:	480f883a 	mov	r7,r9
    16a8:	400d883a 	mov	r6,r8
    16ac:	180b883a 	mov	r5,r3
    16b0:	1009883a 	mov	r4,r2
    16b4:	0003ce40 	call	3ce4 <__subdf3>
    16b8:	180f883a 	mov	r7,r3
    16bc:	8009883a 	mov	r4,r16
    16c0:	880b883a 	mov	r5,r17
    16c4:	100d883a 	mov	r6,r2
    16c8:	0003dd80 	call	3dd8 <__muldf3>
    16cc:	02155574 	movhi	r8,21845
    16d0:	42155304 	addi	r8,r8,21836
    16d4:	024fe974 	movhi	r9,16293
    16d8:	4a555544 	addi	r9,r9,21845
    16dc:	480f883a 	mov	r7,r9
    16e0:	400d883a 	mov	r6,r8
    16e4:	180b883a 	mov	r5,r3
    16e8:	1009883a 	mov	r4,r2
    16ec:	0003d640 	call	3d64 <__adddf3>
    16f0:	180f883a 	mov	r7,r3
    16f4:	880b883a 	mov	r5,r17
    16f8:	8009883a 	mov	r4,r16
    16fc:	100d883a 	mov	r6,r2
    1700:	0003dd80 	call	3dd8 <__muldf3>
    1704:	1021883a 	mov	r16,r2
    1708:	1823883a 	mov	r17,r3
    170c:	0005883a 	mov	r2,zero
    1710:	00cff834 	movhi	r3,16352
    1714:	9009883a 	mov	r4,r18
    1718:	980b883a 	mov	r5,r19
    171c:	180f883a 	mov	r7,r3
    1720:	100d883a 	mov	r6,r2
    1724:	0003dd80 	call	3dd8 <__muldf3>
    1728:	980b883a 	mov	r5,r19
    172c:	880f883a 	mov	r7,r17
    1730:	9009883a 	mov	r4,r18
    1734:	800d883a 	mov	r6,r16
    1738:	1025883a 	mov	r18,r2
    173c:	1827883a 	mov	r19,r3
    1740:	0003dd80 	call	3dd8 <__muldf3>
    1744:	d9c00517 	ldw	r7,20(sp)
    1748:	d9800417 	ldw	r6,16(sp)
    174c:	a80b883a 	mov	r5,r21
    1750:	a009883a 	mov	r4,r20
    1754:	1021883a 	mov	r16,r2
    1758:	1823883a 	mov	r17,r3
    175c:	0003dd80 	call	3dd8 <__muldf3>
    1760:	180f883a 	mov	r7,r3
    1764:	880b883a 	mov	r5,r17
    1768:	8009883a 	mov	r4,r16
    176c:	100d883a 	mov	r6,r2
    1770:	0003ce40 	call	3ce4 <__subdf3>
    1774:	180f883a 	mov	r7,r3
    1778:	980b883a 	mov	r5,r19
    177c:	9009883a 	mov	r4,r18
    1780:	100d883a 	mov	r6,r2
    1784:	0003ce40 	call	3ce4 <__subdf3>
    1788:	0011883a 	mov	r8,zero
    178c:	024ffc34 	movhi	r9,16368
    1790:	480b883a 	mov	r5,r9
    1794:	180f883a 	mov	r7,r3
    1798:	4009883a 	mov	r4,r8
    179c:	100d883a 	mov	r6,r2
    17a0:	0003ce40 	call	3ce4 <__subdf3>
    17a4:	100d883a 	mov	r6,r2
    17a8:	180f883a 	mov	r7,r3
    17ac:	3005883a 	mov	r2,r6
    17b0:	3807883a 	mov	r3,r7
    17b4:	dfc00e17 	ldw	ra,56(sp)
    17b8:	ddc00d17 	ldw	r23,52(sp)
    17bc:	dd800c17 	ldw	r22,48(sp)
    17c0:	dd400b17 	ldw	r21,44(sp)
    17c4:	dd000a17 	ldw	r20,40(sp)
    17c8:	dcc00917 	ldw	r19,36(sp)
    17cc:	dc800817 	ldw	r18,32(sp)
    17d0:	dc400717 	ldw	r17,28(sp)
    17d4:	dc000617 	ldw	r16,24(sp)
    17d8:	dec00f04 	addi	sp,sp,60
    17dc:	f800283a 	ret
    17e0:	280f883a 	mov	r7,r5
    17e4:	a009883a 	mov	r4,r20
    17e8:	a00d883a 	mov	r6,r20
    17ec:	0003dd80 	call	3dd8 <__muldf3>
    17f0:	1021883a 	mov	r16,r2
    17f4:	1823883a 	mov	r17,r3
    17f8:	1025883a 	mov	r18,r2
    17fc:	1827883a 	mov	r19,r3
    1800:	00afa234 	movhi	r2,48776
    1804:	108e3504 	addi	r2,r2,14548
    1808:	00ef6a74 	movhi	r3,48553
    180c:	18feba44 	addi	r3,r3,-1303
    1810:	8009883a 	mov	r4,r16
    1814:	880b883a 	mov	r5,r17
    1818:	180f883a 	mov	r7,r3
    181c:	100d883a 	mov	r6,r2
    1820:	0003dd80 	call	3dd8 <__muldf3>
    1824:	022f6d74 	movhi	r8,48565
    1828:	422c7104 	addi	r8,r8,-20028
    182c:	024f88b4 	movhi	r9,15906
    1830:	4a7ba784 	addi	r9,r9,-4450
    1834:	480f883a 	mov	r7,r9
    1838:	400d883a 	mov	r6,r8
    183c:	180b883a 	mov	r5,r3
    1840:	1009883a 	mov	r4,r2
    1844:	0003d640 	call	3d64 <__adddf3>
    1848:	180f883a 	mov	r7,r3
    184c:	8009883a 	mov	r4,r16
    1850:	880b883a 	mov	r5,r17
    1854:	100d883a 	mov	r6,r2
    1858:	0003dd80 	call	3dd8 <__muldf3>
    185c:	02202734 	movhi	r8,32924
    1860:	4214ab44 	addi	r8,r8,21165
    1864:	024fa4b4 	movhi	r9,16018
    1868:	4a5f93c4 	addi	r9,r9,32335
    186c:	480f883a 	mov	r7,r9
    1870:	400d883a 	mov	r6,r8
    1874:	180b883a 	mov	r5,r3
    1878:	1009883a 	mov	r4,r2
    187c:	0003ce40 	call	3ce4 <__subdf3>
    1880:	180f883a 	mov	r7,r3
    1884:	8009883a 	mov	r4,r16
    1888:	880b883a 	mov	r5,r17
    188c:	100d883a 	mov	r6,r2
    1890:	0003dd80 	call	3dd8 <__muldf3>
    1894:	020672f4 	movhi	r8,6603
    1898:	42056404 	addi	r8,r8,5520
    189c:	024fbeb4 	movhi	r9,16122
    18a0:	4a406804 	addi	r9,r9,416
    18a4:	480f883a 	mov	r7,r9
    18a8:	400d883a 	mov	r6,r8
    18ac:	180b883a 	mov	r5,r3
    18b0:	1009883a 	mov	r4,r2
    18b4:	0003d640 	call	3d64 <__adddf3>
    18b8:	180f883a 	mov	r7,r3
    18bc:	8009883a 	mov	r4,r16
    18c0:	880b883a 	mov	r5,r17
    18c4:	100d883a 	mov	r6,r2
    18c8:	0003dd80 	call	3dd8 <__muldf3>
    18cc:	0205b074 	movhi	r8,5825
    18d0:	42145dc4 	addi	r8,r8,20855
    18d4:	024fd5f4 	movhi	r9,16215
    18d8:	4a705b04 	addi	r9,r9,-16020
    18dc:	480f883a 	mov	r7,r9
    18e0:	400d883a 	mov	r6,r8
    18e4:	180b883a 	mov	r5,r3
    18e8:	1009883a 	mov	r4,r2
    18ec:	0003ce40 	call	3ce4 <__subdf3>
    18f0:	180f883a 	mov	r7,r3
    18f4:	8009883a 	mov	r4,r16
    18f8:	880b883a 	mov	r5,r17
    18fc:	100d883a 	mov	r6,r2
    1900:	0003dd80 	call	3dd8 <__muldf3>
    1904:	02155574 	movhi	r8,21845
    1908:	42155304 	addi	r8,r8,21836
    190c:	024fe974 	movhi	r9,16293
    1910:	4a555544 	addi	r9,r9,21845
    1914:	480f883a 	mov	r7,r9
    1918:	400d883a 	mov	r6,r8
    191c:	180b883a 	mov	r5,r3
    1920:	1009883a 	mov	r4,r2
    1924:	0003d640 	call	3d64 <__adddf3>
    1928:	180f883a 	mov	r7,r3
    192c:	880b883a 	mov	r5,r17
    1930:	8009883a 	mov	r4,r16
    1934:	100d883a 	mov	r6,r2
    1938:	0003dd80 	call	3dd8 <__muldf3>
    193c:	1021883a 	mov	r16,r2
    1940:	008ff4f4 	movhi	r2,16339
    1944:	108ccc84 	addi	r2,r2,13106
    1948:	1823883a 	mov	r17,r3
    194c:	15bf6f0e 	bge	r2,r22,170c <__kernel_cos+0x1d4>
    1950:	008ffa74 	movhi	r2,16361
    1954:	1580320e 	bge	r2,r22,1a20 <__kernel_cos+0x4e8>
    1958:	0005883a 	mov	r2,zero
    195c:	010ff9f4 	movhi	r4,16359
    1960:	002d883a 	mov	r22,zero
    1964:	d8800015 	stw	r2,0(sp)
    1968:	05cff4b4 	movhi	r23,16338
    196c:	d9000115 	stw	r4,4(sp)
    1970:	0005883a 	mov	r2,zero
    1974:	00cff834 	movhi	r3,16352
    1978:	9009883a 	mov	r4,r18
    197c:	980b883a 	mov	r5,r19
    1980:	180f883a 	mov	r7,r3
    1984:	100d883a 	mov	r6,r2
    1988:	0003dd80 	call	3dd8 <__muldf3>
    198c:	180b883a 	mov	r5,r3
    1990:	b80f883a 	mov	r7,r23
    1994:	1009883a 	mov	r4,r2
    1998:	b00d883a 	mov	r6,r22
    199c:	0003ce40 	call	3ce4 <__subdf3>
    19a0:	980b883a 	mov	r5,r19
    19a4:	880f883a 	mov	r7,r17
    19a8:	9009883a 	mov	r4,r18
    19ac:	800d883a 	mov	r6,r16
    19b0:	1025883a 	mov	r18,r2
    19b4:	1827883a 	mov	r19,r3
    19b8:	0003dd80 	call	3dd8 <__muldf3>
    19bc:	d9c00517 	ldw	r7,20(sp)
    19c0:	d9800417 	ldw	r6,16(sp)
    19c4:	a80b883a 	mov	r5,r21
    19c8:	a009883a 	mov	r4,r20
    19cc:	1021883a 	mov	r16,r2
    19d0:	1823883a 	mov	r17,r3
    19d4:	0003dd80 	call	3dd8 <__muldf3>
    19d8:	180f883a 	mov	r7,r3
    19dc:	880b883a 	mov	r5,r17
    19e0:	8009883a 	mov	r4,r16
    19e4:	100d883a 	mov	r6,r2
    19e8:	0003ce40 	call	3ce4 <__subdf3>
    19ec:	180f883a 	mov	r7,r3
    19f0:	980b883a 	mov	r5,r19
    19f4:	9009883a 	mov	r4,r18
    19f8:	100d883a 	mov	r6,r2
    19fc:	0003ce40 	call	3ce4 <__subdf3>
    1a00:	d9400117 	ldw	r5,4(sp)
    1a04:	d9000017 	ldw	r4,0(sp)
    1a08:	180f883a 	mov	r7,r3
    1a0c:	100d883a 	mov	r6,r2
    1a10:	003f6306 	br	17a0 <__kernel_cos+0x268>
    1a14:	000d883a 	mov	r6,zero
    1a18:	01cffc34 	movhi	r7,16368
    1a1c:	003f6306 	br	17ac <__kernel_cos+0x274>
    1a20:	00bff834 	movhi	r2,65504
    1a24:	b0ad883a 	add	r22,r22,r2
    1a28:	dd800315 	stw	r22,12(sp)
    1a2c:	d9000317 	ldw	r4,12(sp)
    1a30:	0005883a 	mov	r2,zero
    1a34:	00cffc34 	movhi	r3,16368
    1a38:	002d883a 	mov	r22,zero
    1a3c:	200f883a 	mov	r7,r4
    1a40:	202f883a 	mov	r23,r4
    1a44:	180b883a 	mov	r5,r3
    1a48:	1009883a 	mov	r4,r2
    1a4c:	b00d883a 	mov	r6,r22
    1a50:	d8800215 	stw	r2,8(sp)
    1a54:	0003ce40 	call	3ce4 <__subdf3>
    1a58:	d8800015 	stw	r2,0(sp)
    1a5c:	d8c00115 	stw	r3,4(sp)
    1a60:	003fc306 	br	1970 <__kernel_cos+0x438>

00001a64 <__kernel_rem_pio2>:
    1a64:	deff5304 	addi	sp,sp,-692
    1a68:	d880ad17 	ldw	r2,692(sp)
    1a6c:	d9009615 	stw	r4,600(sp)
    1a70:	d9409715 	stw	r5,604(sp)
    1a74:	1087883a 	add	r3,r2,r2
    1a78:	18c7883a 	add	r3,r3,r3
    1a7c:	00800074 	movhi	r2,1
    1a80:	1086c704 	addi	r2,r2,6940
    1a84:	1887883a 	add	r3,r3,r2
    1a88:	18c00017 	ldw	r3,0(r3)
    1a8c:	313fff44 	addi	r4,r6,-3
    1a90:	01400604 	movi	r5,24
    1a94:	df00ab15 	stw	fp,684(sp)
    1a98:	dc00a315 	stw	r16,652(sp)
    1a9c:	d8c09515 	stw	r3,596(sp)
    1aa0:	dfc0ac15 	stw	ra,688(sp)
    1aa4:	ddc0aa15 	stw	r23,680(sp)
    1aa8:	dd80a915 	stw	r22,676(sp)
    1aac:	dd40a815 	stw	r21,672(sp)
    1ab0:	dd00a715 	stw	r20,668(sp)
    1ab4:	dcc0a615 	stw	r19,664(sp)
    1ab8:	dc80a515 	stw	r18,660(sp)
    1abc:	dc40a415 	stw	r17,656(sp)
    1ac0:	3021883a 	mov	r16,r6
    1ac4:	d9c09815 	stw	r7,608(sp)
    1ac8:	00048840 	call	4884 <__divsi3>
    1acc:	d8c09817 	ldw	r3,608(sp)
    1ad0:	d8808c15 	stw	r2,560(sp)
    1ad4:	1f3fffc4 	addi	fp,r3,-1
    1ad8:	10031a16 	blt	r2,zero,2744 <__kernel_rem_pio2+0xce0>
    1adc:	d9008c17 	ldw	r4,560(sp)
    1ae0:	017ffa04 	movi	r5,-24
    1ae4:	00049540 	call	4954 <__mulsi3>
    1ae8:	d9009517 	ldw	r4,596(sp)
    1aec:	8085883a 	add	r2,r16,r2
    1af0:	10bffa04 	addi	r2,r2,-24
    1af4:	2707883a 	add	r3,r4,fp
    1af8:	d8809315 	stw	r2,588(sp)
    1afc:	18001616 	blt	r3,zero,1b58 <__kernel_rem_pio2+0xf4>
    1b00:	d9408c17 	ldw	r5,560(sp)
    1b04:	d980ae17 	ldw	r6,696(sp)
    1b08:	dc801404 	addi	r18,sp,80
    1b0c:	2f21c83a 	sub	r16,r5,fp
    1b10:	8405883a 	add	r2,r16,r16
    1b14:	1085883a 	add	r2,r2,r2
    1b18:	30a3883a 	add	r17,r6,r2
    1b1c:	80e7883a 	add	r19,r16,r3
    1b20:	00000106 	br	1b28 <__kernel_rem_pio2+0xc4>
    1b24:	84000044 	addi	r16,r16,1
    1b28:	0009883a 	mov	r4,zero
    1b2c:	000b883a 	mov	r5,zero
    1b30:	80000416 	blt	r16,zero,1b44 <__kernel_rem_pio2+0xe0>
    1b34:	89000017 	ldw	r4,0(r17)
    1b38:	000458c0 	call	458c <__floatsidf>
    1b3c:	1009883a 	mov	r4,r2
    1b40:	180b883a 	mov	r5,r3
    1b44:	91400115 	stw	r5,4(r18)
    1b48:	91000015 	stw	r4,0(r18)
    1b4c:	8c400104 	addi	r17,r17,4
    1b50:	94800204 	addi	r18,r18,8
    1b54:	84fff31e 	bne	r16,r19,1b24 <__kernel_rem_pio2+0xc0>
    1b58:	d9c09517 	ldw	r7,596(sp)
    1b5c:	38002416 	blt	r7,zero,1bf0 <__kernel_rem_pio2+0x18c>
    1b60:	da809817 	ldw	r10,608(sp)
    1b64:	e029883a 	mov	r20,fp
    1b68:	dd406404 	addi	r21,sp,400
    1b6c:	3aaf883a 	add	r23,r7,r10
    1b70:	e02c403a 	cmpge	r22,fp,zero
    1b74:	b0023e26 	beq	r22,zero,2470 <__kernel_rem_pio2+0xa0c>
    1b78:	dcc09617 	ldw	r19,600(sp)
    1b7c:	0021883a 	mov	r16,zero
    1b80:	0025883a 	mov	r18,zero
    1b84:	0023883a 	mov	r17,zero
    1b88:	a489c83a 	sub	r4,r20,r18
    1b8c:	200890fa 	slli	r4,r4,3
    1b90:	99800017 	ldw	r6,0(r19)
    1b94:	99c00117 	ldw	r7,4(r19)
    1b98:	26c9883a 	add	r4,r4,sp
    1b9c:	20c01517 	ldw	r3,84(r4)
    1ba0:	20801417 	ldw	r2,80(r4)
    1ba4:	94800044 	addi	r18,r18,1
    1ba8:	180b883a 	mov	r5,r3
    1bac:	1009883a 	mov	r4,r2
    1bb0:	0003dd80 	call	3dd8 <__muldf3>
    1bb4:	180f883a 	mov	r7,r3
    1bb8:	880b883a 	mov	r5,r17
    1bbc:	8009883a 	mov	r4,r16
    1bc0:	100d883a 	mov	r6,r2
    1bc4:	0003d640 	call	3d64 <__adddf3>
    1bc8:	1021883a 	mov	r16,r2
    1bcc:	d8809817 	ldw	r2,608(sp)
    1bd0:	9cc00204 	addi	r19,r19,8
    1bd4:	1823883a 	mov	r17,r3
    1bd8:	14bfeb1e 	bne	r2,r18,1b88 <__kernel_rem_pio2+0x124>
    1bdc:	a5000044 	addi	r20,r20,1
    1be0:	ac400115 	stw	r17,4(r21)
    1be4:	ac000015 	stw	r16,0(r21)
    1be8:	ad400204 	addi	r21,r21,8
    1bec:	a5ffe11e 	bne	r20,r23,1b74 <__kernel_rem_pio2+0x110>
    1bf0:	d8c09517 	ldw	r3,596(sp)
    1bf4:	d9409317 	ldw	r5,588(sp)
    1bf8:	e038403a 	cmpge	fp,fp,zero
    1bfc:	d8c08d15 	stw	r3,564(sp)
    1c00:	d9008d17 	ldw	r4,564(sp)
    1c04:	18c5883a 	add	r2,r3,r3
    1c08:	10c7883a 	add	r3,r2,r3
    1c0c:	1907883a 	add	r3,r3,r4
    1c10:	1085883a 	add	r2,r2,r2
    1c14:	16c5883a 	add	r2,r2,sp
    1c18:	1ec7883a 	add	r3,r3,sp
    1c1c:	29400050 	cmplti	r5,r5,1
    1c20:	df00a215 	stw	fp,648(sp)
    1c24:	d8809915 	stw	r2,612(sp)
    1c28:	d8c0a115 	stw	r3,644(sp)
    1c2c:	d940a015 	stw	r5,640(sp)
    1c30:	d9808d17 	ldw	r6,564(sp)
    1c34:	300490fa 	slli	r2,r6,3
    1c38:	16c5883a 	add	r2,r2,sp
    1c3c:	15006417 	ldw	r20,400(r2)
    1c40:	15406517 	ldw	r21,404(r2)
    1c44:	01802e0e 	bge	zero,r6,1d00 <__kernel_rem_pio2+0x29c>
    1c48:	102d883a 	mov	r22,r2
    1c4c:	302f883a 	mov	r23,r6
    1c50:	d839883a 	mov	fp,sp
    1c54:	0005883a 	mov	r2,zero
    1c58:	00cf9c34 	movhi	r3,15984
    1c5c:	180f883a 	mov	r7,r3
    1c60:	100d883a 	mov	r6,r2
    1c64:	a009883a 	mov	r4,r20
    1c68:	a80b883a 	mov	r5,r21
    1c6c:	0003dd80 	call	3dd8 <__muldf3>
    1c70:	180b883a 	mov	r5,r3
    1c74:	1009883a 	mov	r4,r2
    1c78:	00046840 	call	4684 <__fixdfsi>
    1c7c:	1009883a 	mov	r4,r2
    1c80:	000458c0 	call	458c <__floatsidf>
    1c84:	1021883a 	mov	r16,r2
    1c88:	1823883a 	mov	r17,r3
    1c8c:	0005883a 	mov	r2,zero
    1c90:	00f05c34 	movhi	r3,49520
    1c94:	180f883a 	mov	r7,r3
    1c98:	8009883a 	mov	r4,r16
    1c9c:	880b883a 	mov	r5,r17
    1ca0:	100d883a 	mov	r6,r2
    1ca4:	0003dd80 	call	3dd8 <__muldf3>
    1ca8:	180b883a 	mov	r5,r3
    1cac:	a80f883a 	mov	r7,r21
    1cb0:	a00d883a 	mov	r6,r20
    1cb4:	1009883a 	mov	r4,r2
    1cb8:	0003d640 	call	3d64 <__adddf3>
    1cbc:	180b883a 	mov	r5,r3
    1cc0:	1009883a 	mov	r4,r2
    1cc4:	00046840 	call	4684 <__fixdfsi>
    1cc8:	e0800015 	stw	r2,0(fp)
    1ccc:	b5bffe04 	addi	r22,r22,-8
    1cd0:	b0806417 	ldw	r2,400(r22)
    1cd4:	b0c06517 	ldw	r3,404(r22)
    1cd8:	8009883a 	mov	r4,r16
    1cdc:	880b883a 	mov	r5,r17
    1ce0:	180f883a 	mov	r7,r3
    1ce4:	100d883a 	mov	r6,r2
    1ce8:	0003d640 	call	3d64 <__adddf3>
    1cec:	bdffffc4 	addi	r23,r23,-1
    1cf0:	e7000104 	addi	fp,fp,4
    1cf4:	1029883a 	mov	r20,r2
    1cf8:	182b883a 	mov	r21,r3
    1cfc:	b83fd51e 	bne	r23,zero,1c54 <__kernel_rem_pio2+0x1f0>
    1d00:	d9809317 	ldw	r6,588(sp)
    1d04:	a80b883a 	mov	r5,r21
    1d08:	a009883a 	mov	r4,r20
    1d0c:	0002e3c0 	call	2e3c <scalbn>
    1d10:	0009883a 	mov	r4,zero
    1d14:	014ff034 	movhi	r5,16320
    1d18:	280f883a 	mov	r7,r5
    1d1c:	200d883a 	mov	r6,r4
    1d20:	180b883a 	mov	r5,r3
    1d24:	1009883a 	mov	r4,r2
    1d28:	1021883a 	mov	r16,r2
    1d2c:	1823883a 	mov	r17,r3
    1d30:	0003dd80 	call	3dd8 <__muldf3>
    1d34:	180b883a 	mov	r5,r3
    1d38:	1009883a 	mov	r4,r2
    1d3c:	0002c180 	call	2c18 <floor>
    1d40:	0011883a 	mov	r8,zero
    1d44:	02700834 	movhi	r9,49184
    1d48:	480f883a 	mov	r7,r9
    1d4c:	400d883a 	mov	r6,r8
    1d50:	180b883a 	mov	r5,r3
    1d54:	1009883a 	mov	r4,r2
    1d58:	0003dd80 	call	3dd8 <__muldf3>
    1d5c:	180f883a 	mov	r7,r3
    1d60:	100d883a 	mov	r6,r2
    1d64:	880b883a 	mov	r5,r17
    1d68:	8009883a 	mov	r4,r16
    1d6c:	0003d640 	call	3d64 <__adddf3>
    1d70:	180b883a 	mov	r5,r3
    1d74:	1009883a 	mov	r4,r2
    1d78:	1823883a 	mov	r17,r3
    1d7c:	1021883a 	mov	r16,r2
    1d80:	00046840 	call	4684 <__fixdfsi>
    1d84:	1009883a 	mov	r4,r2
    1d88:	d8809415 	stw	r2,592(sp)
    1d8c:	000458c0 	call	458c <__floatsidf>
    1d90:	880b883a 	mov	r5,r17
    1d94:	8009883a 	mov	r4,r16
    1d98:	180f883a 	mov	r7,r3
    1d9c:	100d883a 	mov	r6,r2
    1da0:	0003ce40 	call	3ce4 <__subdf3>
    1da4:	d9c0a017 	ldw	r7,640(sp)
    1da8:	180d883a 	mov	r6,r3
    1dac:	1021883a 	mov	r16,r2
    1db0:	1823883a 	mov	r17,r3
    1db4:	38017d1e 	bne	r7,zero,23ac <__kernel_rem_pio2+0x948>
    1db8:	da808d17 	ldw	r10,564(sp)
    1dbc:	d9009317 	ldw	r4,588(sp)
    1dc0:	00c00604 	movi	r3,24
    1dc4:	50bfffc4 	addi	r2,r10,-1
    1dc8:	1085883a 	add	r2,r2,r2
    1dcc:	1085883a 	add	r2,r2,r2
    1dd0:	16c5883a 	add	r2,r2,sp
    1dd4:	11400017 	ldw	r5,0(r2)
    1dd8:	1907c83a 	sub	r3,r3,r4
    1ddc:	d9c09317 	ldw	r7,588(sp)
    1de0:	28cdd83a 	sra	r6,r5,r3
    1de4:	010005c4 	movi	r4,23
    1de8:	da809417 	ldw	r10,592(sp)
    1dec:	30c6983a 	sll	r3,r6,r3
    1df0:	21c9c83a 	sub	r4,r4,r7
    1df4:	5195883a 	add	r10,r10,r6
    1df8:	28cbc83a 	sub	r5,r5,r3
    1dfc:	2909d83a 	sra	r4,r5,r4
    1e00:	da809415 	stw	r10,592(sp)
    1e04:	11400015 	stw	r5,0(r2)
    1e08:	d9009215 	stw	r4,584(sp)
    1e0c:	d9409217 	ldw	r5,584(sp)
    1e10:	0140270e 	bge	zero,r5,1eb0 <__kernel_rem_pio2+0x44c>
    1e14:	d9809417 	ldw	r6,592(sp)
    1e18:	d9c08d17 	ldw	r7,564(sp)
    1e1c:	31800044 	addi	r6,r6,1
    1e20:	d9809415 	stw	r6,592(sp)
    1e24:	01c1a50e 	bge	zero,r7,24bc <__kernel_rem_pio2+0xa58>
    1e28:	002d883a 	mov	r22,zero
    1e2c:	000b883a 	mov	r5,zero
    1e30:	d809883a 	mov	r4,sp
    1e34:	01c04034 	movhi	r7,256
    1e38:	01804034 	movhi	r6,256
    1e3c:	31bfffc4 	addi	r6,r6,-1
    1e40:	00000806 	br	1e64 <__kernel_rem_pio2+0x400>
    1e44:	38c5c83a 	sub	r2,r7,r3
    1e48:	18000226 	beq	r3,zero,1e54 <__kernel_rem_pio2+0x3f0>
    1e4c:	05800044 	movi	r22,1
    1e50:	20800015 	stw	r2,0(r4)
    1e54:	da808d17 	ldw	r10,564(sp)
    1e58:	29400044 	addi	r5,r5,1
    1e5c:	21000104 	addi	r4,r4,4
    1e60:	51400926 	beq	r10,r5,1e88 <__kernel_rem_pio2+0x424>
    1e64:	b004c03a 	cmpne	r2,r22,zero
    1e68:	20c00017 	ldw	r3,0(r4)
    1e6c:	103ff526 	beq	r2,zero,1e44 <__kernel_rem_pio2+0x3e0>
    1e70:	da808d17 	ldw	r10,564(sp)
    1e74:	30c5c83a 	sub	r2,r6,r3
    1e78:	29400044 	addi	r5,r5,1
    1e7c:	20800015 	stw	r2,0(r4)
    1e80:	21000104 	addi	r4,r4,4
    1e84:	517ff71e 	bne	r10,r5,1e64 <__kernel_rem_pio2+0x400>
    1e88:	d880a017 	ldw	r2,640(sp)
    1e8c:	1000051e 	bne	r2,zero,1ea4 <__kernel_rem_pio2+0x440>
    1e90:	d8c09317 	ldw	r3,588(sp)
    1e94:	00800044 	movi	r2,1
    1e98:	18814e26 	beq	r3,r2,23d4 <__kernel_rem_pio2+0x970>
    1e9c:	00800084 	movi	r2,2
    1ea0:	18815826 	beq	r3,r2,2404 <__kernel_rem_pio2+0x9a0>
    1ea4:	d9c09217 	ldw	r7,584(sp)
    1ea8:	00800084 	movi	r2,2
    1eac:	38806926 	beq	r7,r2,2054 <__kernel_rem_pio2+0x5f0>
    1eb0:	000d883a 	mov	r6,zero
    1eb4:	000f883a 	mov	r7,zero
    1eb8:	8009883a 	mov	r4,r16
    1ebc:	880b883a 	mov	r5,r17
    1ec0:	00043f40 	call	43f4 <__eqdf2>
    1ec4:	1000811e 	bne	r2,zero,20cc <__kernel_rem_pio2+0x668>
    1ec8:	da808d17 	ldw	r10,564(sp)
    1ecc:	d8809517 	ldw	r2,596(sp)
    1ed0:	51bfffc4 	addi	r6,r10,-1
    1ed4:	30800c16 	blt	r6,r2,1f08 <__kernel_rem_pio2+0x4a4>
    1ed8:	3185883a 	add	r2,r6,r6
    1edc:	1085883a 	add	r2,r2,r2
    1ee0:	16c9883a 	add	r4,r2,sp
    1ee4:	3007883a 	mov	r3,r6
    1ee8:	000b883a 	mov	r5,zero
    1eec:	20800017 	ldw	r2,0(r4)
    1ef0:	d9c09517 	ldw	r7,596(sp)
    1ef4:	18ffffc4 	addi	r3,r3,-1
    1ef8:	213fff04 	addi	r4,r4,-4
    1efc:	288ab03a 	or	r5,r5,r2
    1f00:	19fffa0e 	bge	r3,r7,1eec <__kernel_rem_pio2+0x488>
    1f04:	2800791e 	bne	r5,zero,20ec <__kernel_rem_pio2+0x688>
    1f08:	da809917 	ldw	r10,612(sp)
    1f0c:	50bfff17 	ldw	r2,-4(r10)
    1f10:	1001511e 	bne	r2,zero,2458 <__kernel_rem_pio2+0x9f4>
    1f14:	d880a117 	ldw	r2,644(sp)
    1f18:	01000044 	movi	r4,1
    1f1c:	10ffff04 	addi	r3,r2,-4
    1f20:	18ffff04 	addi	r3,r3,-4
    1f24:	18800017 	ldw	r2,0(r3)
    1f28:	21000044 	addi	r4,r4,1
    1f2c:	103ffc26 	beq	r2,zero,1f20 <__kernel_rem_pio2+0x4bc>
    1f30:	d8c08d17 	ldw	r3,564(sp)
    1f34:	192f883a 	add	r23,r3,r4
    1f38:	1f000044 	addi	fp,r3,1
    1f3c:	bf00020e 	bge	r23,fp,1f48 <__kernel_rem_pio2+0x4e4>
    1f40:	ddc08d15 	stw	r23,564(sp)
    1f44:	003f3a06 	br	1c30 <__kernel_rem_pio2+0x1cc>
    1f48:	d9408c17 	ldw	r5,560(sp)
    1f4c:	d9009817 	ldw	r4,608(sp)
    1f50:	da80ae17 	ldw	r10,696(sp)
    1f54:	1945883a 	add	r2,r3,r5
    1f58:	190f883a 	add	r7,r3,r4
    1f5c:	1085883a 	add	r2,r2,r2
    1f60:	380a90fa 	slli	r5,r7,3
    1f64:	e00c90fa 	slli	r6,fp,3
    1f68:	1085883a 	add	r2,r2,r2
    1f6c:	5085883a 	add	r2,r10,r2
    1f70:	d8c01404 	addi	r3,sp,80
    1f74:	d9006404 	addi	r4,sp,400
    1f78:	10800104 	addi	r2,r2,4
    1f7c:	196b883a 	add	r21,r3,r5
    1f80:	21a1883a 	add	r16,r4,r6
    1f84:	d8809115 	stw	r2,580(sp)
    1f88:	d9c09015 	stw	r7,576(sp)
    1f8c:	d8809117 	ldw	r2,580(sp)
    1f90:	11000017 	ldw	r4,0(r2)
    1f94:	000458c0 	call	458c <__floatsidf>
    1f98:	a8c00115 	stw	r3,4(r21)
    1f9c:	d8c0a217 	ldw	r3,648(sp)
    1fa0:	a8800015 	stw	r2,0(r21)
    1fa4:	18002826 	beq	r3,zero,2048 <__kernel_rem_pio2+0x5e4>
    1fa8:	d9009017 	ldw	r4,576(sp)
    1fac:	dd009617 	ldw	r20,600(sp)
    1fb0:	0023883a 	mov	r17,zero
    1fb4:	200490fa 	slli	r2,r4,3
    1fb8:	002d883a 	mov	r22,zero
    1fbc:	0025883a 	mov	r18,zero
    1fc0:	16e7883a 	add	r19,r2,sp
    1fc4:	98801417 	ldw	r2,80(r19)
    1fc8:	98c01517 	ldw	r3,84(r19)
    1fcc:	a1800017 	ldw	r6,0(r20)
    1fd0:	a1c00117 	ldw	r7,4(r20)
    1fd4:	180b883a 	mov	r5,r3
    1fd8:	1009883a 	mov	r4,r2
    1fdc:	0003dd80 	call	3dd8 <__muldf3>
    1fe0:	180f883a 	mov	r7,r3
    1fe4:	900b883a 	mov	r5,r18
    1fe8:	8809883a 	mov	r4,r17
    1fec:	100d883a 	mov	r6,r2
    1ff0:	0003d640 	call	3d64 <__adddf3>
    1ff4:	d9409817 	ldw	r5,608(sp)
    1ff8:	b5800044 	addi	r22,r22,1
    1ffc:	9cfffe04 	addi	r19,r19,-8
    2000:	1023883a 	mov	r17,r2
    2004:	1825883a 	mov	r18,r3
    2008:	a5000204 	addi	r20,r20,8
    200c:	2dbfed1e 	bne	r5,r22,1fc4 <__kernel_rem_pio2+0x560>
    2010:	d9809117 	ldw	r6,580(sp)
    2014:	d9c09017 	ldw	r7,576(sp)
    2018:	e7000044 	addi	fp,fp,1
    201c:	31800104 	addi	r6,r6,4
    2020:	39c00044 	addi	r7,r7,1
    2024:	84800115 	stw	r18,4(r16)
    2028:	84400015 	stw	r17,0(r16)
    202c:	d9809115 	stw	r6,580(sp)
    2030:	ad400204 	addi	r21,r21,8
    2034:	84000204 	addi	r16,r16,8
    2038:	d9c09015 	stw	r7,576(sp)
    203c:	bf3fd30e 	bge	r23,fp,1f8c <__kernel_rem_pio2+0x528>
    2040:	ddc08d15 	stw	r23,564(sp)
    2044:	003efa06 	br	1c30 <__kernel_rem_pio2+0x1cc>
    2048:	0023883a 	mov	r17,zero
    204c:	0025883a 	mov	r18,zero
    2050:	003fef06 	br	2010 <__kernel_rem_pio2+0x5ac>
    2054:	0029883a 	mov	r20,zero
    2058:	054ffc34 	movhi	r21,16368
    205c:	880f883a 	mov	r7,r17
    2060:	800d883a 	mov	r6,r16
    2064:	a009883a 	mov	r4,r20
    2068:	a80b883a 	mov	r5,r21
    206c:	0003ce40 	call	3ce4 <__subdf3>
    2070:	1025883a 	mov	r18,r2
    2074:	b005003a 	cmpeq	r2,r22,zero
    2078:	1827883a 	mov	r19,r3
    207c:	9021883a 	mov	r16,r18
    2080:	1823883a 	mov	r17,r3
    2084:	103f8a1e 	bne	r2,zero,1eb0 <__kernel_rem_pio2+0x44c>
    2088:	d9809317 	ldw	r6,588(sp)
    208c:	0009883a 	mov	r4,zero
    2090:	a80b883a 	mov	r5,r21
    2094:	0002e3c0 	call	2e3c <scalbn>
    2098:	180f883a 	mov	r7,r3
    209c:	9009883a 	mov	r4,r18
    20a0:	980b883a 	mov	r5,r19
    20a4:	100d883a 	mov	r6,r2
    20a8:	0003ce40 	call	3ce4 <__subdf3>
    20ac:	1021883a 	mov	r16,r2
    20b0:	1823883a 	mov	r17,r3
    20b4:	000d883a 	mov	r6,zero
    20b8:	000f883a 	mov	r7,zero
    20bc:	8009883a 	mov	r4,r16
    20c0:	880b883a 	mov	r5,r17
    20c4:	00043f40 	call	43f4 <__eqdf2>
    20c8:	103f7f26 	beq	r2,zero,1ec8 <__kernel_rem_pio2+0x464>
    20cc:	000d883a 	mov	r6,zero
    20d0:	000f883a 	mov	r7,zero
    20d4:	8009883a 	mov	r4,r16
    20d8:	880b883a 	mov	r5,r17
    20dc:	00043f40 	call	43f4 <__eqdf2>
    20e0:	10019a1e 	bne	r2,zero,274c <__kernel_rem_pio2+0xce8>
    20e4:	da808d17 	ldw	r10,564(sp)
    20e8:	51bfffc4 	addi	r6,r10,-1
    20ec:	3185883a 	add	r2,r6,r6
    20f0:	1085883a 	add	r2,r2,r2
    20f4:	d9009317 	ldw	r4,588(sp)
    20f8:	16c5883a 	add	r2,r2,sp
    20fc:	10c00017 	ldw	r3,0(r2)
    2100:	213ffa04 	addi	r4,r4,-24
    2104:	d9009315 	stw	r4,588(sp)
    2108:	1801d41e 	bne	r3,zero,285c <__kernel_rem_pio2+0xdf8>
    210c:	d9808d15 	stw	r6,564(sp)
    2110:	1007883a 	mov	r3,r2
    2114:	d9408d17 	ldw	r5,564(sp)
    2118:	d9809317 	ldw	r6,588(sp)
    211c:	18ffff04 	addi	r3,r3,-4
    2120:	18800017 	ldw	r2,0(r3)
    2124:	297fffc4 	addi	r5,r5,-1
    2128:	31bffa04 	addi	r6,r6,-24
    212c:	d9408d15 	stw	r5,564(sp)
    2130:	d9809315 	stw	r6,588(sp)
    2134:	103ff726 	beq	r2,zero,2114 <__kernel_rem_pio2+0x6b0>
    2138:	d9809317 	ldw	r6,588(sp)
    213c:	0005883a 	mov	r2,zero
    2140:	00cffc34 	movhi	r3,16368
    2144:	180b883a 	mov	r5,r3
    2148:	1009883a 	mov	r4,r2
    214c:	0002e3c0 	call	2e3c <scalbn>
    2150:	d9808d17 	ldw	r6,564(sp)
    2154:	1021883a 	mov	r16,r2
    2158:	1823883a 	mov	r17,r3
    215c:	30004616 	blt	r6,zero,2278 <__kernel_rem_pio2+0x814>
    2160:	300690fa 	slli	r3,r6,3
    2164:	3185883a 	add	r2,r6,r6
    2168:	1085883a 	add	r2,r2,r2
    216c:	16e9883a 	add	r20,r2,sp
    2170:	1ee5883a 	add	r18,r3,sp
    2174:	3027883a 	mov	r19,r6
    2178:	057fffc4 	movi	r21,-1
    217c:	a1000017 	ldw	r4,0(r20)
    2180:	9cffffc4 	addi	r19,r19,-1
    2184:	a53fff04 	addi	r20,r20,-4
    2188:	000458c0 	call	458c <__floatsidf>
    218c:	800d883a 	mov	r6,r16
    2190:	880f883a 	mov	r7,r17
    2194:	180b883a 	mov	r5,r3
    2198:	1009883a 	mov	r4,r2
    219c:	0003dd80 	call	3dd8 <__muldf3>
    21a0:	0015883a 	mov	r10,zero
    21a4:	02cf9c34 	movhi	r11,15984
    21a8:	880b883a 	mov	r5,r17
    21ac:	8009883a 	mov	r4,r16
    21b0:	90c06515 	stw	r3,404(r18)
    21b4:	90806415 	stw	r2,400(r18)
    21b8:	580f883a 	mov	r7,r11
    21bc:	500d883a 	mov	r6,r10
    21c0:	0003dd80 	call	3dd8 <__muldf3>
    21c4:	1021883a 	mov	r16,r2
    21c8:	1823883a 	mov	r17,r3
    21cc:	94bffe04 	addi	r18,r18,-8
    21d0:	9d7fea1e 	bne	r19,r21,217c <__kernel_rem_pio2+0x718>
    21d4:	d9c09517 	ldw	r7,596(sp)
    21d8:	dd808d17 	ldw	r22,564(sp)
    21dc:	002b883a 	mov	r21,zero
    21e0:	382e403a 	cmpge	r23,r7,zero
    21e4:	b800aa26 	beq	r23,zero,2490 <__kernel_rem_pio2+0xa2c>
    21e8:	a800a916 	blt	r21,zero,2490 <__kernel_rem_pio2+0xa2c>
    21ec:	b00690fa 	slli	r3,r22,3
    21f0:	d8806404 	addi	r2,sp,400
    21f4:	0021883a 	mov	r16,zero
    21f8:	10e9883a 	add	r20,r2,r3
    21fc:	0027883a 	mov	r19,zero
    2200:	0023883a 	mov	r17,zero
    2204:	04800074 	movhi	r18,1
    2208:	9486cb04 	addi	r18,r18,6956
    220c:	00000106 	br	2214 <__kernel_rem_pio2+0x7b0>
    2210:	acc01116 	blt	r21,r19,2258 <__kernel_rem_pio2+0x7f4>
    2214:	91000017 	ldw	r4,0(r18)
    2218:	91400117 	ldw	r5,4(r18)
    221c:	a1800017 	ldw	r6,0(r20)
    2220:	a1c00117 	ldw	r7,4(r20)
    2224:	9cc00044 	addi	r19,r19,1
    2228:	94800204 	addi	r18,r18,8
    222c:	0003dd80 	call	3dd8 <__muldf3>
    2230:	180f883a 	mov	r7,r3
    2234:	880b883a 	mov	r5,r17
    2238:	8009883a 	mov	r4,r16
    223c:	100d883a 	mov	r6,r2
    2240:	0003d640 	call	3d64 <__adddf3>
    2244:	da809517 	ldw	r10,596(sp)
    2248:	a5000204 	addi	r20,r20,8
    224c:	1021883a 	mov	r16,r2
    2250:	1823883a 	mov	r17,r3
    2254:	54ffee0e 	bge	r10,r19,2210 <__kernel_rem_pio2+0x7ac>
    2258:	a80490fa 	slli	r2,r21,3
    225c:	b5bfffc4 	addi	r22,r22,-1
    2260:	ad400044 	addi	r21,r21,1
    2264:	16c5883a 	add	r2,r2,sp
    2268:	14403d15 	stw	r17,244(r2)
    226c:	14003c15 	stw	r16,240(r2)
    2270:	00bfffc4 	movi	r2,-1
    2274:	b0bfdb1e 	bne	r22,r2,21e4 <__kernel_rem_pio2+0x780>
    2278:	d8c0ad17 	ldw	r3,692(sp)
    227c:	00800084 	movi	r2,2
    2280:	10c09316 	blt	r2,r3,24d0 <__kernel_rem_pio2+0xa6c>
    2284:	00c1120e 	bge	zero,r3,26d0 <__kernel_rem_pio2+0xc6c>
    2288:	d9808d17 	ldw	r6,564(sp)
    228c:	30018d16 	blt	r6,zero,28c4 <__kernel_rem_pio2+0xe60>
    2290:	d8c08d17 	ldw	r3,564(sp)
    2294:	0011883a 	mov	r8,zero
    2298:	0013883a 	mov	r9,zero
    229c:	180490fa 	slli	r2,r3,3
    22a0:	1823883a 	mov	r17,r3
    22a4:	04bfffc4 	movi	r18,-1
    22a8:	16e1883a 	add	r16,r2,sp
    22ac:	80803c17 	ldw	r2,240(r16)
    22b0:	80c03d17 	ldw	r3,244(r16)
    22b4:	480b883a 	mov	r5,r9
    22b8:	4009883a 	mov	r4,r8
    22bc:	180f883a 	mov	r7,r3
    22c0:	100d883a 	mov	r6,r2
    22c4:	0003d640 	call	3d64 <__adddf3>
    22c8:	8c7fffc4 	addi	r17,r17,-1
    22cc:	843ffe04 	addi	r16,r16,-8
    22d0:	1011883a 	mov	r8,r2
    22d4:	1813883a 	mov	r9,r3
    22d8:	8cbff41e 	bne	r17,r18,22ac <__kernel_rem_pio2+0x848>
    22dc:	d9009217 	ldw	r4,584(sp)
    22e0:	20015b1e 	bne	r4,zero,2850 <__kernel_rem_pio2+0xdec>
    22e4:	4009883a 	mov	r4,r8
    22e8:	480b883a 	mov	r5,r9
    22ec:	d9809717 	ldw	r6,604(sp)
    22f0:	d8803c17 	ldw	r2,240(sp)
    22f4:	480f883a 	mov	r7,r9
    22f8:	31400115 	stw	r5,4(r6)
    22fc:	31000015 	stw	r4,0(r6)
    2300:	d8c03d17 	ldw	r3,244(sp)
    2304:	400d883a 	mov	r6,r8
    2308:	1009883a 	mov	r4,r2
    230c:	180b883a 	mov	r5,r3
    2310:	0003ce40 	call	3ce4 <__subdf3>
    2314:	d9c08d17 	ldw	r7,564(sp)
    2318:	1011883a 	mov	r8,r2
    231c:	1813883a 	mov	r9,r3
    2320:	01c00d0e 	bge	zero,r7,2358 <__kernel_rem_pio2+0x8f4>
    2324:	0023883a 	mov	r17,zero
    2328:	dc003e04 	addi	r16,sp,248
    232c:	81800017 	ldw	r6,0(r16)
    2330:	81c00117 	ldw	r7,4(r16)
    2334:	480b883a 	mov	r5,r9
    2338:	4009883a 	mov	r4,r8
    233c:	0003d640 	call	3d64 <__adddf3>
    2340:	da808d17 	ldw	r10,564(sp)
    2344:	8c400044 	addi	r17,r17,1
    2348:	1011883a 	mov	r8,r2
    234c:	1813883a 	mov	r9,r3
    2350:	84000204 	addi	r16,r16,8
    2354:	8abff51e 	bne	r17,r10,232c <__kernel_rem_pio2+0x8c8>
    2358:	d8809217 	ldw	r2,584(sp)
    235c:	10000226 	beq	r2,zero,2368 <__kernel_rem_pio2+0x904>
    2360:	48e0003c 	xorhi	r3,r9,32768
    2364:	1813883a 	mov	r9,r3
    2368:	d8c09717 	ldw	r3,604(sp)
    236c:	1a400315 	stw	r9,12(r3)
    2370:	1a000215 	stw	r8,8(r3)
    2374:	d8c09417 	ldw	r3,592(sp)
    2378:	188001cc 	andi	r2,r3,7
    237c:	dfc0ac17 	ldw	ra,688(sp)
    2380:	df00ab17 	ldw	fp,684(sp)
    2384:	ddc0aa17 	ldw	r23,680(sp)
    2388:	dd80a917 	ldw	r22,676(sp)
    238c:	dd40a817 	ldw	r21,672(sp)
    2390:	dd00a717 	ldw	r20,668(sp)
    2394:	dcc0a617 	ldw	r19,664(sp)
    2398:	dc80a517 	ldw	r18,660(sp)
    239c:	dc40a417 	ldw	r17,656(sp)
    23a0:	dc00a317 	ldw	r16,652(sp)
    23a4:	dec0ad04 	addi	sp,sp,692
    23a8:	f800283a 	ret
    23ac:	d8809317 	ldw	r2,588(sp)
    23b0:	10001f1e 	bne	r2,zero,2430 <__kernel_rem_pio2+0x9cc>
    23b4:	d8c08d17 	ldw	r3,564(sp)
    23b8:	18c5883a 	add	r2,r3,r3
    23bc:	1085883a 	add	r2,r2,r2
    23c0:	16c5883a 	add	r2,r2,sp
    23c4:	10ffff17 	ldw	r3,-4(r2)
    23c8:	1807d5fa 	srai	r3,r3,23
    23cc:	d8c09215 	stw	r3,584(sp)
    23d0:	003e8e06 	br	1e0c <__kernel_rem_pio2+0x3a8>
    23d4:	d9008d17 	ldw	r4,564(sp)
    23d8:	d9409317 	ldw	r5,588(sp)
    23dc:	2145c83a 	sub	r2,r4,r5
    23e0:	1085883a 	add	r2,r2,r2
    23e4:	1085883a 	add	r2,r2,r2
    23e8:	16c5883a 	add	r2,r2,sp
    23ec:	10c00017 	ldw	r3,0(r2)
    23f0:	01002034 	movhi	r4,128
    23f4:	213fffc4 	addi	r4,r4,-1
    23f8:	1906703a 	and	r3,r3,r4
    23fc:	10c00015 	stw	r3,0(r2)
    2400:	003ea806 	br	1ea4 <__kernel_rem_pio2+0x440>
    2404:	d9808d17 	ldw	r6,564(sp)
    2408:	01001034 	movhi	r4,64
    240c:	213fffc4 	addi	r4,r4,-1
    2410:	30bfffc4 	addi	r2,r6,-1
    2414:	1085883a 	add	r2,r2,r2
    2418:	1085883a 	add	r2,r2,r2
    241c:	16c5883a 	add	r2,r2,sp
    2420:	10c00017 	ldw	r3,0(r2)
    2424:	1906703a 	and	r3,r3,r4
    2428:	10c00015 	stw	r3,0(r2)
    242c:	003e9d06 	br	1ea4 <__kernel_rem_pio2+0x440>
    2430:	0005883a 	mov	r2,zero
    2434:	00cff834 	movhi	r3,16352
    2438:	300b883a 	mov	r5,r6
    243c:	180f883a 	mov	r7,r3
    2440:	8009883a 	mov	r4,r16
    2444:	100d883a 	mov	r6,r2
    2448:	00045040 	call	4504 <__gedf2>
    244c:	10001d0e 	bge	r2,zero,24c4 <__kernel_rem_pio2+0xa60>
    2450:	d8009215 	stw	zero,584(sp)
    2454:	003e9606 	br	1eb0 <__kernel_rem_pio2+0x44c>
    2458:	d8c08d17 	ldw	r3,564(sp)
    245c:	01000044 	movi	r4,1
    2460:	192f883a 	add	r23,r3,r4
    2464:	1f000044 	addi	fp,r3,1
    2468:	bf3eb516 	blt	r23,fp,1f40 <__kernel_rem_pio2+0x4dc>
    246c:	003eb606 	br	1f48 <__kernel_rem_pio2+0x4e4>
    2470:	0021883a 	mov	r16,zero
    2474:	0023883a 	mov	r17,zero
    2478:	a5000044 	addi	r20,r20,1
    247c:	ac400115 	stw	r17,4(r21)
    2480:	ac000015 	stw	r16,0(r21)
    2484:	ad400204 	addi	r21,r21,8
    2488:	a5fdba1e 	bne	r20,r23,1b74 <__kernel_rem_pio2+0x110>
    248c:	003dd806 	br	1bf0 <__kernel_rem_pio2+0x18c>
    2490:	a80490fa 	slli	r2,r21,3
    2494:	0021883a 	mov	r16,zero
    2498:	0023883a 	mov	r17,zero
    249c:	16c5883a 	add	r2,r2,sp
    24a0:	14403d15 	stw	r17,244(r2)
    24a4:	14003c15 	stw	r16,240(r2)
    24a8:	b5bfffc4 	addi	r22,r22,-1
    24ac:	00bfffc4 	movi	r2,-1
    24b0:	ad400044 	addi	r21,r21,1
    24b4:	b0bf4b1e 	bne	r22,r2,21e4 <__kernel_rem_pio2+0x780>
    24b8:	003f6f06 	br	2278 <__kernel_rem_pio2+0x814>
    24bc:	002d883a 	mov	r22,zero
    24c0:	003e7106 	br	1e88 <__kernel_rem_pio2+0x424>
    24c4:	01000084 	movi	r4,2
    24c8:	d9009215 	stw	r4,584(sp)
    24cc:	003e5106 	br	1e14 <__kernel_rem_pio2+0x3b0>
    24d0:	d900ad17 	ldw	r4,692(sp)
    24d4:	008000c4 	movi	r2,3
    24d8:	20bfa61e 	bne	r4,r2,2374 <__kernel_rem_pio2+0x910>
    24dc:	d9c08d17 	ldw	r7,564(sp)
    24e0:	01c02c0e 	bge	zero,r7,2594 <__kernel_rem_pio2+0xb30>
    24e4:	3805883a 	mov	r2,r7
    24e8:	00000106 	br	24f0 <__kernel_rem_pio2+0xa8c>
    24ec:	d8808e17 	ldw	r2,568(sp)
    24f0:	113fffc4 	addi	r4,r2,-1
    24f4:	100690fa 	slli	r3,r2,3
    24f8:	200490fa 	slli	r2,r4,3
    24fc:	d9008e15 	stw	r4,568(sp)
    2500:	1ef9883a 	add	fp,r3,sp
    2504:	16c5883a 	add	r2,r2,sp
    2508:	d8809a15 	stw	r2,616(sp)
    250c:	11403c04 	addi	r5,r2,240
    2510:	e1803c04 	addi	r6,fp,240
    2514:	14003c17 	ldw	r16,240(r2)
    2518:	e5003c17 	ldw	r20,240(fp)
    251c:	d9409b15 	stw	r5,620(sp)
    2520:	d9809c15 	stw	r6,624(sp)
    2524:	35400117 	ldw	r21,4(r6)
    2528:	2c400117 	ldw	r17,4(r5)
    252c:	8009883a 	mov	r4,r16
    2530:	a00d883a 	mov	r6,r20
    2534:	880b883a 	mov	r5,r17
    2538:	a80f883a 	mov	r7,r21
    253c:	0003d640 	call	3d64 <__adddf3>
    2540:	100d883a 	mov	r6,r2
    2544:	880b883a 	mov	r5,r17
    2548:	8009883a 	mov	r4,r16
    254c:	180f883a 	mov	r7,r3
    2550:	1025883a 	mov	r18,r2
    2554:	1827883a 	mov	r19,r3
    2558:	0003ce40 	call	3ce4 <__subdf3>
    255c:	180f883a 	mov	r7,r3
    2560:	a80b883a 	mov	r5,r21
    2564:	a009883a 	mov	r4,r20
    2568:	100d883a 	mov	r6,r2
    256c:	0003d640 	call	3d64 <__adddf3>
    2570:	e0803c15 	stw	r2,240(fp)
    2574:	d9c09c17 	ldw	r7,624(sp)
    2578:	38c00115 	stw	r3,4(r7)
    257c:	da809a17 	ldw	r10,616(sp)
    2580:	54803c15 	stw	r18,240(r10)
    2584:	d8809b17 	ldw	r2,620(sp)
    2588:	14c00115 	stw	r19,4(r2)
    258c:	d8c08e17 	ldw	r3,568(sp)
    2590:	183fd61e 	bne	r3,zero,24ec <__kernel_rem_pio2+0xa88>
    2594:	d9008d17 	ldw	r4,564(sp)
    2598:	00800044 	movi	r2,1
    259c:	1100cc0e 	bge	r2,r4,28d0 <__kernel_rem_pio2+0xe6c>
    25a0:	d8808d17 	ldw	r2,564(sp)
    25a4:	117fffc4 	addi	r5,r2,-1
    25a8:	100690fa 	slli	r3,r2,3
    25ac:	280490fa 	slli	r2,r5,3
    25b0:	d9408f15 	stw	r5,572(sp)
    25b4:	1ef9883a 	add	fp,r3,sp
    25b8:	16c5883a 	add	r2,r2,sp
    25bc:	d8809d15 	stw	r2,628(sp)
    25c0:	11803c04 	addi	r6,r2,240
    25c4:	e1c03c04 	addi	r7,fp,240
    25c8:	14003c17 	ldw	r16,240(r2)
    25cc:	e5003c17 	ldw	r20,240(fp)
    25d0:	d9809e15 	stw	r6,632(sp)
    25d4:	d9c09f15 	stw	r7,636(sp)
    25d8:	34400117 	ldw	r17,4(r6)
    25dc:	3d400117 	ldw	r21,4(r7)
    25e0:	8009883a 	mov	r4,r16
    25e4:	880b883a 	mov	r5,r17
    25e8:	a00d883a 	mov	r6,r20
    25ec:	a80f883a 	mov	r7,r21
    25f0:	0003d640 	call	3d64 <__adddf3>
    25f4:	100d883a 	mov	r6,r2
    25f8:	880b883a 	mov	r5,r17
    25fc:	8009883a 	mov	r4,r16
    2600:	180f883a 	mov	r7,r3
    2604:	1025883a 	mov	r18,r2
    2608:	1827883a 	mov	r19,r3
    260c:	0003ce40 	call	3ce4 <__subdf3>
    2610:	180f883a 	mov	r7,r3
    2614:	a80b883a 	mov	r5,r21
    2618:	a009883a 	mov	r4,r20
    261c:	100d883a 	mov	r6,r2
    2620:	0003d640 	call	3d64 <__adddf3>
    2624:	e0803c15 	stw	r2,240(fp)
    2628:	da809f17 	ldw	r10,636(sp)
    262c:	50c00115 	stw	r3,4(r10)
    2630:	d8c09d17 	ldw	r3,628(sp)
    2634:	d8808f17 	ldw	r2,572(sp)
    2638:	1c803c15 	stw	r18,240(r3)
    263c:	d9009e17 	ldw	r4,632(sp)
    2640:	00c00044 	movi	r3,1
    2644:	24c00115 	stw	r19,4(r4)
    2648:	d9408f17 	ldw	r5,572(sp)
    264c:	28ffd51e 	bne	r5,r3,25a4 <__kernel_rem_pio2+0xb40>
    2650:	dc008d17 	ldw	r16,564(sp)
    2654:	0011883a 	mov	r8,zero
    2658:	1825883a 	mov	r18,r3
    265c:	800490fa 	slli	r2,r16,3
    2660:	0013883a 	mov	r9,zero
    2664:	16e3883a 	add	r17,r2,sp
    2668:	88803c17 	ldw	r2,240(r17)
    266c:	88c03d17 	ldw	r3,244(r17)
    2670:	480b883a 	mov	r5,r9
    2674:	4009883a 	mov	r4,r8
    2678:	180f883a 	mov	r7,r3
    267c:	100d883a 	mov	r6,r2
    2680:	0003d640 	call	3d64 <__adddf3>
    2684:	843fffc4 	addi	r16,r16,-1
    2688:	8c7ffe04 	addi	r17,r17,-8
    268c:	1011883a 	mov	r8,r2
    2690:	1813883a 	mov	r9,r3
    2694:	84bff41e 	bne	r16,r18,2668 <__kernel_rem_pio2+0xc04>
    2698:	d9809217 	ldw	r6,584(sp)
    269c:	30007a1e 	bne	r6,zero,2888 <__kernel_rem_pio2+0xe24>
    26a0:	d9c09717 	ldw	r7,604(sp)
    26a4:	d8803c17 	ldw	r2,240(sp)
    26a8:	d9003e17 	ldw	r4,248(sp)
    26ac:	3a400515 	stw	r9,20(r7)
    26b0:	d8c03d17 	ldw	r3,244(sp)
    26b4:	d9403f17 	ldw	r5,252(sp)
    26b8:	3a000415 	stw	r8,16(r7)
    26bc:	38c00115 	stw	r3,4(r7)
    26c0:	39400315 	stw	r5,12(r7)
    26c4:	38800015 	stw	r2,0(r7)
    26c8:	39000215 	stw	r4,8(r7)
    26cc:	003f2906 	br	2374 <__kernel_rem_pio2+0x910>
    26d0:	183f281e 	bne	r3,zero,2374 <__kernel_rem_pio2+0x910>
    26d4:	d9408d17 	ldw	r5,564(sp)
    26d8:	28008016 	blt	r5,zero,28dc <__kernel_rem_pio2+0xe78>
    26dc:	dc008d17 	ldw	r16,564(sp)
    26e0:	000d883a 	mov	r6,zero
    26e4:	000f883a 	mov	r7,zero
    26e8:	800490fa 	slli	r2,r16,3
    26ec:	04bfffc4 	movi	r18,-1
    26f0:	16e3883a 	add	r17,r2,sp
    26f4:	88803c17 	ldw	r2,240(r17)
    26f8:	88c03d17 	ldw	r3,244(r17)
    26fc:	380b883a 	mov	r5,r7
    2700:	3009883a 	mov	r4,r6
    2704:	180f883a 	mov	r7,r3
    2708:	100d883a 	mov	r6,r2
    270c:	0003d640 	call	3d64 <__adddf3>
    2710:	843fffc4 	addi	r16,r16,-1
    2714:	8c7ffe04 	addi	r17,r17,-8
    2718:	100d883a 	mov	r6,r2
    271c:	180f883a 	mov	r7,r3
    2720:	84bff41e 	bne	r16,r18,26f4 <__kernel_rem_pio2+0xc90>
    2724:	da809217 	ldw	r10,584(sp)
    2728:	50000226 	beq	r10,zero,2734 <__kernel_rem_pio2+0xcd0>
    272c:	38e0003c 	xorhi	r3,r7,32768
    2730:	180f883a 	mov	r7,r3
    2734:	d8809717 	ldw	r2,604(sp)
    2738:	11c00115 	stw	r7,4(r2)
    273c:	11800015 	stw	r6,0(r2)
    2740:	003f0c06 	br	2374 <__kernel_rem_pio2+0x910>
    2744:	d8008c15 	stw	zero,560(sp)
    2748:	003ce406 	br	1adc <__kernel_rem_pio2+0x78>
    274c:	d9c09317 	ldw	r7,588(sp)
    2750:	880b883a 	mov	r5,r17
    2754:	8009883a 	mov	r4,r16
    2758:	01cdc83a 	sub	r6,zero,r7
    275c:	0002e3c0 	call	2e3c <scalbn>
    2760:	0011883a 	mov	r8,zero
    2764:	02505c34 	movhi	r9,16752
    2768:	480f883a 	mov	r7,r9
    276c:	1009883a 	mov	r4,r2
    2770:	180b883a 	mov	r5,r3
    2774:	400d883a 	mov	r6,r8
    2778:	102d883a 	mov	r22,r2
    277c:	182f883a 	mov	r23,r3
    2780:	00045040 	call	4504 <__gedf2>
    2784:	10003716 	blt	r2,zero,2864 <__kernel_rem_pio2+0xe00>
    2788:	0005883a 	mov	r2,zero
    278c:	00cf9c34 	movhi	r3,15984
    2790:	180f883a 	mov	r7,r3
    2794:	100d883a 	mov	r6,r2
    2798:	b009883a 	mov	r4,r22
    279c:	b80b883a 	mov	r5,r23
    27a0:	0003dd80 	call	3dd8 <__muldf3>
    27a4:	180b883a 	mov	r5,r3
    27a8:	1009883a 	mov	r4,r2
    27ac:	00046840 	call	4684 <__fixdfsi>
    27b0:	1009883a 	mov	r4,r2
    27b4:	000458c0 	call	458c <__floatsidf>
    27b8:	da808d17 	ldw	r10,564(sp)
    27bc:	1023883a 	mov	r17,r2
    27c0:	1825883a 	mov	r18,r3
    27c4:	0005883a 	mov	r2,zero
    27c8:	00f05c34 	movhi	r3,49520
    27cc:	180f883a 	mov	r7,r3
    27d0:	8809883a 	mov	r4,r17
    27d4:	900b883a 	mov	r5,r18
    27d8:	100d883a 	mov	r6,r2
    27dc:	52ab883a 	add	r21,r10,r10
    27e0:	0003dd80 	call	3dd8 <__muldf3>
    27e4:	180f883a 	mov	r7,r3
    27e8:	b80b883a 	mov	r5,r23
    27ec:	100d883a 	mov	r6,r2
    27f0:	b009883a 	mov	r4,r22
    27f4:	0003d640 	call	3d64 <__adddf3>
    27f8:	100d883a 	mov	r6,r2
    27fc:	d8808d17 	ldw	r2,564(sp)
    2800:	180b883a 	mov	r5,r3
    2804:	3009883a 	mov	r4,r6
    2808:	10800044 	addi	r2,r2,1
    280c:	ad6b883a 	add	r21,r21,r21
    2810:	d8808d15 	stw	r2,564(sp)
    2814:	00046840 	call	4684 <__fixdfsi>
    2818:	d8c08d17 	ldw	r3,564(sp)
    281c:	aeeb883a 	add	r21,r21,sp
    2820:	8809883a 	mov	r4,r17
    2824:	900b883a 	mov	r5,r18
    2828:	a8800015 	stw	r2,0(r21)
    282c:	18e1883a 	add	r16,r3,r3
    2830:	00046840 	call	4684 <__fixdfsi>
    2834:	d9009317 	ldw	r4,588(sp)
    2838:	8421883a 	add	r16,r16,r16
    283c:	86e1883a 	add	r16,r16,sp
    2840:	21000604 	addi	r4,r4,24
    2844:	d9009315 	stw	r4,588(sp)
    2848:	80800015 	stw	r2,0(r16)
    284c:	003e3a06 	br	2138 <__kernel_rem_pio2+0x6d4>
    2850:	4009883a 	mov	r4,r8
    2854:	4960003c 	xorhi	r5,r9,32768
    2858:	003ea406 	br	22ec <__kernel_rem_pio2+0x888>
    285c:	d9808d15 	stw	r6,564(sp)
    2860:	003e3506 	br	2138 <__kernel_rem_pio2+0x6d4>
    2864:	d9408d17 	ldw	r5,564(sp)
    2868:	b009883a 	mov	r4,r22
    286c:	2961883a 	add	r16,r5,r5
    2870:	8421883a 	add	r16,r16,r16
    2874:	b80b883a 	mov	r5,r23
    2878:	86e1883a 	add	r16,r16,sp
    287c:	00046840 	call	4684 <__fixdfsi>
    2880:	80800015 	stw	r2,0(r16)
    2884:	003e2c06 	br	2138 <__kernel_rem_pio2+0x6d4>
    2888:	d8c03d17 	ldw	r3,244(sp)
    288c:	d9403f17 	ldw	r5,252(sp)
    2890:	da809717 	ldw	r10,604(sp)
    2894:	d8803c17 	ldw	r2,240(sp)
    2898:	d9003e17 	ldw	r4,248(sp)
    289c:	49e0003c 	xorhi	r7,r9,32768
    28a0:	51c00515 	stw	r7,20(r10)
    28a4:	19a0003c 	xorhi	r6,r3,32768
    28a8:	29e0003c 	xorhi	r7,r5,32768
    28ac:	51800115 	stw	r6,4(r10)
    28b0:	51c00315 	stw	r7,12(r10)
    28b4:	50800015 	stw	r2,0(r10)
    28b8:	51000215 	stw	r4,8(r10)
    28bc:	52000415 	stw	r8,16(r10)
    28c0:	003eac06 	br	2374 <__kernel_rem_pio2+0x910>
    28c4:	0011883a 	mov	r8,zero
    28c8:	0013883a 	mov	r9,zero
    28cc:	003e8306 	br	22dc <__kernel_rem_pio2+0x878>
    28d0:	0011883a 	mov	r8,zero
    28d4:	0013883a 	mov	r9,zero
    28d8:	003f6f06 	br	2698 <__kernel_rem_pio2+0xc34>
    28dc:	000d883a 	mov	r6,zero
    28e0:	000f883a 	mov	r7,zero
    28e4:	003f8f06 	br	2724 <__kernel_rem_pio2+0xcc0>

000028e8 <__kernel_sin>:
    28e8:	00a00034 	movhi	r2,32768
    28ec:	10bfffc4 	addi	r2,r2,-1
    28f0:	deffef04 	addi	sp,sp,-68
    28f4:	1144703a 	and	r2,r2,r5
    28f8:	00cf9034 	movhi	r3,15936
    28fc:	18ffffc4 	addi	r3,r3,-1
    2900:	dd400d15 	stw	r21,52(sp)
    2904:	dd000c15 	stw	r20,48(sp)
    2908:	dfc01015 	stw	ra,64(sp)
    290c:	ddc00f15 	stw	r23,60(sp)
    2910:	dd800e15 	stw	r22,56(sp)
    2914:	dcc00b15 	stw	r19,44(sp)
    2918:	dc800a15 	stw	r18,40(sp)
    291c:	dc400915 	stw	r17,36(sp)
    2920:	dc000815 	stw	r16,32(sp)
    2924:	2029883a 	mov	r20,r4
    2928:	282b883a 	mov	r21,r5
    292c:	d9800415 	stw	r6,16(sp)
    2930:	d9c00515 	stw	r7,20(sp)
    2934:	18800216 	blt	r3,r2,2940 <__kernel_sin+0x58>
    2938:	00046840 	call	4684 <__fixdfsi>
    293c:	10008826 	beq	r2,zero,2b60 <__kernel_sin+0x278>
    2940:	a009883a 	mov	r4,r20
    2944:	a80b883a 	mov	r5,r21
    2948:	a00d883a 	mov	r6,r20
    294c:	a80f883a 	mov	r7,r21
    2950:	0003dd80 	call	3dd8 <__muldf3>
    2954:	102d883a 	mov	r22,r2
    2958:	a009883a 	mov	r4,r20
    295c:	a80b883a 	mov	r5,r21
    2960:	b00d883a 	mov	r6,r22
    2964:	180f883a 	mov	r7,r3
    2968:	182f883a 	mov	r23,r3
    296c:	d8800215 	stw	r2,8(sp)
    2970:	d8c00315 	stw	r3,12(sp)
    2974:	0003dd80 	call	3dd8 <__muldf3>
    2978:	d9000217 	ldw	r4,8(sp)
    297c:	0216b434 	movhi	r8,23248
    2980:	42355f04 	addi	r8,r8,-10884
    2984:	024f79b4 	movhi	r9,15846
    2988:	4a764e84 	addi	r9,r9,-9926
    298c:	480f883a 	mov	r7,r9
    2990:	400d883a 	mov	r6,r8
    2994:	b80b883a 	mov	r5,r23
    2998:	d8800615 	stw	r2,24(sp)
    299c:	d8c00715 	stw	r3,28(sp)
    29a0:	0003dd80 	call	3dd8 <__muldf3>
    29a4:	02228b34 	movhi	r8,35372
    29a8:	42273ac4 	addi	r8,r8,-25365
    29ac:	024f96f4 	movhi	r9,15963
    29b0:	4a797984 	addi	r9,r9,-6682
    29b4:	480f883a 	mov	r7,r9
    29b8:	400d883a 	mov	r6,r8
    29bc:	180b883a 	mov	r5,r3
    29c0:	1009883a 	mov	r4,r2
    29c4:	0003ce40 	call	3ce4 <__subdf3>
    29c8:	d9000217 	ldw	r4,8(sp)
    29cc:	180f883a 	mov	r7,r3
    29d0:	b80b883a 	mov	r5,r23
    29d4:	100d883a 	mov	r6,r2
    29d8:	0003dd80 	call	3dd8 <__muldf3>
    29dc:	0215ecb4 	movhi	r8,22450
    29e0:	423f9f44 	addi	r8,r8,-387
    29e4:	024fb1f4 	movhi	r9,16071
    29e8:	4a4778c4 	addi	r9,r9,7651
    29ec:	480f883a 	mov	r7,r9
    29f0:	400d883a 	mov	r6,r8
    29f4:	180b883a 	mov	r5,r3
    29f8:	1009883a 	mov	r4,r2
    29fc:	0003d640 	call	3d64 <__adddf3>
    2a00:	d9000217 	ldw	r4,8(sp)
    2a04:	180f883a 	mov	r7,r3
    2a08:	b80b883a 	mov	r5,r23
    2a0c:	100d883a 	mov	r6,r2
    2a10:	0003dd80 	call	3dd8 <__muldf3>
    2a14:	02067074 	movhi	r8,6593
    2a18:	42187544 	addi	r8,r8,25045
    2a1c:	024fcab4 	movhi	r9,16170
    2a20:	4a406804 	addi	r9,r9,416
    2a24:	480f883a 	mov	r7,r9
    2a28:	400d883a 	mov	r6,r8
    2a2c:	180b883a 	mov	r5,r3
    2a30:	1009883a 	mov	r4,r2
    2a34:	0003ce40 	call	3ce4 <__subdf3>
    2a38:	d9000217 	ldw	r4,8(sp)
    2a3c:	180f883a 	mov	r7,r3
    2a40:	b80b883a 	mov	r5,r23
    2a44:	100d883a 	mov	r6,r2
    2a48:	0003dd80 	call	3dd8 <__muldf3>
    2a4c:	02044474 	movhi	r8,4369
    2a50:	423e2984 	addi	r8,r8,-1882
    2a54:	024fe074 	movhi	r9,16257
    2a58:	4a444444 	addi	r9,r9,4369
    2a5c:	180b883a 	mov	r5,r3
    2a60:	480f883a 	mov	r7,r9
    2a64:	1009883a 	mov	r4,r2
    2a68:	400d883a 	mov	r6,r8
    2a6c:	0003d640 	call	3d64 <__adddf3>
    2a70:	1021883a 	mov	r16,r2
    2a74:	d8800617 	ldw	r2,24(sp)
    2a78:	1823883a 	mov	r17,r3
    2a7c:	d8800015 	stw	r2,0(sp)
    2a80:	d8800717 	ldw	r2,28(sp)
    2a84:	d8800115 	stw	r2,4(sp)
    2a88:	d8801117 	ldw	r2,68(sp)
    2a8c:	10004126 	beq	r2,zero,2b94 <__kernel_sin+0x2ac>
    2a90:	d9000417 	ldw	r4,16(sp)
    2a94:	d9400517 	ldw	r5,20(sp)
    2a98:	0005883a 	mov	r2,zero
    2a9c:	00cff834 	movhi	r3,16352
    2aa0:	180f883a 	mov	r7,r3
    2aa4:	100d883a 	mov	r6,r2
    2aa8:	0003dd80 	call	3dd8 <__muldf3>
    2aac:	d9000017 	ldw	r4,0(sp)
    2ab0:	d9400717 	ldw	r5,28(sp)
    2ab4:	800d883a 	mov	r6,r16
    2ab8:	880f883a 	mov	r7,r17
    2abc:	1021883a 	mov	r16,r2
    2ac0:	1823883a 	mov	r17,r3
    2ac4:	0003dd80 	call	3dd8 <__muldf3>
    2ac8:	180f883a 	mov	r7,r3
    2acc:	880b883a 	mov	r5,r17
    2ad0:	8009883a 	mov	r4,r16
    2ad4:	100d883a 	mov	r6,r2
    2ad8:	0003ce40 	call	3ce4 <__subdf3>
    2adc:	d9000217 	ldw	r4,8(sp)
    2ae0:	b80b883a 	mov	r5,r23
    2ae4:	180f883a 	mov	r7,r3
    2ae8:	100d883a 	mov	r6,r2
    2aec:	0003dd80 	call	3dd8 <__muldf3>
    2af0:	d9c00517 	ldw	r7,20(sp)
    2af4:	d9800417 	ldw	r6,16(sp)
    2af8:	180b883a 	mov	r5,r3
    2afc:	1009883a 	mov	r4,r2
    2b00:	0003ce40 	call	3ce4 <__subdf3>
    2b04:	d9000017 	ldw	r4,0(sp)
    2b08:	d9400717 	ldw	r5,28(sp)
    2b0c:	02155574 	movhi	r8,21845
    2b10:	42155244 	addi	r8,r8,21833
    2b14:	024ff174 	movhi	r9,16325
    2b18:	4a555544 	addi	r9,r9,21845
    2b1c:	480f883a 	mov	r7,r9
    2b20:	400d883a 	mov	r6,r8
    2b24:	1021883a 	mov	r16,r2
    2b28:	1823883a 	mov	r17,r3
    2b2c:	0003dd80 	call	3dd8 <__muldf3>
    2b30:	180f883a 	mov	r7,r3
    2b34:	880b883a 	mov	r5,r17
    2b38:	8009883a 	mov	r4,r16
    2b3c:	100d883a 	mov	r6,r2
    2b40:	0003d640 	call	3d64 <__adddf3>
    2b44:	180f883a 	mov	r7,r3
    2b48:	a80b883a 	mov	r5,r21
    2b4c:	a009883a 	mov	r4,r20
    2b50:	100d883a 	mov	r6,r2
    2b54:	0003ce40 	call	3ce4 <__subdf3>
    2b58:	1029883a 	mov	r20,r2
    2b5c:	182b883a 	mov	r21,r3
    2b60:	a005883a 	mov	r2,r20
    2b64:	a807883a 	mov	r3,r21
    2b68:	dfc01017 	ldw	ra,64(sp)
    2b6c:	ddc00f17 	ldw	r23,60(sp)
    2b70:	dd800e17 	ldw	r22,56(sp)
    2b74:	dd400d17 	ldw	r21,52(sp)
    2b78:	dd000c17 	ldw	r20,48(sp)
    2b7c:	dcc00b17 	ldw	r19,44(sp)
    2b80:	dc800a17 	ldw	r18,40(sp)
    2b84:	dc400917 	ldw	r17,36(sp)
    2b88:	dc000817 	ldw	r16,32(sp)
    2b8c:	dec01104 	addi	sp,sp,68
    2b90:	f800283a 	ret
    2b94:	d9000217 	ldw	r4,8(sp)
    2b98:	b80b883a 	mov	r5,r23
    2b9c:	800d883a 	mov	r6,r16
    2ba0:	180f883a 	mov	r7,r3
    2ba4:	0003dd80 	call	3dd8 <__muldf3>
    2ba8:	02155574 	movhi	r8,21845
    2bac:	42155244 	addi	r8,r8,21833
    2bb0:	024ff174 	movhi	r9,16325
    2bb4:	4a555544 	addi	r9,r9,21845
    2bb8:	480f883a 	mov	r7,r9
    2bbc:	400d883a 	mov	r6,r8
    2bc0:	180b883a 	mov	r5,r3
    2bc4:	1009883a 	mov	r4,r2
    2bc8:	0003ce40 	call	3ce4 <__subdf3>
    2bcc:	d9000017 	ldw	r4,0(sp)
    2bd0:	d9400717 	ldw	r5,28(sp)
    2bd4:	180f883a 	mov	r7,r3
    2bd8:	100d883a 	mov	r6,r2
    2bdc:	0003dd80 	call	3dd8 <__muldf3>
    2be0:	180f883a 	mov	r7,r3
    2be4:	a80b883a 	mov	r5,r21
    2be8:	a009883a 	mov	r4,r20
    2bec:	100d883a 	mov	r6,r2
    2bf0:	0003d640 	call	3d64 <__adddf3>
    2bf4:	1029883a 	mov	r20,r2
    2bf8:	182b883a 	mov	r21,r3
    2bfc:	003fd806 	br	2b60 <__kernel_sin+0x278>

00002c00 <fabs>:
    2c00:	01e00034 	movhi	r7,32768
    2c04:	39ffffc4 	addi	r7,r7,-1
    2c08:	394e703a 	and	r7,r7,r5
    2c0c:	2005883a 	mov	r2,r4
    2c10:	3807883a 	mov	r3,r7
    2c14:	f800283a 	ret

00002c18 <floor>:
    2c18:	2805d53a 	srai	r2,r5,20
    2c1c:	defff604 	addi	sp,sp,-40
    2c20:	dd800615 	stw	r22,24(sp)
    2c24:	10c1ffcc 	andi	r3,r2,2047
    2c28:	1dbf0044 	addi	r22,r3,-1023
    2c2c:	008004c4 	movi	r2,19
    2c30:	ddc00715 	stw	r23,28(sp)
    2c34:	dc800215 	stw	r18,8(sp)
    2c38:	dc400115 	stw	r17,4(sp)
    2c3c:	dc000015 	stw	r16,0(sp)
    2c40:	dfc00915 	stw	ra,36(sp)
    2c44:	df000815 	stw	fp,32(sp)
    2c48:	dd400515 	stw	r21,20(sp)
    2c4c:	dd000415 	stw	r20,16(sp)
    2c50:	dcc00315 	stw	r19,12(sp)
    2c54:	2021883a 	mov	r16,r4
    2c58:	2823883a 	mov	r17,r5
    2c5c:	282f883a 	mov	r23,r5
    2c60:	2025883a 	mov	r18,r4
    2c64:	15802916 	blt	r2,r22,2d0c <floor+0xf4>
    2c68:	b0004816 	blt	r22,zero,2d8c <floor+0x174>
    2c6c:	00800434 	movhi	r2,16
    2c70:	10bfffc4 	addi	r2,r2,-1
    2c74:	15b9d83a 	sra	fp,r2,r22
    2c78:	282f883a 	mov	r23,r5
    2c7c:	e144703a 	and	r2,fp,r5
    2c80:	1104b03a 	or	r2,r2,r4
    2c84:	10001326 	beq	r2,zero,2cd4 <floor+0xbc>
    2c88:	00a20034 	movhi	r2,34816
    2c8c:	109d6704 	addi	r2,r2,30108
    2c90:	00df8e34 	movhi	r3,32312
    2c94:	18f90f04 	addi	r3,r3,-7108
    2c98:	180f883a 	mov	r7,r3
    2c9c:	100d883a 	mov	r6,r2
    2ca0:	0003d640 	call	3d64 <__adddf3>
    2ca4:	180b883a 	mov	r5,r3
    2ca8:	000d883a 	mov	r6,zero
    2cac:	000f883a 	mov	r7,zero
    2cb0:	1009883a 	mov	r4,r2
    2cb4:	000447c0 	call	447c <__gtdf2>
    2cb8:	0080040e 	bge	zero,r2,2ccc <floor+0xb4>
    2cbc:	88004416 	blt	r17,zero,2dd0 <floor+0x1b8>
    2cc0:	0704303a 	nor	r2,zero,fp
    2cc4:	b8ae703a 	and	r23,r23,r2
    2cc8:	0025883a 	mov	r18,zero
    2ccc:	9021883a 	mov	r16,r18
    2cd0:	b823883a 	mov	r17,r23
    2cd4:	8005883a 	mov	r2,r16
    2cd8:	8807883a 	mov	r3,r17
    2cdc:	dfc00917 	ldw	ra,36(sp)
    2ce0:	df000817 	ldw	fp,32(sp)
    2ce4:	ddc00717 	ldw	r23,28(sp)
    2ce8:	dd800617 	ldw	r22,24(sp)
    2cec:	dd400517 	ldw	r21,20(sp)
    2cf0:	dd000417 	ldw	r20,16(sp)
    2cf4:	dcc00317 	ldw	r19,12(sp)
    2cf8:	dc800217 	ldw	r18,8(sp)
    2cfc:	dc400117 	ldw	r17,4(sp)
    2d00:	dc000017 	ldw	r16,0(sp)
    2d04:	dec00a04 	addi	sp,sp,40
    2d08:	f800283a 	ret
    2d0c:	00800cc4 	movi	r2,51
    2d10:	15801616 	blt	r2,r22,2d6c <floor+0x154>
    2d14:	18befb44 	addi	r2,r3,-1043
    2d18:	00ffffc4 	movi	r3,-1
    2d1c:	18b8d83a 	srl	fp,r3,r2
    2d20:	e104703a 	and	r2,fp,r4
    2d24:	103feb26 	beq	r2,zero,2cd4 <floor+0xbc>
    2d28:	00a20034 	movhi	r2,34816
    2d2c:	109d6704 	addi	r2,r2,30108
    2d30:	00df8e34 	movhi	r3,32312
    2d34:	18f90f04 	addi	r3,r3,-7108
    2d38:	180f883a 	mov	r7,r3
    2d3c:	100d883a 	mov	r6,r2
    2d40:	0003d640 	call	3d64 <__adddf3>
    2d44:	180b883a 	mov	r5,r3
    2d48:	000d883a 	mov	r6,zero
    2d4c:	000f883a 	mov	r7,zero
    2d50:	1009883a 	mov	r4,r2
    2d54:	000447c0 	call	447c <__gtdf2>
    2d58:	0080210e 	bge	zero,r2,2de0 <floor+0x1c8>
    2d5c:	88002216 	blt	r17,zero,2de8 <floor+0x1d0>
    2d60:	0704303a 	nor	r2,zero,fp
    2d64:	90a4703a 	and	r18,r18,r2
    2d68:	003fd806 	br	2ccc <floor+0xb4>
    2d6c:	00810004 	movi	r2,1024
    2d70:	b0bfd81e 	bne	r22,r2,2cd4 <floor+0xbc>
    2d74:	800d883a 	mov	r6,r16
    2d78:	280f883a 	mov	r7,r5
    2d7c:	0003d640 	call	3d64 <__adddf3>
    2d80:	1021883a 	mov	r16,r2
    2d84:	1823883a 	mov	r17,r3
    2d88:	003fd206 	br	2cd4 <floor+0xbc>
    2d8c:	00a20034 	movhi	r2,34816
    2d90:	109d6704 	addi	r2,r2,30108
    2d94:	00df8e34 	movhi	r3,32312
    2d98:	18f90f04 	addi	r3,r3,-7108
    2d9c:	180f883a 	mov	r7,r3
    2da0:	100d883a 	mov	r6,r2
    2da4:	0003d640 	call	3d64 <__adddf3>
    2da8:	180b883a 	mov	r5,r3
    2dac:	000d883a 	mov	r6,zero
    2db0:	000f883a 	mov	r7,zero
    2db4:	1009883a 	mov	r4,r2
    2db8:	000447c0 	call	447c <__gtdf2>
    2dbc:	00bfc30e 	bge	zero,r2,2ccc <floor+0xb4>
    2dc0:	88001416 	blt	r17,zero,2e14 <floor+0x1fc>
    2dc4:	002f883a 	mov	r23,zero
    2dc8:	0025883a 	mov	r18,zero
    2dcc:	003fbf06 	br	2ccc <floor+0xb4>
    2dd0:	00800434 	movhi	r2,16
    2dd4:	1585d83a 	sra	r2,r2,r22
    2dd8:	88af883a 	add	r23,r17,r2
    2ddc:	003fb806 	br	2cc0 <floor+0xa8>
    2de0:	882f883a 	mov	r23,r17
    2de4:	003fb906 	br	2ccc <floor+0xb4>
    2de8:	00800504 	movi	r2,20
    2dec:	b0801126 	beq	r22,r2,2e34 <floor+0x21c>
    2df0:	00c00d04 	movi	r3,52
    2df4:	1d87c83a 	sub	r3,r3,r22
    2df8:	00800044 	movi	r2,1
    2dfc:	10c4983a 	sll	r2,r2,r3
    2e00:	8085883a 	add	r2,r16,r2
    2e04:	1400012e 	bgeu	r2,r16,2e0c <floor+0x1f4>
    2e08:	8dc00044 	addi	r23,r17,1
    2e0c:	1025883a 	mov	r18,r2
    2e10:	003fd306 	br	2d60 <floor+0x148>
    2e14:	00a00034 	movhi	r2,32768
    2e18:	10bfffc4 	addi	r2,r2,-1
    2e1c:	8884703a 	and	r2,r17,r2
    2e20:	8084b03a 	or	r2,r16,r2
    2e24:	103fee26 	beq	r2,zero,2de0 <floor+0x1c8>
    2e28:	05effc34 	movhi	r23,49136
    2e2c:	0025883a 	mov	r18,zero
    2e30:	003fa606 	br	2ccc <floor+0xb4>
    2e34:	8dc00044 	addi	r23,r17,1
    2e38:	003fc906 	br	2d60 <floor+0x148>

00002e3c <scalbn>:
    2e3c:	2011883a 	mov	r8,r4
    2e40:	291ffc2c 	andhi	r4,r5,32752
    2e44:	2009d53a 	srai	r4,r4,20
    2e48:	defffd04 	addi	sp,sp,-12
    2e4c:	dc000015 	stw	r16,0(sp)
    2e50:	dfc00215 	stw	ra,8(sp)
    2e54:	dc400115 	stw	r17,4(sp)
    2e58:	2813883a 	mov	r9,r5
    2e5c:	2815883a 	mov	r10,r5
    2e60:	3021883a 	mov	r16,r6
    2e64:	2000281e 	bne	r4,zero,2f08 <scalbn+0xcc>
    2e68:	00a00034 	movhi	r2,32768
    2e6c:	10bfffc4 	addi	r2,r2,-1
    2e70:	2884703a 	and	r2,r5,r2
    2e74:	4084b03a 	or	r2,r8,r2
    2e78:	10001826 	beq	r2,zero,2edc <scalbn+0xa0>
    2e7c:	0005883a 	mov	r2,zero
    2e80:	00d0d434 	movhi	r3,17232
    2e84:	4009883a 	mov	r4,r8
    2e88:	100d883a 	mov	r6,r2
    2e8c:	180f883a 	mov	r7,r3
    2e90:	0003dd80 	call	3dd8 <__muldf3>
    2e94:	100b883a 	mov	r5,r2
    2e98:	1011883a 	mov	r8,r2
    2e9c:	00bffff4 	movhi	r2,65535
    2ea0:	108f2c04 	addi	r2,r2,15536
    2ea4:	180d883a 	mov	r6,r3
    2ea8:	1813883a 	mov	r9,r3
    2eac:	8080120e 	bge	r16,r2,2ef8 <scalbn+0xbc>
    2eb0:	00b0be74 	movhi	r2,49913
    2eb4:	10bcd644 	addi	r2,r2,-3239
    2eb8:	00c06974 	movhi	r3,421
    2ebc:	18db87c4 	addi	r3,r3,28191
    2ec0:	2809883a 	mov	r4,r5
    2ec4:	180f883a 	mov	r7,r3
    2ec8:	300b883a 	mov	r5,r6
    2ecc:	100d883a 	mov	r6,r2
    2ed0:	0003dd80 	call	3dd8 <__muldf3>
    2ed4:	1011883a 	mov	r8,r2
    2ed8:	1813883a 	mov	r9,r3
    2edc:	4005883a 	mov	r2,r8
    2ee0:	4807883a 	mov	r3,r9
    2ee4:	dfc00217 	ldw	ra,8(sp)
    2ee8:	dc400117 	ldw	r17,4(sp)
    2eec:	dc000017 	ldw	r16,0(sp)
    2ef0:	dec00304 	addi	sp,sp,12
    2ef4:	f800283a 	ret
    2ef8:	189ffc2c 	andhi	r2,r3,32752
    2efc:	1005d53a 	srai	r2,r2,20
    2f00:	1815883a 	mov	r10,r3
    2f04:	113ff284 	addi	r4,r2,-54
    2f08:	0081ffc4 	movi	r2,2047
    2f0c:	20801126 	beq	r4,r2,2f54 <scalbn+0x118>
    2f10:	2409883a 	add	r4,r4,r16
    2f14:	0081ff84 	movi	r2,2046
    2f18:	11001c16 	blt	r2,r4,2f8c <scalbn+0x150>
    2f1c:	0100290e 	bge	zero,r4,2fc4 <scalbn+0x188>
    2f20:	200a953a 	slli	r5,r4,20
    2f24:	01200434 	movhi	r4,32784
    2f28:	213fffc4 	addi	r4,r4,-1
    2f2c:	5108703a 	and	r4,r10,r4
    2f30:	2148b03a 	or	r4,r4,r5
    2f34:	2013883a 	mov	r9,r4
    2f38:	4005883a 	mov	r2,r8
    2f3c:	4807883a 	mov	r3,r9
    2f40:	dfc00217 	ldw	ra,8(sp)
    2f44:	dc400117 	ldw	r17,4(sp)
    2f48:	dc000017 	ldw	r16,0(sp)
    2f4c:	dec00304 	addi	sp,sp,12
    2f50:	f800283a 	ret
    2f54:	480f883a 	mov	r7,r9
    2f58:	4009883a 	mov	r4,r8
    2f5c:	480b883a 	mov	r5,r9
    2f60:	400d883a 	mov	r6,r8
    2f64:	0003d640 	call	3d64 <__adddf3>
    2f68:	1011883a 	mov	r8,r2
    2f6c:	1813883a 	mov	r9,r3
    2f70:	4005883a 	mov	r2,r8
    2f74:	4807883a 	mov	r3,r9
    2f78:	dfc00217 	ldw	ra,8(sp)
    2f7c:	dc400117 	ldw	r17,4(sp)
    2f80:	dc000017 	ldw	r16,0(sp)
    2f84:	dec00304 	addi	sp,sp,12
    2f88:	f800283a 	ret
    2f8c:	04220034 	movhi	r16,34816
    2f90:	841d6704 	addi	r16,r16,30108
    2f94:	045f8e34 	movhi	r17,32312
    2f98:	8c790f04 	addi	r17,r17,-7108
    2f9c:	480f883a 	mov	r7,r9
    2fa0:	400d883a 	mov	r6,r8
    2fa4:	8009883a 	mov	r4,r16
    2fa8:	880b883a 	mov	r5,r17
    2fac:	000301c0 	call	301c <copysign>
    2fb0:	180b883a 	mov	r5,r3
    2fb4:	800d883a 	mov	r6,r16
    2fb8:	880f883a 	mov	r7,r17
    2fbc:	1009883a 	mov	r4,r2
    2fc0:	003fc306 	br	2ed0 <scalbn+0x94>
    2fc4:	00bff284 	movi	r2,-54
    2fc8:	11000716 	blt	r2,r4,2fe8 <scalbn+0x1ac>
    2fcc:	00b0d414 	movui	r2,50000
    2fd0:	143fee16 	blt	r2,r16,2f8c <scalbn+0x150>
    2fd4:	0430be74 	movhi	r16,49913
    2fd8:	843cd644 	addi	r16,r16,-3239
    2fdc:	04406974 	movhi	r17,421
    2fe0:	8c5b87c4 	addi	r17,r17,28191
    2fe4:	003fed06 	br	2f9c <scalbn+0x160>
    2fe8:	21000d84 	addi	r4,r4,54
    2fec:	2008953a 	slli	r4,r4,20
    2ff0:	01e00434 	movhi	r7,32784
    2ff4:	39ffffc4 	addi	r7,r7,-1
    2ff8:	51ce703a 	and	r7,r10,r7
    2ffc:	390eb03a 	or	r7,r7,r4
    3000:	024f2434 	movhi	r9,15504
    3004:	4009883a 	mov	r4,r8
    3008:	0011883a 	mov	r8,zero
    300c:	380b883a 	mov	r5,r7
    3010:	400d883a 	mov	r6,r8
    3014:	480f883a 	mov	r7,r9
    3018:	003fad06 	br	2ed0 <scalbn+0x94>

0000301c <copysign>:
    301c:	3813883a 	mov	r9,r7
    3020:	01e00034 	movhi	r7,32768
    3024:	39ffffc4 	addi	r7,r7,-1
    3028:	394e703a 	and	r7,r7,r5
    302c:	4aa0002c 	andhi	r10,r9,32768
    3030:	3a8eb03a 	or	r7,r7,r10
    3034:	2005883a 	mov	r2,r4
    3038:	3807883a 	mov	r3,r7
    303c:	f800283a 	ret

00003040 <__muldi3>:
    3040:	defff204 	addi	sp,sp,-56
    3044:	df000c15 	stw	fp,48(sp)
    3048:	3038d43a 	srli	fp,r6,16
    304c:	dd000815 	stw	r20,32(sp)
    3050:	dc400515 	stw	r17,20(sp)
    3054:	2028d43a 	srli	r20,r4,16
    3058:	247fffcc 	andi	r17,r4,65535
    305c:	dc000415 	stw	r16,16(sp)
    3060:	343fffcc 	andi	r16,r6,65535
    3064:	dcc00715 	stw	r19,28(sp)
    3068:	d9000015 	stw	r4,0(sp)
    306c:	2827883a 	mov	r19,r5
    3070:	8809883a 	mov	r4,r17
    3074:	d9400115 	stw	r5,4(sp)
    3078:	800b883a 	mov	r5,r16
    307c:	d9800215 	stw	r6,8(sp)
    3080:	dfc00d15 	stw	ra,52(sp)
    3084:	d9c00315 	stw	r7,12(sp)
    3088:	dd800a15 	stw	r22,40(sp)
    308c:	dd400915 	stw	r21,36(sp)
    3090:	302d883a 	mov	r22,r6
    3094:	ddc00b15 	stw	r23,44(sp)
    3098:	dc800615 	stw	r18,24(sp)
    309c:	00049540 	call	4954 <__mulsi3>
    30a0:	8809883a 	mov	r4,r17
    30a4:	e00b883a 	mov	r5,fp
    30a8:	102b883a 	mov	r21,r2
    30ac:	00049540 	call	4954 <__mulsi3>
    30b0:	800b883a 	mov	r5,r16
    30b4:	a009883a 	mov	r4,r20
    30b8:	1023883a 	mov	r17,r2
    30bc:	00049540 	call	4954 <__mulsi3>
    30c0:	a009883a 	mov	r4,r20
    30c4:	e00b883a 	mov	r5,fp
    30c8:	1021883a 	mov	r16,r2
    30cc:	00049540 	call	4954 <__mulsi3>
    30d0:	a8ffffcc 	andi	r3,r21,65535
    30d4:	a82ad43a 	srli	r21,r21,16
    30d8:	8c23883a 	add	r17,r17,r16
    30dc:	1011883a 	mov	r8,r2
    30e0:	ac6b883a 	add	r21,r21,r17
    30e4:	a804943a 	slli	r2,r21,16
    30e8:	b009883a 	mov	r4,r22
    30ec:	980b883a 	mov	r5,r19
    30f0:	10c7883a 	add	r3,r2,r3
    30f4:	a812d43a 	srli	r9,r21,16
    30f8:	180d883a 	mov	r6,r3
    30fc:	ac00022e 	bgeu	r21,r16,3108 <__muldi3+0xc8>
    3100:	00800074 	movhi	r2,1
    3104:	4091883a 	add	r8,r8,r2
    3108:	4267883a 	add	r19,r8,r9
    310c:	302d883a 	mov	r22,r6
    3110:	00049540 	call	4954 <__mulsi3>
    3114:	d9400317 	ldw	r5,12(sp)
    3118:	d9000017 	ldw	r4,0(sp)
    311c:	1023883a 	mov	r17,r2
    3120:	00049540 	call	4954 <__mulsi3>
    3124:	14cb883a 	add	r5,r2,r19
    3128:	894b883a 	add	r5,r17,r5
    312c:	b005883a 	mov	r2,r22
    3130:	2807883a 	mov	r3,r5
    3134:	dfc00d17 	ldw	ra,52(sp)
    3138:	df000c17 	ldw	fp,48(sp)
    313c:	ddc00b17 	ldw	r23,44(sp)
    3140:	dd800a17 	ldw	r22,40(sp)
    3144:	dd400917 	ldw	r21,36(sp)
    3148:	dd000817 	ldw	r20,32(sp)
    314c:	dcc00717 	ldw	r19,28(sp)
    3150:	dc800617 	ldw	r18,24(sp)
    3154:	dc400517 	ldw	r17,20(sp)
    3158:	dc000417 	ldw	r16,16(sp)
    315c:	dec00e04 	addi	sp,sp,56
    3160:	f800283a 	ret

00003164 <_fpadd_parts>:
    3164:	21c00017 	ldw	r7,0(r4)
    3168:	02000044 	movi	r8,1
    316c:	41c0332e 	bgeu	r8,r7,323c <_fpadd_parts+0xd8>
    3170:	28800017 	ldw	r2,0(r5)
    3174:	4080462e 	bgeu	r8,r2,3290 <_fpadd_parts+0x12c>
    3178:	00c00104 	movi	r3,4
    317c:	38c06b26 	beq	r7,r3,332c <_fpadd_parts+0x1c8>
    3180:	10c04326 	beq	r2,r3,3290 <_fpadd_parts+0x12c>
    3184:	00c00084 	movi	r3,2
    3188:	10c02e26 	beq	r2,r3,3244 <_fpadd_parts+0xe0>
    318c:	38c04026 	beq	r7,r3,3290 <_fpadd_parts+0x12c>
    3190:	22800217 	ldw	r10,8(r4)
    3194:	28c00217 	ldw	r3,8(r5)
    3198:	23000317 	ldw	r12,12(r4)
    319c:	2a400317 	ldw	r9,12(r5)
    31a0:	50cfc83a 	sub	r7,r10,r3
    31a4:	3817883a 	mov	r11,r7
    31a8:	38004f16 	blt	r7,zero,32e8 <_fpadd_parts+0x184>
    31ac:	008007c4 	movi	r2,31
    31b0:	11c03316 	blt	r2,r7,3280 <_fpadd_parts+0x11c>
    31b4:	02c0540e 	bge	zero,r11,3308 <_fpadd_parts+0x1a4>
    31b8:	41c4983a 	sll	r2,r8,r7
    31bc:	49c6d83a 	srl	r3,r9,r7
    31c0:	10bfffc4 	addi	r2,r2,-1
    31c4:	4884703a 	and	r2,r9,r2
    31c8:	1004c03a 	cmpne	r2,r2,zero
    31cc:	1892b03a 	or	r9,r3,r2
    31d0:	20c00117 	ldw	r3,4(r4)
    31d4:	28800117 	ldw	r2,4(r5)
    31d8:	18803c26 	beq	r3,r2,32cc <_fpadd_parts+0x168>
    31dc:	18002f26 	beq	r3,zero,329c <_fpadd_parts+0x138>
    31e0:	4b05c83a 	sub	r2,r9,r12
    31e4:	10004216 	blt	r2,zero,32f0 <_fpadd_parts+0x18c>
    31e8:	32800215 	stw	r10,8(r6)
    31ec:	30800315 	stw	r2,12(r6)
    31f0:	30000115 	stw	zero,4(r6)
    31f4:	31000317 	ldw	r4,12(r6)
    31f8:	01d00034 	movhi	r7,16384
    31fc:	39ffff84 	addi	r7,r7,-2
    3200:	20bfffc4 	addi	r2,r4,-1
    3204:	2007883a 	mov	r3,r4
    3208:	38800836 	bltu	r7,r2,322c <_fpadd_parts+0xc8>
    320c:	31400217 	ldw	r5,8(r6)
    3210:	18c9883a 	add	r4,r3,r3
    3214:	20bfffc4 	addi	r2,r4,-1
    3218:	297fffc4 	addi	r5,r5,-1
    321c:	2007883a 	mov	r3,r4
    3220:	38bffb2e 	bgeu	r7,r2,3210 <_fpadd_parts+0xac>
    3224:	31400215 	stw	r5,8(r6)
    3228:	31000315 	stw	r4,12(r6)
    322c:	008000c4 	movi	r2,3
    3230:	30800015 	stw	r2,0(r6)
    3234:	20001b16 	blt	r4,zero,32a4 <_fpadd_parts+0x140>
    3238:	3009883a 	mov	r4,r6
    323c:	2005883a 	mov	r2,r4
    3240:	f800283a 	ret
    3244:	38fffd1e 	bne	r7,r3,323c <_fpadd_parts+0xd8>
    3248:	31c00015 	stw	r7,0(r6)
    324c:	20800117 	ldw	r2,4(r4)
    3250:	30800115 	stw	r2,4(r6)
    3254:	20c00217 	ldw	r3,8(r4)
    3258:	30c00215 	stw	r3,8(r6)
    325c:	20800317 	ldw	r2,12(r4)
    3260:	30800315 	stw	r2,12(r6)
    3264:	20c00117 	ldw	r3,4(r4)
    3268:	28800117 	ldw	r2,4(r5)
    326c:	3009883a 	mov	r4,r6
    3270:	1886703a 	and	r3,r3,r2
    3274:	2005883a 	mov	r2,r4
    3278:	30c00115 	stw	r3,4(r6)
    327c:	f800283a 	ret
    3280:	1a801716 	blt	r3,r10,32e0 <_fpadd_parts+0x17c>
    3284:	1815883a 	mov	r10,r3
    3288:	0019883a 	mov	r12,zero
    328c:	003fd006 	br	31d0 <_fpadd_parts+0x6c>
    3290:	2809883a 	mov	r4,r5
    3294:	2005883a 	mov	r2,r4
    3298:	f800283a 	ret
    329c:	6245c83a 	sub	r2,r12,r9
    32a0:	003fd006 	br	31e4 <_fpadd_parts+0x80>
    32a4:	30800217 	ldw	r2,8(r6)
    32a8:	2006d07a 	srli	r3,r4,1
    32ac:	2100004c 	andi	r4,r4,1
    32b0:	10800044 	addi	r2,r2,1
    32b4:	1906b03a 	or	r3,r3,r4
    32b8:	3009883a 	mov	r4,r6
    32bc:	30800215 	stw	r2,8(r6)
    32c0:	2005883a 	mov	r2,r4
    32c4:	30c00315 	stw	r3,12(r6)
    32c8:	f800283a 	ret
    32cc:	6249883a 	add	r4,r12,r9
    32d0:	30c00115 	stw	r3,4(r6)
    32d4:	32800215 	stw	r10,8(r6)
    32d8:	31000315 	stw	r4,12(r6)
    32dc:	003fd306 	br	322c <_fpadd_parts+0xc8>
    32e0:	0013883a 	mov	r9,zero
    32e4:	003fba06 	br	31d0 <_fpadd_parts+0x6c>
    32e8:	01cfc83a 	sub	r7,zero,r7
    32ec:	003faf06 	br	31ac <_fpadd_parts+0x48>
    32f0:	0089c83a 	sub	r4,zero,r2
    32f4:	00800044 	movi	r2,1
    32f8:	30800115 	stw	r2,4(r6)
    32fc:	32800215 	stw	r10,8(r6)
    3300:	31000315 	stw	r4,12(r6)
    3304:	003fbb06 	br	31f4 <_fpadd_parts+0x90>
    3308:	583fb126 	beq	r11,zero,31d0 <_fpadd_parts+0x6c>
    330c:	41c4983a 	sll	r2,r8,r7
    3310:	61c6d83a 	srl	r3,r12,r7
    3314:	51d5883a 	add	r10,r10,r7
    3318:	10bfffc4 	addi	r2,r2,-1
    331c:	6084703a 	and	r2,r12,r2
    3320:	1004c03a 	cmpne	r2,r2,zero
    3324:	1898b03a 	or	r12,r3,r2
    3328:	003fa906 	br	31d0 <_fpadd_parts+0x6c>
    332c:	11ffc31e 	bne	r2,r7,323c <_fpadd_parts+0xd8>
    3330:	28c00117 	ldw	r3,4(r5)
    3334:	20800117 	ldw	r2,4(r4)
    3338:	10ffc026 	beq	r2,r3,323c <_fpadd_parts+0xd8>
    333c:	01000074 	movhi	r4,1
    3340:	2106db04 	addi	r4,r4,7020
    3344:	003fbd06 	br	323c <_fpadd_parts+0xd8>

00003348 <__subsf3>:
    3348:	deffef04 	addi	sp,sp,-68
    334c:	dcc00f15 	stw	r19,60(sp)
    3350:	dcc00204 	addi	r19,sp,8
    3354:	dc400e15 	stw	r17,56(sp)
    3358:	d9000015 	stw	r4,0(sp)
    335c:	d9400115 	stw	r5,4(sp)
    3360:	d809883a 	mov	r4,sp
    3364:	980b883a 	mov	r5,r19
    3368:	dc400604 	addi	r17,sp,24
    336c:	dfc01015 	stw	ra,64(sp)
    3370:	0004b6c0 	call	4b6c <__unpack_f>
    3374:	d9000104 	addi	r4,sp,4
    3378:	880b883a 	mov	r5,r17
    337c:	0004b6c0 	call	4b6c <__unpack_f>
    3380:	d8800717 	ldw	r2,28(sp)
    3384:	9809883a 	mov	r4,r19
    3388:	880b883a 	mov	r5,r17
    338c:	d9800a04 	addi	r6,sp,40
    3390:	1080005c 	xori	r2,r2,1
    3394:	d8800715 	stw	r2,28(sp)
    3398:	00031640 	call	3164 <_fpadd_parts>
    339c:	1009883a 	mov	r4,r2
    33a0:	0004a0c0 	call	4a0c <__pack_f>
    33a4:	dfc01017 	ldw	ra,64(sp)
    33a8:	dcc00f17 	ldw	r19,60(sp)
    33ac:	dc400e17 	ldw	r17,56(sp)
    33b0:	dec01104 	addi	sp,sp,68
    33b4:	f800283a 	ret

000033b8 <__addsf3>:
    33b8:	deffef04 	addi	sp,sp,-68
    33bc:	dcc00f15 	stw	r19,60(sp)
    33c0:	dcc00204 	addi	r19,sp,8
    33c4:	dc400e15 	stw	r17,56(sp)
    33c8:	d9000015 	stw	r4,0(sp)
    33cc:	d9400115 	stw	r5,4(sp)
    33d0:	d809883a 	mov	r4,sp
    33d4:	980b883a 	mov	r5,r19
    33d8:	dc400604 	addi	r17,sp,24
    33dc:	dfc01015 	stw	ra,64(sp)
    33e0:	0004b6c0 	call	4b6c <__unpack_f>
    33e4:	d9000104 	addi	r4,sp,4
    33e8:	880b883a 	mov	r5,r17
    33ec:	0004b6c0 	call	4b6c <__unpack_f>
    33f0:	d9800a04 	addi	r6,sp,40
    33f4:	9809883a 	mov	r4,r19
    33f8:	880b883a 	mov	r5,r17
    33fc:	00031640 	call	3164 <_fpadd_parts>
    3400:	1009883a 	mov	r4,r2
    3404:	0004a0c0 	call	4a0c <__pack_f>
    3408:	dfc01017 	ldw	ra,64(sp)
    340c:	dcc00f17 	ldw	r19,60(sp)
    3410:	dc400e17 	ldw	r17,56(sp)
    3414:	dec01104 	addi	sp,sp,68
    3418:	f800283a 	ret

0000341c <__mulsf3>:
    341c:	deffef04 	addi	sp,sp,-68
    3420:	dc400f15 	stw	r17,60(sp)
    3424:	dc400204 	addi	r17,sp,8
    3428:	dc000e15 	stw	r16,56(sp)
    342c:	d9000015 	stw	r4,0(sp)
    3430:	d9400115 	stw	r5,4(sp)
    3434:	d809883a 	mov	r4,sp
    3438:	880b883a 	mov	r5,r17
    343c:	dc000604 	addi	r16,sp,24
    3440:	dfc01015 	stw	ra,64(sp)
    3444:	0004b6c0 	call	4b6c <__unpack_f>
    3448:	d9000104 	addi	r4,sp,4
    344c:	800b883a 	mov	r5,r16
    3450:	0004b6c0 	call	4b6c <__unpack_f>
    3454:	d9000217 	ldw	r4,8(sp)
    3458:	00800044 	movi	r2,1
    345c:	01400104 	movi	r5,4
    3460:	1100142e 	bgeu	r2,r4,34b4 <__mulsf3+0x98>
    3464:	d8c00617 	ldw	r3,24(sp)
    3468:	10c0052e 	bgeu	r2,r3,3480 <__mulsf3+0x64>
    346c:	21400f26 	beq	r4,r5,34ac <__mulsf3+0x90>
    3470:	19405d26 	beq	r3,r5,35e8 <__mulsf3+0x1cc>
    3474:	00800084 	movi	r2,2
    3478:	20800e26 	beq	r4,r2,34b4 <__mulsf3+0x98>
    347c:	1880181e 	bne	r3,r2,34e0 <__mulsf3+0xc4>
    3480:	d8c00717 	ldw	r3,28(sp)
    3484:	d8800317 	ldw	r2,12(sp)
    3488:	8009883a 	mov	r4,r16
    348c:	10c4c03a 	cmpne	r2,r2,r3
    3490:	d8800715 	stw	r2,28(sp)
    3494:	0004a0c0 	call	4a0c <__pack_f>
    3498:	dfc01017 	ldw	ra,64(sp)
    349c:	dc400f17 	ldw	r17,60(sp)
    34a0:	dc000e17 	ldw	r16,56(sp)
    34a4:	dec01104 	addi	sp,sp,68
    34a8:	f800283a 	ret
    34ac:	00800084 	movi	r2,2
    34b0:	18804f26 	beq	r3,r2,35f0 <__mulsf3+0x1d4>
    34b4:	d8800317 	ldw	r2,12(sp)
    34b8:	d8c00717 	ldw	r3,28(sp)
    34bc:	8809883a 	mov	r4,r17
    34c0:	10c4c03a 	cmpne	r2,r2,r3
    34c4:	d8800315 	stw	r2,12(sp)
    34c8:	0004a0c0 	call	4a0c <__pack_f>
    34cc:	dfc01017 	ldw	ra,64(sp)
    34d0:	dc400f17 	ldw	r17,60(sp)
    34d4:	dc000e17 	ldw	r16,56(sp)
    34d8:	dec01104 	addi	sp,sp,68
    34dc:	f800283a 	ret
    34e0:	d8800517 	ldw	r2,20(sp)
    34e4:	da000917 	ldw	r8,36(sp)
    34e8:	0013883a 	mov	r9,zero
    34ec:	0007883a 	mov	r3,zero
    34f0:	480f883a 	mov	r7,r9
    34f4:	180b883a 	mov	r5,r3
    34f8:	400d883a 	mov	r6,r8
    34fc:	1009883a 	mov	r4,r2
    3500:	00030400 	call	3040 <__muldi3>
    3504:	da800417 	ldw	r10,16(sp)
    3508:	d9800817 	ldw	r6,32(sp)
    350c:	da400317 	ldw	r9,12(sp)
    3510:	52800084 	addi	r10,r10,2
    3514:	3295883a 	add	r10,r6,r10
    3518:	d9800717 	ldw	r6,28(sp)
    351c:	180b883a 	mov	r5,r3
    3520:	180f883a 	mov	r7,r3
    3524:	4992c03a 	cmpne	r9,r9,r6
    3528:	da400b15 	stw	r9,44(sp)
    352c:	1007883a 	mov	r3,r2
    3530:	da800c15 	stw	r10,48(sp)
    3534:	2800070e 	bge	r5,zero,3554 <__mulsf3+0x138>
    3538:	2880004c 	andi	r2,r5,1
    353c:	1005003a 	cmpeq	r2,r2,zero
    3540:	500d883a 	mov	r6,r10
    3544:	10001e26 	beq	r2,zero,35c0 <__mulsf3+0x1a4>
    3548:	380ed07a 	srli	r7,r7,1
    354c:	31800044 	addi	r6,r6,1
    3550:	d9800c15 	stw	r6,48(sp)
    3554:	01100034 	movhi	r4,16384
    3558:	213fffc4 	addi	r4,r4,-1
    355c:	21c00b36 	bltu	r4,r7,358c <__mulsf3+0x170>
    3560:	d8800c17 	ldw	r2,48(sp)
    3564:	00000206 	br	3570 <__mulsf3+0x154>
    3568:	18c7883a 	add	r3,r3,r3
    356c:	21c00636 	bltu	r4,r7,3588 <__mulsf3+0x16c>
    3570:	10bfffc4 	addi	r2,r2,-1
    3574:	39cf883a 	add	r7,r7,r7
    3578:	183ffb0e 	bge	r3,zero,3568 <__mulsf3+0x14c>
    357c:	39c00054 	ori	r7,r7,1
    3580:	18c7883a 	add	r3,r3,r3
    3584:	21fffa2e 	bgeu	r4,r7,3570 <__mulsf3+0x154>
    3588:	d8800c15 	stw	r2,48(sp)
    358c:	39001fcc 	andi	r4,r7,127
    3590:	00801004 	movi	r2,64
    3594:	20800d26 	beq	r4,r2,35cc <__mulsf3+0x1b0>
    3598:	008000c4 	movi	r2,3
    359c:	d9000a04 	addi	r4,sp,40
    35a0:	d9c00d15 	stw	r7,52(sp)
    35a4:	d8800a15 	stw	r2,40(sp)
    35a8:	0004a0c0 	call	4a0c <__pack_f>
    35ac:	dfc01017 	ldw	ra,64(sp)
    35b0:	dc400f17 	ldw	r17,60(sp)
    35b4:	dc000e17 	ldw	r16,56(sp)
    35b8:	dec01104 	addi	sp,sp,68
    35bc:	f800283a 	ret
    35c0:	1804d07a 	srli	r2,r3,1
    35c4:	10e00034 	orhi	r3,r2,32768
    35c8:	003fdf06 	br	3548 <__mulsf3+0x12c>
    35cc:	3880200c 	andi	r2,r7,128
    35d0:	103ff11e 	bne	r2,zero,3598 <__mulsf3+0x17c>
    35d4:	183ff026 	beq	r3,zero,3598 <__mulsf3+0x17c>
    35d8:	3907883a 	add	r3,r7,r4
    35dc:	00bfe004 	movi	r2,-128
    35e0:	188e703a 	and	r7,r3,r2
    35e4:	003fec06 	br	3598 <__mulsf3+0x17c>
    35e8:	00800084 	movi	r2,2
    35ec:	20bfa41e 	bne	r4,r2,3480 <__mulsf3+0x64>
    35f0:	01000074 	movhi	r4,1
    35f4:	2106db04 	addi	r4,r4,7020
    35f8:	003fb306 	br	34c8 <__mulsf3+0xac>

000035fc <__divsf3>:
    35fc:	defff304 	addi	sp,sp,-52
    3600:	dc400b15 	stw	r17,44(sp)
    3604:	dc400204 	addi	r17,sp,8
    3608:	dc000a15 	stw	r16,40(sp)
    360c:	d9000015 	stw	r4,0(sp)
    3610:	d9400115 	stw	r5,4(sp)
    3614:	d809883a 	mov	r4,sp
    3618:	880b883a 	mov	r5,r17
    361c:	dc000604 	addi	r16,sp,24
    3620:	dfc00c15 	stw	ra,48(sp)
    3624:	0004b6c0 	call	4b6c <__unpack_f>
    3628:	d9000104 	addi	r4,sp,4
    362c:	800b883a 	mov	r5,r16
    3630:	0004b6c0 	call	4b6c <__unpack_f>
    3634:	d9000217 	ldw	r4,8(sp)
    3638:	00800044 	movi	r2,1
    363c:	01800104 	movi	r6,4
    3640:	11000a2e 	bgeu	r2,r4,366c <__divsf3+0x70>
    3644:	d9400617 	ldw	r5,24(sp)
    3648:	1140432e 	bgeu	r2,r5,3758 <__divsf3+0x15c>
    364c:	d8800317 	ldw	r2,12(sp)
    3650:	d8c00717 	ldw	r3,28(sp)
    3654:	10c4f03a 	xor	r2,r2,r3
    3658:	d8800315 	stw	r2,12(sp)
    365c:	21800226 	beq	r4,r6,3668 <__divsf3+0x6c>
    3660:	00800084 	movi	r2,2
    3664:	2080101e 	bne	r4,r2,36a8 <__divsf3+0xac>
    3668:	29000726 	beq	r5,r4,3688 <__divsf3+0x8c>
    366c:	8809883a 	mov	r4,r17
    3670:	0004a0c0 	call	4a0c <__pack_f>
    3674:	dfc00c17 	ldw	ra,48(sp)
    3678:	dc400b17 	ldw	r17,44(sp)
    367c:	dc000a17 	ldw	r16,40(sp)
    3680:	dec00d04 	addi	sp,sp,52
    3684:	f800283a 	ret
    3688:	01000074 	movhi	r4,1
    368c:	2106db04 	addi	r4,r4,7020
    3690:	0004a0c0 	call	4a0c <__pack_f>
    3694:	dfc00c17 	ldw	ra,48(sp)
    3698:	dc400b17 	ldw	r17,44(sp)
    369c:	dc000a17 	ldw	r16,40(sp)
    36a0:	dec00d04 	addi	sp,sp,52
    36a4:	f800283a 	ret
    36a8:	29802d26 	beq	r5,r6,3760 <__divsf3+0x164>
    36ac:	28801a26 	beq	r5,r2,3718 <__divsf3+0x11c>
    36b0:	d8c00417 	ldw	r3,16(sp)
    36b4:	d8800817 	ldw	r2,32(sp)
    36b8:	d9000517 	ldw	r4,20(sp)
    36bc:	d9800917 	ldw	r6,36(sp)
    36c0:	1885c83a 	sub	r2,r3,r2
    36c4:	d8800415 	stw	r2,16(sp)
    36c8:	2180032e 	bgeu	r4,r6,36d8 <__divsf3+0xdc>
    36cc:	10bfffc4 	addi	r2,r2,-1
    36d0:	d8800415 	stw	r2,16(sp)
    36d4:	2109883a 	add	r4,r4,r4
    36d8:	01500034 	movhi	r5,16384
    36dc:	0007883a 	mov	r3,zero
    36e0:	0005883a 	mov	r2,zero
    36e4:	01c007c4 	movi	r7,31
    36e8:	10800044 	addi	r2,r2,1
    36ec:	21800236 	bltu	r4,r6,36f8 <__divsf3+0xfc>
    36f0:	1946b03a 	or	r3,r3,r5
    36f4:	2189c83a 	sub	r4,r4,r6
    36f8:	280ad07a 	srli	r5,r5,1
    36fc:	2109883a 	add	r4,r4,r4
    3700:	11fff91e 	bne	r2,r7,36e8 <__divsf3+0xec>
    3704:	19401fcc 	andi	r5,r3,127
    3708:	00801004 	movi	r2,64
    370c:	28800a26 	beq	r5,r2,3738 <__divsf3+0x13c>
    3710:	d8c00515 	stw	r3,20(sp)
    3714:	003fd506 	br	366c <__divsf3+0x70>
    3718:	8809883a 	mov	r4,r17
    371c:	d9800215 	stw	r6,8(sp)
    3720:	0004a0c0 	call	4a0c <__pack_f>
    3724:	dfc00c17 	ldw	ra,48(sp)
    3728:	dc400b17 	ldw	r17,44(sp)
    372c:	dc000a17 	ldw	r16,40(sp)
    3730:	dec00d04 	addi	sp,sp,52
    3734:	f800283a 	ret
    3738:	1880200c 	andi	r2,r3,128
    373c:	103ff41e 	bne	r2,zero,3710 <__divsf3+0x114>
    3740:	203ff326 	beq	r4,zero,3710 <__divsf3+0x114>
    3744:	1947883a 	add	r3,r3,r5
    3748:	00bfe004 	movi	r2,-128
    374c:	1886703a 	and	r3,r3,r2
    3750:	d8c00515 	stw	r3,20(sp)
    3754:	003fc506 	br	366c <__divsf3+0x70>
    3758:	8009883a 	mov	r4,r16
    375c:	003fc406 	br	3670 <__divsf3+0x74>
    3760:	8809883a 	mov	r4,r17
    3764:	d8000515 	stw	zero,20(sp)
    3768:	d8000415 	stw	zero,16(sp)
    376c:	003fc006 	br	3670 <__divsf3+0x74>

00003770 <__gesf2>:
    3770:	defff304 	addi	sp,sp,-52
    3774:	dc400b15 	stw	r17,44(sp)
    3778:	dc400204 	addi	r17,sp,8
    377c:	dc000a15 	stw	r16,40(sp)
    3780:	d9000015 	stw	r4,0(sp)
    3784:	d9400115 	stw	r5,4(sp)
    3788:	d809883a 	mov	r4,sp
    378c:	880b883a 	mov	r5,r17
    3790:	dc000604 	addi	r16,sp,24
    3794:	dfc00c15 	stw	ra,48(sp)
    3798:	0004b6c0 	call	4b6c <__unpack_f>
    379c:	d9000104 	addi	r4,sp,4
    37a0:	800b883a 	mov	r5,r16
    37a4:	0004b6c0 	call	4b6c <__unpack_f>
    37a8:	d8800217 	ldw	r2,8(sp)
    37ac:	00c00044 	movi	r3,1
    37b0:	01bfffc4 	movi	r6,-1
    37b4:	1880062e 	bgeu	r3,r2,37d0 <__gesf2+0x60>
    37b8:	d8800617 	ldw	r2,24(sp)
    37bc:	8809883a 	mov	r4,r17
    37c0:	800b883a 	mov	r5,r16
    37c4:	1880022e 	bgeu	r3,r2,37d0 <__gesf2+0x60>
    37c8:	0004c340 	call	4c34 <__fpcmp_parts_f>
    37cc:	100d883a 	mov	r6,r2
    37d0:	3005883a 	mov	r2,r6
    37d4:	dfc00c17 	ldw	ra,48(sp)
    37d8:	dc400b17 	ldw	r17,44(sp)
    37dc:	dc000a17 	ldw	r16,40(sp)
    37e0:	dec00d04 	addi	sp,sp,52
    37e4:	f800283a 	ret

000037e8 <__floatsisf>:
    37e8:	2006d7fa 	srli	r3,r4,31
    37ec:	defffa04 	addi	sp,sp,-24
    37f0:	008000c4 	movi	r2,3
    37f4:	dfc00515 	stw	ra,20(sp)
    37f8:	dc000415 	stw	r16,16(sp)
    37fc:	d8800015 	stw	r2,0(sp)
    3800:	d8c00115 	stw	r3,4(sp)
    3804:	2000081e 	bne	r4,zero,3828 <__floatsisf+0x40>
    3808:	00800084 	movi	r2,2
    380c:	d8800015 	stw	r2,0(sp)
    3810:	d809883a 	mov	r4,sp
    3814:	0004a0c0 	call	4a0c <__pack_f>
    3818:	dfc00517 	ldw	ra,20(sp)
    381c:	dc000417 	ldw	r16,16(sp)
    3820:	dec00604 	addi	sp,sp,24
    3824:	f800283a 	ret
    3828:	00800784 	movi	r2,30
    382c:	1807003a 	cmpeq	r3,r3,zero
    3830:	d8800215 	stw	r2,8(sp)
    3834:	18000e1e 	bne	r3,zero,3870 <__floatsisf+0x88>
    3838:	00a00034 	movhi	r2,32768
    383c:	20800e26 	beq	r4,r2,3878 <__floatsisf+0x90>
    3840:	0121c83a 	sub	r16,zero,r4
    3844:	8009883a 	mov	r4,r16
    3848:	dc000315 	stw	r16,12(sp)
    384c:	000498c0 	call	498c <__clzsi2>
    3850:	117fffc4 	addi	r5,r2,-1
    3854:	017fee0e 	bge	zero,r5,3810 <__floatsisf+0x28>
    3858:	d8800217 	ldw	r2,8(sp)
    385c:	8146983a 	sll	r3,r16,r5
    3860:	1145c83a 	sub	r2,r2,r5
    3864:	d8c00315 	stw	r3,12(sp)
    3868:	d8800215 	stw	r2,8(sp)
    386c:	003fe806 	br	3810 <__floatsisf+0x28>
    3870:	2021883a 	mov	r16,r4
    3874:	003ff306 	br	3844 <__floatsisf+0x5c>
    3878:	00b3c034 	movhi	r2,52992
    387c:	003fe606 	br	3818 <__floatsisf+0x30>

00003880 <__extendsfdf2>:
    3880:	defff904 	addi	sp,sp,-28
    3884:	d9000115 	stw	r4,4(sp)
    3888:	d9400204 	addi	r5,sp,8
    388c:	d9000104 	addi	r4,sp,4
    3890:	dfc00615 	stw	ra,24(sp)
    3894:	0004b6c0 	call	4b6c <__unpack_f>
    3898:	d9c00517 	ldw	r7,20(sp)
    389c:	0011883a 	mov	r8,zero
    38a0:	400697ba 	slli	r3,r8,30
    38a4:	3812d0ba 	srli	r9,r7,2
    38a8:	380497ba 	slli	r2,r7,30
    38ac:	d9000217 	ldw	r4,8(sp)
    38b0:	d9400317 	ldw	r5,12(sp)
    38b4:	d9800417 	ldw	r6,16(sp)
    38b8:	48c6b03a 	or	r3,r9,r3
    38bc:	100f883a 	mov	r7,r2
    38c0:	d8c00015 	stw	r3,0(sp)
    38c4:	000475c0 	call	475c <__make_dp>
    38c8:	dfc00617 	ldw	ra,24(sp)
    38cc:	dec00704 	addi	sp,sp,28
    38d0:	f800283a 	ret

000038d4 <_fpadd_parts>:
    38d4:	defff804 	addi	sp,sp,-32
    38d8:	dcc00315 	stw	r19,12(sp)
    38dc:	2027883a 	mov	r19,r4
    38e0:	21000017 	ldw	r4,0(r4)
    38e4:	00c00044 	movi	r3,1
    38e8:	dd400515 	stw	r21,20(sp)
    38ec:	dd000415 	stw	r20,16(sp)
    38f0:	ddc00715 	stw	r23,28(sp)
    38f4:	dd800615 	stw	r22,24(sp)
    38f8:	dc800215 	stw	r18,8(sp)
    38fc:	dc400115 	stw	r17,4(sp)
    3900:	dc000015 	stw	r16,0(sp)
    3904:	282b883a 	mov	r21,r5
    3908:	3029883a 	mov	r20,r6
    390c:	1900632e 	bgeu	r3,r4,3a9c <_fpadd_parts+0x1c8>
    3910:	28800017 	ldw	r2,0(r5)
    3914:	1880812e 	bgeu	r3,r2,3b1c <_fpadd_parts+0x248>
    3918:	00c00104 	movi	r3,4
    391c:	20c0dc26 	beq	r4,r3,3c90 <_fpadd_parts+0x3bc>
    3920:	10c07e26 	beq	r2,r3,3b1c <_fpadd_parts+0x248>
    3924:	00c00084 	movi	r3,2
    3928:	10c06726 	beq	r2,r3,3ac8 <_fpadd_parts+0x1f4>
    392c:	20c07b26 	beq	r4,r3,3b1c <_fpadd_parts+0x248>
    3930:	9dc00217 	ldw	r23,8(r19)
    3934:	28c00217 	ldw	r3,8(r5)
    3938:	9c400317 	ldw	r17,12(r19)
    393c:	2bc00317 	ldw	r15,12(r5)
    3940:	b8cdc83a 	sub	r6,r23,r3
    3944:	9c800417 	ldw	r18,16(r19)
    3948:	2c000417 	ldw	r16,16(r5)
    394c:	3009883a 	mov	r4,r6
    3950:	30009716 	blt	r6,zero,3bb0 <_fpadd_parts+0x2dc>
    3954:	00800fc4 	movi	r2,63
    3958:	11806b16 	blt	r2,r6,3b08 <_fpadd_parts+0x234>
    395c:	0100a40e 	bge	zero,r4,3bf0 <_fpadd_parts+0x31c>
    3960:	35bff804 	addi	r22,r6,-32
    3964:	b000bc16 	blt	r22,zero,3c58 <_fpadd_parts+0x384>
    3968:	8596d83a 	srl	r11,r16,r22
    396c:	0019883a 	mov	r12,zero
    3970:	0013883a 	mov	r9,zero
    3974:	01000044 	movi	r4,1
    3978:	0015883a 	mov	r10,zero
    397c:	b000be16 	blt	r22,zero,3c78 <_fpadd_parts+0x3a4>
    3980:	2590983a 	sll	r8,r4,r22
    3984:	000f883a 	mov	r7,zero
    3988:	00bfffc4 	movi	r2,-1
    398c:	3889883a 	add	r4,r7,r2
    3990:	408b883a 	add	r5,r8,r2
    3994:	21cd803a 	cmpltu	r6,r4,r7
    3998:	314b883a 	add	r5,r6,r5
    399c:	7904703a 	and	r2,r15,r4
    39a0:	8146703a 	and	r3,r16,r5
    39a4:	10c4b03a 	or	r2,r2,r3
    39a8:	10000226 	beq	r2,zero,39b4 <_fpadd_parts+0xe0>
    39ac:	02400044 	movi	r9,1
    39b0:	0015883a 	mov	r10,zero
    39b4:	5a5eb03a 	or	r15,r11,r9
    39b8:	62a0b03a 	or	r16,r12,r10
    39bc:	99400117 	ldw	r5,4(r19)
    39c0:	a8800117 	ldw	r2,4(r21)
    39c4:	28806e26 	beq	r5,r2,3b80 <_fpadd_parts+0x2ac>
    39c8:	28006626 	beq	r5,zero,3b64 <_fpadd_parts+0x290>
    39cc:	7c45c83a 	sub	r2,r15,r17
    39d0:	7889803a 	cmpltu	r4,r15,r2
    39d4:	8487c83a 	sub	r3,r16,r18
    39d8:	1909c83a 	sub	r4,r3,r4
    39dc:	100d883a 	mov	r6,r2
    39e0:	200f883a 	mov	r7,r4
    39e4:	38007716 	blt	r7,zero,3bc4 <_fpadd_parts+0x2f0>
    39e8:	a5c00215 	stw	r23,8(r20)
    39ec:	a1c00415 	stw	r7,16(r20)
    39f0:	a0000115 	stw	zero,4(r20)
    39f4:	a1800315 	stw	r6,12(r20)
    39f8:	a2000317 	ldw	r8,12(r20)
    39fc:	a2400417 	ldw	r9,16(r20)
    3a00:	00bfffc4 	movi	r2,-1
    3a04:	408b883a 	add	r5,r8,r2
    3a08:	2a09803a 	cmpltu	r4,r5,r8
    3a0c:	488d883a 	add	r6,r9,r2
    3a10:	01c40034 	movhi	r7,4096
    3a14:	39ffffc4 	addi	r7,r7,-1
    3a18:	218d883a 	add	r6,r4,r6
    3a1c:	39801736 	bltu	r7,r6,3a7c <_fpadd_parts+0x1a8>
    3a20:	31c06526 	beq	r6,r7,3bb8 <_fpadd_parts+0x2e4>
    3a24:	a3000217 	ldw	r12,8(r20)
    3a28:	4209883a 	add	r4,r8,r8
    3a2c:	00bfffc4 	movi	r2,-1
    3a30:	220f803a 	cmpltu	r7,r4,r8
    3a34:	4a4b883a 	add	r5,r9,r9
    3a38:	394f883a 	add	r7,r7,r5
    3a3c:	2095883a 	add	r10,r4,r2
    3a40:	3897883a 	add	r11,r7,r2
    3a44:	510d803a 	cmpltu	r6,r10,r4
    3a48:	6099883a 	add	r12,r12,r2
    3a4c:	32d7883a 	add	r11,r6,r11
    3a50:	00840034 	movhi	r2,4096
    3a54:	10bfffc4 	addi	r2,r2,-1
    3a58:	2011883a 	mov	r8,r4
    3a5c:	3813883a 	mov	r9,r7
    3a60:	a1000315 	stw	r4,12(r20)
    3a64:	a1c00415 	stw	r7,16(r20)
    3a68:	a3000215 	stw	r12,8(r20)
    3a6c:	12c00336 	bltu	r2,r11,3a7c <_fpadd_parts+0x1a8>
    3a70:	58bfed1e 	bne	r11,r2,3a28 <_fpadd_parts+0x154>
    3a74:	00bfff84 	movi	r2,-2
    3a78:	12bfeb2e 	bgeu	r2,r10,3a28 <_fpadd_parts+0x154>
    3a7c:	a2800417 	ldw	r10,16(r20)
    3a80:	008000c4 	movi	r2,3
    3a84:	00c80034 	movhi	r3,8192
    3a88:	18ffffc4 	addi	r3,r3,-1
    3a8c:	a2400317 	ldw	r9,12(r20)
    3a90:	a0800015 	stw	r2,0(r20)
    3a94:	1a802336 	bltu	r3,r10,3b24 <_fpadd_parts+0x250>
    3a98:	a027883a 	mov	r19,r20
    3a9c:	9805883a 	mov	r2,r19
    3aa0:	ddc00717 	ldw	r23,28(sp)
    3aa4:	dd800617 	ldw	r22,24(sp)
    3aa8:	dd400517 	ldw	r21,20(sp)
    3aac:	dd000417 	ldw	r20,16(sp)
    3ab0:	dcc00317 	ldw	r19,12(sp)
    3ab4:	dc800217 	ldw	r18,8(sp)
    3ab8:	dc400117 	ldw	r17,4(sp)
    3abc:	dc000017 	ldw	r16,0(sp)
    3ac0:	dec00804 	addi	sp,sp,32
    3ac4:	f800283a 	ret
    3ac8:	20fff41e 	bne	r4,r3,3a9c <_fpadd_parts+0x1c8>
    3acc:	31000015 	stw	r4,0(r6)
    3ad0:	98800117 	ldw	r2,4(r19)
    3ad4:	30800115 	stw	r2,4(r6)
    3ad8:	98c00217 	ldw	r3,8(r19)
    3adc:	30c00215 	stw	r3,8(r6)
    3ae0:	98800317 	ldw	r2,12(r19)
    3ae4:	30800315 	stw	r2,12(r6)
    3ae8:	98c00417 	ldw	r3,16(r19)
    3aec:	30c00415 	stw	r3,16(r6)
    3af0:	98800117 	ldw	r2,4(r19)
    3af4:	28c00117 	ldw	r3,4(r5)
    3af8:	3027883a 	mov	r19,r6
    3afc:	10c4703a 	and	r2,r2,r3
    3b00:	30800115 	stw	r2,4(r6)
    3b04:	003fe506 	br	3a9c <_fpadd_parts+0x1c8>
    3b08:	1dc02616 	blt	r3,r23,3ba4 <_fpadd_parts+0x2d0>
    3b0c:	0023883a 	mov	r17,zero
    3b10:	182f883a 	mov	r23,r3
    3b14:	0025883a 	mov	r18,zero
    3b18:	003fa806 	br	39bc <_fpadd_parts+0xe8>
    3b1c:	a827883a 	mov	r19,r21
    3b20:	003fde06 	br	3a9c <_fpadd_parts+0x1c8>
    3b24:	01800044 	movi	r6,1
    3b28:	500497fa 	slli	r2,r10,31
    3b2c:	4808d07a 	srli	r4,r9,1
    3b30:	518ad83a 	srl	r5,r10,r6
    3b34:	a2000217 	ldw	r8,8(r20)
    3b38:	1108b03a 	or	r4,r2,r4
    3b3c:	0007883a 	mov	r3,zero
    3b40:	4984703a 	and	r2,r9,r6
    3b44:	208cb03a 	or	r6,r4,r2
    3b48:	28ceb03a 	or	r7,r5,r3
    3b4c:	42000044 	addi	r8,r8,1
    3b50:	a027883a 	mov	r19,r20
    3b54:	a1c00415 	stw	r7,16(r20)
    3b58:	a2000215 	stw	r8,8(r20)
    3b5c:	a1800315 	stw	r6,12(r20)
    3b60:	003fce06 	br	3a9c <_fpadd_parts+0x1c8>
    3b64:	8bc5c83a 	sub	r2,r17,r15
    3b68:	8889803a 	cmpltu	r4,r17,r2
    3b6c:	9407c83a 	sub	r3,r18,r16
    3b70:	1909c83a 	sub	r4,r3,r4
    3b74:	100d883a 	mov	r6,r2
    3b78:	200f883a 	mov	r7,r4
    3b7c:	003f9906 	br	39e4 <_fpadd_parts+0x110>
    3b80:	8bc5883a 	add	r2,r17,r15
    3b84:	1449803a 	cmpltu	r4,r2,r17
    3b88:	9407883a 	add	r3,r18,r16
    3b8c:	20c9883a 	add	r4,r4,r3
    3b90:	a1400115 	stw	r5,4(r20)
    3b94:	a5c00215 	stw	r23,8(r20)
    3b98:	a0800315 	stw	r2,12(r20)
    3b9c:	a1000415 	stw	r4,16(r20)
    3ba0:	003fb606 	br	3a7c <_fpadd_parts+0x1a8>
    3ba4:	001f883a 	mov	r15,zero
    3ba8:	0021883a 	mov	r16,zero
    3bac:	003f8306 	br	39bc <_fpadd_parts+0xe8>
    3bb0:	018dc83a 	sub	r6,zero,r6
    3bb4:	003f6706 	br	3954 <_fpadd_parts+0x80>
    3bb8:	00bfff84 	movi	r2,-2
    3bbc:	117faf36 	bltu	r2,r5,3a7c <_fpadd_parts+0x1a8>
    3bc0:	003f9806 	br	3a24 <_fpadd_parts+0x150>
    3bc4:	0005883a 	mov	r2,zero
    3bc8:	1189c83a 	sub	r4,r2,r6
    3bcc:	1105803a 	cmpltu	r2,r2,r4
    3bd0:	01cbc83a 	sub	r5,zero,r7
    3bd4:	2885c83a 	sub	r2,r5,r2
    3bd8:	01800044 	movi	r6,1
    3bdc:	a1800115 	stw	r6,4(r20)
    3be0:	a5c00215 	stw	r23,8(r20)
    3be4:	a1000315 	stw	r4,12(r20)
    3be8:	a0800415 	stw	r2,16(r20)
    3bec:	003f8206 	br	39f8 <_fpadd_parts+0x124>
    3bf0:	203f7226 	beq	r4,zero,39bc <_fpadd_parts+0xe8>
    3bf4:	35bff804 	addi	r22,r6,-32
    3bf8:	b9af883a 	add	r23,r23,r6
    3bfc:	b0003116 	blt	r22,zero,3cc4 <_fpadd_parts+0x3f0>
    3c00:	959ad83a 	srl	r13,r18,r22
    3c04:	001d883a 	mov	r14,zero
    3c08:	000f883a 	mov	r7,zero
    3c0c:	01000044 	movi	r4,1
    3c10:	0011883a 	mov	r8,zero
    3c14:	b0002516 	blt	r22,zero,3cac <_fpadd_parts+0x3d8>
    3c18:	2594983a 	sll	r10,r4,r22
    3c1c:	0013883a 	mov	r9,zero
    3c20:	00bfffc4 	movi	r2,-1
    3c24:	4889883a 	add	r4,r9,r2
    3c28:	508b883a 	add	r5,r10,r2
    3c2c:	224d803a 	cmpltu	r6,r4,r9
    3c30:	314b883a 	add	r5,r6,r5
    3c34:	8904703a 	and	r2,r17,r4
    3c38:	9146703a 	and	r3,r18,r5
    3c3c:	10c4b03a 	or	r2,r2,r3
    3c40:	10000226 	beq	r2,zero,3c4c <_fpadd_parts+0x378>
    3c44:	01c00044 	movi	r7,1
    3c48:	0011883a 	mov	r8,zero
    3c4c:	69e2b03a 	or	r17,r13,r7
    3c50:	7224b03a 	or	r18,r14,r8
    3c54:	003f5906 	br	39bc <_fpadd_parts+0xe8>
    3c58:	8407883a 	add	r3,r16,r16
    3c5c:	008007c4 	movi	r2,31
    3c60:	1185c83a 	sub	r2,r2,r6
    3c64:	1886983a 	sll	r3,r3,r2
    3c68:	7996d83a 	srl	r11,r15,r6
    3c6c:	8198d83a 	srl	r12,r16,r6
    3c70:	1ad6b03a 	or	r11,r3,r11
    3c74:	003f3e06 	br	3970 <_fpadd_parts+0x9c>
    3c78:	2006d07a 	srli	r3,r4,1
    3c7c:	008007c4 	movi	r2,31
    3c80:	1185c83a 	sub	r2,r2,r6
    3c84:	1890d83a 	srl	r8,r3,r2
    3c88:	218e983a 	sll	r7,r4,r6
    3c8c:	003f3e06 	br	3988 <_fpadd_parts+0xb4>
    3c90:	113f821e 	bne	r2,r4,3a9c <_fpadd_parts+0x1c8>
    3c94:	28c00117 	ldw	r3,4(r5)
    3c98:	98800117 	ldw	r2,4(r19)
    3c9c:	10ff7f26 	beq	r2,r3,3a9c <_fpadd_parts+0x1c8>
    3ca0:	04c00074 	movhi	r19,1
    3ca4:	9cc6df04 	addi	r19,r19,7036
    3ca8:	003f7c06 	br	3a9c <_fpadd_parts+0x1c8>
    3cac:	2006d07a 	srli	r3,r4,1
    3cb0:	008007c4 	movi	r2,31
    3cb4:	1185c83a 	sub	r2,r2,r6
    3cb8:	1894d83a 	srl	r10,r3,r2
    3cbc:	2192983a 	sll	r9,r4,r6
    3cc0:	003fd706 	br	3c20 <_fpadd_parts+0x34c>
    3cc4:	9487883a 	add	r3,r18,r18
    3cc8:	008007c4 	movi	r2,31
    3ccc:	1185c83a 	sub	r2,r2,r6
    3cd0:	1886983a 	sll	r3,r3,r2
    3cd4:	899ad83a 	srl	r13,r17,r6
    3cd8:	919cd83a 	srl	r14,r18,r6
    3cdc:	1b5ab03a 	or	r13,r3,r13
    3ce0:	003fc906 	br	3c08 <_fpadd_parts+0x334>

00003ce4 <__subdf3>:
    3ce4:	deffea04 	addi	sp,sp,-88
    3ce8:	dcc01415 	stw	r19,80(sp)
    3cec:	dcc00404 	addi	r19,sp,16
    3cf0:	2011883a 	mov	r8,r4
    3cf4:	2813883a 	mov	r9,r5
    3cf8:	dc401315 	stw	r17,76(sp)
    3cfc:	d809883a 	mov	r4,sp
    3d00:	980b883a 	mov	r5,r19
    3d04:	dc400904 	addi	r17,sp,36
    3d08:	dfc01515 	stw	ra,84(sp)
    3d0c:	da400115 	stw	r9,4(sp)
    3d10:	d9c00315 	stw	r7,12(sp)
    3d14:	da000015 	stw	r8,0(sp)
    3d18:	d9800215 	stw	r6,8(sp)
    3d1c:	000501c0 	call	501c <__unpack_d>
    3d20:	d9000204 	addi	r4,sp,8
    3d24:	880b883a 	mov	r5,r17
    3d28:	000501c0 	call	501c <__unpack_d>
    3d2c:	d8800a17 	ldw	r2,40(sp)
    3d30:	880b883a 	mov	r5,r17
    3d34:	9809883a 	mov	r4,r19
    3d38:	d9800e04 	addi	r6,sp,56
    3d3c:	1080005c 	xori	r2,r2,1
    3d40:	d8800a15 	stw	r2,40(sp)
    3d44:	00038d40 	call	38d4 <_fpadd_parts>
    3d48:	1009883a 	mov	r4,r2
    3d4c:	0004d080 	call	4d08 <__pack_d>
    3d50:	dfc01517 	ldw	ra,84(sp)
    3d54:	dcc01417 	ldw	r19,80(sp)
    3d58:	dc401317 	ldw	r17,76(sp)
    3d5c:	dec01604 	addi	sp,sp,88
    3d60:	f800283a 	ret

00003d64 <__adddf3>:
    3d64:	deffea04 	addi	sp,sp,-88
    3d68:	dcc01415 	stw	r19,80(sp)
    3d6c:	dcc00404 	addi	r19,sp,16
    3d70:	2011883a 	mov	r8,r4
    3d74:	2813883a 	mov	r9,r5
    3d78:	dc401315 	stw	r17,76(sp)
    3d7c:	d809883a 	mov	r4,sp
    3d80:	980b883a 	mov	r5,r19
    3d84:	dc400904 	addi	r17,sp,36
    3d88:	dfc01515 	stw	ra,84(sp)
    3d8c:	da400115 	stw	r9,4(sp)
    3d90:	d9c00315 	stw	r7,12(sp)
    3d94:	da000015 	stw	r8,0(sp)
    3d98:	d9800215 	stw	r6,8(sp)
    3d9c:	000501c0 	call	501c <__unpack_d>
    3da0:	d9000204 	addi	r4,sp,8
    3da4:	880b883a 	mov	r5,r17
    3da8:	000501c0 	call	501c <__unpack_d>
    3dac:	d9800e04 	addi	r6,sp,56
    3db0:	9809883a 	mov	r4,r19
    3db4:	880b883a 	mov	r5,r17
    3db8:	00038d40 	call	38d4 <_fpadd_parts>
    3dbc:	1009883a 	mov	r4,r2
    3dc0:	0004d080 	call	4d08 <__pack_d>
    3dc4:	dfc01517 	ldw	ra,84(sp)
    3dc8:	dcc01417 	ldw	r19,80(sp)
    3dcc:	dc401317 	ldw	r17,76(sp)
    3dd0:	dec01604 	addi	sp,sp,88
    3dd4:	f800283a 	ret

00003dd8 <__muldf3>:
    3dd8:	deffe004 	addi	sp,sp,-128
    3ddc:	dc401815 	stw	r17,96(sp)
    3de0:	dc400404 	addi	r17,sp,16
    3de4:	2011883a 	mov	r8,r4
    3de8:	2813883a 	mov	r9,r5
    3dec:	dc001715 	stw	r16,92(sp)
    3df0:	d809883a 	mov	r4,sp
    3df4:	880b883a 	mov	r5,r17
    3df8:	dc000904 	addi	r16,sp,36
    3dfc:	dfc01f15 	stw	ra,124(sp)
    3e00:	da400115 	stw	r9,4(sp)
    3e04:	d9c00315 	stw	r7,12(sp)
    3e08:	da000015 	stw	r8,0(sp)
    3e0c:	d9800215 	stw	r6,8(sp)
    3e10:	ddc01e15 	stw	r23,120(sp)
    3e14:	dd801d15 	stw	r22,116(sp)
    3e18:	dd401c15 	stw	r21,112(sp)
    3e1c:	dd001b15 	stw	r20,108(sp)
    3e20:	dcc01a15 	stw	r19,104(sp)
    3e24:	dc801915 	stw	r18,100(sp)
    3e28:	000501c0 	call	501c <__unpack_d>
    3e2c:	d9000204 	addi	r4,sp,8
    3e30:	800b883a 	mov	r5,r16
    3e34:	000501c0 	call	501c <__unpack_d>
    3e38:	d9000417 	ldw	r4,16(sp)
    3e3c:	00800044 	movi	r2,1
    3e40:	1100102e 	bgeu	r2,r4,3e84 <__muldf3+0xac>
    3e44:	d8c00917 	ldw	r3,36(sp)
    3e48:	10c0062e 	bgeu	r2,r3,3e64 <__muldf3+0x8c>
    3e4c:	00800104 	movi	r2,4
    3e50:	20800a26 	beq	r4,r2,3e7c <__muldf3+0xa4>
    3e54:	1880cc26 	beq	r3,r2,4188 <__muldf3+0x3b0>
    3e58:	00800084 	movi	r2,2
    3e5c:	20800926 	beq	r4,r2,3e84 <__muldf3+0xac>
    3e60:	1880191e 	bne	r3,r2,3ec8 <__muldf3+0xf0>
    3e64:	d8c00a17 	ldw	r3,40(sp)
    3e68:	d8800517 	ldw	r2,20(sp)
    3e6c:	8009883a 	mov	r4,r16
    3e70:	10c4c03a 	cmpne	r2,r2,r3
    3e74:	d8800a15 	stw	r2,40(sp)
    3e78:	00000706 	br	3e98 <__muldf3+0xc0>
    3e7c:	00800084 	movi	r2,2
    3e80:	1880c326 	beq	r3,r2,4190 <__muldf3+0x3b8>
    3e84:	d8800517 	ldw	r2,20(sp)
    3e88:	d8c00a17 	ldw	r3,40(sp)
    3e8c:	8809883a 	mov	r4,r17
    3e90:	10c4c03a 	cmpne	r2,r2,r3
    3e94:	d8800515 	stw	r2,20(sp)
    3e98:	0004d080 	call	4d08 <__pack_d>
    3e9c:	dfc01f17 	ldw	ra,124(sp)
    3ea0:	ddc01e17 	ldw	r23,120(sp)
    3ea4:	dd801d17 	ldw	r22,116(sp)
    3ea8:	dd401c17 	ldw	r21,112(sp)
    3eac:	dd001b17 	ldw	r20,108(sp)
    3eb0:	dcc01a17 	ldw	r19,104(sp)
    3eb4:	dc801917 	ldw	r18,100(sp)
    3eb8:	dc401817 	ldw	r17,96(sp)
    3ebc:	dc001717 	ldw	r16,92(sp)
    3ec0:	dec02004 	addi	sp,sp,128
    3ec4:	f800283a 	ret
    3ec8:	dd800717 	ldw	r22,28(sp)
    3ecc:	dc800c17 	ldw	r18,48(sp)
    3ed0:	002b883a 	mov	r21,zero
    3ed4:	0023883a 	mov	r17,zero
    3ed8:	a80b883a 	mov	r5,r21
    3edc:	b00d883a 	mov	r6,r22
    3ee0:	880f883a 	mov	r7,r17
    3ee4:	ddc00817 	ldw	r23,32(sp)
    3ee8:	dcc00d17 	ldw	r19,52(sp)
    3eec:	9009883a 	mov	r4,r18
    3ef0:	00030400 	call	3040 <__muldi3>
    3ef4:	001b883a 	mov	r13,zero
    3ef8:	680f883a 	mov	r7,r13
    3efc:	b009883a 	mov	r4,r22
    3f00:	000b883a 	mov	r5,zero
    3f04:	980d883a 	mov	r6,r19
    3f08:	b82d883a 	mov	r22,r23
    3f0c:	002f883a 	mov	r23,zero
    3f10:	db401615 	stw	r13,88(sp)
    3f14:	d8801315 	stw	r2,76(sp)
    3f18:	d8c01415 	stw	r3,80(sp)
    3f1c:	dcc01515 	stw	r19,84(sp)
    3f20:	00030400 	call	3040 <__muldi3>
    3f24:	b00d883a 	mov	r6,r22
    3f28:	000b883a 	mov	r5,zero
    3f2c:	9009883a 	mov	r4,r18
    3f30:	b80f883a 	mov	r7,r23
    3f34:	1021883a 	mov	r16,r2
    3f38:	1823883a 	mov	r17,r3
    3f3c:	00030400 	call	3040 <__muldi3>
    3f40:	8085883a 	add	r2,r16,r2
    3f44:	140d803a 	cmpltu	r6,r2,r16
    3f48:	88c7883a 	add	r3,r17,r3
    3f4c:	30cd883a 	add	r6,r6,r3
    3f50:	1029883a 	mov	r20,r2
    3f54:	302b883a 	mov	r21,r6
    3f58:	da801317 	ldw	r10,76(sp)
    3f5c:	dac01417 	ldw	r11,80(sp)
    3f60:	db001517 	ldw	r12,84(sp)
    3f64:	db401617 	ldw	r13,88(sp)
    3f68:	3440612e 	bgeu	r6,r17,40f0 <__muldf3+0x318>
    3f6c:	0009883a 	mov	r4,zero
    3f70:	5105883a 	add	r2,r10,r4
    3f74:	128d803a 	cmpltu	r6,r2,r10
    3f78:	5d07883a 	add	r3,r11,r20
    3f7c:	30cd883a 	add	r6,r6,r3
    3f80:	0021883a 	mov	r16,zero
    3f84:	04400044 	movi	r17,1
    3f88:	1025883a 	mov	r18,r2
    3f8c:	3027883a 	mov	r19,r6
    3f90:	32c06236 	bltu	r6,r11,411c <__muldf3+0x344>
    3f94:	59807a26 	beq	r11,r6,4180 <__muldf3+0x3a8>
    3f98:	680b883a 	mov	r5,r13
    3f9c:	b80f883a 	mov	r7,r23
    3fa0:	6009883a 	mov	r4,r12
    3fa4:	b00d883a 	mov	r6,r22
    3fa8:	00030400 	call	3040 <__muldi3>
    3fac:	1009883a 	mov	r4,r2
    3fb0:	000f883a 	mov	r7,zero
    3fb4:	1545883a 	add	r2,r2,r21
    3fb8:	1111803a 	cmpltu	r8,r2,r4
    3fbc:	19c7883a 	add	r3,r3,r7
    3fc0:	40c7883a 	add	r3,r8,r3
    3fc4:	88cb883a 	add	r5,r17,r3
    3fc8:	d8c00617 	ldw	r3,24(sp)
    3fcc:	8089883a 	add	r4,r16,r2
    3fd0:	d8800b17 	ldw	r2,44(sp)
    3fd4:	18c00104 	addi	r3,r3,4
    3fd8:	240d803a 	cmpltu	r6,r4,r16
    3fdc:	10c7883a 	add	r3,r2,r3
    3fe0:	2013883a 	mov	r9,r4
    3fe4:	d8800a17 	ldw	r2,40(sp)
    3fe8:	d9000517 	ldw	r4,20(sp)
    3fec:	314d883a 	add	r6,r6,r5
    3ff0:	3015883a 	mov	r10,r6
    3ff4:	2088c03a 	cmpne	r4,r4,r2
    3ff8:	00880034 	movhi	r2,8192
    3ffc:	10bfffc4 	addi	r2,r2,-1
    4000:	d9000f15 	stw	r4,60(sp)
    4004:	d8c01015 	stw	r3,64(sp)
    4008:	1180162e 	bgeu	r2,r6,4064 <__muldf3+0x28c>
    400c:	1811883a 	mov	r8,r3
    4010:	101f883a 	mov	r15,r2
    4014:	980497fa 	slli	r2,r19,31
    4018:	9016d07a 	srli	r11,r18,1
    401c:	500697fa 	slli	r3,r10,31
    4020:	480cd07a 	srli	r6,r9,1
    4024:	500ed07a 	srli	r7,r10,1
    4028:	12d6b03a 	or	r11,r2,r11
    402c:	00800044 	movi	r2,1
    4030:	198cb03a 	or	r6,r3,r6
    4034:	4888703a 	and	r4,r9,r2
    4038:	9818d07a 	srli	r12,r19,1
    403c:	001b883a 	mov	r13,zero
    4040:	03a00034 	movhi	r14,32768
    4044:	3013883a 	mov	r9,r6
    4048:	3815883a 	mov	r10,r7
    404c:	4091883a 	add	r8,r8,r2
    4050:	20000226 	beq	r4,zero,405c <__muldf3+0x284>
    4054:	5b64b03a 	or	r18,r11,r13
    4058:	63a6b03a 	or	r19,r12,r14
    405c:	7abfed36 	bltu	r15,r10,4014 <__muldf3+0x23c>
    4060:	da001015 	stw	r8,64(sp)
    4064:	00840034 	movhi	r2,4096
    4068:	10bfffc4 	addi	r2,r2,-1
    406c:	12801436 	bltu	r2,r10,40c0 <__muldf3+0x2e8>
    4070:	da001017 	ldw	r8,64(sp)
    4074:	101f883a 	mov	r15,r2
    4078:	4a45883a 	add	r2,r9,r9
    407c:	124d803a 	cmpltu	r6,r2,r9
    4080:	5287883a 	add	r3,r10,r10
    4084:	9497883a 	add	r11,r18,r18
    4088:	5c8f803a 	cmpltu	r7,r11,r18
    408c:	9cd9883a 	add	r12,r19,r19
    4090:	01000044 	movi	r4,1
    4094:	30cd883a 	add	r6,r6,r3
    4098:	3b0f883a 	add	r7,r7,r12
    409c:	423fffc4 	addi	r8,r8,-1
    40a0:	1013883a 	mov	r9,r2
    40a4:	3015883a 	mov	r10,r6
    40a8:	111ab03a 	or	r13,r2,r4
    40ac:	98003016 	blt	r19,zero,4170 <__muldf3+0x398>
    40b0:	5825883a 	mov	r18,r11
    40b4:	3827883a 	mov	r19,r7
    40b8:	7abfef2e 	bgeu	r15,r10,4078 <__muldf3+0x2a0>
    40bc:	da001015 	stw	r8,64(sp)
    40c0:	00803fc4 	movi	r2,255
    40c4:	488e703a 	and	r7,r9,r2
    40c8:	00802004 	movi	r2,128
    40cc:	0007883a 	mov	r3,zero
    40d0:	0011883a 	mov	r8,zero
    40d4:	38801826 	beq	r7,r2,4138 <__muldf3+0x360>
    40d8:	008000c4 	movi	r2,3
    40dc:	d9000e04 	addi	r4,sp,56
    40e0:	da801215 	stw	r10,72(sp)
    40e4:	d8800e15 	stw	r2,56(sp)
    40e8:	da401115 	stw	r9,68(sp)
    40ec:	003f6a06 	br	3e98 <__muldf3+0xc0>
    40f0:	89802126 	beq	r17,r6,4178 <__muldf3+0x3a0>
    40f4:	0009883a 	mov	r4,zero
    40f8:	5105883a 	add	r2,r10,r4
    40fc:	128d803a 	cmpltu	r6,r2,r10
    4100:	5d07883a 	add	r3,r11,r20
    4104:	30cd883a 	add	r6,r6,r3
    4108:	0021883a 	mov	r16,zero
    410c:	0023883a 	mov	r17,zero
    4110:	1025883a 	mov	r18,r2
    4114:	3027883a 	mov	r19,r6
    4118:	32ff9e2e 	bgeu	r6,r11,3f94 <__muldf3+0x1bc>
    411c:	00800044 	movi	r2,1
    4120:	8089883a 	add	r4,r16,r2
    4124:	240d803a 	cmpltu	r6,r4,r16
    4128:	344d883a 	add	r6,r6,r17
    412c:	2021883a 	mov	r16,r4
    4130:	3023883a 	mov	r17,r6
    4134:	003f9806 	br	3f98 <__muldf3+0x1c0>
    4138:	403fe71e 	bne	r8,zero,40d8 <__muldf3+0x300>
    413c:	01004004 	movi	r4,256
    4140:	4904703a 	and	r2,r9,r4
    4144:	10c4b03a 	or	r2,r2,r3
    4148:	103fe31e 	bne	r2,zero,40d8 <__muldf3+0x300>
    414c:	94c4b03a 	or	r2,r18,r19
    4150:	103fe126 	beq	r2,zero,40d8 <__muldf3+0x300>
    4154:	49c5883a 	add	r2,r9,r7
    4158:	1251803a 	cmpltu	r8,r2,r9
    415c:	4291883a 	add	r8,r8,r10
    4160:	013fc004 	movi	r4,-256
    4164:	1112703a 	and	r9,r2,r4
    4168:	4015883a 	mov	r10,r8
    416c:	003fda06 	br	40d8 <__muldf3+0x300>
    4170:	6813883a 	mov	r9,r13
    4174:	003fce06 	br	40b0 <__muldf3+0x2d8>
    4178:	143f7c36 	bltu	r2,r16,3f6c <__muldf3+0x194>
    417c:	003fdd06 	br	40f4 <__muldf3+0x31c>
    4180:	12bf852e 	bgeu	r2,r10,3f98 <__muldf3+0x1c0>
    4184:	003fe506 	br	411c <__muldf3+0x344>
    4188:	00800084 	movi	r2,2
    418c:	20bf351e 	bne	r4,r2,3e64 <__muldf3+0x8c>
    4190:	01000074 	movhi	r4,1
    4194:	2106df04 	addi	r4,r4,7036
    4198:	003f3f06 	br	3e98 <__muldf3+0xc0>

0000419c <__divdf3>:
    419c:	deffed04 	addi	sp,sp,-76
    41a0:	dcc01115 	stw	r19,68(sp)
    41a4:	dcc00404 	addi	r19,sp,16
    41a8:	2011883a 	mov	r8,r4
    41ac:	2813883a 	mov	r9,r5
    41b0:	dc000e15 	stw	r16,56(sp)
    41b4:	d809883a 	mov	r4,sp
    41b8:	980b883a 	mov	r5,r19
    41bc:	dc000904 	addi	r16,sp,36
    41c0:	dfc01215 	stw	ra,72(sp)
    41c4:	da400115 	stw	r9,4(sp)
    41c8:	d9c00315 	stw	r7,12(sp)
    41cc:	da000015 	stw	r8,0(sp)
    41d0:	d9800215 	stw	r6,8(sp)
    41d4:	dc801015 	stw	r18,64(sp)
    41d8:	dc400f15 	stw	r17,60(sp)
    41dc:	000501c0 	call	501c <__unpack_d>
    41e0:	d9000204 	addi	r4,sp,8
    41e4:	800b883a 	mov	r5,r16
    41e8:	000501c0 	call	501c <__unpack_d>
    41ec:	d9000417 	ldw	r4,16(sp)
    41f0:	00800044 	movi	r2,1
    41f4:	11000b2e 	bgeu	r2,r4,4224 <__divdf3+0x88>
    41f8:	d9400917 	ldw	r5,36(sp)
    41fc:	1140762e 	bgeu	r2,r5,43d8 <__divdf3+0x23c>
    4200:	d8800517 	ldw	r2,20(sp)
    4204:	d8c00a17 	ldw	r3,40(sp)
    4208:	01800104 	movi	r6,4
    420c:	10c4f03a 	xor	r2,r2,r3
    4210:	d8800515 	stw	r2,20(sp)
    4214:	21800226 	beq	r4,r6,4220 <__divdf3+0x84>
    4218:	00800084 	movi	r2,2
    421c:	2080141e 	bne	r4,r2,4270 <__divdf3+0xd4>
    4220:	29000926 	beq	r5,r4,4248 <__divdf3+0xac>
    4224:	9809883a 	mov	r4,r19
    4228:	0004d080 	call	4d08 <__pack_d>
    422c:	dfc01217 	ldw	ra,72(sp)
    4230:	dcc01117 	ldw	r19,68(sp)
    4234:	dc801017 	ldw	r18,64(sp)
    4238:	dc400f17 	ldw	r17,60(sp)
    423c:	dc000e17 	ldw	r16,56(sp)
    4240:	dec01304 	addi	sp,sp,76
    4244:	f800283a 	ret
    4248:	01000074 	movhi	r4,1
    424c:	2106df04 	addi	r4,r4,7036
    4250:	0004d080 	call	4d08 <__pack_d>
    4254:	dfc01217 	ldw	ra,72(sp)
    4258:	dcc01117 	ldw	r19,68(sp)
    425c:	dc801017 	ldw	r18,64(sp)
    4260:	dc400f17 	ldw	r17,60(sp)
    4264:	dc000e17 	ldw	r16,56(sp)
    4268:	dec01304 	addi	sp,sp,76
    426c:	f800283a 	ret
    4270:	29805b26 	beq	r5,r6,43e0 <__divdf3+0x244>
    4274:	28802d26 	beq	r5,r2,432c <__divdf3+0x190>
    4278:	d8c00617 	ldw	r3,24(sp)
    427c:	d8800b17 	ldw	r2,44(sp)
    4280:	d9c00817 	ldw	r7,32(sp)
    4284:	dc400d17 	ldw	r17,52(sp)
    4288:	188bc83a 	sub	r5,r3,r2
    428c:	d9800717 	ldw	r6,28(sp)
    4290:	dc000c17 	ldw	r16,48(sp)
    4294:	d9400615 	stw	r5,24(sp)
    4298:	3c403836 	bltu	r7,r17,437c <__divdf3+0x1e0>
    429c:	89c03626 	beq	r17,r7,4378 <__divdf3+0x1dc>
    42a0:	0015883a 	mov	r10,zero
    42a4:	001d883a 	mov	r14,zero
    42a8:	02c40034 	movhi	r11,4096
    42ac:	001f883a 	mov	r15,zero
    42b0:	003f883a 	mov	ra,zero
    42b4:	04800f44 	movi	r18,61
    42b8:	00000f06 	br	42f8 <__divdf3+0x15c>
    42bc:	601d883a 	mov	r14,r12
    42c0:	681f883a 	mov	r15,r13
    42c4:	400d883a 	mov	r6,r8
    42c8:	100f883a 	mov	r7,r2
    42cc:	3191883a 	add	r8,r6,r6
    42d0:	5808d07a 	srli	r4,r11,1
    42d4:	4185803a 	cmpltu	r2,r8,r6
    42d8:	39d3883a 	add	r9,r7,r7
    42dc:	28c6b03a 	or	r3,r5,r3
    42e0:	1245883a 	add	r2,r2,r9
    42e4:	1815883a 	mov	r10,r3
    42e8:	2017883a 	mov	r11,r4
    42ec:	400d883a 	mov	r6,r8
    42f0:	100f883a 	mov	r7,r2
    42f4:	fc801726 	beq	ra,r18,4354 <__divdf3+0x1b8>
    42f8:	580a97fa 	slli	r5,r11,31
    42fc:	5006d07a 	srli	r3,r10,1
    4300:	ffc00044 	addi	ra,ra,1
    4304:	3c7ff136 	bltu	r7,r17,42cc <__divdf3+0x130>
    4308:	3411c83a 	sub	r8,r6,r16
    430c:	3205803a 	cmpltu	r2,r6,r8
    4310:	3c53c83a 	sub	r9,r7,r17
    4314:	7298b03a 	or	r12,r14,r10
    4318:	7adab03a 	or	r13,r15,r11
    431c:	4885c83a 	sub	r2,r9,r2
    4320:	89ffe61e 	bne	r17,r7,42bc <__divdf3+0x120>
    4324:	343fe936 	bltu	r6,r16,42cc <__divdf3+0x130>
    4328:	003fe406 	br	42bc <__divdf3+0x120>
    432c:	9809883a 	mov	r4,r19
    4330:	d9800415 	stw	r6,16(sp)
    4334:	0004d080 	call	4d08 <__pack_d>
    4338:	dfc01217 	ldw	ra,72(sp)
    433c:	dcc01117 	ldw	r19,68(sp)
    4340:	dc801017 	ldw	r18,64(sp)
    4344:	dc400f17 	ldw	r17,60(sp)
    4348:	dc000e17 	ldw	r16,56(sp)
    434c:	dec01304 	addi	sp,sp,76
    4350:	f800283a 	ret
    4354:	00803fc4 	movi	r2,255
    4358:	7090703a 	and	r8,r14,r2
    435c:	00802004 	movi	r2,128
    4360:	0007883a 	mov	r3,zero
    4364:	0013883a 	mov	r9,zero
    4368:	40800d26 	beq	r8,r2,43a0 <__divdf3+0x204>
    436c:	dbc00815 	stw	r15,32(sp)
    4370:	db800715 	stw	r14,28(sp)
    4374:	003fab06 	br	4224 <__divdf3+0x88>
    4378:	343fc92e 	bgeu	r6,r16,42a0 <__divdf3+0x104>
    437c:	3185883a 	add	r2,r6,r6
    4380:	1189803a 	cmpltu	r4,r2,r6
    4384:	39c7883a 	add	r3,r7,r7
    4388:	20c9883a 	add	r4,r4,r3
    438c:	297fffc4 	addi	r5,r5,-1
    4390:	100d883a 	mov	r6,r2
    4394:	200f883a 	mov	r7,r4
    4398:	d9400615 	stw	r5,24(sp)
    439c:	003fc006 	br	42a0 <__divdf3+0x104>
    43a0:	483ff21e 	bne	r9,zero,436c <__divdf3+0x1d0>
    43a4:	01004004 	movi	r4,256
    43a8:	7104703a 	and	r2,r14,r4
    43ac:	10c4b03a 	or	r2,r2,r3
    43b0:	103fee1e 	bne	r2,zero,436c <__divdf3+0x1d0>
    43b4:	31c4b03a 	or	r2,r6,r7
    43b8:	103fec26 	beq	r2,zero,436c <__divdf3+0x1d0>
    43bc:	7205883a 	add	r2,r14,r8
    43c0:	1391803a 	cmpltu	r8,r2,r14
    43c4:	43d1883a 	add	r8,r8,r15
    43c8:	013fc004 	movi	r4,-256
    43cc:	111c703a 	and	r14,r2,r4
    43d0:	401f883a 	mov	r15,r8
    43d4:	003fe506 	br	436c <__divdf3+0x1d0>
    43d8:	8009883a 	mov	r4,r16
    43dc:	003f9206 	br	4228 <__divdf3+0x8c>
    43e0:	9809883a 	mov	r4,r19
    43e4:	d8000715 	stw	zero,28(sp)
    43e8:	d8000815 	stw	zero,32(sp)
    43ec:	d8000615 	stw	zero,24(sp)
    43f0:	003f8d06 	br	4228 <__divdf3+0x8c>

000043f4 <__eqdf2>:
    43f4:	deffef04 	addi	sp,sp,-68
    43f8:	dc400f15 	stw	r17,60(sp)
    43fc:	dc400404 	addi	r17,sp,16
    4400:	2005883a 	mov	r2,r4
    4404:	2807883a 	mov	r3,r5
    4408:	dc000e15 	stw	r16,56(sp)
    440c:	d809883a 	mov	r4,sp
    4410:	880b883a 	mov	r5,r17
    4414:	dc000904 	addi	r16,sp,36
    4418:	d8c00115 	stw	r3,4(sp)
    441c:	d8800015 	stw	r2,0(sp)
    4420:	d9800215 	stw	r6,8(sp)
    4424:	dfc01015 	stw	ra,64(sp)
    4428:	d9c00315 	stw	r7,12(sp)
    442c:	000501c0 	call	501c <__unpack_d>
    4430:	d9000204 	addi	r4,sp,8
    4434:	800b883a 	mov	r5,r16
    4438:	000501c0 	call	501c <__unpack_d>
    443c:	d8800417 	ldw	r2,16(sp)
    4440:	00c00044 	movi	r3,1
    4444:	180d883a 	mov	r6,r3
    4448:	1880062e 	bgeu	r3,r2,4464 <__eqdf2+0x70>
    444c:	d8800917 	ldw	r2,36(sp)
    4450:	8809883a 	mov	r4,r17
    4454:	800b883a 	mov	r5,r16
    4458:	1880022e 	bgeu	r3,r2,4464 <__eqdf2+0x70>
    445c:	00051540 	call	5154 <__fpcmp_parts_d>
    4460:	100d883a 	mov	r6,r2
    4464:	3005883a 	mov	r2,r6
    4468:	dfc01017 	ldw	ra,64(sp)
    446c:	dc400f17 	ldw	r17,60(sp)
    4470:	dc000e17 	ldw	r16,56(sp)
    4474:	dec01104 	addi	sp,sp,68
    4478:	f800283a 	ret

0000447c <__gtdf2>:
    447c:	deffef04 	addi	sp,sp,-68
    4480:	dc400f15 	stw	r17,60(sp)
    4484:	dc400404 	addi	r17,sp,16
    4488:	2005883a 	mov	r2,r4
    448c:	2807883a 	mov	r3,r5
    4490:	dc000e15 	stw	r16,56(sp)
    4494:	d809883a 	mov	r4,sp
    4498:	880b883a 	mov	r5,r17
    449c:	dc000904 	addi	r16,sp,36
    44a0:	d8c00115 	stw	r3,4(sp)
    44a4:	d8800015 	stw	r2,0(sp)
    44a8:	d9800215 	stw	r6,8(sp)
    44ac:	dfc01015 	stw	ra,64(sp)
    44b0:	d9c00315 	stw	r7,12(sp)
    44b4:	000501c0 	call	501c <__unpack_d>
    44b8:	d9000204 	addi	r4,sp,8
    44bc:	800b883a 	mov	r5,r16
    44c0:	000501c0 	call	501c <__unpack_d>
    44c4:	d8800417 	ldw	r2,16(sp)
    44c8:	00c00044 	movi	r3,1
    44cc:	01bfffc4 	movi	r6,-1
    44d0:	1880062e 	bgeu	r3,r2,44ec <__gtdf2+0x70>
    44d4:	d8800917 	ldw	r2,36(sp)
    44d8:	8809883a 	mov	r4,r17
    44dc:	800b883a 	mov	r5,r16
    44e0:	1880022e 	bgeu	r3,r2,44ec <__gtdf2+0x70>
    44e4:	00051540 	call	5154 <__fpcmp_parts_d>
    44e8:	100d883a 	mov	r6,r2
    44ec:	3005883a 	mov	r2,r6
    44f0:	dfc01017 	ldw	ra,64(sp)
    44f4:	dc400f17 	ldw	r17,60(sp)
    44f8:	dc000e17 	ldw	r16,56(sp)
    44fc:	dec01104 	addi	sp,sp,68
    4500:	f800283a 	ret

00004504 <__gedf2>:
    4504:	deffef04 	addi	sp,sp,-68
    4508:	dc400f15 	stw	r17,60(sp)
    450c:	dc400404 	addi	r17,sp,16
    4510:	2005883a 	mov	r2,r4
    4514:	2807883a 	mov	r3,r5
    4518:	dc000e15 	stw	r16,56(sp)
    451c:	d809883a 	mov	r4,sp
    4520:	880b883a 	mov	r5,r17
    4524:	dc000904 	addi	r16,sp,36
    4528:	d8c00115 	stw	r3,4(sp)
    452c:	d8800015 	stw	r2,0(sp)
    4530:	d9800215 	stw	r6,8(sp)
    4534:	dfc01015 	stw	ra,64(sp)
    4538:	d9c00315 	stw	r7,12(sp)
    453c:	000501c0 	call	501c <__unpack_d>
    4540:	d9000204 	addi	r4,sp,8
    4544:	800b883a 	mov	r5,r16
    4548:	000501c0 	call	501c <__unpack_d>
    454c:	d8800417 	ldw	r2,16(sp)
    4550:	00c00044 	movi	r3,1
    4554:	01bfffc4 	movi	r6,-1
    4558:	1880062e 	bgeu	r3,r2,4574 <__gedf2+0x70>
    455c:	d8800917 	ldw	r2,36(sp)
    4560:	8809883a 	mov	r4,r17
    4564:	800b883a 	mov	r5,r16
    4568:	1880022e 	bgeu	r3,r2,4574 <__gedf2+0x70>
    456c:	00051540 	call	5154 <__fpcmp_parts_d>
    4570:	100d883a 	mov	r6,r2
    4574:	3005883a 	mov	r2,r6
    4578:	dfc01017 	ldw	ra,64(sp)
    457c:	dc400f17 	ldw	r17,60(sp)
    4580:	dc000e17 	ldw	r16,56(sp)
    4584:	dec01104 	addi	sp,sp,68
    4588:	f800283a 	ret

0000458c <__floatsidf>:
    458c:	2006d7fa 	srli	r3,r4,31
    4590:	defff604 	addi	sp,sp,-40
    4594:	008000c4 	movi	r2,3
    4598:	dfc00915 	stw	ra,36(sp)
    459c:	dcc00815 	stw	r19,32(sp)
    45a0:	dc800715 	stw	r18,28(sp)
    45a4:	dc400615 	stw	r17,24(sp)
    45a8:	dc000515 	stw	r16,20(sp)
    45ac:	d8800015 	stw	r2,0(sp)
    45b0:	d8c00115 	stw	r3,4(sp)
    45b4:	20000f1e 	bne	r4,zero,45f4 <__floatsidf+0x68>
    45b8:	00800084 	movi	r2,2
    45bc:	d8800015 	stw	r2,0(sp)
    45c0:	d809883a 	mov	r4,sp
    45c4:	0004d080 	call	4d08 <__pack_d>
    45c8:	1009883a 	mov	r4,r2
    45cc:	180b883a 	mov	r5,r3
    45d0:	2005883a 	mov	r2,r4
    45d4:	2807883a 	mov	r3,r5
    45d8:	dfc00917 	ldw	ra,36(sp)
    45dc:	dcc00817 	ldw	r19,32(sp)
    45e0:	dc800717 	ldw	r18,28(sp)
    45e4:	dc400617 	ldw	r17,24(sp)
    45e8:	dc000517 	ldw	r16,20(sp)
    45ec:	dec00a04 	addi	sp,sp,40
    45f0:	f800283a 	ret
    45f4:	00800f04 	movi	r2,60
    45f8:	1807003a 	cmpeq	r3,r3,zero
    45fc:	d8800215 	stw	r2,8(sp)
    4600:	18001126 	beq	r3,zero,4648 <__floatsidf+0xbc>
    4604:	0027883a 	mov	r19,zero
    4608:	2025883a 	mov	r18,r4
    460c:	d9000315 	stw	r4,12(sp)
    4610:	dcc00415 	stw	r19,16(sp)
    4614:	000498c0 	call	498c <__clzsi2>
    4618:	11000744 	addi	r4,r2,29
    461c:	013fe80e 	bge	zero,r4,45c0 <__floatsidf+0x34>
    4620:	10bfff44 	addi	r2,r2,-3
    4624:	10000c16 	blt	r2,zero,4658 <__floatsidf+0xcc>
    4628:	90a2983a 	sll	r17,r18,r2
    462c:	0021883a 	mov	r16,zero
    4630:	d8800217 	ldw	r2,8(sp)
    4634:	dc400415 	stw	r17,16(sp)
    4638:	dc000315 	stw	r16,12(sp)
    463c:	1105c83a 	sub	r2,r2,r4
    4640:	d8800215 	stw	r2,8(sp)
    4644:	003fde06 	br	45c0 <__floatsidf+0x34>
    4648:	00a00034 	movhi	r2,32768
    464c:	20800a26 	beq	r4,r2,4678 <__floatsidf+0xec>
    4650:	0109c83a 	sub	r4,zero,r4
    4654:	003feb06 	br	4604 <__floatsidf+0x78>
    4658:	9006d07a 	srli	r3,r18,1
    465c:	008007c4 	movi	r2,31
    4660:	1105c83a 	sub	r2,r2,r4
    4664:	1886d83a 	srl	r3,r3,r2
    4668:	9922983a 	sll	r17,r19,r4
    466c:	9120983a 	sll	r16,r18,r4
    4670:	1c62b03a 	or	r17,r3,r17
    4674:	003fee06 	br	4630 <__floatsidf+0xa4>
    4678:	0009883a 	mov	r4,zero
    467c:	01707834 	movhi	r5,49632
    4680:	003fd306 	br	45d0 <__floatsidf+0x44>

00004684 <__fixdfsi>:
    4684:	defff804 	addi	sp,sp,-32
    4688:	2005883a 	mov	r2,r4
    468c:	2807883a 	mov	r3,r5
    4690:	d809883a 	mov	r4,sp
    4694:	d9400204 	addi	r5,sp,8
    4698:	d8c00115 	stw	r3,4(sp)
    469c:	d8800015 	stw	r2,0(sp)
    46a0:	dfc00715 	stw	ra,28(sp)
    46a4:	000501c0 	call	501c <__unpack_d>
    46a8:	d8c00217 	ldw	r3,8(sp)
    46ac:	00800084 	movi	r2,2
    46b0:	1880051e 	bne	r3,r2,46c8 <__fixdfsi+0x44>
    46b4:	0007883a 	mov	r3,zero
    46b8:	1805883a 	mov	r2,r3
    46bc:	dfc00717 	ldw	ra,28(sp)
    46c0:	dec00804 	addi	sp,sp,32
    46c4:	f800283a 	ret
    46c8:	00800044 	movi	r2,1
    46cc:	10fff92e 	bgeu	r2,r3,46b4 <__fixdfsi+0x30>
    46d0:	00800104 	movi	r2,4
    46d4:	18800426 	beq	r3,r2,46e8 <__fixdfsi+0x64>
    46d8:	d8c00417 	ldw	r3,16(sp)
    46dc:	183ff516 	blt	r3,zero,46b4 <__fixdfsi+0x30>
    46e0:	00800784 	movi	r2,30
    46e4:	10c0080e 	bge	r2,r3,4708 <__fixdfsi+0x84>
    46e8:	d8800317 	ldw	r2,12(sp)
    46ec:	1000121e 	bne	r2,zero,4738 <__fixdfsi+0xb4>
    46f0:	00e00034 	movhi	r3,32768
    46f4:	18ffffc4 	addi	r3,r3,-1
    46f8:	1805883a 	mov	r2,r3
    46fc:	dfc00717 	ldw	ra,28(sp)
    4700:	dec00804 	addi	sp,sp,32
    4704:	f800283a 	ret
    4708:	00800f04 	movi	r2,60
    470c:	10d1c83a 	sub	r8,r2,r3
    4710:	40bff804 	addi	r2,r8,-32
    4714:	d9800517 	ldw	r6,20(sp)
    4718:	d9c00617 	ldw	r7,24(sp)
    471c:	10000816 	blt	r2,zero,4740 <__fixdfsi+0xbc>
    4720:	3888d83a 	srl	r4,r7,r2
    4724:	d8800317 	ldw	r2,12(sp)
    4728:	2007883a 	mov	r3,r4
    472c:	103fe226 	beq	r2,zero,46b8 <__fixdfsi+0x34>
    4730:	0107c83a 	sub	r3,zero,r4
    4734:	003fe006 	br	46b8 <__fixdfsi+0x34>
    4738:	00e00034 	movhi	r3,32768
    473c:	003fde06 	br	46b8 <__fixdfsi+0x34>
    4740:	39c7883a 	add	r3,r7,r7
    4744:	008007c4 	movi	r2,31
    4748:	1205c83a 	sub	r2,r2,r8
    474c:	1886983a 	sll	r3,r3,r2
    4750:	3208d83a 	srl	r4,r6,r8
    4754:	1908b03a 	or	r4,r3,r4
    4758:	003ff206 	br	4724 <__fixdfsi+0xa0>

0000475c <__make_dp>:
    475c:	defff904 	addi	sp,sp,-28
    4760:	d8c00717 	ldw	r3,28(sp)
    4764:	d9000015 	stw	r4,0(sp)
    4768:	d809883a 	mov	r4,sp
    476c:	dfc00515 	stw	ra,20(sp)
    4770:	d9c00615 	stw	r7,24(sp)
    4774:	d9400115 	stw	r5,4(sp)
    4778:	d9800215 	stw	r6,8(sp)
    477c:	d8c00415 	stw	r3,16(sp)
    4780:	d9c00315 	stw	r7,12(sp)
    4784:	0004d080 	call	4d08 <__pack_d>
    4788:	dfc00517 	ldw	ra,20(sp)
    478c:	dec00704 	addi	sp,sp,28
    4790:	f800283a 	ret

00004794 <__truncdfsf2>:
    4794:	defff804 	addi	sp,sp,-32
    4798:	2005883a 	mov	r2,r4
    479c:	2807883a 	mov	r3,r5
    47a0:	d809883a 	mov	r4,sp
    47a4:	d9400204 	addi	r5,sp,8
    47a8:	d8c00115 	stw	r3,4(sp)
    47ac:	d8800015 	stw	r2,0(sp)
    47b0:	dfc00715 	stw	ra,28(sp)
    47b4:	000501c0 	call	501c <__unpack_d>
    47b8:	d9c00517 	ldw	r7,20(sp)
    47bc:	da000617 	ldw	r8,24(sp)
    47c0:	02d00034 	movhi	r11,16384
    47c4:	5affffc4 	addi	r11,r11,-1
    47c8:	3812d7ba 	srli	r9,r7,30
    47cc:	401a90ba 	slli	r13,r8,2
    47d0:	3ac4703a 	and	r2,r7,r11
    47d4:	0007883a 	mov	r3,zero
    47d8:	6a52b03a 	or	r9,r13,r9
    47dc:	10c4b03a 	or	r2,r2,r3
    47e0:	d9000217 	ldw	r4,8(sp)
    47e4:	d9400317 	ldw	r5,12(sp)
    47e8:	d9800417 	ldw	r6,16(sp)
    47ec:	480f883a 	mov	r7,r9
    47f0:	10000126 	beq	r2,zero,47f8 <__truncdfsf2+0x64>
    47f4:	49c00054 	ori	r7,r9,1
    47f8:	0004cdc0 	call	4cdc <__make_fp>
    47fc:	dfc00717 	ldw	ra,28(sp)
    4800:	dec00804 	addi	sp,sp,32
    4804:	f800283a 	ret

00004808 <udivmodsi4>:
    4808:	29001b2e 	bgeu	r5,r4,4878 <udivmodsi4+0x70>
    480c:	28001a16 	blt	r5,zero,4878 <udivmodsi4+0x70>
    4810:	00800044 	movi	r2,1
    4814:	0007883a 	mov	r3,zero
    4818:	01c007c4 	movi	r7,31
    481c:	00000306 	br	482c <udivmodsi4+0x24>
    4820:	19c01326 	beq	r3,r7,4870 <udivmodsi4+0x68>
    4824:	18c00044 	addi	r3,r3,1
    4828:	28000416 	blt	r5,zero,483c <udivmodsi4+0x34>
    482c:	294b883a 	add	r5,r5,r5
    4830:	1085883a 	add	r2,r2,r2
    4834:	293ffa36 	bltu	r5,r4,4820 <udivmodsi4+0x18>
    4838:	10000d26 	beq	r2,zero,4870 <udivmodsi4+0x68>
    483c:	0007883a 	mov	r3,zero
    4840:	21400236 	bltu	r4,r5,484c <udivmodsi4+0x44>
    4844:	2149c83a 	sub	r4,r4,r5
    4848:	1886b03a 	or	r3,r3,r2
    484c:	1004d07a 	srli	r2,r2,1
    4850:	280ad07a 	srli	r5,r5,1
    4854:	103ffa1e 	bne	r2,zero,4840 <udivmodsi4+0x38>
    4858:	30000226 	beq	r6,zero,4864 <udivmodsi4+0x5c>
    485c:	2005883a 	mov	r2,r4
    4860:	f800283a 	ret
    4864:	1809883a 	mov	r4,r3
    4868:	2005883a 	mov	r2,r4
    486c:	f800283a 	ret
    4870:	0007883a 	mov	r3,zero
    4874:	003ff806 	br	4858 <udivmodsi4+0x50>
    4878:	00800044 	movi	r2,1
    487c:	0007883a 	mov	r3,zero
    4880:	003fef06 	br	4840 <udivmodsi4+0x38>

00004884 <__divsi3>:
    4884:	defffe04 	addi	sp,sp,-8
    4888:	dc000015 	stw	r16,0(sp)
    488c:	dfc00115 	stw	ra,4(sp)
    4890:	0021883a 	mov	r16,zero
    4894:	20000c16 	blt	r4,zero,48c8 <__divsi3+0x44>
    4898:	000d883a 	mov	r6,zero
    489c:	28000e16 	blt	r5,zero,48d8 <__divsi3+0x54>
    48a0:	00048080 	call	4808 <udivmodsi4>
    48a4:	1007883a 	mov	r3,r2
    48a8:	8005003a 	cmpeq	r2,r16,zero
    48ac:	1000011e 	bne	r2,zero,48b4 <__divsi3+0x30>
    48b0:	00c7c83a 	sub	r3,zero,r3
    48b4:	1805883a 	mov	r2,r3
    48b8:	dfc00117 	ldw	ra,4(sp)
    48bc:	dc000017 	ldw	r16,0(sp)
    48c0:	dec00204 	addi	sp,sp,8
    48c4:	f800283a 	ret
    48c8:	0109c83a 	sub	r4,zero,r4
    48cc:	04000044 	movi	r16,1
    48d0:	000d883a 	mov	r6,zero
    48d4:	283ff20e 	bge	r5,zero,48a0 <__divsi3+0x1c>
    48d8:	014bc83a 	sub	r5,zero,r5
    48dc:	8021003a 	cmpeq	r16,r16,zero
    48e0:	003fef06 	br	48a0 <__divsi3+0x1c>

000048e4 <__modsi3>:
    48e4:	deffff04 	addi	sp,sp,-4
    48e8:	dfc00015 	stw	ra,0(sp)
    48ec:	01800044 	movi	r6,1
    48f0:	2807883a 	mov	r3,r5
    48f4:	20000416 	blt	r4,zero,4908 <__modsi3+0x24>
    48f8:	28000c16 	blt	r5,zero,492c <__modsi3+0x48>
    48fc:	dfc00017 	ldw	ra,0(sp)
    4900:	dec00104 	addi	sp,sp,4
    4904:	00048081 	jmpi	4808 <udivmodsi4>
    4908:	0109c83a 	sub	r4,zero,r4
    490c:	28000b16 	blt	r5,zero,493c <__modsi3+0x58>
    4910:	180b883a 	mov	r5,r3
    4914:	01800044 	movi	r6,1
    4918:	00048080 	call	4808 <udivmodsi4>
    491c:	0085c83a 	sub	r2,zero,r2
    4920:	dfc00017 	ldw	ra,0(sp)
    4924:	dec00104 	addi	sp,sp,4
    4928:	f800283a 	ret
    492c:	014bc83a 	sub	r5,zero,r5
    4930:	dfc00017 	ldw	ra,0(sp)
    4934:	dec00104 	addi	sp,sp,4
    4938:	00048081 	jmpi	4808 <udivmodsi4>
    493c:	0147c83a 	sub	r3,zero,r5
    4940:	003ff306 	br	4910 <__modsi3+0x2c>

00004944 <__udivsi3>:
    4944:	000d883a 	mov	r6,zero
    4948:	00048081 	jmpi	4808 <udivmodsi4>

0000494c <__umodsi3>:
    494c:	01800044 	movi	r6,1
    4950:	00048081 	jmpi	4808 <udivmodsi4>

00004954 <__mulsi3>:
    4954:	20000a26 	beq	r4,zero,4980 <__mulsi3+0x2c>
    4958:	0007883a 	mov	r3,zero
    495c:	2080004c 	andi	r2,r4,1
    4960:	1005003a 	cmpeq	r2,r2,zero
    4964:	2008d07a 	srli	r4,r4,1
    4968:	1000011e 	bne	r2,zero,4970 <__mulsi3+0x1c>
    496c:	1947883a 	add	r3,r3,r5
    4970:	294b883a 	add	r5,r5,r5
    4974:	203ff91e 	bne	r4,zero,495c <__mulsi3+0x8>
    4978:	1805883a 	mov	r2,r3
    497c:	f800283a 	ret
    4980:	0007883a 	mov	r3,zero
    4984:	1805883a 	mov	r2,r3
    4988:	f800283a 	ret

0000498c <__clzsi2>:
    498c:	00bfffd4 	movui	r2,65535
    4990:	11000e36 	bltu	r2,r4,49cc <__clzsi2+0x40>
    4994:	00803fc4 	movi	r2,255
    4998:	01400204 	movi	r5,8
    499c:	0007883a 	mov	r3,zero
    49a0:	11001036 	bltu	r2,r4,49e4 <__clzsi2+0x58>
    49a4:	000b883a 	mov	r5,zero
    49a8:	20c6d83a 	srl	r3,r4,r3
    49ac:	00800074 	movhi	r2,1
    49b0:	1086e404 	addi	r2,r2,7056
    49b4:	1887883a 	add	r3,r3,r2
    49b8:	18800003 	ldbu	r2,0(r3)
    49bc:	00c00804 	movi	r3,32
    49c0:	2885883a 	add	r2,r5,r2
    49c4:	1885c83a 	sub	r2,r3,r2
    49c8:	f800283a 	ret
    49cc:	01400404 	movi	r5,16
    49d0:	00804034 	movhi	r2,256
    49d4:	10bfffc4 	addi	r2,r2,-1
    49d8:	2807883a 	mov	r3,r5
    49dc:	113ff22e 	bgeu	r2,r4,49a8 <__clzsi2+0x1c>
    49e0:	01400604 	movi	r5,24
    49e4:	2807883a 	mov	r3,r5
    49e8:	20c6d83a 	srl	r3,r4,r3
    49ec:	00800074 	movhi	r2,1
    49f0:	1086e404 	addi	r2,r2,7056
    49f4:	1887883a 	add	r3,r3,r2
    49f8:	18800003 	ldbu	r2,0(r3)
    49fc:	00c00804 	movi	r3,32
    4a00:	2885883a 	add	r2,r5,r2
    4a04:	1885c83a 	sub	r2,r3,r2
    4a08:	f800283a 	ret

00004a0c <__pack_f>:
    4a0c:	20c00017 	ldw	r3,0(r4)
    4a10:	01c00044 	movi	r7,1
    4a14:	21800317 	ldw	r6,12(r4)
    4a18:	21400117 	ldw	r5,4(r4)
    4a1c:	38c02d2e 	bgeu	r7,r3,4ad4 <__pack_f+0xc8>
    4a20:	00800104 	movi	r2,4
    4a24:	18802826 	beq	r3,r2,4ac8 <__pack_f+0xbc>
    4a28:	00800084 	movi	r2,2
    4a2c:	18800126 	beq	r3,r2,4a34 <__pack_f+0x28>
    4a30:	3000101e 	bne	r6,zero,4a74 <__pack_f+0x68>
    4a34:	000d883a 	mov	r6,zero
    4a38:	0007883a 	mov	r3,zero
    4a3c:	19003fcc 	andi	r4,r3,255
    4a40:	200895fa 	slli	r4,r4,23
    4a44:	00c02034 	movhi	r3,128
    4a48:	18ffffc4 	addi	r3,r3,-1
    4a4c:	30c6703a 	and	r3,r6,r3
    4a50:	10a0002c 	andhi	r2,r2,32768
    4a54:	10c4b03a 	or	r2,r2,r3
    4a58:	280a97fa 	slli	r5,r5,31
    4a5c:	1104b03a 	or	r2,r2,r4
    4a60:	00e00034 	movhi	r3,32768
    4a64:	18ffffc4 	addi	r3,r3,-1
    4a68:	10c4703a 	and	r2,r2,r3
    4a6c:	1144b03a 	or	r2,r2,r5
    4a70:	f800283a 	ret
    4a74:	21000217 	ldw	r4,8(r4)
    4a78:	00bfe084 	movi	r2,-126
    4a7c:	20801b16 	blt	r4,r2,4aec <__pack_f+0xe0>
    4a80:	00801fc4 	movi	r2,127
    4a84:	11001016 	blt	r2,r4,4ac8 <__pack_f+0xbc>
    4a88:	308e703a 	and	r7,r6,r2
    4a8c:	2087883a 	add	r3,r4,r2
    4a90:	00801004 	movi	r2,64
    4a94:	38800526 	beq	r7,r2,4aac <__pack_f+0xa0>
    4a98:	31800fc4 	addi	r6,r6,63
    4a9c:	30000716 	blt	r6,zero,4abc <__pack_f+0xb0>
    4aa0:	300490ba 	slli	r2,r6,2
    4aa4:	100cd27a 	srli	r6,r2,9
    4aa8:	003fe406 	br	4a3c <__pack_f+0x30>
    4aac:	3080200c 	andi	r2,r6,128
    4ab0:	103ffa26 	beq	r2,zero,4a9c <__pack_f+0x90>
    4ab4:	31cd883a 	add	r6,r6,r7
    4ab8:	003ff806 	br	4a9c <__pack_f+0x90>
    4abc:	300cd07a 	srli	r6,r6,1
    4ac0:	18c00044 	addi	r3,r3,1
    4ac4:	003ff606 	br	4aa0 <__pack_f+0x94>
    4ac8:	000d883a 	mov	r6,zero
    4acc:	00ffffc4 	movi	r3,-1
    4ad0:	003fda06 	br	4a3c <__pack_f+0x30>
    4ad4:	31800434 	orhi	r6,r6,16
    4ad8:	00802034 	movhi	r2,128
    4adc:	10bfffc4 	addi	r2,r2,-1
    4ae0:	308c703a 	and	r6,r6,r2
    4ae4:	00ffffc4 	movi	r3,-1
    4ae8:	003fd406 	br	4a3c <__pack_f+0x30>
    4aec:	1109c83a 	sub	r4,r2,r4
    4af0:	00800644 	movi	r2,25
    4af4:	11001216 	blt	r2,r4,4b40 <__pack_f+0x134>
    4af8:	3904983a 	sll	r2,r7,r4
    4afc:	3106d83a 	srl	r3,r6,r4
    4b00:	10bfffc4 	addi	r2,r2,-1
    4b04:	3084703a 	and	r2,r6,r2
    4b08:	1004c03a 	cmpne	r2,r2,zero
    4b0c:	1886b03a 	or	r3,r3,r2
    4b10:	19001fcc 	andi	r4,r3,127
    4b14:	00801004 	movi	r2,64
    4b18:	20800c26 	beq	r4,r2,4b4c <__pack_f+0x140>
    4b1c:	18c00fc4 	addi	r3,r3,63
    4b20:	00900034 	movhi	r2,16384
    4b24:	10bfffc4 	addi	r2,r2,-1
    4b28:	180cd1fa 	srli	r6,r3,7
    4b2c:	10c7803a 	cmpltu	r3,r2,r3
    4b30:	00802034 	movhi	r2,128
    4b34:	10bfffc4 	addi	r2,r2,-1
    4b38:	308c703a 	and	r6,r6,r2
    4b3c:	003fbf06 	br	4a3c <__pack_f+0x30>
    4b40:	0007883a 	mov	r3,zero
    4b44:	000d883a 	mov	r6,zero
    4b48:	003ff906 	br	4b30 <__pack_f+0x124>
    4b4c:	1880200c 	andi	r2,r3,128
    4b50:	10000126 	beq	r2,zero,4b58 <__pack_f+0x14c>
    4b54:	1907883a 	add	r3,r3,r4
    4b58:	180cd1fa 	srli	r6,r3,7
    4b5c:	00900034 	movhi	r2,16384
    4b60:	10bfffc4 	addi	r2,r2,-1
    4b64:	10c7803a 	cmpltu	r3,r2,r3
    4b68:	003ff106 	br	4b30 <__pack_f+0x124>

00004b6c <__unpack_f>:
    4b6c:	21800017 	ldw	r6,0(r4)
    4b70:	00c02034 	movhi	r3,128
    4b74:	18ffffc4 	addi	r3,r3,-1
    4b78:	3004d5fa 	srli	r2,r6,23
    4b7c:	3008d7fa 	srli	r4,r6,31
    4b80:	30ce703a 	and	r7,r6,r3
    4b84:	10c03fcc 	andi	r3,r2,255
    4b88:	29000115 	stw	r4,4(r5)
    4b8c:	1800131e 	bne	r3,zero,4bdc <__unpack_f+0x70>
    4b90:	38000f26 	beq	r7,zero,4bd0 <__unpack_f+0x64>
    4b94:	380691fa 	slli	r3,r7,7
    4b98:	01bfe084 	movi	r6,-126
    4b9c:	008000c4 	movi	r2,3
    4ba0:	01100034 	movhi	r4,16384
    4ba4:	213fffc4 	addi	r4,r4,-1
    4ba8:	28800015 	stw	r2,0(r5)
    4bac:	29800215 	stw	r6,8(r5)
    4bb0:	20c00536 	bltu	r4,r3,4bc8 <__unpack_f+0x5c>
    4bb4:	3005883a 	mov	r2,r6
    4bb8:	18c7883a 	add	r3,r3,r3
    4bbc:	10bfffc4 	addi	r2,r2,-1
    4bc0:	20fffd2e 	bgeu	r4,r3,4bb8 <__unpack_f+0x4c>
    4bc4:	28800215 	stw	r2,8(r5)
    4bc8:	28c00315 	stw	r3,12(r5)
    4bcc:	f800283a 	ret
    4bd0:	00800084 	movi	r2,2
    4bd4:	28800015 	stw	r2,0(r5)
    4bd8:	f800283a 	ret
    4bdc:	00803fc4 	movi	r2,255
    4be0:	18800826 	beq	r3,r2,4c04 <__unpack_f+0x98>
    4be4:	380491fa 	slli	r2,r7,7
    4be8:	18ffe044 	addi	r3,r3,-127
    4bec:	28c00215 	stw	r3,8(r5)
    4bf0:	10900034 	orhi	r2,r2,16384
    4bf4:	28800315 	stw	r2,12(r5)
    4bf8:	008000c4 	movi	r2,3
    4bfc:	28800015 	stw	r2,0(r5)
    4c00:	f800283a 	ret
    4c04:	3800031e 	bne	r7,zero,4c14 <__unpack_f+0xa8>
    4c08:	00800104 	movi	r2,4
    4c0c:	28800015 	stw	r2,0(r5)
    4c10:	f800283a 	ret
    4c14:	3080042c 	andhi	r2,r6,16
    4c18:	10000426 	beq	r2,zero,4c2c <__unpack_f+0xc0>
    4c1c:	00800044 	movi	r2,1
    4c20:	28800015 	stw	r2,0(r5)
    4c24:	29c00315 	stw	r7,12(r5)
    4c28:	f800283a 	ret
    4c2c:	28000015 	stw	zero,0(r5)
    4c30:	003ffc06 	br	4c24 <__unpack_f+0xb8>

00004c34 <__fpcmp_parts_f>:
    4c34:	21800017 	ldw	r6,0(r4)
    4c38:	00c00044 	movi	r3,1
    4c3c:	19800a2e 	bgeu	r3,r6,4c68 <__fpcmp_parts_f+0x34>
    4c40:	28800017 	ldw	r2,0(r5)
    4c44:	1880082e 	bgeu	r3,r2,4c68 <__fpcmp_parts_f+0x34>
    4c48:	00c00104 	movi	r3,4
    4c4c:	30c01e26 	beq	r6,r3,4cc8 <__fpcmp_parts_f+0x94>
    4c50:	10c01a26 	beq	r2,r3,4cbc <__fpcmp_parts_f+0x88>
    4c54:	00c00084 	movi	r3,2
    4c58:	30c00526 	beq	r6,r3,4c70 <__fpcmp_parts_f+0x3c>
    4c5c:	10c0071e 	bne	r2,r3,4c7c <__fpcmp_parts_f+0x48>
    4c60:	20800117 	ldw	r2,4(r4)
    4c64:	1000091e 	bne	r2,zero,4c8c <__fpcmp_parts_f+0x58>
    4c68:	00800044 	movi	r2,1
    4c6c:	f800283a 	ret
    4c70:	10c0121e 	bne	r2,r3,4cbc <__fpcmp_parts_f+0x88>
    4c74:	0005883a 	mov	r2,zero
    4c78:	f800283a 	ret
    4c7c:	20c00117 	ldw	r3,4(r4)
    4c80:	28800117 	ldw	r2,4(r5)
    4c84:	18800326 	beq	r3,r2,4c94 <__fpcmp_parts_f+0x60>
    4c88:	183ff726 	beq	r3,zero,4c68 <__fpcmp_parts_f+0x34>
    4c8c:	00bfffc4 	movi	r2,-1
    4c90:	f800283a 	ret
    4c94:	21800217 	ldw	r6,8(r4)
    4c98:	28800217 	ldw	r2,8(r5)
    4c9c:	11bffa16 	blt	r2,r6,4c88 <__fpcmp_parts_f+0x54>
    4ca0:	30800416 	blt	r6,r2,4cb4 <__fpcmp_parts_f+0x80>
    4ca4:	21000317 	ldw	r4,12(r4)
    4ca8:	29400317 	ldw	r5,12(r5)
    4cac:	293ff636 	bltu	r5,r4,4c88 <__fpcmp_parts_f+0x54>
    4cb0:	217ff02e 	bgeu	r4,r5,4c74 <__fpcmp_parts_f+0x40>
    4cb4:	183fec1e 	bne	r3,zero,4c68 <__fpcmp_parts_f+0x34>
    4cb8:	003ff406 	br	4c8c <__fpcmp_parts_f+0x58>
    4cbc:	28800117 	ldw	r2,4(r5)
    4cc0:	103fe91e 	bne	r2,zero,4c68 <__fpcmp_parts_f+0x34>
    4cc4:	003ff106 	br	4c8c <__fpcmp_parts_f+0x58>
    4cc8:	11bfe51e 	bne	r2,r6,4c60 <__fpcmp_parts_f+0x2c>
    4ccc:	28c00117 	ldw	r3,4(r5)
    4cd0:	20800117 	ldw	r2,4(r4)
    4cd4:	1885c83a 	sub	r2,r3,r2
    4cd8:	f800283a 	ret

00004cdc <__make_fp>:
    4cdc:	defffb04 	addi	sp,sp,-20
    4ce0:	d9000015 	stw	r4,0(sp)
    4ce4:	d809883a 	mov	r4,sp
    4ce8:	dfc00415 	stw	ra,16(sp)
    4cec:	d9400115 	stw	r5,4(sp)
    4cf0:	d9800215 	stw	r6,8(sp)
    4cf4:	d9c00315 	stw	r7,12(sp)
    4cf8:	0004a0c0 	call	4a0c <__pack_f>
    4cfc:	dfc00417 	ldw	ra,16(sp)
    4d00:	dec00504 	addi	sp,sp,20
    4d04:	f800283a 	ret

00004d08 <__pack_d>:
    4d08:	20c00017 	ldw	r3,0(r4)
    4d0c:	defffd04 	addi	sp,sp,-12
    4d10:	dc000015 	stw	r16,0(sp)
    4d14:	dc800215 	stw	r18,8(sp)
    4d18:	dc400115 	stw	r17,4(sp)
    4d1c:	00800044 	movi	r2,1
    4d20:	22000317 	ldw	r8,12(r4)
    4d24:	001f883a 	mov	r15,zero
    4d28:	22400417 	ldw	r9,16(r4)
    4d2c:	24000117 	ldw	r16,4(r4)
    4d30:	10c0552e 	bgeu	r2,r3,4e88 <__pack_d+0x180>
    4d34:	00800104 	movi	r2,4
    4d38:	18804f26 	beq	r3,r2,4e78 <__pack_d+0x170>
    4d3c:	00800084 	movi	r2,2
    4d40:	18800226 	beq	r3,r2,4d4c <__pack_d+0x44>
    4d44:	4244b03a 	or	r2,r8,r9
    4d48:	10001a1e 	bne	r2,zero,4db4 <__pack_d+0xac>
    4d4c:	000d883a 	mov	r6,zero
    4d50:	000f883a 	mov	r7,zero
    4d54:	0011883a 	mov	r8,zero
    4d58:	00800434 	movhi	r2,16
    4d5c:	10bfffc4 	addi	r2,r2,-1
    4d60:	301d883a 	mov	r14,r6
    4d64:	3884703a 	and	r2,r7,r2
    4d68:	400a953a 	slli	r5,r8,20
    4d6c:	79bffc2c 	andhi	r6,r15,65520
    4d70:	308cb03a 	or	r6,r6,r2
    4d74:	00e00434 	movhi	r3,32784
    4d78:	18ffffc4 	addi	r3,r3,-1
    4d7c:	800497fa 	slli	r2,r16,31
    4d80:	30c6703a 	and	r3,r6,r3
    4d84:	1946b03a 	or	r3,r3,r5
    4d88:	01600034 	movhi	r5,32768
    4d8c:	297fffc4 	addi	r5,r5,-1
    4d90:	194a703a 	and	r5,r3,r5
    4d94:	288ab03a 	or	r5,r5,r2
    4d98:	2807883a 	mov	r3,r5
    4d9c:	7005883a 	mov	r2,r14
    4da0:	dc800217 	ldw	r18,8(sp)
    4da4:	dc400117 	ldw	r17,4(sp)
    4da8:	dc000017 	ldw	r16,0(sp)
    4dac:	dec00304 	addi	sp,sp,12
    4db0:	f800283a 	ret
    4db4:	21000217 	ldw	r4,8(r4)
    4db8:	00bf0084 	movi	r2,-1022
    4dbc:	20803f16 	blt	r4,r2,4ebc <__pack_d+0x1b4>
    4dc0:	0080ffc4 	movi	r2,1023
    4dc4:	11002c16 	blt	r2,r4,4e78 <__pack_d+0x170>
    4dc8:	00803fc4 	movi	r2,255
    4dcc:	408c703a 	and	r6,r8,r2
    4dd0:	00802004 	movi	r2,128
    4dd4:	0007883a 	mov	r3,zero
    4dd8:	000f883a 	mov	r7,zero
    4ddc:	2280ffc4 	addi	r10,r4,1023
    4de0:	30801e26 	beq	r6,r2,4e5c <__pack_d+0x154>
    4de4:	00801fc4 	movi	r2,127
    4de8:	4089883a 	add	r4,r8,r2
    4dec:	220d803a 	cmpltu	r6,r4,r8
    4df0:	324d883a 	add	r6,r6,r9
    4df4:	2011883a 	mov	r8,r4
    4df8:	3013883a 	mov	r9,r6
    4dfc:	00880034 	movhi	r2,8192
    4e00:	10bfffc4 	addi	r2,r2,-1
    4e04:	12400d36 	bltu	r2,r9,4e3c <__pack_d+0x134>
    4e08:	4804963a 	slli	r2,r9,24
    4e0c:	400cd23a 	srli	r6,r8,8
    4e10:	480ed23a 	srli	r7,r9,8
    4e14:	013fffc4 	movi	r4,-1
    4e18:	118cb03a 	or	r6,r2,r6
    4e1c:	01400434 	movhi	r5,16
    4e20:	297fffc4 	addi	r5,r5,-1
    4e24:	3104703a 	and	r2,r6,r4
    4e28:	3946703a 	and	r3,r7,r5
    4e2c:	5201ffcc 	andi	r8,r10,2047
    4e30:	100d883a 	mov	r6,r2
    4e34:	180f883a 	mov	r7,r3
    4e38:	003fc706 	br	4d58 <__pack_d+0x50>
    4e3c:	480897fa 	slli	r4,r9,31
    4e40:	4004d07a 	srli	r2,r8,1
    4e44:	4806d07a 	srli	r3,r9,1
    4e48:	52800044 	addi	r10,r10,1
    4e4c:	2084b03a 	or	r2,r4,r2
    4e50:	1011883a 	mov	r8,r2
    4e54:	1813883a 	mov	r9,r3
    4e58:	003feb06 	br	4e08 <__pack_d+0x100>
    4e5c:	383fe11e 	bne	r7,zero,4de4 <__pack_d+0xdc>
    4e60:	01004004 	movi	r4,256
    4e64:	4104703a 	and	r2,r8,r4
    4e68:	10c4b03a 	or	r2,r2,r3
    4e6c:	103fe326 	beq	r2,zero,4dfc <__pack_d+0xf4>
    4e70:	3005883a 	mov	r2,r6
    4e74:	003fdc06 	br	4de8 <__pack_d+0xe0>
    4e78:	000d883a 	mov	r6,zero
    4e7c:	000f883a 	mov	r7,zero
    4e80:	0201ffc4 	movi	r8,2047
    4e84:	003fb406 	br	4d58 <__pack_d+0x50>
    4e88:	0005883a 	mov	r2,zero
    4e8c:	00c00234 	movhi	r3,8
    4e90:	408cb03a 	or	r6,r8,r2
    4e94:	48ceb03a 	or	r7,r9,r3
    4e98:	013fffc4 	movi	r4,-1
    4e9c:	01400434 	movhi	r5,16
    4ea0:	297fffc4 	addi	r5,r5,-1
    4ea4:	3104703a 	and	r2,r6,r4
    4ea8:	3946703a 	and	r3,r7,r5
    4eac:	100d883a 	mov	r6,r2
    4eb0:	180f883a 	mov	r7,r3
    4eb4:	0201ffc4 	movi	r8,2047
    4eb8:	003fa706 	br	4d58 <__pack_d+0x50>
    4ebc:	1109c83a 	sub	r4,r2,r4
    4ec0:	00800e04 	movi	r2,56
    4ec4:	11004316 	blt	r2,r4,4fd4 <__pack_d+0x2cc>
    4ec8:	21fff804 	addi	r7,r4,-32
    4ecc:	38004516 	blt	r7,zero,4fe4 <__pack_d+0x2dc>
    4ed0:	49d8d83a 	srl	r12,r9,r7
    4ed4:	001b883a 	mov	r13,zero
    4ed8:	0023883a 	mov	r17,zero
    4edc:	01400044 	movi	r5,1
    4ee0:	0025883a 	mov	r18,zero
    4ee4:	38004716 	blt	r7,zero,5004 <__pack_d+0x2fc>
    4ee8:	29d6983a 	sll	r11,r5,r7
    4eec:	0015883a 	mov	r10,zero
    4ef0:	00bfffc4 	movi	r2,-1
    4ef4:	5089883a 	add	r4,r10,r2
    4ef8:	588b883a 	add	r5,r11,r2
    4efc:	228d803a 	cmpltu	r6,r4,r10
    4f00:	314b883a 	add	r5,r6,r5
    4f04:	4104703a 	and	r2,r8,r4
    4f08:	4946703a 	and	r3,r9,r5
    4f0c:	10c4b03a 	or	r2,r2,r3
    4f10:	10000226 	beq	r2,zero,4f1c <__pack_d+0x214>
    4f14:	04400044 	movi	r17,1
    4f18:	0025883a 	mov	r18,zero
    4f1c:	00803fc4 	movi	r2,255
    4f20:	644eb03a 	or	r7,r12,r17
    4f24:	3892703a 	and	r9,r7,r2
    4f28:	00802004 	movi	r2,128
    4f2c:	6c90b03a 	or	r8,r13,r18
    4f30:	0015883a 	mov	r10,zero
    4f34:	48801626 	beq	r9,r2,4f90 <__pack_d+0x288>
    4f38:	01001fc4 	movi	r4,127
    4f3c:	3905883a 	add	r2,r7,r4
    4f40:	11cd803a 	cmpltu	r6,r2,r7
    4f44:	320d883a 	add	r6,r6,r8
    4f48:	100f883a 	mov	r7,r2
    4f4c:	00840034 	movhi	r2,4096
    4f50:	10bfffc4 	addi	r2,r2,-1
    4f54:	3011883a 	mov	r8,r6
    4f58:	0007883a 	mov	r3,zero
    4f5c:	11801b36 	bltu	r2,r6,4fcc <__pack_d+0x2c4>
    4f60:	4004963a 	slli	r2,r8,24
    4f64:	3808d23a 	srli	r4,r7,8
    4f68:	400ad23a 	srli	r5,r8,8
    4f6c:	1813883a 	mov	r9,r3
    4f70:	1108b03a 	or	r4,r2,r4
    4f74:	00bfffc4 	movi	r2,-1
    4f78:	00c00434 	movhi	r3,16
    4f7c:	18ffffc4 	addi	r3,r3,-1
    4f80:	208c703a 	and	r6,r4,r2
    4f84:	28ce703a 	and	r7,r5,r3
    4f88:	4a01ffcc 	andi	r8,r9,2047
    4f8c:	003f7206 	br	4d58 <__pack_d+0x50>
    4f90:	503fe91e 	bne	r10,zero,4f38 <__pack_d+0x230>
    4f94:	01004004 	movi	r4,256
    4f98:	3904703a 	and	r2,r7,r4
    4f9c:	0007883a 	mov	r3,zero
    4fa0:	10c4b03a 	or	r2,r2,r3
    4fa4:	10000626 	beq	r2,zero,4fc0 <__pack_d+0x2b8>
    4fa8:	3a45883a 	add	r2,r7,r9
    4fac:	11cd803a 	cmpltu	r6,r2,r7
    4fb0:	320d883a 	add	r6,r6,r8
    4fb4:	100f883a 	mov	r7,r2
    4fb8:	3011883a 	mov	r8,r6
    4fbc:	0007883a 	mov	r3,zero
    4fc0:	00840034 	movhi	r2,4096
    4fc4:	10bfffc4 	addi	r2,r2,-1
    4fc8:	123fe52e 	bgeu	r2,r8,4f60 <__pack_d+0x258>
    4fcc:	00c00044 	movi	r3,1
    4fd0:	003fe306 	br	4f60 <__pack_d+0x258>
    4fd4:	0009883a 	mov	r4,zero
    4fd8:	0013883a 	mov	r9,zero
    4fdc:	000b883a 	mov	r5,zero
    4fe0:	003fe406 	br	4f74 <__pack_d+0x26c>
    4fe4:	4a47883a 	add	r3,r9,r9
    4fe8:	008007c4 	movi	r2,31
    4fec:	1105c83a 	sub	r2,r2,r4
    4ff0:	1886983a 	sll	r3,r3,r2
    4ff4:	4118d83a 	srl	r12,r8,r4
    4ff8:	491ad83a 	srl	r13,r9,r4
    4ffc:	1b18b03a 	or	r12,r3,r12
    5000:	003fb506 	br	4ed8 <__pack_d+0x1d0>
    5004:	2806d07a 	srli	r3,r5,1
    5008:	008007c4 	movi	r2,31
    500c:	1105c83a 	sub	r2,r2,r4
    5010:	1896d83a 	srl	r11,r3,r2
    5014:	2914983a 	sll	r10,r5,r4
    5018:	003fb506 	br	4ef0 <__pack_d+0x1e8>

0000501c <__unpack_d>:
    501c:	20c00117 	ldw	r3,4(r4)
    5020:	22400017 	ldw	r9,0(r4)
    5024:	00800434 	movhi	r2,16
    5028:	10bfffc4 	addi	r2,r2,-1
    502c:	1808d53a 	srli	r4,r3,20
    5030:	180cd7fa 	srli	r6,r3,31
    5034:	1894703a 	and	r10,r3,r2
    5038:	2201ffcc 	andi	r8,r4,2047
    503c:	281b883a 	mov	r13,r5
    5040:	4817883a 	mov	r11,r9
    5044:	29800115 	stw	r6,4(r5)
    5048:	5019883a 	mov	r12,r10
    504c:	40001e1e 	bne	r8,zero,50c8 <__unpack_d+0xac>
    5050:	4a84b03a 	or	r2,r9,r10
    5054:	10001926 	beq	r2,zero,50bc <__unpack_d+0xa0>
    5058:	4804d63a 	srli	r2,r9,24
    505c:	500c923a 	slli	r6,r10,8
    5060:	013f0084 	movi	r4,-1022
    5064:	00c40034 	movhi	r3,4096
    5068:	18ffffc4 	addi	r3,r3,-1
    506c:	118cb03a 	or	r6,r2,r6
    5070:	008000c4 	movi	r2,3
    5074:	480a923a 	slli	r5,r9,8
    5078:	68800015 	stw	r2,0(r13)
    507c:	69000215 	stw	r4,8(r13)
    5080:	19800b36 	bltu	r3,r6,50b0 <__unpack_d+0x94>
    5084:	200f883a 	mov	r7,r4
    5088:	1811883a 	mov	r8,r3
    508c:	2945883a 	add	r2,r5,r5
    5090:	1149803a 	cmpltu	r4,r2,r5
    5094:	3187883a 	add	r3,r6,r6
    5098:	20c9883a 	add	r4,r4,r3
    509c:	100b883a 	mov	r5,r2
    50a0:	200d883a 	mov	r6,r4
    50a4:	39ffffc4 	addi	r7,r7,-1
    50a8:	413ff82e 	bgeu	r8,r4,508c <__unpack_d+0x70>
    50ac:	69c00215 	stw	r7,8(r13)
    50b0:	69800415 	stw	r6,16(r13)
    50b4:	69400315 	stw	r5,12(r13)
    50b8:	f800283a 	ret
    50bc:	00800084 	movi	r2,2
    50c0:	28800015 	stw	r2,0(r5)
    50c4:	f800283a 	ret
    50c8:	0081ffc4 	movi	r2,2047
    50cc:	40800f26 	beq	r8,r2,510c <__unpack_d+0xf0>
    50d0:	480cd63a 	srli	r6,r9,24
    50d4:	5006923a 	slli	r3,r10,8
    50d8:	4804923a 	slli	r2,r9,8
    50dc:	0009883a 	mov	r4,zero
    50e0:	30c6b03a 	or	r3,r6,r3
    50e4:	01440034 	movhi	r5,4096
    50e8:	110cb03a 	or	r6,r2,r4
    50ec:	423f0044 	addi	r8,r8,-1023
    50f0:	194eb03a 	or	r7,r3,r5
    50f4:	008000c4 	movi	r2,3
    50f8:	69c00415 	stw	r7,16(r13)
    50fc:	6a000215 	stw	r8,8(r13)
    5100:	68800015 	stw	r2,0(r13)
    5104:	69800315 	stw	r6,12(r13)
    5108:	f800283a 	ret
    510c:	4a84b03a 	or	r2,r9,r10
    5110:	1000031e 	bne	r2,zero,5120 <__unpack_d+0x104>
    5114:	00800104 	movi	r2,4
    5118:	28800015 	stw	r2,0(r5)
    511c:	f800283a 	ret
    5120:	0009883a 	mov	r4,zero
    5124:	01400234 	movhi	r5,8
    5128:	4904703a 	and	r2,r9,r4
    512c:	5146703a 	and	r3,r10,r5
    5130:	10c4b03a 	or	r2,r2,r3
    5134:	10000526 	beq	r2,zero,514c <__unpack_d+0x130>
    5138:	00800044 	movi	r2,1
    513c:	68800015 	stw	r2,0(r13)
    5140:	6b000415 	stw	r12,16(r13)
    5144:	6ac00315 	stw	r11,12(r13)
    5148:	f800283a 	ret
    514c:	68000015 	stw	zero,0(r13)
    5150:	003ffb06 	br	5140 <__unpack_d+0x124>

00005154 <__fpcmp_parts_d>:
    5154:	21800017 	ldw	r6,0(r4)
    5158:	00c00044 	movi	r3,1
    515c:	19800a2e 	bgeu	r3,r6,5188 <__fpcmp_parts_d+0x34>
    5160:	28800017 	ldw	r2,0(r5)
    5164:	1880082e 	bgeu	r3,r2,5188 <__fpcmp_parts_d+0x34>
    5168:	00c00104 	movi	r3,4
    516c:	30c02626 	beq	r6,r3,5208 <__fpcmp_parts_d+0xb4>
    5170:	10c02226 	beq	r2,r3,51fc <__fpcmp_parts_d+0xa8>
    5174:	00c00084 	movi	r3,2
    5178:	30c00526 	beq	r6,r3,5190 <__fpcmp_parts_d+0x3c>
    517c:	10c0071e 	bne	r2,r3,519c <__fpcmp_parts_d+0x48>
    5180:	20800117 	ldw	r2,4(r4)
    5184:	1000091e 	bne	r2,zero,51ac <__fpcmp_parts_d+0x58>
    5188:	00800044 	movi	r2,1
    518c:	f800283a 	ret
    5190:	10c01a1e 	bne	r2,r3,51fc <__fpcmp_parts_d+0xa8>
    5194:	0005883a 	mov	r2,zero
    5198:	f800283a 	ret
    519c:	22000117 	ldw	r8,4(r4)
    51a0:	28800117 	ldw	r2,4(r5)
    51a4:	40800326 	beq	r8,r2,51b4 <__fpcmp_parts_d+0x60>
    51a8:	403ff726 	beq	r8,zero,5188 <__fpcmp_parts_d+0x34>
    51ac:	00bfffc4 	movi	r2,-1
    51b0:	f800283a 	ret
    51b4:	20c00217 	ldw	r3,8(r4)
    51b8:	28800217 	ldw	r2,8(r5)
    51bc:	10fffa16 	blt	r2,r3,51a8 <__fpcmp_parts_d+0x54>
    51c0:	18800916 	blt	r3,r2,51e8 <__fpcmp_parts_d+0x94>
    51c4:	21c00417 	ldw	r7,16(r4)
    51c8:	28c00417 	ldw	r3,16(r5)
    51cc:	21800317 	ldw	r6,12(r4)
    51d0:	28800317 	ldw	r2,12(r5)
    51d4:	19fff436 	bltu	r3,r7,51a8 <__fpcmp_parts_d+0x54>
    51d8:	38c00526 	beq	r7,r3,51f0 <__fpcmp_parts_d+0x9c>
    51dc:	38c00236 	bltu	r7,r3,51e8 <__fpcmp_parts_d+0x94>
    51e0:	19ffec1e 	bne	r3,r7,5194 <__fpcmp_parts_d+0x40>
    51e4:	30bfeb2e 	bgeu	r6,r2,5194 <__fpcmp_parts_d+0x40>
    51e8:	403fe71e 	bne	r8,zero,5188 <__fpcmp_parts_d+0x34>
    51ec:	003fef06 	br	51ac <__fpcmp_parts_d+0x58>
    51f0:	11bffa2e 	bgeu	r2,r6,51dc <__fpcmp_parts_d+0x88>
    51f4:	403fe426 	beq	r8,zero,5188 <__fpcmp_parts_d+0x34>
    51f8:	003fec06 	br	51ac <__fpcmp_parts_d+0x58>
    51fc:	28800117 	ldw	r2,4(r5)
    5200:	103fe11e 	bne	r2,zero,5188 <__fpcmp_parts_d+0x34>
    5204:	003fe906 	br	51ac <__fpcmp_parts_d+0x58>
    5208:	11bfdd1e 	bne	r2,r6,5180 <__fpcmp_parts_d+0x2c>
    520c:	28c00117 	ldw	r3,4(r5)
    5210:	20800117 	ldw	r2,4(r4)
    5214:	1885c83a 	sub	r2,r3,r2
    5218:	f800283a 	ret

0000521c <_fgets_r>:
    521c:	defff804 	addi	sp,sp,-32
    5220:	00800044 	movi	r2,1
    5224:	dd800615 	stw	r22,24(sp)
    5228:	dd400515 	stw	r21,20(sp)
    522c:	dc400115 	stw	r17,4(sp)
    5230:	dc000015 	stw	r16,0(sp)
    5234:	dfc00715 	stw	ra,28(sp)
    5238:	dd000415 	stw	r20,16(sp)
    523c:	dcc00315 	stw	r19,12(sp)
    5240:	dc800215 	stw	r18,8(sp)
    5244:	3021883a 	mov	r16,r6
    5248:	282d883a 	mov	r22,r5
    524c:	3823883a 	mov	r17,r7
    5250:	202b883a 	mov	r21,r4
    5254:	1180410e 	bge	r2,r6,535c <_fgets_r+0x140>
    5258:	20000226 	beq	r4,zero,5264 <_fgets_r+0x48>
    525c:	20800e17 	ldw	r2,56(r4)
    5260:	10002e26 	beq	r2,zero,531c <_fgets_r+0x100>
    5264:	853fffc4 	addi	r20,r16,-1
    5268:	b027883a 	mov	r19,r22
    526c:	88800117 	ldw	r2,4(r17)
    5270:	a809883a 	mov	r4,r21
    5274:	880b883a 	mov	r5,r17
    5278:	100d883a 	mov	r6,r2
    527c:	1000031e 	bne	r2,zero,528c <_fgets_r+0x70>
    5280:	00063ac0 	call	63ac <__srefill_r>
    5284:	1000341e 	bne	r2,zero,5358 <_fgets_r+0x13c>
    5288:	89800117 	ldw	r6,4(r17)
    528c:	01400284 	movi	r5,10
    5290:	3021883a 	mov	r16,r6
    5294:	8c800017 	ldw	r18,0(r17)
    5298:	a180012e 	bgeu	r20,r6,52a0 <_fgets_r+0x84>
    529c:	a021883a 	mov	r16,r20
    52a0:	9009883a 	mov	r4,r18
    52a4:	800d883a 	mov	r6,r16
    52a8:	00060640 	call	6064 <memchr>
    52ac:	1007883a 	mov	r3,r2
    52b0:	900b883a 	mov	r5,r18
    52b4:	9809883a 	mov	r4,r19
    52b8:	800d883a 	mov	r6,r16
    52bc:	1000191e 	bne	r2,zero,5324 <_fgets_r+0x108>
    52c0:	88800117 	ldw	r2,4(r17)
    52c4:	88c00017 	ldw	r3,0(r17)
    52c8:	9c27883a 	add	r19,r19,r16
    52cc:	1405c83a 	sub	r2,r2,r16
    52d0:	1c07883a 	add	r3,r3,r16
    52d4:	88c00015 	stw	r3,0(r17)
    52d8:	88800115 	stw	r2,4(r17)
    52dc:	00061480 	call	6148 <memcpy>
    52e0:	a407c83a 	sub	r3,r20,r16
    52e4:	1829883a 	mov	r20,r3
    52e8:	183fe01e 	bne	r3,zero,526c <_fgets_r+0x50>
    52ec:	98000005 	stb	zero,0(r19)
    52f0:	b005883a 	mov	r2,r22
    52f4:	dfc00717 	ldw	ra,28(sp)
    52f8:	dd800617 	ldw	r22,24(sp)
    52fc:	dd400517 	ldw	r21,20(sp)
    5300:	dd000417 	ldw	r20,16(sp)
    5304:	dcc00317 	ldw	r19,12(sp)
    5308:	dc800217 	ldw	r18,8(sp)
    530c:	dc400117 	ldw	r17,4(sp)
    5310:	dc000017 	ldw	r16,0(sp)
    5314:	dec00804 	addi	sp,sp,32
    5318:	f800283a 	ret
    531c:	00053f00 	call	53f0 <__sinit>
    5320:	003fd006 	br	5264 <_fgets_r+0x48>
    5324:	88800117 	ldw	r2,4(r17)
    5328:	18c00044 	addi	r3,r3,1
    532c:	1ca1c83a 	sub	r16,r3,r18
    5330:	1405c83a 	sub	r2,r2,r16
    5334:	800d883a 	mov	r6,r16
    5338:	88c00015 	stw	r3,0(r17)
    533c:	88800115 	stw	r2,4(r17)
    5340:	900b883a 	mov	r5,r18
    5344:	9809883a 	mov	r4,r19
    5348:	00061480 	call	6148 <memcpy>
    534c:	9c21883a 	add	r16,r19,r16
    5350:	80000005 	stb	zero,0(r16)
    5354:	003fe606 	br	52f0 <_fgets_r+0xd4>
    5358:	9dbfe41e 	bne	r19,r22,52ec <_fgets_r+0xd0>
    535c:	002d883a 	mov	r22,zero
    5360:	003fe306 	br	52f0 <_fgets_r+0xd4>

00005364 <fgets>:
    5364:	00800074 	movhi	r2,1
    5368:	108ea504 	addi	r2,r2,14996
    536c:	2013883a 	mov	r9,r4
    5370:	11000017 	ldw	r4,0(r2)
    5374:	2805883a 	mov	r2,r5
    5378:	300f883a 	mov	r7,r6
    537c:	480b883a 	mov	r5,r9
    5380:	100d883a 	mov	r6,r2
    5384:	000521c1 	jmpi	521c <_fgets_r>

00005388 <std>:
    5388:	00800034 	movhi	r2,0
    538c:	1099cc04 	addi	r2,r2,26416
    5390:	20800b15 	stw	r2,44(r4)
    5394:	00800034 	movhi	r2,0
    5398:	109a0704 	addi	r2,r2,26652
    539c:	20800815 	stw	r2,32(r4)
    53a0:	00c00034 	movhi	r3,0
    53a4:	18d9e804 	addi	r3,r3,26528
    53a8:	00800034 	movhi	r2,0
    53ac:	1099ce04 	addi	r2,r2,26424
    53b0:	2140030d 	sth	r5,12(r4)
    53b4:	2180038d 	sth	r6,14(r4)
    53b8:	20c00915 	stw	r3,36(r4)
    53bc:	20800a15 	stw	r2,40(r4)
    53c0:	20000015 	stw	zero,0(r4)
    53c4:	20000115 	stw	zero,4(r4)
    53c8:	20000215 	stw	zero,8(r4)
    53cc:	20000415 	stw	zero,16(r4)
    53d0:	20000515 	stw	zero,20(r4)
    53d4:	20000615 	stw	zero,24(r4)
    53d8:	21000715 	stw	r4,28(r4)
    53dc:	f800283a 	ret

000053e0 <__sfp_lock_acquire>:
    53e0:	f800283a 	ret

000053e4 <__sfp_lock_release>:
    53e4:	f800283a 	ret

000053e8 <__sinit_lock_acquire>:
    53e8:	f800283a 	ret

000053ec <__sinit_lock_release>:
    53ec:	f800283a 	ret

000053f0 <__sinit>:
    53f0:	20800e17 	ldw	r2,56(r4)
    53f4:	defffd04 	addi	sp,sp,-12
    53f8:	dc400115 	stw	r17,4(sp)
    53fc:	dc000015 	stw	r16,0(sp)
    5400:	dfc00215 	stw	ra,8(sp)
    5404:	04400044 	movi	r17,1
    5408:	01400104 	movi	r5,4
    540c:	000d883a 	mov	r6,zero
    5410:	2021883a 	mov	r16,r4
    5414:	2200bb04 	addi	r8,r4,748
    5418:	200f883a 	mov	r7,r4
    541c:	10000526 	beq	r2,zero,5434 <__sinit+0x44>
    5420:	dfc00217 	ldw	ra,8(sp)
    5424:	dc400117 	ldw	r17,4(sp)
    5428:	dc000017 	ldw	r16,0(sp)
    542c:	dec00304 	addi	sp,sp,12
    5430:	f800283a 	ret
    5434:	21000117 	ldw	r4,4(r4)
    5438:	00800034 	movhi	r2,0
    543c:	10953504 	addi	r2,r2,21716
    5440:	00c000c4 	movi	r3,3
    5444:	80800f15 	stw	r2,60(r16)
    5448:	80c0b915 	stw	r3,740(r16)
    544c:	8200ba15 	stw	r8,744(r16)
    5450:	84400e15 	stw	r17,56(r16)
    5454:	8000b815 	stw	zero,736(r16)
    5458:	00053880 	call	5388 <std>
    545c:	81000217 	ldw	r4,8(r16)
    5460:	880d883a 	mov	r6,r17
    5464:	800f883a 	mov	r7,r16
    5468:	01400284 	movi	r5,10
    546c:	00053880 	call	5388 <std>
    5470:	81000317 	ldw	r4,12(r16)
    5474:	800f883a 	mov	r7,r16
    5478:	01400484 	movi	r5,18
    547c:	01800084 	movi	r6,2
    5480:	dfc00217 	ldw	ra,8(sp)
    5484:	dc400117 	ldw	r17,4(sp)
    5488:	dc000017 	ldw	r16,0(sp)
    548c:	dec00304 	addi	sp,sp,12
    5490:	00053881 	jmpi	5388 <std>

00005494 <__fp_lock>:
    5494:	0005883a 	mov	r2,zero
    5498:	f800283a 	ret

0000549c <__fp_unlock>:
    549c:	0005883a 	mov	r2,zero
    54a0:	f800283a 	ret

000054a4 <__fp_unlock_all>:
    54a4:	00800074 	movhi	r2,1
    54a8:	108ea504 	addi	r2,r2,14996
    54ac:	11000017 	ldw	r4,0(r2)
    54b0:	01400034 	movhi	r5,0
    54b4:	29552704 	addi	r5,r5,21660
    54b8:	00057441 	jmpi	5744 <_fwalk>

000054bc <__fp_lock_all>:
    54bc:	00800074 	movhi	r2,1
    54c0:	108ea504 	addi	r2,r2,14996
    54c4:	11000017 	ldw	r4,0(r2)
    54c8:	01400034 	movhi	r5,0
    54cc:	29552504 	addi	r5,r5,21652
    54d0:	00057441 	jmpi	5744 <_fwalk>

000054d4 <_cleanup_r>:
    54d4:	01400074 	movhi	r5,1
    54d8:	2968d704 	addi	r5,r5,-23716
    54dc:	00057441 	jmpi	5744 <_fwalk>

000054e0 <_cleanup>:
    54e0:	00800074 	movhi	r2,1
    54e4:	108ea604 	addi	r2,r2,15000
    54e8:	11000017 	ldw	r4,0(r2)
    54ec:	00054d41 	jmpi	54d4 <_cleanup_r>

000054f0 <__sfmoreglue>:
    54f0:	defffc04 	addi	sp,sp,-16
    54f4:	dc000015 	stw	r16,0(sp)
    54f8:	2821883a 	mov	r16,r5
    54fc:	dc400115 	stw	r17,4(sp)
    5500:	01401704 	movi	r5,92
    5504:	2023883a 	mov	r17,r4
    5508:	8009883a 	mov	r4,r16
    550c:	dfc00315 	stw	ra,12(sp)
    5510:	dcc00215 	stw	r19,8(sp)
    5514:	00049540 	call	4954 <__mulsi3>
    5518:	11400304 	addi	r5,r2,12
    551c:	8809883a 	mov	r4,r17
    5520:	1027883a 	mov	r19,r2
    5524:	00059240 	call	5924 <_malloc_r>
    5528:	10c00304 	addi	r3,r2,12
    552c:	1023883a 	mov	r17,r2
    5530:	1809883a 	mov	r4,r3
    5534:	980d883a 	mov	r6,r19
    5538:	000b883a 	mov	r5,zero
    553c:	10000b26 	beq	r2,zero,556c <__sfmoreglue+0x7c>
    5540:	14000115 	stw	r16,4(r2)
    5544:	10c00215 	stw	r3,8(r2)
    5548:	10000015 	stw	zero,0(r2)
    554c:	00061e80 	call	61e8 <memset>
    5550:	8805883a 	mov	r2,r17
    5554:	dfc00317 	ldw	ra,12(sp)
    5558:	dcc00217 	ldw	r19,8(sp)
    555c:	dc400117 	ldw	r17,4(sp)
    5560:	dc000017 	ldw	r16,0(sp)
    5564:	dec00404 	addi	sp,sp,16
    5568:	f800283a 	ret
    556c:	0023883a 	mov	r17,zero
    5570:	8805883a 	mov	r2,r17
    5574:	dfc00317 	ldw	ra,12(sp)
    5578:	dcc00217 	ldw	r19,8(sp)
    557c:	dc400117 	ldw	r17,4(sp)
    5580:	dc000017 	ldw	r16,0(sp)
    5584:	dec00404 	addi	sp,sp,16
    5588:	f800283a 	ret

0000558c <__sfp>:
    558c:	defffd04 	addi	sp,sp,-12
    5590:	00800074 	movhi	r2,1
    5594:	108ea604 	addi	r2,r2,15000
    5598:	dc000015 	stw	r16,0(sp)
    559c:	14000017 	ldw	r16,0(r2)
    55a0:	dc400115 	stw	r17,4(sp)
    55a4:	dfc00215 	stw	ra,8(sp)
    55a8:	80800e17 	ldw	r2,56(r16)
    55ac:	2023883a 	mov	r17,r4
    55b0:	10002626 	beq	r2,zero,564c <__sfp+0xc0>
    55b4:	8400b804 	addi	r16,r16,736
    55b8:	80800117 	ldw	r2,4(r16)
    55bc:	81000217 	ldw	r4,8(r16)
    55c0:	10ffffc4 	addi	r3,r2,-1
    55c4:	18000916 	blt	r3,zero,55ec <__sfp+0x60>
    55c8:	2080030f 	ldh	r2,12(r4)
    55cc:	10000b26 	beq	r2,zero,55fc <__sfp+0x70>
    55d0:	017fffc4 	movi	r5,-1
    55d4:	00000206 	br	55e0 <__sfp+0x54>
    55d8:	2080030f 	ldh	r2,12(r4)
    55dc:	10000726 	beq	r2,zero,55fc <__sfp+0x70>
    55e0:	18ffffc4 	addi	r3,r3,-1
    55e4:	21001704 	addi	r4,r4,92
    55e8:	197ffb1e 	bne	r3,r5,55d8 <__sfp+0x4c>
    55ec:	80800017 	ldw	r2,0(r16)
    55f0:	10001926 	beq	r2,zero,5658 <__sfp+0xcc>
    55f4:	1021883a 	mov	r16,r2
    55f8:	003fef06 	br	55b8 <__sfp+0x2c>
    55fc:	00bfffc4 	movi	r2,-1
    5600:	00c00044 	movi	r3,1
    5604:	2080038d 	sth	r2,14(r4)
    5608:	20c0030d 	sth	r3,12(r4)
    560c:	20000015 	stw	zero,0(r4)
    5610:	20000215 	stw	zero,8(r4)
    5614:	20000115 	stw	zero,4(r4)
    5618:	20000415 	stw	zero,16(r4)
    561c:	20000515 	stw	zero,20(r4)
    5620:	20000615 	stw	zero,24(r4)
    5624:	20000c15 	stw	zero,48(r4)
    5628:	20000d15 	stw	zero,52(r4)
    562c:	20001115 	stw	zero,68(r4)
    5630:	20001215 	stw	zero,72(r4)
    5634:	2005883a 	mov	r2,r4
    5638:	dfc00217 	ldw	ra,8(sp)
    563c:	dc400117 	ldw	r17,4(sp)
    5640:	dc000017 	ldw	r16,0(sp)
    5644:	dec00304 	addi	sp,sp,12
    5648:	f800283a 	ret
    564c:	8009883a 	mov	r4,r16
    5650:	00053f00 	call	53f0 <__sinit>
    5654:	003fd706 	br	55b4 <__sfp+0x28>
    5658:	8809883a 	mov	r4,r17
    565c:	01400104 	movi	r5,4
    5660:	00054f00 	call	54f0 <__sfmoreglue>
    5664:	80800015 	stw	r2,0(r16)
    5668:	103fe21e 	bne	r2,zero,55f4 <__sfp+0x68>
    566c:	00800304 	movi	r2,12
    5670:	0009883a 	mov	r4,zero
    5674:	88800015 	stw	r2,0(r17)
    5678:	003fee06 	br	5634 <__sfp+0xa8>

0000567c <_fwalk_reent>:
    567c:	defff704 	addi	sp,sp,-36
    5680:	dcc00315 	stw	r19,12(sp)
    5684:	24c0b804 	addi	r19,r4,736
    5688:	dd800615 	stw	r22,24(sp)
    568c:	dd400515 	stw	r21,20(sp)
    5690:	dfc00815 	stw	ra,32(sp)
    5694:	ddc00715 	stw	r23,28(sp)
    5698:	dd000415 	stw	r20,16(sp)
    569c:	dc800215 	stw	r18,8(sp)
    56a0:	dc400115 	stw	r17,4(sp)
    56a4:	dc000015 	stw	r16,0(sp)
    56a8:	202b883a 	mov	r21,r4
    56ac:	282d883a 	mov	r22,r5
    56b0:	00053e00 	call	53e0 <__sfp_lock_acquire>
    56b4:	98002126 	beq	r19,zero,573c <_fwalk_reent+0xc0>
    56b8:	002f883a 	mov	r23,zero
    56bc:	9c800117 	ldw	r18,4(r19)
    56c0:	9c000217 	ldw	r16,8(r19)
    56c4:	90bfffc4 	addi	r2,r18,-1
    56c8:	10000d16 	blt	r2,zero,5700 <_fwalk_reent+0x84>
    56cc:	0023883a 	mov	r17,zero
    56d0:	053fffc4 	movi	r20,-1
    56d4:	8080030f 	ldh	r2,12(r16)
    56d8:	8c400044 	addi	r17,r17,1
    56dc:	10000626 	beq	r2,zero,56f8 <_fwalk_reent+0x7c>
    56e0:	8080038f 	ldh	r2,14(r16)
    56e4:	800b883a 	mov	r5,r16
    56e8:	a809883a 	mov	r4,r21
    56ec:	15000226 	beq	r2,r20,56f8 <_fwalk_reent+0x7c>
    56f0:	b03ee83a 	callr	r22
    56f4:	b8aeb03a 	or	r23,r23,r2
    56f8:	84001704 	addi	r16,r16,92
    56fc:	947ff51e 	bne	r18,r17,56d4 <_fwalk_reent+0x58>
    5700:	9cc00017 	ldw	r19,0(r19)
    5704:	983fed1e 	bne	r19,zero,56bc <_fwalk_reent+0x40>
    5708:	00053e40 	call	53e4 <__sfp_lock_release>
    570c:	b805883a 	mov	r2,r23
    5710:	dfc00817 	ldw	ra,32(sp)
    5714:	ddc00717 	ldw	r23,28(sp)
    5718:	dd800617 	ldw	r22,24(sp)
    571c:	dd400517 	ldw	r21,20(sp)
    5720:	dd000417 	ldw	r20,16(sp)
    5724:	dcc00317 	ldw	r19,12(sp)
    5728:	dc800217 	ldw	r18,8(sp)
    572c:	dc400117 	ldw	r17,4(sp)
    5730:	dc000017 	ldw	r16,0(sp)
    5734:	dec00904 	addi	sp,sp,36
    5738:	f800283a 	ret
    573c:	002f883a 	mov	r23,zero
    5740:	003ff106 	br	5708 <_fwalk_reent+0x8c>

00005744 <_fwalk>:
    5744:	defff804 	addi	sp,sp,-32
    5748:	dcc00315 	stw	r19,12(sp)
    574c:	24c0b804 	addi	r19,r4,736
    5750:	dd400515 	stw	r21,20(sp)
    5754:	dfc00715 	stw	ra,28(sp)
    5758:	dd800615 	stw	r22,24(sp)
    575c:	dd000415 	stw	r20,16(sp)
    5760:	dc800215 	stw	r18,8(sp)
    5764:	dc400115 	stw	r17,4(sp)
    5768:	dc000015 	stw	r16,0(sp)
    576c:	282b883a 	mov	r21,r5
    5770:	00053e00 	call	53e0 <__sfp_lock_acquire>
    5774:	98001f26 	beq	r19,zero,57f4 <_fwalk+0xb0>
    5778:	002d883a 	mov	r22,zero
    577c:	9c800117 	ldw	r18,4(r19)
    5780:	9c000217 	ldw	r16,8(r19)
    5784:	90bfffc4 	addi	r2,r18,-1
    5788:	10000c16 	blt	r2,zero,57bc <_fwalk+0x78>
    578c:	0023883a 	mov	r17,zero
    5790:	053fffc4 	movi	r20,-1
    5794:	8080030f 	ldh	r2,12(r16)
    5798:	8c400044 	addi	r17,r17,1
    579c:	10000526 	beq	r2,zero,57b4 <_fwalk+0x70>
    57a0:	8080038f 	ldh	r2,14(r16)
    57a4:	8009883a 	mov	r4,r16
    57a8:	15000226 	beq	r2,r20,57b4 <_fwalk+0x70>
    57ac:	a83ee83a 	callr	r21
    57b0:	b0acb03a 	or	r22,r22,r2
    57b4:	84001704 	addi	r16,r16,92
    57b8:	947ff61e 	bne	r18,r17,5794 <_fwalk+0x50>
    57bc:	9cc00017 	ldw	r19,0(r19)
    57c0:	983fee1e 	bne	r19,zero,577c <_fwalk+0x38>
    57c4:	00053e40 	call	53e4 <__sfp_lock_release>
    57c8:	b005883a 	mov	r2,r22
    57cc:	dfc00717 	ldw	ra,28(sp)
    57d0:	dd800617 	ldw	r22,24(sp)
    57d4:	dd400517 	ldw	r21,20(sp)
    57d8:	dd000417 	ldw	r20,16(sp)
    57dc:	dcc00317 	ldw	r19,12(sp)
    57e0:	dc800217 	ldw	r18,8(sp)
    57e4:	dc400117 	ldw	r17,4(sp)
    57e8:	dc000017 	ldw	r16,0(sp)
    57ec:	dec00804 	addi	sp,sp,32
    57f0:	f800283a 	ret
    57f4:	002d883a 	mov	r22,zero
    57f8:	003ff206 	br	57c4 <_fwalk+0x80>

000057fc <getc>:
    57fc:	defffd04 	addi	sp,sp,-12
    5800:	dc400115 	stw	r17,4(sp)
    5804:	04400074 	movhi	r17,1
    5808:	8c4ea504 	addi	r17,r17,14996
    580c:	88c00017 	ldw	r3,0(r17)
    5810:	dc000015 	stw	r16,0(sp)
    5814:	dfc00215 	stw	ra,8(sp)
    5818:	2021883a 	mov	r16,r4
    581c:	18000326 	beq	r3,zero,582c <getc+0x30>
    5820:	18800e17 	ldw	r2,56(r3)
    5824:	1809883a 	mov	r4,r3
    5828:	10000e26 	beq	r2,zero,5864 <getc+0x68>
    582c:	80800117 	ldw	r2,4(r16)
    5830:	800b883a 	mov	r5,r16
    5834:	10bfffc4 	addi	r2,r2,-1
    5838:	80800115 	stw	r2,4(r16)
    583c:	10000f16 	blt	r2,zero,587c <getc+0x80>
    5840:	80c00017 	ldw	r3,0(r16)
    5844:	18800003 	ldbu	r2,0(r3)
    5848:	18c00044 	addi	r3,r3,1
    584c:	80c00015 	stw	r3,0(r16)
    5850:	dfc00217 	ldw	ra,8(sp)
    5854:	dc400117 	ldw	r17,4(sp)
    5858:	dc000017 	ldw	r16,0(sp)
    585c:	dec00304 	addi	sp,sp,12
    5860:	f800283a 	ret
    5864:	00053f00 	call	53f0 <__sinit>
    5868:	80800117 	ldw	r2,4(r16)
    586c:	800b883a 	mov	r5,r16
    5870:	10bfffc4 	addi	r2,r2,-1
    5874:	80800115 	stw	r2,4(r16)
    5878:	103ff10e 	bge	r2,zero,5840 <getc+0x44>
    587c:	89000017 	ldw	r4,0(r17)
    5880:	dfc00217 	ldw	ra,8(sp)
    5884:	dc400117 	ldw	r17,4(sp)
    5888:	dc000017 	ldw	r16,0(sp)
    588c:	dec00304 	addi	sp,sp,12
    5890:	000658c1 	jmpi	658c <__srget_r>

00005894 <_getc_r>:
    5894:	defffd04 	addi	sp,sp,-12
    5898:	dc400115 	stw	r17,4(sp)
    589c:	dc000015 	stw	r16,0(sp)
    58a0:	dfc00215 	stw	ra,8(sp)
    58a4:	2021883a 	mov	r16,r4
    58a8:	2823883a 	mov	r17,r5
    58ac:	20000226 	beq	r4,zero,58b8 <_getc_r+0x24>
    58b0:	20800e17 	ldw	r2,56(r4)
    58b4:	10000f26 	beq	r2,zero,58f4 <_getc_r+0x60>
    58b8:	88800117 	ldw	r2,4(r17)
    58bc:	8009883a 	mov	r4,r16
    58c0:	880b883a 	mov	r5,r17
    58c4:	10bfffc4 	addi	r2,r2,-1
    58c8:	88800115 	stw	r2,4(r17)
    58cc:	10001016 	blt	r2,zero,5910 <_getc_r+0x7c>
    58d0:	88c00017 	ldw	r3,0(r17)
    58d4:	18800003 	ldbu	r2,0(r3)
    58d8:	18c00044 	addi	r3,r3,1
    58dc:	88c00015 	stw	r3,0(r17)
    58e0:	dfc00217 	ldw	ra,8(sp)
    58e4:	dc400117 	ldw	r17,4(sp)
    58e8:	dc000017 	ldw	r16,0(sp)
    58ec:	dec00304 	addi	sp,sp,12
    58f0:	f800283a 	ret
    58f4:	00053f00 	call	53f0 <__sinit>
    58f8:	88800117 	ldw	r2,4(r17)
    58fc:	8009883a 	mov	r4,r16
    5900:	880b883a 	mov	r5,r17
    5904:	10bfffc4 	addi	r2,r2,-1
    5908:	88800115 	stw	r2,4(r17)
    590c:	103ff00e 	bge	r2,zero,58d0 <_getc_r+0x3c>
    5910:	dfc00217 	ldw	ra,8(sp)
    5914:	dc400117 	ldw	r17,4(sp)
    5918:	dc000017 	ldw	r16,0(sp)
    591c:	dec00304 	addi	sp,sp,12
    5920:	000658c1 	jmpi	658c <__srget_r>

00005924 <_malloc_r>:
    5924:	defff604 	addi	sp,sp,-40
    5928:	28c002c4 	addi	r3,r5,11
    592c:	00800584 	movi	r2,22
    5930:	dc800215 	stw	r18,8(sp)
    5934:	dfc00915 	stw	ra,36(sp)
    5938:	df000815 	stw	fp,32(sp)
    593c:	ddc00715 	stw	r23,28(sp)
    5940:	dd800615 	stw	r22,24(sp)
    5944:	dd400515 	stw	r21,20(sp)
    5948:	dd000415 	stw	r20,16(sp)
    594c:	dcc00315 	stw	r19,12(sp)
    5950:	dc400115 	stw	r17,4(sp)
    5954:	dc000015 	stw	r16,0(sp)
    5958:	2025883a 	mov	r18,r4
    595c:	10c01236 	bltu	r2,r3,59a8 <_malloc_r+0x84>
    5960:	04400404 	movi	r17,16
    5964:	8940142e 	bgeu	r17,r5,59b8 <_malloc_r+0x94>
    5968:	00800304 	movi	r2,12
    596c:	0007883a 	mov	r3,zero
    5970:	90800015 	stw	r2,0(r18)
    5974:	1805883a 	mov	r2,r3
    5978:	dfc00917 	ldw	ra,36(sp)
    597c:	df000817 	ldw	fp,32(sp)
    5980:	ddc00717 	ldw	r23,28(sp)
    5984:	dd800617 	ldw	r22,24(sp)
    5988:	dd400517 	ldw	r21,20(sp)
    598c:	dd000417 	ldw	r20,16(sp)
    5990:	dcc00317 	ldw	r19,12(sp)
    5994:	dc800217 	ldw	r18,8(sp)
    5998:	dc400117 	ldw	r17,4(sp)
    599c:	dc000017 	ldw	r16,0(sp)
    59a0:	dec00a04 	addi	sp,sp,40
    59a4:	f800283a 	ret
    59a8:	00bffe04 	movi	r2,-8
    59ac:	18a2703a 	and	r17,r3,r2
    59b0:	883fed16 	blt	r17,zero,5968 <_malloc_r+0x44>
    59b4:	897fec36 	bltu	r17,r5,5968 <_malloc_r+0x44>
    59b8:	9009883a 	mov	r4,r18
    59bc:	000e2000 	call	e200 <__malloc_lock>
    59c0:	00807dc4 	movi	r2,503
    59c4:	14402b2e 	bgeu	r2,r17,5a74 <_malloc_r+0x150>
    59c8:	8806d27a 	srli	r3,r17,9
    59cc:	18003f1e 	bne	r3,zero,5acc <_malloc_r+0x1a8>
    59d0:	880cd0fa 	srli	r6,r17,3
    59d4:	300490fa 	slli	r2,r6,3
    59d8:	02c00074 	movhi	r11,1
    59dc:	5ac8fa04 	addi	r11,r11,9192
    59e0:	12cb883a 	add	r5,r2,r11
    59e4:	2c000317 	ldw	r16,12(r5)
    59e8:	580f883a 	mov	r7,r11
    59ec:	2c00041e 	bne	r5,r16,5a00 <_malloc_r+0xdc>
    59f0:	00000a06 	br	5a1c <_malloc_r+0xf8>
    59f4:	1800860e 	bge	r3,zero,5c10 <_malloc_r+0x2ec>
    59f8:	84000317 	ldw	r16,12(r16)
    59fc:	2c000726 	beq	r5,r16,5a1c <_malloc_r+0xf8>
    5a00:	80800117 	ldw	r2,4(r16)
    5a04:	00ffff04 	movi	r3,-4
    5a08:	10c8703a 	and	r4,r2,r3
    5a0c:	2447c83a 	sub	r3,r4,r17
    5a10:	008003c4 	movi	r2,15
    5a14:	10fff70e 	bge	r2,r3,59f4 <_malloc_r+0xd0>
    5a18:	31bfffc4 	addi	r6,r6,-1
    5a1c:	32400044 	addi	r9,r6,1
    5a20:	02800074 	movhi	r10,1
    5a24:	5288fc04 	addi	r10,r10,9200
    5a28:	54000217 	ldw	r16,8(r10)
    5a2c:	8280a026 	beq	r16,r10,5cb0 <_malloc_r+0x38c>
    5a30:	80800117 	ldw	r2,4(r16)
    5a34:	00ffff04 	movi	r3,-4
    5a38:	10ca703a 	and	r5,r2,r3
    5a3c:	2c4dc83a 	sub	r6,r5,r17
    5a40:	008003c4 	movi	r2,15
    5a44:	11808316 	blt	r2,r6,5c54 <_malloc_r+0x330>
    5a48:	52800315 	stw	r10,12(r10)
    5a4c:	52800215 	stw	r10,8(r10)
    5a50:	30002916 	blt	r6,zero,5af8 <_malloc_r+0x1d4>
    5a54:	8147883a 	add	r3,r16,r5
    5a58:	18800117 	ldw	r2,4(r3)
    5a5c:	9009883a 	mov	r4,r18
    5a60:	10800054 	ori	r2,r2,1
    5a64:	18800115 	stw	r2,4(r3)
    5a68:	000e2200 	call	e220 <__malloc_unlock>
    5a6c:	80c00204 	addi	r3,r16,8
    5a70:	003fc006 	br	5974 <_malloc_r+0x50>
    5a74:	02c00074 	movhi	r11,1
    5a78:	5ac8fa04 	addi	r11,r11,9192
    5a7c:	8ac5883a 	add	r2,r17,r11
    5a80:	14000317 	ldw	r16,12(r2)
    5a84:	580f883a 	mov	r7,r11
    5a88:	8806d0fa 	srli	r3,r17,3
    5a8c:	14006c26 	beq	r2,r16,5c40 <_malloc_r+0x31c>
    5a90:	80c00117 	ldw	r3,4(r16)
    5a94:	00bfff04 	movi	r2,-4
    5a98:	81800317 	ldw	r6,12(r16)
    5a9c:	1886703a 	and	r3,r3,r2
    5aa0:	80c7883a 	add	r3,r16,r3
    5aa4:	18800117 	ldw	r2,4(r3)
    5aa8:	81400217 	ldw	r5,8(r16)
    5aac:	9009883a 	mov	r4,r18
    5ab0:	10800054 	ori	r2,r2,1
    5ab4:	18800115 	stw	r2,4(r3)
    5ab8:	31400215 	stw	r5,8(r6)
    5abc:	29800315 	stw	r6,12(r5)
    5ac0:	000e2200 	call	e220 <__malloc_unlock>
    5ac4:	80c00204 	addi	r3,r16,8
    5ac8:	003faa06 	br	5974 <_malloc_r+0x50>
    5acc:	00800104 	movi	r2,4
    5ad0:	10c0052e 	bgeu	r2,r3,5ae8 <_malloc_r+0x1c4>
    5ad4:	00800504 	movi	r2,20
    5ad8:	10c07836 	bltu	r2,r3,5cbc <_malloc_r+0x398>
    5adc:	198016c4 	addi	r6,r3,91
    5ae0:	300490fa 	slli	r2,r6,3
    5ae4:	003fbc06 	br	59d8 <_malloc_r+0xb4>
    5ae8:	8804d1ba 	srli	r2,r17,6
    5aec:	11800e04 	addi	r6,r2,56
    5af0:	300490fa 	slli	r2,r6,3
    5af4:	003fb806 	br	59d8 <_malloc_r+0xb4>
    5af8:	00807fc4 	movi	r2,511
    5afc:	1140bb36 	bltu	r2,r5,5dec <_malloc_r+0x4c8>
    5b00:	2806d0fa 	srli	r3,r5,3
    5b04:	573ffe04 	addi	fp,r10,-8
    5b08:	00800044 	movi	r2,1
    5b0c:	180890fa 	slli	r4,r3,3
    5b10:	1807d0ba 	srai	r3,r3,2
    5b14:	e1c00117 	ldw	r7,4(fp)
    5b18:	5909883a 	add	r4,r11,r4
    5b1c:	21400217 	ldw	r5,8(r4)
    5b20:	10c4983a 	sll	r2,r2,r3
    5b24:	81000315 	stw	r4,12(r16)
    5b28:	81400215 	stw	r5,8(r16)
    5b2c:	388eb03a 	or	r7,r7,r2
    5b30:	2c000315 	stw	r16,12(r5)
    5b34:	24000215 	stw	r16,8(r4)
    5b38:	e1c00115 	stw	r7,4(fp)
    5b3c:	4807883a 	mov	r3,r9
    5b40:	4800cd16 	blt	r9,zero,5e78 <_malloc_r+0x554>
    5b44:	1807d0ba 	srai	r3,r3,2
    5b48:	00800044 	movi	r2,1
    5b4c:	10c8983a 	sll	r4,r2,r3
    5b50:	39004436 	bltu	r7,r4,5c64 <_malloc_r+0x340>
    5b54:	21c4703a 	and	r2,r4,r7
    5b58:	10000a1e 	bne	r2,zero,5b84 <_malloc_r+0x260>
    5b5c:	2109883a 	add	r4,r4,r4
    5b60:	00bfff04 	movi	r2,-4
    5b64:	4884703a 	and	r2,r9,r2
    5b68:	3906703a 	and	r3,r7,r4
    5b6c:	12400104 	addi	r9,r2,4
    5b70:	1800041e 	bne	r3,zero,5b84 <_malloc_r+0x260>
    5b74:	2109883a 	add	r4,r4,r4
    5b78:	3904703a 	and	r2,r7,r4
    5b7c:	4a400104 	addi	r9,r9,4
    5b80:	103ffc26 	beq	r2,zero,5b74 <_malloc_r+0x250>
    5b84:	480490fa 	slli	r2,r9,3
    5b88:	4819883a 	mov	r12,r9
    5b8c:	023fff04 	movi	r8,-4
    5b90:	589b883a 	add	r13,r11,r2
    5b94:	6807883a 	mov	r3,r13
    5b98:	014003c4 	movi	r5,15
    5b9c:	1c000317 	ldw	r16,12(r3)
    5ba0:	1c00041e 	bne	r3,r16,5bb4 <_malloc_r+0x290>
    5ba4:	0000a706 	br	5e44 <_malloc_r+0x520>
    5ba8:	3000ab0e 	bge	r6,zero,5e58 <_malloc_r+0x534>
    5bac:	84000317 	ldw	r16,12(r16)
    5bb0:	1c00a426 	beq	r3,r16,5e44 <_malloc_r+0x520>
    5bb4:	80800117 	ldw	r2,4(r16)
    5bb8:	1204703a 	and	r2,r2,r8
    5bbc:	144dc83a 	sub	r6,r2,r17
    5bc0:	29bff90e 	bge	r5,r6,5ba8 <_malloc_r+0x284>
    5bc4:	81000317 	ldw	r4,12(r16)
    5bc8:	80c00217 	ldw	r3,8(r16)
    5bcc:	89400054 	ori	r5,r17,1
    5bd0:	8445883a 	add	r2,r16,r17
    5bd4:	20c00215 	stw	r3,8(r4)
    5bd8:	19000315 	stw	r4,12(r3)
    5bdc:	81400115 	stw	r5,4(r16)
    5be0:	1187883a 	add	r3,r2,r6
    5be4:	31000054 	ori	r4,r6,1
    5be8:	50800315 	stw	r2,12(r10)
    5bec:	50800215 	stw	r2,8(r10)
    5bf0:	19800015 	stw	r6,0(r3)
    5bf4:	11000115 	stw	r4,4(r2)
    5bf8:	12800215 	stw	r10,8(r2)
    5bfc:	12800315 	stw	r10,12(r2)
    5c00:	9009883a 	mov	r4,r18
    5c04:	000e2200 	call	e220 <__malloc_unlock>
    5c08:	80c00204 	addi	r3,r16,8
    5c0c:	003f5906 	br	5974 <_malloc_r+0x50>
    5c10:	8109883a 	add	r4,r16,r4
    5c14:	20800117 	ldw	r2,4(r4)
    5c18:	80c00217 	ldw	r3,8(r16)
    5c1c:	81400317 	ldw	r5,12(r16)
    5c20:	10800054 	ori	r2,r2,1
    5c24:	20800115 	stw	r2,4(r4)
    5c28:	28c00215 	stw	r3,8(r5)
    5c2c:	19400315 	stw	r5,12(r3)
    5c30:	9009883a 	mov	r4,r18
    5c34:	000e2200 	call	e220 <__malloc_unlock>
    5c38:	80c00204 	addi	r3,r16,8
    5c3c:	003f4d06 	br	5974 <_malloc_r+0x50>
    5c40:	80800204 	addi	r2,r16,8
    5c44:	14000317 	ldw	r16,12(r2)
    5c48:	143f911e 	bne	r2,r16,5a90 <_malloc_r+0x16c>
    5c4c:	1a400084 	addi	r9,r3,2
    5c50:	003f7306 	br	5a20 <_malloc_r+0xfc>
    5c54:	88c00054 	ori	r3,r17,1
    5c58:	8445883a 	add	r2,r16,r17
    5c5c:	80c00115 	stw	r3,4(r16)
    5c60:	003fdf06 	br	5be0 <_malloc_r+0x2bc>
    5c64:	e4000217 	ldw	r16,8(fp)
    5c68:	00bfff04 	movi	r2,-4
    5c6c:	80c00117 	ldw	r3,4(r16)
    5c70:	802d883a 	mov	r22,r16
    5c74:	18aa703a 	and	r21,r3,r2
    5c78:	ac401636 	bltu	r21,r17,5cd4 <_malloc_r+0x3b0>
    5c7c:	ac49c83a 	sub	r4,r21,r17
    5c80:	008003c4 	movi	r2,15
    5c84:	1100130e 	bge	r2,r4,5cd4 <_malloc_r+0x3b0>
    5c88:	88800054 	ori	r2,r17,1
    5c8c:	8447883a 	add	r3,r16,r17
    5c90:	80800115 	stw	r2,4(r16)
    5c94:	20800054 	ori	r2,r4,1
    5c98:	18800115 	stw	r2,4(r3)
    5c9c:	e0c00215 	stw	r3,8(fp)
    5ca0:	9009883a 	mov	r4,r18
    5ca4:	000e2200 	call	e220 <__malloc_unlock>
    5ca8:	80c00204 	addi	r3,r16,8
    5cac:	003f3106 	br	5974 <_malloc_r+0x50>
    5cb0:	39c00117 	ldw	r7,4(r7)
    5cb4:	573ffe04 	addi	fp,r10,-8
    5cb8:	003fa006 	br	5b3c <_malloc_r+0x218>
    5cbc:	00801504 	movi	r2,84
    5cc0:	10c06736 	bltu	r2,r3,5e60 <_malloc_r+0x53c>
    5cc4:	8804d33a 	srli	r2,r17,12
    5cc8:	11801b84 	addi	r6,r2,110
    5ccc:	300490fa 	slli	r2,r6,3
    5cd0:	003f4106 	br	59d8 <_malloc_r+0xb4>
    5cd4:	d0a6cf17 	ldw	r2,-25796(gp)
    5cd8:	d0e00317 	ldw	r3,-32756(gp)
    5cdc:	053fffc4 	movi	r20,-1
    5ce0:	10800404 	addi	r2,r2,16
    5ce4:	88a7883a 	add	r19,r17,r2
    5ce8:	1d000326 	beq	r3,r20,5cf8 <_malloc_r+0x3d4>
    5cec:	98c3ffc4 	addi	r3,r19,4095
    5cf0:	00bc0004 	movi	r2,-4096
    5cf4:	18a6703a 	and	r19,r3,r2
    5cf8:	9009883a 	mov	r4,r18
    5cfc:	980b883a 	mov	r5,r19
    5d00:	00065ec0 	call	65ec <_sbrk_r>
    5d04:	1009883a 	mov	r4,r2
    5d08:	15000426 	beq	r2,r20,5d1c <_malloc_r+0x3f8>
    5d0c:	854b883a 	add	r5,r16,r21
    5d10:	1029883a 	mov	r20,r2
    5d14:	11405a2e 	bgeu	r2,r5,5e80 <_malloc_r+0x55c>
    5d18:	87000c26 	beq	r16,fp,5d4c <_malloc_r+0x428>
    5d1c:	e4000217 	ldw	r16,8(fp)
    5d20:	80c00117 	ldw	r3,4(r16)
    5d24:	00bfff04 	movi	r2,-4
    5d28:	1884703a 	and	r2,r3,r2
    5d2c:	14400336 	bltu	r2,r17,5d3c <_malloc_r+0x418>
    5d30:	1449c83a 	sub	r4,r2,r17
    5d34:	008003c4 	movi	r2,15
    5d38:	113fd316 	blt	r2,r4,5c88 <_malloc_r+0x364>
    5d3c:	9009883a 	mov	r4,r18
    5d40:	000e2200 	call	e220 <__malloc_unlock>
    5d44:	0007883a 	mov	r3,zero
    5d48:	003f0a06 	br	5974 <_malloc_r+0x50>
    5d4c:	05c00074 	movhi	r23,1
    5d50:	bdd58104 	addi	r23,r23,22020
    5d54:	b8800017 	ldw	r2,0(r23)
    5d58:	988d883a 	add	r6,r19,r2
    5d5c:	b9800015 	stw	r6,0(r23)
    5d60:	d0e00317 	ldw	r3,-32756(gp)
    5d64:	00bfffc4 	movi	r2,-1
    5d68:	18808e26 	beq	r3,r2,5fa4 <_malloc_r+0x680>
    5d6c:	2145c83a 	sub	r2,r4,r5
    5d70:	3085883a 	add	r2,r6,r2
    5d74:	b8800015 	stw	r2,0(r23)
    5d78:	20c001cc 	andi	r3,r4,7
    5d7c:	18005f1e 	bne	r3,zero,5efc <_malloc_r+0x5d8>
    5d80:	000b883a 	mov	r5,zero
    5d84:	a4c5883a 	add	r2,r20,r19
    5d88:	1083ffcc 	andi	r2,r2,4095
    5d8c:	00c40004 	movi	r3,4096
    5d90:	1887c83a 	sub	r3,r3,r2
    5d94:	28e7883a 	add	r19,r5,r3
    5d98:	9009883a 	mov	r4,r18
    5d9c:	980b883a 	mov	r5,r19
    5da0:	00065ec0 	call	65ec <_sbrk_r>
    5da4:	1007883a 	mov	r3,r2
    5da8:	00bfffc4 	movi	r2,-1
    5dac:	18807a26 	beq	r3,r2,5f98 <_malloc_r+0x674>
    5db0:	1d05c83a 	sub	r2,r3,r20
    5db4:	9885883a 	add	r2,r19,r2
    5db8:	10c00054 	ori	r3,r2,1
    5dbc:	b8800017 	ldw	r2,0(r23)
    5dc0:	a021883a 	mov	r16,r20
    5dc4:	a0c00115 	stw	r3,4(r20)
    5dc8:	9885883a 	add	r2,r19,r2
    5dcc:	b8800015 	stw	r2,0(r23)
    5dd0:	e5000215 	stw	r20,8(fp)
    5dd4:	b7003626 	beq	r22,fp,5eb0 <_malloc_r+0x58c>
    5dd8:	018003c4 	movi	r6,15
    5ddc:	35404b36 	bltu	r6,r21,5f0c <_malloc_r+0x5e8>
    5de0:	00800044 	movi	r2,1
    5de4:	a0800115 	stw	r2,4(r20)
    5de8:	003fcd06 	br	5d20 <_malloc_r+0x3fc>
    5dec:	2808d27a 	srli	r4,r5,9
    5df0:	2000371e 	bne	r4,zero,5ed0 <_malloc_r+0x5ac>
    5df4:	2808d0fa 	srli	r4,r5,3
    5df8:	200690fa 	slli	r3,r4,3
    5dfc:	1ad1883a 	add	r8,r3,r11
    5e00:	41800217 	ldw	r6,8(r8)
    5e04:	41805b26 	beq	r8,r6,5f74 <_malloc_r+0x650>
    5e08:	30800117 	ldw	r2,4(r6)
    5e0c:	00ffff04 	movi	r3,-4
    5e10:	10c4703a 	and	r2,r2,r3
    5e14:	2880022e 	bgeu	r5,r2,5e20 <_malloc_r+0x4fc>
    5e18:	31800217 	ldw	r6,8(r6)
    5e1c:	41bffa1e 	bne	r8,r6,5e08 <_malloc_r+0x4e4>
    5e20:	32000317 	ldw	r8,12(r6)
    5e24:	39c00117 	ldw	r7,4(r7)
    5e28:	82000315 	stw	r8,12(r16)
    5e2c:	81800215 	stw	r6,8(r16)
    5e30:	07000074 	movhi	fp,1
    5e34:	e708fa04 	addi	fp,fp,9192
    5e38:	34000315 	stw	r16,12(r6)
    5e3c:	44000215 	stw	r16,8(r8)
    5e40:	003f3e06 	br	5b3c <_malloc_r+0x218>
    5e44:	63000044 	addi	r12,r12,1
    5e48:	608000cc 	andi	r2,r12,3
    5e4c:	10005d26 	beq	r2,zero,5fc4 <_malloc_r+0x6a0>
    5e50:	18c00204 	addi	r3,r3,8
    5e54:	003f5106 	br	5b9c <_malloc_r+0x278>
    5e58:	8089883a 	add	r4,r16,r2
    5e5c:	003f6d06 	br	5c14 <_malloc_r+0x2f0>
    5e60:	00805504 	movi	r2,340
    5e64:	10c02036 	bltu	r2,r3,5ee8 <_malloc_r+0x5c4>
    5e68:	8804d3fa 	srli	r2,r17,15
    5e6c:	11801dc4 	addi	r6,r2,119
    5e70:	300490fa 	slli	r2,r6,3
    5e74:	003ed806 	br	59d8 <_malloc_r+0xb4>
    5e78:	48c000c4 	addi	r3,r9,3
    5e7c:	003f3106 	br	5b44 <_malloc_r+0x220>
    5e80:	05c00074 	movhi	r23,1
    5e84:	bdd58104 	addi	r23,r23,22020
    5e88:	b8800017 	ldw	r2,0(r23)
    5e8c:	988d883a 	add	r6,r19,r2
    5e90:	b9800015 	stw	r6,0(r23)
    5e94:	293fb21e 	bne	r5,r4,5d60 <_malloc_r+0x43c>
    5e98:	2083ffcc 	andi	r2,r4,4095
    5e9c:	103fb01e 	bne	r2,zero,5d60 <_malloc_r+0x43c>
    5ea0:	e4000217 	ldw	r16,8(fp)
    5ea4:	9d45883a 	add	r2,r19,r21
    5ea8:	10800054 	ori	r2,r2,1
    5eac:	80800115 	stw	r2,4(r16)
    5eb0:	b8c00017 	ldw	r3,0(r23)
    5eb4:	d0a6d017 	ldw	r2,-25792(gp)
    5eb8:	10c0012e 	bgeu	r2,r3,5ec0 <_malloc_r+0x59c>
    5ebc:	d0e6d015 	stw	r3,-25792(gp)
    5ec0:	d0a6d117 	ldw	r2,-25788(gp)
    5ec4:	10ff962e 	bgeu	r2,r3,5d20 <_malloc_r+0x3fc>
    5ec8:	d0e6d115 	stw	r3,-25788(gp)
    5ecc:	003f9406 	br	5d20 <_malloc_r+0x3fc>
    5ed0:	00800104 	movi	r2,4
    5ed4:	11001e36 	bltu	r2,r4,5f50 <_malloc_r+0x62c>
    5ed8:	2804d1ba 	srli	r2,r5,6
    5edc:	11000e04 	addi	r4,r2,56
    5ee0:	200690fa 	slli	r3,r4,3
    5ee4:	003fc506 	br	5dfc <_malloc_r+0x4d8>
    5ee8:	00815504 	movi	r2,1364
    5eec:	10c01d2e 	bgeu	r2,r3,5f64 <_malloc_r+0x640>
    5ef0:	01801f84 	movi	r6,126
    5ef4:	0080fc04 	movi	r2,1008
    5ef8:	003eb706 	br	59d8 <_malloc_r+0xb4>
    5efc:	00800204 	movi	r2,8
    5f00:	10cbc83a 	sub	r5,r2,r3
    5f04:	2169883a 	add	r20,r4,r5
    5f08:	003f9e06 	br	5d84 <_malloc_r+0x460>
    5f0c:	00bffe04 	movi	r2,-8
    5f10:	a93ffd04 	addi	r4,r21,-12
    5f14:	2088703a 	and	r4,r4,r2
    5f18:	b10b883a 	add	r5,r22,r4
    5f1c:	00c00144 	movi	r3,5
    5f20:	28c00215 	stw	r3,8(r5)
    5f24:	28c00115 	stw	r3,4(r5)
    5f28:	b0800117 	ldw	r2,4(r22)
    5f2c:	1080004c 	andi	r2,r2,1
    5f30:	2084b03a 	or	r2,r4,r2
    5f34:	b0800115 	stw	r2,4(r22)
    5f38:	313fdd2e 	bgeu	r6,r4,5eb0 <_malloc_r+0x58c>
    5f3c:	b1400204 	addi	r5,r22,8
    5f40:	9009883a 	mov	r4,r18
    5f44:	000a6cc0 	call	a6cc <_free_r>
    5f48:	e4000217 	ldw	r16,8(fp)
    5f4c:	003fd806 	br	5eb0 <_malloc_r+0x58c>
    5f50:	00800504 	movi	r2,20
    5f54:	11001536 	bltu	r2,r4,5fac <_malloc_r+0x688>
    5f58:	210016c4 	addi	r4,r4,91
    5f5c:	200690fa 	slli	r3,r4,3
    5f60:	003fa606 	br	5dfc <_malloc_r+0x4d8>
    5f64:	8804d4ba 	srli	r2,r17,18
    5f68:	11801f04 	addi	r6,r2,124
    5f6c:	300490fa 	slli	r2,r6,3
    5f70:	003e9906 	br	59d8 <_malloc_r+0xb4>
    5f74:	2009d0ba 	srai	r4,r4,2
    5f78:	01400074 	movhi	r5,1
    5f7c:	2948fa04 	addi	r5,r5,9192
    5f80:	00c00044 	movi	r3,1
    5f84:	28800117 	ldw	r2,4(r5)
    5f88:	1906983a 	sll	r3,r3,r4
    5f8c:	10c4b03a 	or	r2,r2,r3
    5f90:	28800115 	stw	r2,4(r5)
    5f94:	003fa306 	br	5e24 <_malloc_r+0x500>
    5f98:	0027883a 	mov	r19,zero
    5f9c:	00c00044 	movi	r3,1
    5fa0:	003f8606 	br	5dbc <_malloc_r+0x498>
    5fa4:	d1200315 	stw	r4,-32756(gp)
    5fa8:	003f7306 	br	5d78 <_malloc_r+0x454>
    5fac:	00801504 	movi	r2,84
    5fb0:	11001936 	bltu	r2,r4,6018 <_malloc_r+0x6f4>
    5fb4:	2804d33a 	srli	r2,r5,12
    5fb8:	11001b84 	addi	r4,r2,110
    5fbc:	200690fa 	slli	r3,r4,3
    5fc0:	003f8e06 	br	5dfc <_malloc_r+0x4d8>
    5fc4:	480b883a 	mov	r5,r9
    5fc8:	6807883a 	mov	r3,r13
    5fcc:	288000cc 	andi	r2,r5,3
    5fd0:	18fffe04 	addi	r3,r3,-8
    5fd4:	297fffc4 	addi	r5,r5,-1
    5fd8:	10001526 	beq	r2,zero,6030 <_malloc_r+0x70c>
    5fdc:	18800217 	ldw	r2,8(r3)
    5fe0:	10fffa26 	beq	r2,r3,5fcc <_malloc_r+0x6a8>
    5fe4:	2109883a 	add	r4,r4,r4
    5fe8:	393f1e36 	bltu	r7,r4,5c64 <_malloc_r+0x340>
    5fec:	203f1d26 	beq	r4,zero,5c64 <_malloc_r+0x340>
    5ff0:	21c4703a 	and	r2,r4,r7
    5ff4:	10000226 	beq	r2,zero,6000 <_malloc_r+0x6dc>
    5ff8:	6013883a 	mov	r9,r12
    5ffc:	003ee106 	br	5b84 <_malloc_r+0x260>
    6000:	2109883a 	add	r4,r4,r4
    6004:	3904703a 	and	r2,r7,r4
    6008:	63000104 	addi	r12,r12,4
    600c:	103ffc26 	beq	r2,zero,6000 <_malloc_r+0x6dc>
    6010:	6013883a 	mov	r9,r12
    6014:	003edb06 	br	5b84 <_malloc_r+0x260>
    6018:	00805504 	movi	r2,340
    601c:	11000836 	bltu	r2,r4,6040 <_malloc_r+0x71c>
    6020:	2804d3fa 	srli	r2,r5,15
    6024:	11001dc4 	addi	r4,r2,119
    6028:	200690fa 	slli	r3,r4,3
    602c:	003f7306 	br	5dfc <_malloc_r+0x4d8>
    6030:	0104303a 	nor	r2,zero,r4
    6034:	388e703a 	and	r7,r7,r2
    6038:	e1c00115 	stw	r7,4(fp)
    603c:	003fe906 	br	5fe4 <_malloc_r+0x6c0>
    6040:	00815504 	movi	r2,1364
    6044:	1100032e 	bgeu	r2,r4,6054 <_malloc_r+0x730>
    6048:	01001f84 	movi	r4,126
    604c:	00c0fc04 	movi	r3,1008
    6050:	003f6a06 	br	5dfc <_malloc_r+0x4d8>
    6054:	2804d4ba 	srli	r2,r5,18
    6058:	11001f04 	addi	r4,r2,124
    605c:	200690fa 	slli	r3,r4,3
    6060:	003f6606 	br	5dfc <_malloc_r+0x4d8>

00006064 <memchr>:
    6064:	008000c4 	movi	r2,3
    6068:	29403fcc 	andi	r5,r5,255
    606c:	2007883a 	mov	r3,r4
    6070:	1180022e 	bgeu	r2,r6,607c <memchr+0x18>
    6074:	2084703a 	and	r2,r4,r2
    6078:	10000b26 	beq	r2,zero,60a8 <memchr+0x44>
    607c:	313fffc4 	addi	r4,r6,-1
    6080:	3000051e 	bne	r6,zero,6098 <memchr+0x34>
    6084:	00002c06 	br	6138 <memchr+0xd4>
    6088:	213fffc4 	addi	r4,r4,-1
    608c:	00bfffc4 	movi	r2,-1
    6090:	18c00044 	addi	r3,r3,1
    6094:	20802826 	beq	r4,r2,6138 <memchr+0xd4>
    6098:	18800003 	ldbu	r2,0(r3)
    609c:	28bffa1e 	bne	r5,r2,6088 <memchr+0x24>
    60a0:	1805883a 	mov	r2,r3
    60a4:	f800283a 	ret
    60a8:	0011883a 	mov	r8,zero
    60ac:	0007883a 	mov	r3,zero
    60b0:	01c00104 	movi	r7,4
    60b4:	4004923a 	slli	r2,r8,8
    60b8:	18c00044 	addi	r3,r3,1
    60bc:	1151883a 	add	r8,r2,r5
    60c0:	19fffc1e 	bne	r3,r7,60b4 <memchr+0x50>
    60c4:	02bfbff4 	movhi	r10,65279
    60c8:	52bfbfc4 	addi	r10,r10,-257
    60cc:	02602074 	movhi	r9,32897
    60d0:	4a602004 	addi	r9,r9,-32640
    60d4:	02c000c4 	movi	r11,3
    60d8:	20800017 	ldw	r2,0(r4)
    60dc:	31bfff04 	addi	r6,r6,-4
    60e0:	200f883a 	mov	r7,r4
    60e4:	1204f03a 	xor	r2,r2,r8
    60e8:	1287883a 	add	r3,r2,r10
    60ec:	1a46703a 	and	r3,r3,r9
    60f0:	0084303a 	nor	r2,zero,r2
    60f4:	10c4703a 	and	r2,r2,r3
    60f8:	10000b26 	beq	r2,zero,6128 <memchr+0xc4>
    60fc:	20800003 	ldbu	r2,0(r4)
    6100:	28800f26 	beq	r5,r2,6140 <memchr+0xdc>
    6104:	20800043 	ldbu	r2,1(r4)
    6108:	21c00044 	addi	r7,r4,1
    610c:	28800c26 	beq	r5,r2,6140 <memchr+0xdc>
    6110:	20800083 	ldbu	r2,2(r4)
    6114:	21c00084 	addi	r7,r4,2
    6118:	28800926 	beq	r5,r2,6140 <memchr+0xdc>
    611c:	208000c3 	ldbu	r2,3(r4)
    6120:	21c000c4 	addi	r7,r4,3
    6124:	28800626 	beq	r5,r2,6140 <memchr+0xdc>
    6128:	21000104 	addi	r4,r4,4
    612c:	59bfea36 	bltu	r11,r6,60d8 <memchr+0x74>
    6130:	2007883a 	mov	r3,r4
    6134:	003fd106 	br	607c <memchr+0x18>
    6138:	0005883a 	mov	r2,zero
    613c:	f800283a 	ret
    6140:	3805883a 	mov	r2,r7
    6144:	f800283a 	ret

00006148 <memcpy>:
    6148:	01c003c4 	movi	r7,15
    614c:	2007883a 	mov	r3,r4
    6150:	3980032e 	bgeu	r7,r6,6160 <memcpy+0x18>
    6154:	2904b03a 	or	r2,r5,r4
    6158:	108000cc 	andi	r2,r2,3
    615c:	10000926 	beq	r2,zero,6184 <memcpy+0x3c>
    6160:	30000626 	beq	r6,zero,617c <memcpy+0x34>
    6164:	30cd883a 	add	r6,r6,r3
    6168:	28800003 	ldbu	r2,0(r5)
    616c:	29400044 	addi	r5,r5,1
    6170:	18800005 	stb	r2,0(r3)
    6174:	18c00044 	addi	r3,r3,1
    6178:	30fffb1e 	bne	r6,r3,6168 <memcpy+0x20>
    617c:	2005883a 	mov	r2,r4
    6180:	f800283a 	ret
    6184:	3811883a 	mov	r8,r7
    6188:	200f883a 	mov	r7,r4
    618c:	28c00017 	ldw	r3,0(r5)
    6190:	31bffc04 	addi	r6,r6,-16
    6194:	38c00015 	stw	r3,0(r7)
    6198:	28800117 	ldw	r2,4(r5)
    619c:	38800115 	stw	r2,4(r7)
    61a0:	28c00217 	ldw	r3,8(r5)
    61a4:	38c00215 	stw	r3,8(r7)
    61a8:	28800317 	ldw	r2,12(r5)
    61ac:	29400404 	addi	r5,r5,16
    61b0:	38800315 	stw	r2,12(r7)
    61b4:	39c00404 	addi	r7,r7,16
    61b8:	41bff436 	bltu	r8,r6,618c <memcpy+0x44>
    61bc:	008000c4 	movi	r2,3
    61c0:	1180072e 	bgeu	r2,r6,61e0 <memcpy+0x98>
    61c4:	1007883a 	mov	r3,r2
    61c8:	28800017 	ldw	r2,0(r5)
    61cc:	31bfff04 	addi	r6,r6,-4
    61d0:	29400104 	addi	r5,r5,4
    61d4:	38800015 	stw	r2,0(r7)
    61d8:	39c00104 	addi	r7,r7,4
    61dc:	19bffa36 	bltu	r3,r6,61c8 <memcpy+0x80>
    61e0:	3807883a 	mov	r3,r7
    61e4:	003fde06 	br	6160 <memcpy+0x18>

000061e8 <memset>:
    61e8:	008000c4 	movi	r2,3
    61ec:	29403fcc 	andi	r5,r5,255
    61f0:	2007883a 	mov	r3,r4
    61f4:	1180022e 	bgeu	r2,r6,6200 <memset+0x18>
    61f8:	2084703a 	and	r2,r4,r2
    61fc:	10000826 	beq	r2,zero,6220 <memset+0x38>
    6200:	30000526 	beq	r6,zero,6218 <memset+0x30>
    6204:	2805883a 	mov	r2,r5
    6208:	30cd883a 	add	r6,r6,r3
    620c:	18800005 	stb	r2,0(r3)
    6210:	18c00044 	addi	r3,r3,1
    6214:	19bffd1e 	bne	r3,r6,620c <memset+0x24>
    6218:	2005883a 	mov	r2,r4
    621c:	f800283a 	ret
    6220:	2804923a 	slli	r2,r5,8
    6224:	020003c4 	movi	r8,15
    6228:	200f883a 	mov	r7,r4
    622c:	2884b03a 	or	r2,r5,r2
    6230:	1006943a 	slli	r3,r2,16
    6234:	10c6b03a 	or	r3,r2,r3
    6238:	41800a2e 	bgeu	r8,r6,6264 <memset+0x7c>
    623c:	4005883a 	mov	r2,r8
    6240:	31bffc04 	addi	r6,r6,-16
    6244:	38c00015 	stw	r3,0(r7)
    6248:	38c00115 	stw	r3,4(r7)
    624c:	38c00215 	stw	r3,8(r7)
    6250:	38c00315 	stw	r3,12(r7)
    6254:	39c00404 	addi	r7,r7,16
    6258:	11bff936 	bltu	r2,r6,6240 <memset+0x58>
    625c:	008000c4 	movi	r2,3
    6260:	1180052e 	bgeu	r2,r6,6278 <memset+0x90>
    6264:	31bfff04 	addi	r6,r6,-4
    6268:	008000c4 	movi	r2,3
    626c:	38c00015 	stw	r3,0(r7)
    6270:	39c00104 	addi	r7,r7,4
    6274:	11bffb36 	bltu	r2,r6,6264 <memset+0x7c>
    6278:	3807883a 	mov	r3,r7
    627c:	003fe006 	br	6200 <memset+0x18>

00006280 <printf>:
    6280:	defffb04 	addi	sp,sp,-20
    6284:	dfc00115 	stw	ra,4(sp)
    6288:	d9400215 	stw	r5,8(sp)
    628c:	d9800315 	stw	r6,12(sp)
    6290:	d9c00415 	stw	r7,16(sp)
    6294:	00800074 	movhi	r2,1
    6298:	108ea504 	addi	r2,r2,14996
    629c:	10c00017 	ldw	r3,0(r2)
    62a0:	200b883a 	mov	r5,r4
    62a4:	d8800204 	addi	r2,sp,8
    62a8:	19000217 	ldw	r4,8(r3)
    62ac:	100d883a 	mov	r6,r2
    62b0:	d8800015 	stw	r2,0(sp)
    62b4:	000880c0 	call	880c <__vfprintf_internal>
    62b8:	dfc00117 	ldw	ra,4(sp)
    62bc:	dec00504 	addi	sp,sp,20
    62c0:	f800283a 	ret

000062c4 <_printf_r>:
    62c4:	defffc04 	addi	sp,sp,-16
    62c8:	dfc00115 	stw	ra,4(sp)
    62cc:	d9800215 	stw	r6,8(sp)
    62d0:	d9c00315 	stw	r7,12(sp)
    62d4:	280d883a 	mov	r6,r5
    62d8:	21400217 	ldw	r5,8(r4)
    62dc:	d8c00204 	addi	r3,sp,8
    62e0:	180f883a 	mov	r7,r3
    62e4:	d8c00015 	stw	r3,0(sp)
    62e8:	00069480 	call	6948 <___vfprintf_internal_r>
    62ec:	dfc00117 	ldw	ra,4(sp)
    62f0:	dec00404 	addi	sp,sp,16
    62f4:	f800283a 	ret

000062f8 <_puts_r>:
    62f8:	defff604 	addi	sp,sp,-40
    62fc:	dc400715 	stw	r17,28(sp)
    6300:	2023883a 	mov	r17,r4
    6304:	2809883a 	mov	r4,r5
    6308:	dfc00915 	stw	ra,36(sp)
    630c:	dcc00815 	stw	r19,32(sp)
    6310:	2827883a 	mov	r19,r5
    6314:	000687c0 	call	687c <strlen>
    6318:	89400217 	ldw	r5,8(r17)
    631c:	00c00074 	movhi	r3,1
    6320:	18c72504 	addi	r3,r3,7316
    6324:	01c00044 	movi	r7,1
    6328:	12000044 	addi	r8,r2,1
    632c:	d8c00515 	stw	r3,20(sp)
    6330:	d9c00615 	stw	r7,24(sp)
    6334:	d8c00304 	addi	r3,sp,12
    6338:	01c00084 	movi	r7,2
    633c:	8809883a 	mov	r4,r17
    6340:	d80d883a 	mov	r6,sp
    6344:	d8c00015 	stw	r3,0(sp)
    6348:	dcc00315 	stw	r19,12(sp)
    634c:	da000215 	stw	r8,8(sp)
    6350:	d9c00115 	stw	r7,4(sp)
    6354:	d8800415 	stw	r2,16(sp)
    6358:	000a9e00 	call	a9e0 <__sfvwrite_r>
    635c:	00ffffc4 	movi	r3,-1
    6360:	10000626 	beq	r2,zero,637c <_puts_r+0x84>
    6364:	1805883a 	mov	r2,r3
    6368:	dfc00917 	ldw	ra,36(sp)
    636c:	dcc00817 	ldw	r19,32(sp)
    6370:	dc400717 	ldw	r17,28(sp)
    6374:	dec00a04 	addi	sp,sp,40
    6378:	f800283a 	ret
    637c:	00c00284 	movi	r3,10
    6380:	1805883a 	mov	r2,r3
    6384:	dfc00917 	ldw	ra,36(sp)
    6388:	dcc00817 	ldw	r19,32(sp)
    638c:	dc400717 	ldw	r17,28(sp)
    6390:	dec00a04 	addi	sp,sp,40
    6394:	f800283a 	ret

00006398 <puts>:
    6398:	00800074 	movhi	r2,1
    639c:	108ea504 	addi	r2,r2,14996
    63a0:	200b883a 	mov	r5,r4
    63a4:	11000017 	ldw	r4,0(r2)
    63a8:	00062f81 	jmpi	62f8 <_puts_r>

000063ac <__srefill_r>:
    63ac:	defffd04 	addi	sp,sp,-12
    63b0:	dc400115 	stw	r17,4(sp)
    63b4:	dc000015 	stw	r16,0(sp)
    63b8:	dfc00215 	stw	ra,8(sp)
    63bc:	2023883a 	mov	r17,r4
    63c0:	2821883a 	mov	r16,r5
    63c4:	20000226 	beq	r4,zero,63d0 <__srefill_r+0x24>
    63c8:	20800e17 	ldw	r2,56(r4)
    63cc:	10004126 	beq	r2,zero,64d4 <__srefill_r+0x128>
    63d0:	80c0030b 	ldhu	r3,12(r16)
    63d4:	80000115 	stw	zero,4(r16)
    63d8:	1880080c 	andi	r2,r3,32
    63dc:	1000361e 	bne	r2,zero,64b8 <__srefill_r+0x10c>
    63e0:	1880010c 	andi	r2,r3,4
    63e4:	1000211e 	bne	r2,zero,646c <__srefill_r+0xc0>
    63e8:	1880040c 	andi	r2,r3,16
    63ec:	10005026 	beq	r2,zero,6530 <__srefill_r+0x184>
    63f0:	1880020c 	andi	r2,r3,8
    63f4:	1000541e 	bne	r2,zero,6548 <__srefill_r+0x19c>
    63f8:	8080030b 	ldhu	r2,12(r16)
    63fc:	10800114 	ori	r2,r2,4
    6400:	8080030d 	sth	r2,12(r16)
    6404:	80800417 	ldw	r2,16(r16)
    6408:	10004526 	beq	r2,zero,6520 <__srefill_r+0x174>
    640c:	8080030b 	ldhu	r2,12(r16)
    6410:	108000cc 	andi	r2,r2,3
    6414:	1000361e 	bne	r2,zero,64f0 <__srefill_r+0x144>
    6418:	81800417 	ldw	r6,16(r16)
    641c:	80c00817 	ldw	r3,32(r16)
    6420:	81400717 	ldw	r5,28(r16)
    6424:	81c00517 	ldw	r7,20(r16)
    6428:	8809883a 	mov	r4,r17
    642c:	81800015 	stw	r6,0(r16)
    6430:	183ee83a 	callr	r3
    6434:	80c0030b 	ldhu	r3,12(r16)
    6438:	1009883a 	mov	r4,r2
    643c:	80800115 	stw	r2,4(r16)
    6440:	00b7ffc4 	movi	r2,-8193
    6444:	1884703a 	and	r2,r3,r2
    6448:	8080030d 	sth	r2,12(r16)
    644c:	0100230e 	bge	zero,r4,64dc <__srefill_r+0x130>
    6450:	0009883a 	mov	r4,zero
    6454:	2005883a 	mov	r2,r4
    6458:	dfc00217 	ldw	ra,8(sp)
    645c:	dc400117 	ldw	r17,4(sp)
    6460:	dc000017 	ldw	r16,0(sp)
    6464:	dec00304 	addi	sp,sp,12
    6468:	f800283a 	ret
    646c:	81400c17 	ldw	r5,48(r16)
    6470:	283fe426 	beq	r5,zero,6404 <__srefill_r+0x58>
    6474:	80801004 	addi	r2,r16,64
    6478:	28800226 	beq	r5,r2,6484 <__srefill_r+0xd8>
    647c:	8809883a 	mov	r4,r17
    6480:	000a6cc0 	call	a6cc <_free_r>
    6484:	80800f17 	ldw	r2,60(r16)
    6488:	80000c15 	stw	zero,48(r16)
    648c:	80800115 	stw	r2,4(r16)
    6490:	103fdc26 	beq	r2,zero,6404 <__srefill_r+0x58>
    6494:	80800e17 	ldw	r2,56(r16)
    6498:	0009883a 	mov	r4,zero
    649c:	80800015 	stw	r2,0(r16)
    64a0:	2005883a 	mov	r2,r4
    64a4:	dfc00217 	ldw	ra,8(sp)
    64a8:	dc400117 	ldw	r17,4(sp)
    64ac:	dc000017 	ldw	r16,0(sp)
    64b0:	dec00304 	addi	sp,sp,12
    64b4:	f800283a 	ret
    64b8:	013fffc4 	movi	r4,-1
    64bc:	2005883a 	mov	r2,r4
    64c0:	dfc00217 	ldw	ra,8(sp)
    64c4:	dc400117 	ldw	r17,4(sp)
    64c8:	dc000017 	ldw	r16,0(sp)
    64cc:	dec00304 	addi	sp,sp,12
    64d0:	f800283a 	ret
    64d4:	00053f00 	call	53f0 <__sinit>
    64d8:	003fbd06 	br	63d0 <__srefill_r+0x24>
    64dc:	20000b1e 	bne	r4,zero,650c <__srefill_r+0x160>
    64e0:	10800814 	ori	r2,r2,32
    64e4:	013fffc4 	movi	r4,-1
    64e8:	8080030d 	sth	r2,12(r16)
    64ec:	003fd906 	br	6454 <__srefill_r+0xa8>
    64f0:	00800074 	movhi	r2,1
    64f4:	108ea604 	addi	r2,r2,15000
    64f8:	11000017 	ldw	r4,0(r2)
    64fc:	01400034 	movhi	r5,0
    6500:	29595c04 	addi	r5,r5,25968
    6504:	00057440 	call	5744 <_fwalk>
    6508:	003fc306 	br	6418 <__srefill_r+0x6c>
    650c:	10801014 	ori	r2,r2,64
    6510:	013fffc4 	movi	r4,-1
    6514:	8080030d 	sth	r2,12(r16)
    6518:	80000115 	stw	zero,4(r16)
    651c:	003fcd06 	br	6454 <__srefill_r+0xa8>
    6520:	8809883a 	mov	r4,r17
    6524:	800b883a 	mov	r5,r16
    6528:	000afb80 	call	afb8 <__smakebuf_r>
    652c:	003fb706 	br	640c <__srefill_r+0x60>
    6530:	18c01014 	ori	r3,r3,64
    6534:	00800244 	movi	r2,9
    6538:	013fffc4 	movi	r4,-1
    653c:	88800015 	stw	r2,0(r17)
    6540:	80c0030d 	sth	r3,12(r16)
    6544:	003fc306 	br	6454 <__srefill_r+0xa8>
    6548:	8809883a 	mov	r4,r17
    654c:	800b883a 	mov	r5,r16
    6550:	000a3700 	call	a370 <_fflush_r>
    6554:	103fd81e 	bne	r2,zero,64b8 <__srefill_r+0x10c>
    6558:	8080030b 	ldhu	r2,12(r16)
    655c:	80000215 	stw	zero,8(r16)
    6560:	80000615 	stw	zero,24(r16)
    6564:	10bffdcc 	andi	r2,r2,65527
    6568:	8080030d 	sth	r2,12(r16)
    656c:	003fa206 	br	63f8 <__srefill_r+0x4c>

00006570 <lflush>:
    6570:	20c0030b 	ldhu	r3,12(r4)
    6574:	01400244 	movi	r5,9
    6578:	0005883a 	mov	r2,zero
    657c:	18c0024c 	andi	r3,r3,9
    6580:	19400126 	beq	r3,r5,6588 <lflush+0x18>
    6584:	f800283a 	ret
    6588:	000a56c1 	jmpi	a56c <fflush>

0000658c <__srget_r>:
    658c:	defffe04 	addi	sp,sp,-8
    6590:	dc000015 	stw	r16,0(sp)
    6594:	dfc00115 	stw	ra,4(sp)
    6598:	2821883a 	mov	r16,r5
    659c:	00063ac0 	call	63ac <__srefill_r>
    65a0:	013fffc4 	movi	r4,-1
    65a4:	1000071e 	bne	r2,zero,65c4 <__srget_r+0x38>
    65a8:	80800117 	ldw	r2,4(r16)
    65ac:	81000017 	ldw	r4,0(r16)
    65b0:	10bfffc4 	addi	r2,r2,-1
    65b4:	20c00044 	addi	r3,r4,1
    65b8:	80800115 	stw	r2,4(r16)
    65bc:	21000003 	ldbu	r4,0(r4)
    65c0:	80c00015 	stw	r3,0(r16)
    65c4:	2005883a 	mov	r2,r4
    65c8:	dfc00117 	ldw	ra,4(sp)
    65cc:	dc000017 	ldw	r16,0(sp)
    65d0:	dec00204 	addi	sp,sp,8
    65d4:	f800283a 	ret

000065d8 <__srget>:
    65d8:	00800074 	movhi	r2,1
    65dc:	108ea504 	addi	r2,r2,14996
    65e0:	200b883a 	mov	r5,r4
    65e4:	11000017 	ldw	r4,0(r2)
    65e8:	000658c1 	jmpi	658c <__srget_r>

000065ec <_sbrk_r>:
    65ec:	defffd04 	addi	sp,sp,-12
    65f0:	dc000015 	stw	r16,0(sp)
    65f4:	04000074 	movhi	r16,1
    65f8:	84157704 	addi	r16,r16,21980
    65fc:	dc400115 	stw	r17,4(sp)
    6600:	80000015 	stw	zero,0(r16)
    6604:	2023883a 	mov	r17,r4
    6608:	2809883a 	mov	r4,r5
    660c:	dfc00215 	stw	ra,8(sp)
    6610:	000e43c0 	call	e43c <sbrk>
    6614:	1007883a 	mov	r3,r2
    6618:	00bfffc4 	movi	r2,-1
    661c:	18800626 	beq	r3,r2,6638 <_sbrk_r+0x4c>
    6620:	1805883a 	mov	r2,r3
    6624:	dfc00217 	ldw	ra,8(sp)
    6628:	dc400117 	ldw	r17,4(sp)
    662c:	dc000017 	ldw	r16,0(sp)
    6630:	dec00304 	addi	sp,sp,12
    6634:	f800283a 	ret
    6638:	80800017 	ldw	r2,0(r16)
    663c:	103ff826 	beq	r2,zero,6620 <_sbrk_r+0x34>
    6640:	88800015 	stw	r2,0(r17)
    6644:	1805883a 	mov	r2,r3
    6648:	dfc00217 	ldw	ra,8(sp)
    664c:	dc400117 	ldw	r17,4(sp)
    6650:	dc000017 	ldw	r16,0(sp)
    6654:	dec00304 	addi	sp,sp,12
    6658:	f800283a 	ret

0000665c <sprintf>:
    665c:	deffe504 	addi	sp,sp,-108
    6660:	2013883a 	mov	r9,r4
    6664:	dfc01815 	stw	ra,96(sp)
    6668:	d9801915 	stw	r6,100(sp)
    666c:	d9c01a15 	stw	r7,104(sp)
    6670:	d8801904 	addi	r2,sp,100
    6674:	d8800015 	stw	r2,0(sp)
    6678:	00800074 	movhi	r2,1
    667c:	108ea504 	addi	r2,r2,14996
    6680:	11000017 	ldw	r4,0(r2)
    6684:	d9c00017 	ldw	r7,0(sp)
    6688:	00808204 	movi	r2,520
    668c:	00e00034 	movhi	r3,32768
    6690:	18ffffc4 	addi	r3,r3,-1
    6694:	280d883a 	mov	r6,r5
    6698:	d880040d 	sth	r2,16(sp)
    669c:	d9400104 	addi	r5,sp,4
    66a0:	00bfffc4 	movi	r2,-1
    66a4:	d8c00615 	stw	r3,24(sp)
    66a8:	d8c00315 	stw	r3,12(sp)
    66ac:	da400515 	stw	r9,20(sp)
    66b0:	d880048d 	sth	r2,18(sp)
    66b4:	da400115 	stw	r9,4(sp)
    66b8:	00069480 	call	6948 <___vfprintf_internal_r>
    66bc:	d8c00117 	ldw	r3,4(sp)
    66c0:	18000005 	stb	zero,0(r3)
    66c4:	dfc01817 	ldw	ra,96(sp)
    66c8:	dec01b04 	addi	sp,sp,108
    66cc:	f800283a 	ret

000066d0 <_sprintf_r>:
    66d0:	deffe604 	addi	sp,sp,-104
    66d4:	2813883a 	mov	r9,r5
    66d8:	dfc01815 	stw	ra,96(sp)
    66dc:	d9c01915 	stw	r7,100(sp)
    66e0:	d8801904 	addi	r2,sp,100
    66e4:	d8800015 	stw	r2,0(sp)
    66e8:	100f883a 	mov	r7,r2
    66ec:	00808204 	movi	r2,520
    66f0:	00e00034 	movhi	r3,32768
    66f4:	18ffffc4 	addi	r3,r3,-1
    66f8:	d880040d 	sth	r2,16(sp)
    66fc:	d9400104 	addi	r5,sp,4
    6700:	00bfffc4 	movi	r2,-1
    6704:	d8c00615 	stw	r3,24(sp)
    6708:	d8c00315 	stw	r3,12(sp)
    670c:	da400515 	stw	r9,20(sp)
    6710:	d880048d 	sth	r2,18(sp)
    6714:	da400115 	stw	r9,4(sp)
    6718:	00069480 	call	6948 <___vfprintf_internal_r>
    671c:	d8c00117 	ldw	r3,4(sp)
    6720:	18000005 	stb	zero,0(r3)
    6724:	dfc01817 	ldw	ra,96(sp)
    6728:	dec01a04 	addi	sp,sp,104
    672c:	f800283a 	ret

00006730 <__sclose>:
    6730:	2940038f 	ldh	r5,14(r5)
    6734:	00089e41 	jmpi	89e4 <_close_r>

00006738 <__sseek>:
    6738:	defffe04 	addi	sp,sp,-8
    673c:	dc000015 	stw	r16,0(sp)
    6740:	2821883a 	mov	r16,r5
    6744:	2940038f 	ldh	r5,14(r5)
    6748:	dfc00115 	stw	ra,4(sp)
    674c:	000af400 	call	af40 <_lseek_r>
    6750:	1007883a 	mov	r3,r2
    6754:	00bfffc4 	movi	r2,-1
    6758:	18800926 	beq	r3,r2,6780 <__sseek+0x48>
    675c:	8080030b 	ldhu	r2,12(r16)
    6760:	80c01415 	stw	r3,80(r16)
    6764:	10840014 	ori	r2,r2,4096
    6768:	8080030d 	sth	r2,12(r16)
    676c:	1805883a 	mov	r2,r3
    6770:	dfc00117 	ldw	ra,4(sp)
    6774:	dc000017 	ldw	r16,0(sp)
    6778:	dec00204 	addi	sp,sp,8
    677c:	f800283a 	ret
    6780:	8080030b 	ldhu	r2,12(r16)
    6784:	10bbffcc 	andi	r2,r2,61439
    6788:	8080030d 	sth	r2,12(r16)
    678c:	1805883a 	mov	r2,r3
    6790:	dfc00117 	ldw	ra,4(sp)
    6794:	dc000017 	ldw	r16,0(sp)
    6798:	dec00204 	addi	sp,sp,8
    679c:	f800283a 	ret

000067a0 <__swrite>:
    67a0:	2880030b 	ldhu	r2,12(r5)
    67a4:	defffb04 	addi	sp,sp,-20
    67a8:	dcc00315 	stw	r19,12(sp)
    67ac:	1080400c 	andi	r2,r2,256
    67b0:	dc800215 	stw	r18,8(sp)
    67b4:	dc400115 	stw	r17,4(sp)
    67b8:	dc000015 	stw	r16,0(sp)
    67bc:	3027883a 	mov	r19,r6
    67c0:	3825883a 	mov	r18,r7
    67c4:	dfc00415 	stw	ra,16(sp)
    67c8:	2821883a 	mov	r16,r5
    67cc:	000d883a 	mov	r6,zero
    67d0:	01c00084 	movi	r7,2
    67d4:	2023883a 	mov	r17,r4
    67d8:	10000226 	beq	r2,zero,67e4 <__swrite+0x44>
    67dc:	2940038f 	ldh	r5,14(r5)
    67e0:	000af400 	call	af40 <_lseek_r>
    67e4:	8080030b 	ldhu	r2,12(r16)
    67e8:	8140038f 	ldh	r5,14(r16)
    67ec:	8809883a 	mov	r4,r17
    67f0:	10bbffcc 	andi	r2,r2,61439
    67f4:	980d883a 	mov	r6,r19
    67f8:	900f883a 	mov	r7,r18
    67fc:	8080030d 	sth	r2,12(r16)
    6800:	dfc00417 	ldw	ra,16(sp)
    6804:	dcc00317 	ldw	r19,12(sp)
    6808:	dc800217 	ldw	r18,8(sp)
    680c:	dc400117 	ldw	r17,4(sp)
    6810:	dc000017 	ldw	r16,0(sp)
    6814:	dec00504 	addi	sp,sp,20
    6818:	00088301 	jmpi	8830 <_write_r>

0000681c <__sread>:
    681c:	defffe04 	addi	sp,sp,-8
    6820:	dc000015 	stw	r16,0(sp)
    6824:	2821883a 	mov	r16,r5
    6828:	2940038f 	ldh	r5,14(r5)
    682c:	dfc00115 	stw	ra,4(sp)
    6830:	000c2b80 	call	c2b8 <_read_r>
    6834:	1007883a 	mov	r3,r2
    6838:	10000816 	blt	r2,zero,685c <__sread+0x40>
    683c:	80801417 	ldw	r2,80(r16)
    6840:	10c5883a 	add	r2,r2,r3
    6844:	80801415 	stw	r2,80(r16)
    6848:	1805883a 	mov	r2,r3
    684c:	dfc00117 	ldw	ra,4(sp)
    6850:	dc000017 	ldw	r16,0(sp)
    6854:	dec00204 	addi	sp,sp,8
    6858:	f800283a 	ret
    685c:	8080030b 	ldhu	r2,12(r16)
    6860:	10bbffcc 	andi	r2,r2,61439
    6864:	8080030d 	sth	r2,12(r16)
    6868:	1805883a 	mov	r2,r3
    686c:	dfc00117 	ldw	ra,4(sp)
    6870:	dc000017 	ldw	r16,0(sp)
    6874:	dec00204 	addi	sp,sp,8
    6878:	f800283a 	ret

0000687c <strlen>:
    687c:	208000cc 	andi	r2,r4,3
    6880:	2011883a 	mov	r8,r4
    6884:	1000161e 	bne	r2,zero,68e0 <strlen+0x64>
    6888:	20c00017 	ldw	r3,0(r4)
    688c:	017fbff4 	movhi	r5,65279
    6890:	297fbfc4 	addi	r5,r5,-257
    6894:	01e02074 	movhi	r7,32897
    6898:	39e02004 	addi	r7,r7,-32640
    689c:	1945883a 	add	r2,r3,r5
    68a0:	11c4703a 	and	r2,r2,r7
    68a4:	00c6303a 	nor	r3,zero,r3
    68a8:	1886703a 	and	r3,r3,r2
    68ac:	18000c1e 	bne	r3,zero,68e0 <strlen+0x64>
    68b0:	280d883a 	mov	r6,r5
    68b4:	380b883a 	mov	r5,r7
    68b8:	21000104 	addi	r4,r4,4
    68bc:	20800017 	ldw	r2,0(r4)
    68c0:	1187883a 	add	r3,r2,r6
    68c4:	1946703a 	and	r3,r3,r5
    68c8:	0084303a 	nor	r2,zero,r2
    68cc:	10c4703a 	and	r2,r2,r3
    68d0:	103ff926 	beq	r2,zero,68b8 <strlen+0x3c>
    68d4:	20800007 	ldb	r2,0(r4)
    68d8:	10000326 	beq	r2,zero,68e8 <strlen+0x6c>
    68dc:	21000044 	addi	r4,r4,1
    68e0:	20800007 	ldb	r2,0(r4)
    68e4:	103ffd1e 	bne	r2,zero,68dc <strlen+0x60>
    68e8:	2205c83a 	sub	r2,r4,r8
    68ec:	f800283a 	ret

000068f0 <__sprint_r>:
    68f0:	30800217 	ldw	r2,8(r6)
    68f4:	defffe04 	addi	sp,sp,-8
    68f8:	dc000015 	stw	r16,0(sp)
    68fc:	dfc00115 	stw	ra,4(sp)
    6900:	3021883a 	mov	r16,r6
    6904:	0007883a 	mov	r3,zero
    6908:	1000061e 	bne	r2,zero,6924 <__sprint_r+0x34>
    690c:	1805883a 	mov	r2,r3
    6910:	30000115 	stw	zero,4(r6)
    6914:	dfc00117 	ldw	ra,4(sp)
    6918:	dc000017 	ldw	r16,0(sp)
    691c:	dec00204 	addi	sp,sp,8
    6920:	f800283a 	ret
    6924:	000a9e00 	call	a9e0 <__sfvwrite_r>
    6928:	1007883a 	mov	r3,r2
    692c:	1805883a 	mov	r2,r3
    6930:	80000115 	stw	zero,4(r16)
    6934:	80000215 	stw	zero,8(r16)
    6938:	dfc00117 	ldw	ra,4(sp)
    693c:	dc000017 	ldw	r16,0(sp)
    6940:	dec00204 	addi	sp,sp,8
    6944:	f800283a 	ret

00006948 <___vfprintf_internal_r>:
    6948:	defea404 	addi	sp,sp,-1392
    694c:	dd815815 	stw	r22,1376(sp)
    6950:	dc015215 	stw	r16,1352(sp)
    6954:	d9c15115 	stw	r7,1348(sp)
    6958:	dfc15b15 	stw	ra,1388(sp)
    695c:	df015a15 	stw	fp,1384(sp)
    6960:	ddc15915 	stw	r23,1380(sp)
    6964:	dd415715 	stw	r21,1372(sp)
    6968:	dd015615 	stw	r20,1368(sp)
    696c:	dcc15515 	stw	r19,1364(sp)
    6970:	dc815415 	stw	r18,1360(sp)
    6974:	dc415315 	stw	r17,1356(sp)
    6978:	282d883a 	mov	r22,r5
    697c:	3021883a 	mov	r16,r6
    6980:	d9014f15 	stw	r4,1340(sp)
    6984:	000ae840 	call	ae84 <_localeconv_r>
    6988:	10800017 	ldw	r2,0(r2)
    698c:	d9c15117 	ldw	r7,1348(sp)
    6990:	d8814915 	stw	r2,1316(sp)
    6994:	d8814f17 	ldw	r2,1340(sp)
    6998:	10000226 	beq	r2,zero,69a4 <___vfprintf_internal_r+0x5c>
    699c:	10800e17 	ldw	r2,56(r2)
    69a0:	10020d26 	beq	r2,zero,71d8 <___vfprintf_internal_r+0x890>
    69a4:	b080030b 	ldhu	r2,12(r22)
    69a8:	1080020c 	andi	r2,r2,8
    69ac:	10020e26 	beq	r2,zero,71e8 <___vfprintf_internal_r+0x8a0>
    69b0:	b0800417 	ldw	r2,16(r22)
    69b4:	10020c26 	beq	r2,zero,71e8 <___vfprintf_internal_r+0x8a0>
    69b8:	b200030b 	ldhu	r8,12(r22)
    69bc:	00800284 	movi	r2,10
    69c0:	40c0068c 	andi	r3,r8,26
    69c4:	18802f1e 	bne	r3,r2,6a84 <___vfprintf_internal_r+0x13c>
    69c8:	b080038f 	ldh	r2,14(r22)
    69cc:	10002d16 	blt	r2,zero,6a84 <___vfprintf_internal_r+0x13c>
    69d0:	b240038b 	ldhu	r9,14(r22)
    69d4:	b2800717 	ldw	r10,28(r22)
    69d8:	b2c00917 	ldw	r11,36(r22)
    69dc:	d9014f17 	ldw	r4,1340(sp)
    69e0:	dc402904 	addi	r17,sp,164
    69e4:	d8804004 	addi	r2,sp,256
    69e8:	00c10004 	movi	r3,1024
    69ec:	423fff4c 	andi	r8,r8,65533
    69f0:	800d883a 	mov	r6,r16
    69f4:	880b883a 	mov	r5,r17
    69f8:	da002c0d 	sth	r8,176(sp)
    69fc:	da402c8d 	sth	r9,178(sp)
    6a00:	da803015 	stw	r10,192(sp)
    6a04:	dac03215 	stw	r11,200(sp)
    6a08:	d8802d15 	stw	r2,180(sp)
    6a0c:	d8c02e15 	stw	r3,184(sp)
    6a10:	d8802915 	stw	r2,164(sp)
    6a14:	d8c02b15 	stw	r3,172(sp)
    6a18:	d8002f15 	stw	zero,188(sp)
    6a1c:	00069480 	call	6948 <___vfprintf_internal_r>
    6a20:	d8814b15 	stw	r2,1324(sp)
    6a24:	10000416 	blt	r2,zero,6a38 <___vfprintf_internal_r+0xf0>
    6a28:	d9014f17 	ldw	r4,1340(sp)
    6a2c:	880b883a 	mov	r5,r17
    6a30:	000a3700 	call	a370 <_fflush_r>
    6a34:	1002321e 	bne	r2,zero,7300 <___vfprintf_internal_r+0x9b8>
    6a38:	d8802c0b 	ldhu	r2,176(sp)
    6a3c:	1080100c 	andi	r2,r2,64
    6a40:	10000326 	beq	r2,zero,6a50 <___vfprintf_internal_r+0x108>
    6a44:	b080030b 	ldhu	r2,12(r22)
    6a48:	10801014 	ori	r2,r2,64
    6a4c:	b080030d 	sth	r2,12(r22)
    6a50:	d8814b17 	ldw	r2,1324(sp)
    6a54:	dfc15b17 	ldw	ra,1388(sp)
    6a58:	df015a17 	ldw	fp,1384(sp)
    6a5c:	ddc15917 	ldw	r23,1380(sp)
    6a60:	dd815817 	ldw	r22,1376(sp)
    6a64:	dd415717 	ldw	r21,1372(sp)
    6a68:	dd015617 	ldw	r20,1368(sp)
    6a6c:	dcc15517 	ldw	r19,1364(sp)
    6a70:	dc815417 	ldw	r18,1360(sp)
    6a74:	dc415317 	ldw	r17,1356(sp)
    6a78:	dc015217 	ldw	r16,1352(sp)
    6a7c:	dec15c04 	addi	sp,sp,1392
    6a80:	f800283a 	ret
    6a84:	0005883a 	mov	r2,zero
    6a88:	0007883a 	mov	r3,zero
    6a8c:	dd401904 	addi	r21,sp,100
    6a90:	d8814215 	stw	r2,1288(sp)
    6a94:	802f883a 	mov	r23,r16
    6a98:	d8c14315 	stw	r3,1292(sp)
    6a9c:	d8014b15 	stw	zero,1324(sp)
    6aa0:	d8014815 	stw	zero,1312(sp)
    6aa4:	d8014415 	stw	zero,1296(sp)
    6aa8:	d8014715 	stw	zero,1308(sp)
    6aac:	dd400c15 	stw	r21,48(sp)
    6ab0:	d8000e15 	stw	zero,56(sp)
    6ab4:	d8000d15 	stw	zero,52(sp)
    6ab8:	b8800007 	ldb	r2,0(r23)
    6abc:	10001926 	beq	r2,zero,6b24 <___vfprintf_internal_r+0x1dc>
    6ac0:	00c00944 	movi	r3,37
    6ac4:	10c01726 	beq	r2,r3,6b24 <___vfprintf_internal_r+0x1dc>
    6ac8:	b821883a 	mov	r16,r23
    6acc:	00000106 	br	6ad4 <___vfprintf_internal_r+0x18c>
    6ad0:	10c00326 	beq	r2,r3,6ae0 <___vfprintf_internal_r+0x198>
    6ad4:	84000044 	addi	r16,r16,1
    6ad8:	80800007 	ldb	r2,0(r16)
    6adc:	103ffc1e 	bne	r2,zero,6ad0 <___vfprintf_internal_r+0x188>
    6ae0:	85e7c83a 	sub	r19,r16,r23
    6ae4:	98000e26 	beq	r19,zero,6b20 <___vfprintf_internal_r+0x1d8>
    6ae8:	dc800e17 	ldw	r18,56(sp)
    6aec:	dc400d17 	ldw	r17,52(sp)
    6af0:	008001c4 	movi	r2,7
    6af4:	94e5883a 	add	r18,r18,r19
    6af8:	8c400044 	addi	r17,r17,1
    6afc:	adc00015 	stw	r23,0(r21)
    6b00:	dc800e15 	stw	r18,56(sp)
    6b04:	acc00115 	stw	r19,4(r21)
    6b08:	dc400d15 	stw	r17,52(sp)
    6b0c:	14428b16 	blt	r2,r17,753c <___vfprintf_internal_r+0xbf4>
    6b10:	ad400204 	addi	r21,r21,8
    6b14:	d9014b17 	ldw	r4,1324(sp)
    6b18:	24c9883a 	add	r4,r4,r19
    6b1c:	d9014b15 	stw	r4,1324(sp)
    6b20:	802f883a 	mov	r23,r16
    6b24:	b8800007 	ldb	r2,0(r23)
    6b28:	10013c26 	beq	r2,zero,701c <___vfprintf_internal_r+0x6d4>
    6b2c:	bdc00044 	addi	r23,r23,1
    6b30:	d8000405 	stb	zero,16(sp)
    6b34:	b8c00007 	ldb	r3,0(r23)
    6b38:	04ffffc4 	movi	r19,-1
    6b3c:	d8014c15 	stw	zero,1328(sp)
    6b40:	d8014a15 	stw	zero,1320(sp)
    6b44:	d8c14d15 	stw	r3,1332(sp)
    6b48:	bdc00044 	addi	r23,r23,1
    6b4c:	d9414d17 	ldw	r5,1332(sp)
    6b50:	00801604 	movi	r2,88
    6b54:	28fff804 	addi	r3,r5,-32
    6b58:	10c06036 	bltu	r2,r3,6cdc <___vfprintf_internal_r+0x394>
    6b5c:	18c5883a 	add	r2,r3,r3
    6b60:	1085883a 	add	r2,r2,r2
    6b64:	00c00034 	movhi	r3,0
    6b68:	18dade04 	addi	r3,r3,27512
    6b6c:	10c5883a 	add	r2,r2,r3
    6b70:	11000017 	ldw	r4,0(r2)
    6b74:	2000683a 	jmp	r4
    6b78:	00007aec 	andhi	zero,zero,491
    6b7c:	00006cdc 	xori	zero,zero,435
    6b80:	00006cdc 	xori	zero,zero,435
    6b84:	00007ad8 	cmpnei	zero,zero,491
    6b88:	00006cdc 	xori	zero,zero,435
    6b8c:	00006cdc 	xori	zero,zero,435
    6b90:	00006cdc 	xori	zero,zero,435
    6b94:	00006cdc 	xori	zero,zero,435
    6b98:	00006cdc 	xori	zero,zero,435
    6b9c:	00006cdc 	xori	zero,zero,435
    6ba0:	000078b8 	rdprs	zero,zero,482
    6ba4:	00007ac8 	cmpgei	zero,zero,491
    6ba8:	00006cdc 	xori	zero,zero,435
    6bac:	000078d0 	cmplti	zero,zero,483
    6bb0:	00007b70 	cmpltui	zero,zero,493
    6bb4:	00006cdc 	xori	zero,zero,435
    6bb8:	00007b5c 	xori	zero,zero,493
    6bbc:	00007b18 	cmpnei	zero,zero,492
    6bc0:	00007b18 	cmpnei	zero,zero,492
    6bc4:	00007b18 	cmpnei	zero,zero,492
    6bc8:	00007b18 	cmpnei	zero,zero,492
    6bcc:	00007b18 	cmpnei	zero,zero,492
    6bd0:	00007b18 	cmpnei	zero,zero,492
    6bd4:	00007b18 	cmpnei	zero,zero,492
    6bd8:	00007b18 	cmpnei	zero,zero,492
    6bdc:	00007b18 	cmpnei	zero,zero,492
    6be0:	00006cdc 	xori	zero,zero,435
    6be4:	00006cdc 	xori	zero,zero,435
    6be8:	00006cdc 	xori	zero,zero,435
    6bec:	00006cdc 	xori	zero,zero,435
    6bf0:	00006cdc 	xori	zero,zero,435
    6bf4:	00006cdc 	xori	zero,zero,435
    6bf8:	00006cdc 	xori	zero,zero,435
    6bfc:	00006cdc 	xori	zero,zero,435
    6c00:	00006cdc 	xori	zero,zero,435
    6c04:	00006cdc 	xori	zero,zero,435
    6c08:	00007334 	movhi	zero,460
    6c0c:	000079a0 	cmpeqi	zero,zero,486
    6c10:	00006cdc 	xori	zero,zero,435
    6c14:	000079a0 	cmpeqi	zero,zero,486
    6c18:	00006cdc 	xori	zero,zero,435
    6c1c:	00006cdc 	xori	zero,zero,435
    6c20:	00006cdc 	xori	zero,zero,435
    6c24:	00006cdc 	xori	zero,zero,435
    6c28:	00007b04 	movi	zero,492
    6c2c:	00006cdc 	xori	zero,zero,435
    6c30:	00006cdc 	xori	zero,zero,435
    6c34:	000073e8 	cmpgeui	zero,zero,463
    6c38:	00006cdc 	xori	zero,zero,435
    6c3c:	00006cdc 	xori	zero,zero,435
    6c40:	00006cdc 	xori	zero,zero,435
    6c44:	00006cdc 	xori	zero,zero,435
    6c48:	00006cdc 	xori	zero,zero,435
    6c4c:	00007434 	movhi	zero,464
    6c50:	00006cdc 	xori	zero,zero,435
    6c54:	00006cdc 	xori	zero,zero,435
    6c58:	00007a54 	movui	zero,489
    6c5c:	00006cdc 	xori	zero,zero,435
    6c60:	00006cdc 	xori	zero,zero,435
    6c64:	00006cdc 	xori	zero,zero,435
    6c68:	00006cdc 	xori	zero,zero,435
    6c6c:	00006cdc 	xori	zero,zero,435
    6c70:	00006cdc 	xori	zero,zero,435
    6c74:	00006cdc 	xori	zero,zero,435
    6c78:	00006cdc 	xori	zero,zero,435
    6c7c:	00006cdc 	xori	zero,zero,435
    6c80:	00006cdc 	xori	zero,zero,435
    6c84:	00007a28 	cmpgeui	zero,zero,488
    6c88:	00007340 	call	734 <main+0xe4>
    6c8c:	000079a0 	cmpeqi	zero,zero,486
    6c90:	000079a0 	cmpeqi	zero,zero,486
    6c94:	000079a0 	cmpeqi	zero,zero,486
    6c98:	0000798c 	andi	zero,zero,486
    6c9c:	00007340 	call	734 <main+0xe4>
    6ca0:	00006cdc 	xori	zero,zero,435
    6ca4:	00006cdc 	xori	zero,zero,435
    6ca8:	00007914 	movui	zero,484
    6cac:	00006cdc 	xori	zero,zero,435
    6cb0:	000078e4 	muli	zero,zero,483
    6cb4:	000073f4 	movhi	zero,463
    6cb8:	00007944 	movi	zero,485
    6cbc:	00007930 	cmpltui	zero,zero,484
    6cc0:	00006cdc 	xori	zero,zero,435
    6cc4:	00007bd8 	cmpnei	zero,zero,495
    6cc8:	00006cdc 	xori	zero,zero,435
    6ccc:	00007440 	call	744 <main+0xf4>
    6cd0:	00006cdc 	xori	zero,zero,435
    6cd4:	00006cdc 	xori	zero,zero,435
    6cd8:	00007ab8 	rdprs	zero,zero,490
    6cdc:	d9014d17 	ldw	r4,1332(sp)
    6ce0:	2000ce26 	beq	r4,zero,701c <___vfprintf_internal_r+0x6d4>
    6ce4:	01400044 	movi	r5,1
    6ce8:	d9800f04 	addi	r6,sp,60
    6cec:	d9c14015 	stw	r7,1280(sp)
    6cf0:	d9414515 	stw	r5,1300(sp)
    6cf4:	d9814115 	stw	r6,1284(sp)
    6cf8:	280f883a 	mov	r7,r5
    6cfc:	d9000f05 	stb	r4,60(sp)
    6d00:	d8000405 	stb	zero,16(sp)
    6d04:	d8014615 	stw	zero,1304(sp)
    6d08:	d8c14c17 	ldw	r3,1328(sp)
    6d0c:	1880008c 	andi	r2,r3,2
    6d10:	1005003a 	cmpeq	r2,r2,zero
    6d14:	d8815015 	stw	r2,1344(sp)
    6d18:	1000031e 	bne	r2,zero,6d28 <___vfprintf_internal_r+0x3e0>
    6d1c:	d9014517 	ldw	r4,1300(sp)
    6d20:	21000084 	addi	r4,r4,2
    6d24:	d9014515 	stw	r4,1300(sp)
    6d28:	d9414c17 	ldw	r5,1328(sp)
    6d2c:	2940210c 	andi	r5,r5,132
    6d30:	d9414e15 	stw	r5,1336(sp)
    6d34:	28002d1e 	bne	r5,zero,6dec <___vfprintf_internal_r+0x4a4>
    6d38:	d9814a17 	ldw	r6,1320(sp)
    6d3c:	d8814517 	ldw	r2,1300(sp)
    6d40:	30a1c83a 	sub	r16,r6,r2
    6d44:	0400290e 	bge	zero,r16,6dec <___vfprintf_internal_r+0x4a4>
    6d48:	00800404 	movi	r2,16
    6d4c:	14045e0e 	bge	r2,r16,7ec8 <___vfprintf_internal_r+0x1580>
    6d50:	dc800e17 	ldw	r18,56(sp)
    6d54:	dc400d17 	ldw	r17,52(sp)
    6d58:	1027883a 	mov	r19,r2
    6d5c:	07000074 	movhi	fp,1
    6d60:	e7074184 	addi	fp,fp,7430
    6d64:	050001c4 	movi	r20,7
    6d68:	00000306 	br	6d78 <___vfprintf_internal_r+0x430>
    6d6c:	843ffc04 	addi	r16,r16,-16
    6d70:	ad400204 	addi	r21,r21,8
    6d74:	9c00130e 	bge	r19,r16,6dc4 <___vfprintf_internal_r+0x47c>
    6d78:	94800404 	addi	r18,r18,16
    6d7c:	8c400044 	addi	r17,r17,1
    6d80:	af000015 	stw	fp,0(r21)
    6d84:	acc00115 	stw	r19,4(r21)
    6d88:	dc800e15 	stw	r18,56(sp)
    6d8c:	dc400d15 	stw	r17,52(sp)
    6d90:	a47ff60e 	bge	r20,r17,6d6c <___vfprintf_internal_r+0x424>
    6d94:	d9014f17 	ldw	r4,1340(sp)
    6d98:	b00b883a 	mov	r5,r22
    6d9c:	d9800c04 	addi	r6,sp,48
    6da0:	d9c15115 	stw	r7,1348(sp)
    6da4:	00068f00 	call	68f0 <__sprint_r>
    6da8:	d9c15117 	ldw	r7,1348(sp)
    6dac:	10009e1e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    6db0:	843ffc04 	addi	r16,r16,-16
    6db4:	dc800e17 	ldw	r18,56(sp)
    6db8:	dc400d17 	ldw	r17,52(sp)
    6dbc:	dd401904 	addi	r21,sp,100
    6dc0:	9c3fed16 	blt	r19,r16,6d78 <___vfprintf_internal_r+0x430>
    6dc4:	9425883a 	add	r18,r18,r16
    6dc8:	8c400044 	addi	r17,r17,1
    6dcc:	008001c4 	movi	r2,7
    6dd0:	af000015 	stw	fp,0(r21)
    6dd4:	ac000115 	stw	r16,4(r21)
    6dd8:	dc800e15 	stw	r18,56(sp)
    6ddc:	dc400d15 	stw	r17,52(sp)
    6de0:	1441f516 	blt	r2,r17,75b8 <___vfprintf_internal_r+0xc70>
    6de4:	ad400204 	addi	r21,r21,8
    6de8:	00000206 	br	6df4 <___vfprintf_internal_r+0x4ac>
    6dec:	dc800e17 	ldw	r18,56(sp)
    6df0:	dc400d17 	ldw	r17,52(sp)
    6df4:	d8800407 	ldb	r2,16(sp)
    6df8:	10000b26 	beq	r2,zero,6e28 <___vfprintf_internal_r+0x4e0>
    6dfc:	00800044 	movi	r2,1
    6e00:	94800044 	addi	r18,r18,1
    6e04:	8c400044 	addi	r17,r17,1
    6e08:	a8800115 	stw	r2,4(r21)
    6e0c:	d8c00404 	addi	r3,sp,16
    6e10:	008001c4 	movi	r2,7
    6e14:	a8c00015 	stw	r3,0(r21)
    6e18:	dc800e15 	stw	r18,56(sp)
    6e1c:	dc400d15 	stw	r17,52(sp)
    6e20:	1441da16 	blt	r2,r17,758c <___vfprintf_internal_r+0xc44>
    6e24:	ad400204 	addi	r21,r21,8
    6e28:	d9015017 	ldw	r4,1344(sp)
    6e2c:	20000b1e 	bne	r4,zero,6e5c <___vfprintf_internal_r+0x514>
    6e30:	d8800444 	addi	r2,sp,17
    6e34:	94800084 	addi	r18,r18,2
    6e38:	8c400044 	addi	r17,r17,1
    6e3c:	a8800015 	stw	r2,0(r21)
    6e40:	00c00084 	movi	r3,2
    6e44:	008001c4 	movi	r2,7
    6e48:	a8c00115 	stw	r3,4(r21)
    6e4c:	dc800e15 	stw	r18,56(sp)
    6e50:	dc400d15 	stw	r17,52(sp)
    6e54:	1441c216 	blt	r2,r17,7560 <___vfprintf_internal_r+0xc18>
    6e58:	ad400204 	addi	r21,r21,8
    6e5c:	d9414e17 	ldw	r5,1336(sp)
    6e60:	00802004 	movi	r2,128
    6e64:	2880b126 	beq	r5,r2,712c <___vfprintf_internal_r+0x7e4>
    6e68:	d8c14617 	ldw	r3,1304(sp)
    6e6c:	19e1c83a 	sub	r16,r3,r7
    6e70:	0400260e 	bge	zero,r16,6f0c <___vfprintf_internal_r+0x5c4>
    6e74:	00800404 	movi	r2,16
    6e78:	1403cf0e 	bge	r2,r16,7db8 <___vfprintf_internal_r+0x1470>
    6e7c:	1027883a 	mov	r19,r2
    6e80:	07000074 	movhi	fp,1
    6e84:	e7073d84 	addi	fp,fp,7414
    6e88:	050001c4 	movi	r20,7
    6e8c:	00000306 	br	6e9c <___vfprintf_internal_r+0x554>
    6e90:	843ffc04 	addi	r16,r16,-16
    6e94:	ad400204 	addi	r21,r21,8
    6e98:	9c00130e 	bge	r19,r16,6ee8 <___vfprintf_internal_r+0x5a0>
    6e9c:	94800404 	addi	r18,r18,16
    6ea0:	8c400044 	addi	r17,r17,1
    6ea4:	af000015 	stw	fp,0(r21)
    6ea8:	acc00115 	stw	r19,4(r21)
    6eac:	dc800e15 	stw	r18,56(sp)
    6eb0:	dc400d15 	stw	r17,52(sp)
    6eb4:	a47ff60e 	bge	r20,r17,6e90 <___vfprintf_internal_r+0x548>
    6eb8:	d9014f17 	ldw	r4,1340(sp)
    6ebc:	b00b883a 	mov	r5,r22
    6ec0:	d9800c04 	addi	r6,sp,48
    6ec4:	d9c15115 	stw	r7,1348(sp)
    6ec8:	00068f00 	call	68f0 <__sprint_r>
    6ecc:	d9c15117 	ldw	r7,1348(sp)
    6ed0:	1000551e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    6ed4:	843ffc04 	addi	r16,r16,-16
    6ed8:	dc800e17 	ldw	r18,56(sp)
    6edc:	dc400d17 	ldw	r17,52(sp)
    6ee0:	dd401904 	addi	r21,sp,100
    6ee4:	9c3fed16 	blt	r19,r16,6e9c <___vfprintf_internal_r+0x554>
    6ee8:	9425883a 	add	r18,r18,r16
    6eec:	8c400044 	addi	r17,r17,1
    6ef0:	008001c4 	movi	r2,7
    6ef4:	af000015 	stw	fp,0(r21)
    6ef8:	ac000115 	stw	r16,4(r21)
    6efc:	dc800e15 	stw	r18,56(sp)
    6f00:	dc400d15 	stw	r17,52(sp)
    6f04:	14418216 	blt	r2,r17,7510 <___vfprintf_internal_r+0xbc8>
    6f08:	ad400204 	addi	r21,r21,8
    6f0c:	d9014c17 	ldw	r4,1328(sp)
    6f10:	2080400c 	andi	r2,r4,256
    6f14:	10004a1e 	bne	r2,zero,7040 <___vfprintf_internal_r+0x6f8>
    6f18:	d9414117 	ldw	r5,1284(sp)
    6f1c:	91e5883a 	add	r18,r18,r7
    6f20:	8c400044 	addi	r17,r17,1
    6f24:	008001c4 	movi	r2,7
    6f28:	a9400015 	stw	r5,0(r21)
    6f2c:	a9c00115 	stw	r7,4(r21)
    6f30:	dc800e15 	stw	r18,56(sp)
    6f34:	dc400d15 	stw	r17,52(sp)
    6f38:	14416716 	blt	r2,r17,74d8 <___vfprintf_internal_r+0xb90>
    6f3c:	a8c00204 	addi	r3,r21,8
    6f40:	d9814c17 	ldw	r6,1328(sp)
    6f44:	3080010c 	andi	r2,r6,4
    6f48:	10002826 	beq	r2,zero,6fec <___vfprintf_internal_r+0x6a4>
    6f4c:	d8814a17 	ldw	r2,1320(sp)
    6f50:	d9014517 	ldw	r4,1300(sp)
    6f54:	1121c83a 	sub	r16,r2,r4
    6f58:	0400240e 	bge	zero,r16,6fec <___vfprintf_internal_r+0x6a4>
    6f5c:	00800404 	movi	r2,16
    6f60:	1404550e 	bge	r2,r16,80b8 <___vfprintf_internal_r+0x1770>
    6f64:	dc400d17 	ldw	r17,52(sp)
    6f68:	1027883a 	mov	r19,r2
    6f6c:	07000074 	movhi	fp,1
    6f70:	e7074184 	addi	fp,fp,7430
    6f74:	050001c4 	movi	r20,7
    6f78:	00000306 	br	6f88 <___vfprintf_internal_r+0x640>
    6f7c:	843ffc04 	addi	r16,r16,-16
    6f80:	18c00204 	addi	r3,r3,8
    6f84:	9c00110e 	bge	r19,r16,6fcc <___vfprintf_internal_r+0x684>
    6f88:	94800404 	addi	r18,r18,16
    6f8c:	8c400044 	addi	r17,r17,1
    6f90:	1f000015 	stw	fp,0(r3)
    6f94:	1cc00115 	stw	r19,4(r3)
    6f98:	dc800e15 	stw	r18,56(sp)
    6f9c:	dc400d15 	stw	r17,52(sp)
    6fa0:	a47ff60e 	bge	r20,r17,6f7c <___vfprintf_internal_r+0x634>
    6fa4:	d9014f17 	ldw	r4,1340(sp)
    6fa8:	b00b883a 	mov	r5,r22
    6fac:	d9800c04 	addi	r6,sp,48
    6fb0:	00068f00 	call	68f0 <__sprint_r>
    6fb4:	10001c1e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    6fb8:	843ffc04 	addi	r16,r16,-16
    6fbc:	dc800e17 	ldw	r18,56(sp)
    6fc0:	dc400d17 	ldw	r17,52(sp)
    6fc4:	d8c01904 	addi	r3,sp,100
    6fc8:	9c3fef16 	blt	r19,r16,6f88 <___vfprintf_internal_r+0x640>
    6fcc:	9425883a 	add	r18,r18,r16
    6fd0:	8c400044 	addi	r17,r17,1
    6fd4:	008001c4 	movi	r2,7
    6fd8:	1f000015 	stw	fp,0(r3)
    6fdc:	1c000115 	stw	r16,4(r3)
    6fe0:	dc800e15 	stw	r18,56(sp)
    6fe4:	dc400d15 	stw	r17,52(sp)
    6fe8:	1440cb16 	blt	r2,r17,7318 <___vfprintf_internal_r+0x9d0>
    6fec:	d8814a17 	ldw	r2,1320(sp)
    6ff0:	d9414517 	ldw	r5,1300(sp)
    6ff4:	1140010e 	bge	r2,r5,6ffc <___vfprintf_internal_r+0x6b4>
    6ff8:	2805883a 	mov	r2,r5
    6ffc:	d9814b17 	ldw	r6,1324(sp)
    7000:	308d883a 	add	r6,r6,r2
    7004:	d9814b15 	stw	r6,1324(sp)
    7008:	90013b1e 	bne	r18,zero,74f8 <___vfprintf_internal_r+0xbb0>
    700c:	d9c14017 	ldw	r7,1280(sp)
    7010:	dd401904 	addi	r21,sp,100
    7014:	d8000d15 	stw	zero,52(sp)
    7018:	003ea706 	br	6ab8 <___vfprintf_internal_r+0x170>
    701c:	d8800e17 	ldw	r2,56(sp)
    7020:	1005451e 	bne	r2,zero,8538 <___vfprintf_internal_r+0x1bf0>
    7024:	d8000d15 	stw	zero,52(sp)
    7028:	b080030b 	ldhu	r2,12(r22)
    702c:	1080100c 	andi	r2,r2,64
    7030:	103e8726 	beq	r2,zero,6a50 <___vfprintf_internal_r+0x108>
    7034:	00bfffc4 	movi	r2,-1
    7038:	d8814b15 	stw	r2,1324(sp)
    703c:	003e8406 	br	6a50 <___vfprintf_internal_r+0x108>
    7040:	d9814d17 	ldw	r6,1332(sp)
    7044:	00801944 	movi	r2,101
    7048:	11806e16 	blt	r2,r6,7204 <___vfprintf_internal_r+0x8bc>
    704c:	d9414717 	ldw	r5,1308(sp)
    7050:	00c00044 	movi	r3,1
    7054:	1943490e 	bge	r3,r5,7d7c <___vfprintf_internal_r+0x1434>
    7058:	d8814117 	ldw	r2,1284(sp)
    705c:	94800044 	addi	r18,r18,1
    7060:	8c400044 	addi	r17,r17,1
    7064:	a8800015 	stw	r2,0(r21)
    7068:	008001c4 	movi	r2,7
    706c:	a8c00115 	stw	r3,4(r21)
    7070:	dc800e15 	stw	r18,56(sp)
    7074:	dc400d15 	stw	r17,52(sp)
    7078:	1441ca16 	blt	r2,r17,77a4 <___vfprintf_internal_r+0xe5c>
    707c:	a8c00204 	addi	r3,r21,8
    7080:	d9014917 	ldw	r4,1316(sp)
    7084:	00800044 	movi	r2,1
    7088:	94800044 	addi	r18,r18,1
    708c:	8c400044 	addi	r17,r17,1
    7090:	18800115 	stw	r2,4(r3)
    7094:	008001c4 	movi	r2,7
    7098:	19000015 	stw	r4,0(r3)
    709c:	dc800e15 	stw	r18,56(sp)
    70a0:	dc400d15 	stw	r17,52(sp)
    70a4:	1441b616 	blt	r2,r17,7780 <___vfprintf_internal_r+0xe38>
    70a8:	1cc00204 	addi	r19,r3,8
    70ac:	d9014217 	ldw	r4,1288(sp)
    70b0:	d9414317 	ldw	r5,1292(sp)
    70b4:	000d883a 	mov	r6,zero
    70b8:	000f883a 	mov	r7,zero
    70bc:	000d8c80 	call	d8c8 <__nedf2>
    70c0:	10017426 	beq	r2,zero,7694 <___vfprintf_internal_r+0xd4c>
    70c4:	d9414717 	ldw	r5,1308(sp)
    70c8:	d9814117 	ldw	r6,1284(sp)
    70cc:	8c400044 	addi	r17,r17,1
    70d0:	2c85883a 	add	r2,r5,r18
    70d4:	14bfffc4 	addi	r18,r2,-1
    70d8:	28bfffc4 	addi	r2,r5,-1
    70dc:	30c00044 	addi	r3,r6,1
    70e0:	98800115 	stw	r2,4(r19)
    70e4:	008001c4 	movi	r2,7
    70e8:	98c00015 	stw	r3,0(r19)
    70ec:	dc800e15 	stw	r18,56(sp)
    70f0:	dc400d15 	stw	r17,52(sp)
    70f4:	14418e16 	blt	r2,r17,7730 <___vfprintf_internal_r+0xde8>
    70f8:	9cc00204 	addi	r19,r19,8
    70fc:	d9414817 	ldw	r5,1312(sp)
    7100:	d8800804 	addi	r2,sp,32
    7104:	8c400044 	addi	r17,r17,1
    7108:	9165883a 	add	r18,r18,r5
    710c:	98800015 	stw	r2,0(r19)
    7110:	008001c4 	movi	r2,7
    7114:	99400115 	stw	r5,4(r19)
    7118:	dc800e15 	stw	r18,56(sp)
    711c:	dc400d15 	stw	r17,52(sp)
    7120:	1440ed16 	blt	r2,r17,74d8 <___vfprintf_internal_r+0xb90>
    7124:	98c00204 	addi	r3,r19,8
    7128:	003f8506 	br	6f40 <___vfprintf_internal_r+0x5f8>
    712c:	d9814a17 	ldw	r6,1320(sp)
    7130:	d8814517 	ldw	r2,1300(sp)
    7134:	30a1c83a 	sub	r16,r6,r2
    7138:	043f4b0e 	bge	zero,r16,6e68 <___vfprintf_internal_r+0x520>
    713c:	00800404 	movi	r2,16
    7140:	14043a0e 	bge	r2,r16,822c <___vfprintf_internal_r+0x18e4>
    7144:	1027883a 	mov	r19,r2
    7148:	07000074 	movhi	fp,1
    714c:	e7073d84 	addi	fp,fp,7414
    7150:	050001c4 	movi	r20,7
    7154:	00000306 	br	7164 <___vfprintf_internal_r+0x81c>
    7158:	843ffc04 	addi	r16,r16,-16
    715c:	ad400204 	addi	r21,r21,8
    7160:	9c00130e 	bge	r19,r16,71b0 <___vfprintf_internal_r+0x868>
    7164:	94800404 	addi	r18,r18,16
    7168:	8c400044 	addi	r17,r17,1
    716c:	af000015 	stw	fp,0(r21)
    7170:	acc00115 	stw	r19,4(r21)
    7174:	dc800e15 	stw	r18,56(sp)
    7178:	dc400d15 	stw	r17,52(sp)
    717c:	a47ff60e 	bge	r20,r17,7158 <___vfprintf_internal_r+0x810>
    7180:	d9014f17 	ldw	r4,1340(sp)
    7184:	b00b883a 	mov	r5,r22
    7188:	d9800c04 	addi	r6,sp,48
    718c:	d9c15115 	stw	r7,1348(sp)
    7190:	00068f00 	call	68f0 <__sprint_r>
    7194:	d9c15117 	ldw	r7,1348(sp)
    7198:	103fa31e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    719c:	843ffc04 	addi	r16,r16,-16
    71a0:	dc800e17 	ldw	r18,56(sp)
    71a4:	dc400d17 	ldw	r17,52(sp)
    71a8:	dd401904 	addi	r21,sp,100
    71ac:	9c3fed16 	blt	r19,r16,7164 <___vfprintf_internal_r+0x81c>
    71b0:	9425883a 	add	r18,r18,r16
    71b4:	8c400044 	addi	r17,r17,1
    71b8:	008001c4 	movi	r2,7
    71bc:	af000015 	stw	fp,0(r21)
    71c0:	ac000115 	stw	r16,4(r21)
    71c4:	dc800e15 	stw	r18,56(sp)
    71c8:	dc400d15 	stw	r17,52(sp)
    71cc:	14416116 	blt	r2,r17,7754 <___vfprintf_internal_r+0xe0c>
    71d0:	ad400204 	addi	r21,r21,8
    71d4:	003f2406 	br	6e68 <___vfprintf_internal_r+0x520>
    71d8:	d9014f17 	ldw	r4,1340(sp)
    71dc:	00053f00 	call	53f0 <__sinit>
    71e0:	d9c15117 	ldw	r7,1348(sp)
    71e4:	003def06 	br	69a4 <___vfprintf_internal_r+0x5c>
    71e8:	d9014f17 	ldw	r4,1340(sp)
    71ec:	b00b883a 	mov	r5,r22
    71f0:	d9c15115 	stw	r7,1348(sp)
    71f4:	00088a80 	call	88a8 <__swsetup_r>
    71f8:	d9c15117 	ldw	r7,1348(sp)
    71fc:	103dee26 	beq	r2,zero,69b8 <___vfprintf_internal_r+0x70>
    7200:	003f8c06 	br	7034 <___vfprintf_internal_r+0x6ec>
    7204:	d9014217 	ldw	r4,1288(sp)
    7208:	d9414317 	ldw	r5,1292(sp)
    720c:	000d883a 	mov	r6,zero
    7210:	000f883a 	mov	r7,zero
    7214:	00043f40 	call	43f4 <__eqdf2>
    7218:	1000f21e 	bne	r2,zero,75e4 <___vfprintf_internal_r+0xc9c>
    721c:	00800074 	movhi	r2,1
    7220:	10873d04 	addi	r2,r2,7412
    7224:	94800044 	addi	r18,r18,1
    7228:	8c400044 	addi	r17,r17,1
    722c:	a8800015 	stw	r2,0(r21)
    7230:	00c00044 	movi	r3,1
    7234:	008001c4 	movi	r2,7
    7238:	a8c00115 	stw	r3,4(r21)
    723c:	dc800e15 	stw	r18,56(sp)
    7240:	dc400d15 	stw	r17,52(sp)
    7244:	14430016 	blt	r2,r17,7e48 <___vfprintf_internal_r+0x1500>
    7248:	a8c00204 	addi	r3,r21,8
    724c:	d8800517 	ldw	r2,20(sp)
    7250:	d9014717 	ldw	r4,1308(sp)
    7254:	11015c0e 	bge	r2,r4,77c8 <___vfprintf_internal_r+0xe80>
    7258:	dc400d17 	ldw	r17,52(sp)
    725c:	d9814917 	ldw	r6,1316(sp)
    7260:	00800044 	movi	r2,1
    7264:	94800044 	addi	r18,r18,1
    7268:	8c400044 	addi	r17,r17,1
    726c:	18800115 	stw	r2,4(r3)
    7270:	008001c4 	movi	r2,7
    7274:	19800015 	stw	r6,0(r3)
    7278:	dc800e15 	stw	r18,56(sp)
    727c:	dc400d15 	stw	r17,52(sp)
    7280:	14431616 	blt	r2,r17,7edc <___vfprintf_internal_r+0x1594>
    7284:	18c00204 	addi	r3,r3,8
    7288:	d8814717 	ldw	r2,1308(sp)
    728c:	143fffc4 	addi	r16,r2,-1
    7290:	043f2b0e 	bge	zero,r16,6f40 <___vfprintf_internal_r+0x5f8>
    7294:	00800404 	movi	r2,16
    7298:	1402a80e 	bge	r2,r16,7d3c <___vfprintf_internal_r+0x13f4>
    729c:	dc400d17 	ldw	r17,52(sp)
    72a0:	1027883a 	mov	r19,r2
    72a4:	07000074 	movhi	fp,1
    72a8:	e7073d84 	addi	fp,fp,7414
    72ac:	050001c4 	movi	r20,7
    72b0:	00000306 	br	72c0 <___vfprintf_internal_r+0x978>
    72b4:	18c00204 	addi	r3,r3,8
    72b8:	843ffc04 	addi	r16,r16,-16
    72bc:	9c02a20e 	bge	r19,r16,7d48 <___vfprintf_internal_r+0x1400>
    72c0:	94800404 	addi	r18,r18,16
    72c4:	8c400044 	addi	r17,r17,1
    72c8:	1f000015 	stw	fp,0(r3)
    72cc:	1cc00115 	stw	r19,4(r3)
    72d0:	dc800e15 	stw	r18,56(sp)
    72d4:	dc400d15 	stw	r17,52(sp)
    72d8:	a47ff60e 	bge	r20,r17,72b4 <___vfprintf_internal_r+0x96c>
    72dc:	d9014f17 	ldw	r4,1340(sp)
    72e0:	b00b883a 	mov	r5,r22
    72e4:	d9800c04 	addi	r6,sp,48
    72e8:	00068f00 	call	68f0 <__sprint_r>
    72ec:	103f4e1e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    72f0:	dc800e17 	ldw	r18,56(sp)
    72f4:	dc400d17 	ldw	r17,52(sp)
    72f8:	d8c01904 	addi	r3,sp,100
    72fc:	003fee06 	br	72b8 <___vfprintf_internal_r+0x970>
    7300:	d8802c0b 	ldhu	r2,176(sp)
    7304:	00ffffc4 	movi	r3,-1
    7308:	d8c14b15 	stw	r3,1324(sp)
    730c:	1080100c 	andi	r2,r2,64
    7310:	103dcc1e 	bne	r2,zero,6a44 <___vfprintf_internal_r+0xfc>
    7314:	003dce06 	br	6a50 <___vfprintf_internal_r+0x108>
    7318:	d9014f17 	ldw	r4,1340(sp)
    731c:	b00b883a 	mov	r5,r22
    7320:	d9800c04 	addi	r6,sp,48
    7324:	00068f00 	call	68f0 <__sprint_r>
    7328:	103f3f1e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    732c:	dc800e17 	ldw	r18,56(sp)
    7330:	003f2e06 	br	6fec <___vfprintf_internal_r+0x6a4>
    7334:	d9414c17 	ldw	r5,1328(sp)
    7338:	29400414 	ori	r5,r5,16
    733c:	d9414c15 	stw	r5,1328(sp)
    7340:	d9814c17 	ldw	r6,1328(sp)
    7344:	3080080c 	andi	r2,r6,32
    7348:	10014f1e 	bne	r2,zero,7888 <___vfprintf_internal_r+0xf40>
    734c:	d8c14c17 	ldw	r3,1328(sp)
    7350:	1880040c 	andi	r2,r3,16
    7354:	1002f01e 	bne	r2,zero,7f18 <___vfprintf_internal_r+0x15d0>
    7358:	d9014c17 	ldw	r4,1328(sp)
    735c:	2080100c 	andi	r2,r4,64
    7360:	1002ed26 	beq	r2,zero,7f18 <___vfprintf_internal_r+0x15d0>
    7364:	3880000f 	ldh	r2,0(r7)
    7368:	39c00104 	addi	r7,r7,4
    736c:	d9c14015 	stw	r7,1280(sp)
    7370:	1023d7fa 	srai	r17,r2,31
    7374:	1021883a 	mov	r16,r2
    7378:	88037816 	blt	r17,zero,815c <___vfprintf_internal_r+0x1814>
    737c:	01000044 	movi	r4,1
    7380:	98000416 	blt	r19,zero,7394 <___vfprintf_internal_r+0xa4c>
    7384:	d8c14c17 	ldw	r3,1328(sp)
    7388:	00bfdfc4 	movi	r2,-129
    738c:	1886703a 	and	r3,r3,r2
    7390:	d8c14c15 	stw	r3,1328(sp)
    7394:	8444b03a 	or	r2,r16,r17
    7398:	10022c1e 	bne	r2,zero,7c4c <___vfprintf_internal_r+0x1304>
    739c:	98022b1e 	bne	r19,zero,7c4c <___vfprintf_internal_r+0x1304>
    73a0:	20803fcc 	andi	r2,r4,255
    73a4:	1002a126 	beq	r2,zero,7e2c <___vfprintf_internal_r+0x14e4>
    73a8:	d8c01904 	addi	r3,sp,100
    73ac:	dd000f04 	addi	r20,sp,60
    73b0:	d8c14115 	stw	r3,1284(sp)
    73b4:	d8c14117 	ldw	r3,1284(sp)
    73b8:	dcc14515 	stw	r19,1300(sp)
    73bc:	a0c5c83a 	sub	r2,r20,r3
    73c0:	11c00a04 	addi	r7,r2,40
    73c4:	99c0010e 	bge	r19,r7,73cc <___vfprintf_internal_r+0xa84>
    73c8:	d9c14515 	stw	r7,1300(sp)
    73cc:	dcc14615 	stw	r19,1304(sp)
    73d0:	d8800407 	ldb	r2,16(sp)
    73d4:	103e4c26 	beq	r2,zero,6d08 <___vfprintf_internal_r+0x3c0>
    73d8:	d8814517 	ldw	r2,1300(sp)
    73dc:	10800044 	addi	r2,r2,1
    73e0:	d8814515 	stw	r2,1300(sp)
    73e4:	003e4806 	br	6d08 <___vfprintf_internal_r+0x3c0>
    73e8:	d9814c17 	ldw	r6,1328(sp)
    73ec:	31800414 	ori	r6,r6,16
    73f0:	d9814c15 	stw	r6,1328(sp)
    73f4:	d8c14c17 	ldw	r3,1328(sp)
    73f8:	1880080c 	andi	r2,r3,32
    73fc:	1001271e 	bne	r2,zero,789c <___vfprintf_internal_r+0xf54>
    7400:	d9414c17 	ldw	r5,1328(sp)
    7404:	2880040c 	andi	r2,r5,16
    7408:	1002bc1e 	bne	r2,zero,7efc <___vfprintf_internal_r+0x15b4>
    740c:	d9814c17 	ldw	r6,1328(sp)
    7410:	3080100c 	andi	r2,r6,64
    7414:	1002b926 	beq	r2,zero,7efc <___vfprintf_internal_r+0x15b4>
    7418:	3c00000b 	ldhu	r16,0(r7)
    741c:	0009883a 	mov	r4,zero
    7420:	39c00104 	addi	r7,r7,4
    7424:	0023883a 	mov	r17,zero
    7428:	d9c14015 	stw	r7,1280(sp)
    742c:	d8000405 	stb	zero,16(sp)
    7430:	003fd306 	br	7380 <___vfprintf_internal_r+0xa38>
    7434:	d9014c17 	ldw	r4,1328(sp)
    7438:	21000414 	ori	r4,r4,16
    743c:	d9014c15 	stw	r4,1328(sp)
    7440:	d9414c17 	ldw	r5,1328(sp)
    7444:	2880080c 	andi	r2,r5,32
    7448:	1001081e 	bne	r2,zero,786c <___vfprintf_internal_r+0xf24>
    744c:	d8c14c17 	ldw	r3,1328(sp)
    7450:	1880040c 	andi	r2,r3,16
    7454:	1002b61e 	bne	r2,zero,7f30 <___vfprintf_internal_r+0x15e8>
    7458:	d9014c17 	ldw	r4,1328(sp)
    745c:	2080100c 	andi	r2,r4,64
    7460:	1002b326 	beq	r2,zero,7f30 <___vfprintf_internal_r+0x15e8>
    7464:	3c00000b 	ldhu	r16,0(r7)
    7468:	01000044 	movi	r4,1
    746c:	39c00104 	addi	r7,r7,4
    7470:	0023883a 	mov	r17,zero
    7474:	d9c14015 	stw	r7,1280(sp)
    7478:	d8000405 	stb	zero,16(sp)
    747c:	003fc006 	br	7380 <___vfprintf_internal_r+0xa38>
    7480:	d9014f17 	ldw	r4,1340(sp)
    7484:	b00b883a 	mov	r5,r22
    7488:	d9800c04 	addi	r6,sp,48
    748c:	00068f00 	call	68f0 <__sprint_r>
    7490:	103ee51e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    7494:	dc800e17 	ldw	r18,56(sp)
    7498:	d8c01904 	addi	r3,sp,100
    749c:	d9814c17 	ldw	r6,1328(sp)
    74a0:	3080004c 	andi	r2,r6,1
    74a4:	1005003a 	cmpeq	r2,r2,zero
    74a8:	103ea51e 	bne	r2,zero,6f40 <___vfprintf_internal_r+0x5f8>
    74ac:	00800044 	movi	r2,1
    74b0:	dc400d17 	ldw	r17,52(sp)
    74b4:	18800115 	stw	r2,4(r3)
    74b8:	d8814917 	ldw	r2,1316(sp)
    74bc:	94800044 	addi	r18,r18,1
    74c0:	8c400044 	addi	r17,r17,1
    74c4:	18800015 	stw	r2,0(r3)
    74c8:	008001c4 	movi	r2,7
    74cc:	dc800e15 	stw	r18,56(sp)
    74d0:	dc400d15 	stw	r17,52(sp)
    74d4:	1442240e 	bge	r2,r17,7d68 <___vfprintf_internal_r+0x1420>
    74d8:	d9014f17 	ldw	r4,1340(sp)
    74dc:	b00b883a 	mov	r5,r22
    74e0:	d9800c04 	addi	r6,sp,48
    74e4:	00068f00 	call	68f0 <__sprint_r>
    74e8:	103ecf1e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    74ec:	dc800e17 	ldw	r18,56(sp)
    74f0:	d8c01904 	addi	r3,sp,100
    74f4:	003e9206 	br	6f40 <___vfprintf_internal_r+0x5f8>
    74f8:	d9014f17 	ldw	r4,1340(sp)
    74fc:	b00b883a 	mov	r5,r22
    7500:	d9800c04 	addi	r6,sp,48
    7504:	00068f00 	call	68f0 <__sprint_r>
    7508:	103ec026 	beq	r2,zero,700c <___vfprintf_internal_r+0x6c4>
    750c:	003ec606 	br	7028 <___vfprintf_internal_r+0x6e0>
    7510:	d9014f17 	ldw	r4,1340(sp)
    7514:	b00b883a 	mov	r5,r22
    7518:	d9800c04 	addi	r6,sp,48
    751c:	d9c15115 	stw	r7,1348(sp)
    7520:	00068f00 	call	68f0 <__sprint_r>
    7524:	d9c15117 	ldw	r7,1348(sp)
    7528:	103ebf1e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    752c:	dc800e17 	ldw	r18,56(sp)
    7530:	dc400d17 	ldw	r17,52(sp)
    7534:	dd401904 	addi	r21,sp,100
    7538:	003e7406 	br	6f0c <___vfprintf_internal_r+0x5c4>
    753c:	d9014f17 	ldw	r4,1340(sp)
    7540:	b00b883a 	mov	r5,r22
    7544:	d9800c04 	addi	r6,sp,48
    7548:	d9c15115 	stw	r7,1348(sp)
    754c:	00068f00 	call	68f0 <__sprint_r>
    7550:	d9c15117 	ldw	r7,1348(sp)
    7554:	103eb41e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    7558:	dd401904 	addi	r21,sp,100
    755c:	003d6d06 	br	6b14 <___vfprintf_internal_r+0x1cc>
    7560:	d9014f17 	ldw	r4,1340(sp)
    7564:	b00b883a 	mov	r5,r22
    7568:	d9800c04 	addi	r6,sp,48
    756c:	d9c15115 	stw	r7,1348(sp)
    7570:	00068f00 	call	68f0 <__sprint_r>
    7574:	d9c15117 	ldw	r7,1348(sp)
    7578:	103eab1e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    757c:	dc800e17 	ldw	r18,56(sp)
    7580:	dc400d17 	ldw	r17,52(sp)
    7584:	dd401904 	addi	r21,sp,100
    7588:	003e3406 	br	6e5c <___vfprintf_internal_r+0x514>
    758c:	d9014f17 	ldw	r4,1340(sp)
    7590:	b00b883a 	mov	r5,r22
    7594:	d9800c04 	addi	r6,sp,48
    7598:	d9c15115 	stw	r7,1348(sp)
    759c:	00068f00 	call	68f0 <__sprint_r>
    75a0:	d9c15117 	ldw	r7,1348(sp)
    75a4:	103ea01e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    75a8:	dc800e17 	ldw	r18,56(sp)
    75ac:	dc400d17 	ldw	r17,52(sp)
    75b0:	dd401904 	addi	r21,sp,100
    75b4:	003e1c06 	br	6e28 <___vfprintf_internal_r+0x4e0>
    75b8:	d9014f17 	ldw	r4,1340(sp)
    75bc:	b00b883a 	mov	r5,r22
    75c0:	d9800c04 	addi	r6,sp,48
    75c4:	d9c15115 	stw	r7,1348(sp)
    75c8:	00068f00 	call	68f0 <__sprint_r>
    75cc:	d9c15117 	ldw	r7,1348(sp)
    75d0:	103e951e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    75d4:	dc800e17 	ldw	r18,56(sp)
    75d8:	dc400d17 	ldw	r17,52(sp)
    75dc:	dd401904 	addi	r21,sp,100
    75e0:	003e0406 	br	6df4 <___vfprintf_internal_r+0x4ac>
    75e4:	d9000517 	ldw	r4,20(sp)
    75e8:	0102580e 	bge	zero,r4,7f4c <___vfprintf_internal_r+0x1604>
    75ec:	d9814717 	ldw	r6,1308(sp)
    75f0:	21807a16 	blt	r4,r6,77dc <___vfprintf_internal_r+0xe94>
    75f4:	d8814117 	ldw	r2,1284(sp)
    75f8:	91a5883a 	add	r18,r18,r6
    75fc:	8c400044 	addi	r17,r17,1
    7600:	a8800015 	stw	r2,0(r21)
    7604:	008001c4 	movi	r2,7
    7608:	a9800115 	stw	r6,4(r21)
    760c:	dc800e15 	stw	r18,56(sp)
    7610:	dc400d15 	stw	r17,52(sp)
    7614:	1442fc16 	blt	r2,r17,8208 <___vfprintf_internal_r+0x18c0>
    7618:	a8c00204 	addi	r3,r21,8
    761c:	d9414717 	ldw	r5,1308(sp)
    7620:	2161c83a 	sub	r16,r4,r5
    7624:	043f9d0e 	bge	zero,r16,749c <___vfprintf_internal_r+0xb54>
    7628:	00800404 	movi	r2,16
    762c:	1402190e 	bge	r2,r16,7e94 <___vfprintf_internal_r+0x154c>
    7630:	dc400d17 	ldw	r17,52(sp)
    7634:	1027883a 	mov	r19,r2
    7638:	07000074 	movhi	fp,1
    763c:	e7073d84 	addi	fp,fp,7414
    7640:	050001c4 	movi	r20,7
    7644:	00000306 	br	7654 <___vfprintf_internal_r+0xd0c>
    7648:	18c00204 	addi	r3,r3,8
    764c:	843ffc04 	addi	r16,r16,-16
    7650:	9c02130e 	bge	r19,r16,7ea0 <___vfprintf_internal_r+0x1558>
    7654:	94800404 	addi	r18,r18,16
    7658:	8c400044 	addi	r17,r17,1
    765c:	1f000015 	stw	fp,0(r3)
    7660:	1cc00115 	stw	r19,4(r3)
    7664:	dc800e15 	stw	r18,56(sp)
    7668:	dc400d15 	stw	r17,52(sp)
    766c:	a47ff60e 	bge	r20,r17,7648 <___vfprintf_internal_r+0xd00>
    7670:	d9014f17 	ldw	r4,1340(sp)
    7674:	b00b883a 	mov	r5,r22
    7678:	d9800c04 	addi	r6,sp,48
    767c:	00068f00 	call	68f0 <__sprint_r>
    7680:	103e691e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    7684:	dc800e17 	ldw	r18,56(sp)
    7688:	dc400d17 	ldw	r17,52(sp)
    768c:	d8c01904 	addi	r3,sp,100
    7690:	003fee06 	br	764c <___vfprintf_internal_r+0xd04>
    7694:	d8814717 	ldw	r2,1308(sp)
    7698:	143fffc4 	addi	r16,r2,-1
    769c:	043e970e 	bge	zero,r16,70fc <___vfprintf_internal_r+0x7b4>
    76a0:	00800404 	movi	r2,16
    76a4:	1400180e 	bge	r2,r16,7708 <___vfprintf_internal_r+0xdc0>
    76a8:	1029883a 	mov	r20,r2
    76ac:	07000074 	movhi	fp,1
    76b0:	e7073d84 	addi	fp,fp,7414
    76b4:	054001c4 	movi	r21,7
    76b8:	00000306 	br	76c8 <___vfprintf_internal_r+0xd80>
    76bc:	9cc00204 	addi	r19,r19,8
    76c0:	843ffc04 	addi	r16,r16,-16
    76c4:	a400120e 	bge	r20,r16,7710 <___vfprintf_internal_r+0xdc8>
    76c8:	94800404 	addi	r18,r18,16
    76cc:	8c400044 	addi	r17,r17,1
    76d0:	9f000015 	stw	fp,0(r19)
    76d4:	9d000115 	stw	r20,4(r19)
    76d8:	dc800e15 	stw	r18,56(sp)
    76dc:	dc400d15 	stw	r17,52(sp)
    76e0:	ac7ff60e 	bge	r21,r17,76bc <___vfprintf_internal_r+0xd74>
    76e4:	d9014f17 	ldw	r4,1340(sp)
    76e8:	b00b883a 	mov	r5,r22
    76ec:	d9800c04 	addi	r6,sp,48
    76f0:	00068f00 	call	68f0 <__sprint_r>
    76f4:	103e4c1e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    76f8:	dc800e17 	ldw	r18,56(sp)
    76fc:	dc400d17 	ldw	r17,52(sp)
    7700:	dcc01904 	addi	r19,sp,100
    7704:	003fee06 	br	76c0 <___vfprintf_internal_r+0xd78>
    7708:	07000074 	movhi	fp,1
    770c:	e7073d84 	addi	fp,fp,7414
    7710:	9425883a 	add	r18,r18,r16
    7714:	8c400044 	addi	r17,r17,1
    7718:	008001c4 	movi	r2,7
    771c:	9f000015 	stw	fp,0(r19)
    7720:	9c000115 	stw	r16,4(r19)
    7724:	dc800e15 	stw	r18,56(sp)
    7728:	dc400d15 	stw	r17,52(sp)
    772c:	147e720e 	bge	r2,r17,70f8 <___vfprintf_internal_r+0x7b0>
    7730:	d9014f17 	ldw	r4,1340(sp)
    7734:	b00b883a 	mov	r5,r22
    7738:	d9800c04 	addi	r6,sp,48
    773c:	00068f00 	call	68f0 <__sprint_r>
    7740:	103e391e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    7744:	dc800e17 	ldw	r18,56(sp)
    7748:	dc400d17 	ldw	r17,52(sp)
    774c:	dcc01904 	addi	r19,sp,100
    7750:	003e6a06 	br	70fc <___vfprintf_internal_r+0x7b4>
    7754:	d9014f17 	ldw	r4,1340(sp)
    7758:	b00b883a 	mov	r5,r22
    775c:	d9800c04 	addi	r6,sp,48
    7760:	d9c15115 	stw	r7,1348(sp)
    7764:	00068f00 	call	68f0 <__sprint_r>
    7768:	d9c15117 	ldw	r7,1348(sp)
    776c:	103e2e1e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    7770:	dc800e17 	ldw	r18,56(sp)
    7774:	dc400d17 	ldw	r17,52(sp)
    7778:	dd401904 	addi	r21,sp,100
    777c:	003dba06 	br	6e68 <___vfprintf_internal_r+0x520>
    7780:	d9014f17 	ldw	r4,1340(sp)
    7784:	b00b883a 	mov	r5,r22
    7788:	d9800c04 	addi	r6,sp,48
    778c:	00068f00 	call	68f0 <__sprint_r>
    7790:	103e251e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    7794:	dc800e17 	ldw	r18,56(sp)
    7798:	dc400d17 	ldw	r17,52(sp)
    779c:	dcc01904 	addi	r19,sp,100
    77a0:	003e4206 	br	70ac <___vfprintf_internal_r+0x764>
    77a4:	d9014f17 	ldw	r4,1340(sp)
    77a8:	b00b883a 	mov	r5,r22
    77ac:	d9800c04 	addi	r6,sp,48
    77b0:	00068f00 	call	68f0 <__sprint_r>
    77b4:	103e1c1e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    77b8:	dc800e17 	ldw	r18,56(sp)
    77bc:	dc400d17 	ldw	r17,52(sp)
    77c0:	d8c01904 	addi	r3,sp,100
    77c4:	003e2e06 	br	7080 <___vfprintf_internal_r+0x738>
    77c8:	d9414c17 	ldw	r5,1328(sp)
    77cc:	2880004c 	andi	r2,r5,1
    77d0:	1005003a 	cmpeq	r2,r2,zero
    77d4:	103dda1e 	bne	r2,zero,6f40 <___vfprintf_internal_r+0x5f8>
    77d8:	003e9f06 	br	7258 <___vfprintf_internal_r+0x910>
    77dc:	d8c14117 	ldw	r3,1284(sp)
    77e0:	9125883a 	add	r18,r18,r4
    77e4:	8c400044 	addi	r17,r17,1
    77e8:	008001c4 	movi	r2,7
    77ec:	a8c00015 	stw	r3,0(r21)
    77f0:	a9000115 	stw	r4,4(r21)
    77f4:	dc800e15 	stw	r18,56(sp)
    77f8:	dc400d15 	stw	r17,52(sp)
    77fc:	14426c16 	blt	r2,r17,81b0 <___vfprintf_internal_r+0x1868>
    7800:	a8c00204 	addi	r3,r21,8
    7804:	d9414917 	ldw	r5,1316(sp)
    7808:	00800044 	movi	r2,1
    780c:	94800044 	addi	r18,r18,1
    7810:	8c400044 	addi	r17,r17,1
    7814:	18800115 	stw	r2,4(r3)
    7818:	008001c4 	movi	r2,7
    781c:	19400015 	stw	r5,0(r3)
    7820:	dc800e15 	stw	r18,56(sp)
    7824:	dc400d15 	stw	r17,52(sp)
    7828:	2021883a 	mov	r16,r4
    782c:	14425616 	blt	r2,r17,8188 <___vfprintf_internal_r+0x1840>
    7830:	19400204 	addi	r5,r3,8
    7834:	d9814717 	ldw	r6,1308(sp)
    7838:	8c400044 	addi	r17,r17,1
    783c:	dc400d15 	stw	r17,52(sp)
    7840:	3107c83a 	sub	r3,r6,r4
    7844:	d9014117 	ldw	r4,1284(sp)
    7848:	90e5883a 	add	r18,r18,r3
    784c:	28c00115 	stw	r3,4(r5)
    7850:	8105883a 	add	r2,r16,r4
    7854:	28800015 	stw	r2,0(r5)
    7858:	008001c4 	movi	r2,7
    785c:	dc800e15 	stw	r18,56(sp)
    7860:	147f1d16 	blt	r2,r17,74d8 <___vfprintf_internal_r+0xb90>
    7864:	28c00204 	addi	r3,r5,8
    7868:	003db506 	br	6f40 <___vfprintf_internal_r+0x5f8>
    786c:	3c000017 	ldw	r16,0(r7)
    7870:	3c400117 	ldw	r17,4(r7)
    7874:	39800204 	addi	r6,r7,8
    7878:	01000044 	movi	r4,1
    787c:	d9814015 	stw	r6,1280(sp)
    7880:	d8000405 	stb	zero,16(sp)
    7884:	003ebe06 	br	7380 <___vfprintf_internal_r+0xa38>
    7888:	3c000017 	ldw	r16,0(r7)
    788c:	3c400117 	ldw	r17,4(r7)
    7890:	38800204 	addi	r2,r7,8
    7894:	d8814015 	stw	r2,1280(sp)
    7898:	003eb706 	br	7378 <___vfprintf_internal_r+0xa30>
    789c:	3c000017 	ldw	r16,0(r7)
    78a0:	3c400117 	ldw	r17,4(r7)
    78a4:	39000204 	addi	r4,r7,8
    78a8:	d9014015 	stw	r4,1280(sp)
    78ac:	0009883a 	mov	r4,zero
    78b0:	d8000405 	stb	zero,16(sp)
    78b4:	003eb206 	br	7380 <___vfprintf_internal_r+0xa38>
    78b8:	38c00017 	ldw	r3,0(r7)
    78bc:	39c00104 	addi	r7,r7,4
    78c0:	d8c14a15 	stw	r3,1320(sp)
    78c4:	1800d70e 	bge	r3,zero,7c24 <___vfprintf_internal_r+0x12dc>
    78c8:	00c7c83a 	sub	r3,zero,r3
    78cc:	d8c14a15 	stw	r3,1320(sp)
    78d0:	d9014c17 	ldw	r4,1328(sp)
    78d4:	b8c00007 	ldb	r3,0(r23)
    78d8:	21000114 	ori	r4,r4,4
    78dc:	d9014c15 	stw	r4,1328(sp)
    78e0:	003c9806 	br	6b44 <___vfprintf_internal_r+0x1fc>
    78e4:	d9814c17 	ldw	r6,1328(sp)
    78e8:	3080080c 	andi	r2,r6,32
    78ec:	1001f626 	beq	r2,zero,80c8 <___vfprintf_internal_r+0x1780>
    78f0:	d9014b17 	ldw	r4,1324(sp)
    78f4:	38800017 	ldw	r2,0(r7)
    78f8:	39c00104 	addi	r7,r7,4
    78fc:	d9c14015 	stw	r7,1280(sp)
    7900:	2007d7fa 	srai	r3,r4,31
    7904:	d9c14017 	ldw	r7,1280(sp)
    7908:	11000015 	stw	r4,0(r2)
    790c:	10c00115 	stw	r3,4(r2)
    7910:	003c6906 	br	6ab8 <___vfprintf_internal_r+0x170>
    7914:	b8c00007 	ldb	r3,0(r23)
    7918:	00801b04 	movi	r2,108
    791c:	18825526 	beq	r3,r2,8274 <___vfprintf_internal_r+0x192c>
    7920:	d9414c17 	ldw	r5,1328(sp)
    7924:	29400414 	ori	r5,r5,16
    7928:	d9414c15 	stw	r5,1328(sp)
    792c:	003c8506 	br	6b44 <___vfprintf_internal_r+0x1fc>
    7930:	d9814c17 	ldw	r6,1328(sp)
    7934:	b8c00007 	ldb	r3,0(r23)
    7938:	31800814 	ori	r6,r6,32
    793c:	d9814c15 	stw	r6,1328(sp)
    7940:	003c8006 	br	6b44 <___vfprintf_internal_r+0x1fc>
    7944:	d8814c17 	ldw	r2,1328(sp)
    7948:	3c000017 	ldw	r16,0(r7)
    794c:	00c01e04 	movi	r3,120
    7950:	10800094 	ori	r2,r2,2
    7954:	d8814c15 	stw	r2,1328(sp)
    7958:	39c00104 	addi	r7,r7,4
    795c:	01400074 	movhi	r5,1
    7960:	29472604 	addi	r5,r5,7320
    7964:	00800c04 	movi	r2,48
    7968:	0023883a 	mov	r17,zero
    796c:	01000084 	movi	r4,2
    7970:	d9c14015 	stw	r7,1280(sp)
    7974:	d8c14d15 	stw	r3,1332(sp)
    7978:	d9414415 	stw	r5,1296(sp)
    797c:	d8800445 	stb	r2,17(sp)
    7980:	d8c00485 	stb	r3,18(sp)
    7984:	d8000405 	stb	zero,16(sp)
    7988:	003e7d06 	br	7380 <___vfprintf_internal_r+0xa38>
    798c:	d8814c17 	ldw	r2,1328(sp)
    7990:	b8c00007 	ldb	r3,0(r23)
    7994:	10801014 	ori	r2,r2,64
    7998:	d8814c15 	stw	r2,1328(sp)
    799c:	003c6906 	br	6b44 <___vfprintf_internal_r+0x1fc>
    79a0:	d9414c17 	ldw	r5,1328(sp)
    79a4:	2880020c 	andi	r2,r5,8
    79a8:	1001e526 	beq	r2,zero,8140 <___vfprintf_internal_r+0x17f8>
    79ac:	39800017 	ldw	r6,0(r7)
    79b0:	38800204 	addi	r2,r7,8
    79b4:	d8814015 	stw	r2,1280(sp)
    79b8:	d9814215 	stw	r6,1288(sp)
    79bc:	39c00117 	ldw	r7,4(r7)
    79c0:	d9c14315 	stw	r7,1292(sp)
    79c4:	d9014217 	ldw	r4,1288(sp)
    79c8:	d9414317 	ldw	r5,1292(sp)
    79cc:	000c9240 	call	c924 <__isinfd>
    79d0:	10021d26 	beq	r2,zero,8248 <___vfprintf_internal_r+0x1900>
    79d4:	d9014217 	ldw	r4,1288(sp)
    79d8:	d9414317 	ldw	r5,1292(sp)
    79dc:	000d883a 	mov	r6,zero
    79e0:	000f883a 	mov	r7,zero
    79e4:	000d9500 	call	d950 <__ltdf2>
    79e8:	1002d016 	blt	r2,zero,852c <___vfprintf_internal_r+0x1be4>
    79ec:	d9414d17 	ldw	r5,1332(sp)
    79f0:	008011c4 	movi	r2,71
    79f4:	11421016 	blt	r2,r5,8238 <___vfprintf_internal_r+0x18f0>
    79f8:	01800074 	movhi	r6,1
    79fc:	31872b04 	addi	r6,r6,7340
    7a00:	d9814115 	stw	r6,1284(sp)
    7a04:	d9014c17 	ldw	r4,1328(sp)
    7a08:	00c000c4 	movi	r3,3
    7a0c:	00bfdfc4 	movi	r2,-129
    7a10:	2088703a 	and	r4,r4,r2
    7a14:	180f883a 	mov	r7,r3
    7a18:	d8c14515 	stw	r3,1300(sp)
    7a1c:	d9014c15 	stw	r4,1328(sp)
    7a20:	d8014615 	stw	zero,1304(sp)
    7a24:	003e6a06 	br	73d0 <___vfprintf_internal_r+0xa88>
    7a28:	38800017 	ldw	r2,0(r7)
    7a2c:	00c00044 	movi	r3,1
    7a30:	39c00104 	addi	r7,r7,4
    7a34:	d9c14015 	stw	r7,1280(sp)
    7a38:	d9000f04 	addi	r4,sp,60
    7a3c:	180f883a 	mov	r7,r3
    7a40:	d8c14515 	stw	r3,1300(sp)
    7a44:	d9014115 	stw	r4,1284(sp)
    7a48:	d8800f05 	stb	r2,60(sp)
    7a4c:	d8000405 	stb	zero,16(sp)
    7a50:	003cac06 	br	6d04 <___vfprintf_internal_r+0x3bc>
    7a54:	01400074 	movhi	r5,1
    7a58:	29473104 	addi	r5,r5,7364
    7a5c:	d9414415 	stw	r5,1296(sp)
    7a60:	d9814c17 	ldw	r6,1328(sp)
    7a64:	3080080c 	andi	r2,r6,32
    7a68:	1000ff26 	beq	r2,zero,7e68 <___vfprintf_internal_r+0x1520>
    7a6c:	3c000017 	ldw	r16,0(r7)
    7a70:	3c400117 	ldw	r17,4(r7)
    7a74:	38800204 	addi	r2,r7,8
    7a78:	d8814015 	stw	r2,1280(sp)
    7a7c:	d9414c17 	ldw	r5,1328(sp)
    7a80:	2880004c 	andi	r2,r5,1
    7a84:	1005003a 	cmpeq	r2,r2,zero
    7a88:	1000b91e 	bne	r2,zero,7d70 <___vfprintf_internal_r+0x1428>
    7a8c:	8444b03a 	or	r2,r16,r17
    7a90:	1000b726 	beq	r2,zero,7d70 <___vfprintf_internal_r+0x1428>
    7a94:	d9814d17 	ldw	r6,1332(sp)
    7a98:	29400094 	ori	r5,r5,2
    7a9c:	00800c04 	movi	r2,48
    7aa0:	01000084 	movi	r4,2
    7aa4:	d9414c15 	stw	r5,1328(sp)
    7aa8:	d8800445 	stb	r2,17(sp)
    7aac:	d9800485 	stb	r6,18(sp)
    7ab0:	d8000405 	stb	zero,16(sp)
    7ab4:	003e3206 	br	7380 <___vfprintf_internal_r+0xa38>
    7ab8:	01800074 	movhi	r6,1
    7abc:	31872604 	addi	r6,r6,7320
    7ac0:	d9814415 	stw	r6,1296(sp)
    7ac4:	003fe606 	br	7a60 <___vfprintf_internal_r+0x1118>
    7ac8:	00800ac4 	movi	r2,43
    7acc:	d8800405 	stb	r2,16(sp)
    7ad0:	b8c00007 	ldb	r3,0(r23)
    7ad4:	003c1b06 	br	6b44 <___vfprintf_internal_r+0x1fc>
    7ad8:	d8814c17 	ldw	r2,1328(sp)
    7adc:	b8c00007 	ldb	r3,0(r23)
    7ae0:	10800054 	ori	r2,r2,1
    7ae4:	d8814c15 	stw	r2,1328(sp)
    7ae8:	003c1606 	br	6b44 <___vfprintf_internal_r+0x1fc>
    7aec:	d8800407 	ldb	r2,16(sp)
    7af0:	10004c1e 	bne	r2,zero,7c24 <___vfprintf_internal_r+0x12dc>
    7af4:	00800804 	movi	r2,32
    7af8:	d8800405 	stb	r2,16(sp)
    7afc:	b8c00007 	ldb	r3,0(r23)
    7b00:	003c1006 	br	6b44 <___vfprintf_internal_r+0x1fc>
    7b04:	d9814c17 	ldw	r6,1328(sp)
    7b08:	b8c00007 	ldb	r3,0(r23)
    7b0c:	31800214 	ori	r6,r6,8
    7b10:	d9814c15 	stw	r6,1328(sp)
    7b14:	003c0b06 	br	6b44 <___vfprintf_internal_r+0x1fc>
    7b18:	0009883a 	mov	r4,zero
    7b1c:	04000244 	movi	r16,9
    7b20:	01400284 	movi	r5,10
    7b24:	d9c15115 	stw	r7,1348(sp)
    7b28:	00049540 	call	4954 <__mulsi3>
    7b2c:	b9000007 	ldb	r4,0(r23)
    7b30:	d8c14d17 	ldw	r3,1332(sp)
    7b34:	bdc00044 	addi	r23,r23,1
    7b38:	d9014d15 	stw	r4,1332(sp)
    7b3c:	d9414d17 	ldw	r5,1332(sp)
    7b40:	1885883a 	add	r2,r3,r2
    7b44:	113ff404 	addi	r4,r2,-48
    7b48:	28bff404 	addi	r2,r5,-48
    7b4c:	d9c15117 	ldw	r7,1348(sp)
    7b50:	80bff32e 	bgeu	r16,r2,7b20 <___vfprintf_internal_r+0x11d8>
    7b54:	d9014a15 	stw	r4,1320(sp)
    7b58:	003bfc06 	br	6b4c <___vfprintf_internal_r+0x204>
    7b5c:	d8814c17 	ldw	r2,1328(sp)
    7b60:	b8c00007 	ldb	r3,0(r23)
    7b64:	10802014 	ori	r2,r2,128
    7b68:	d8814c15 	stw	r2,1328(sp)
    7b6c:	003bf506 	br	6b44 <___vfprintf_internal_r+0x1fc>
    7b70:	b8c00007 	ldb	r3,0(r23)
    7b74:	00800a84 	movi	r2,42
    7b78:	bdc00044 	addi	r23,r23,1
    7b7c:	18831826 	beq	r3,r2,87e0 <___vfprintf_internal_r+0x1e98>
    7b80:	d8c14d15 	stw	r3,1332(sp)
    7b84:	18bff404 	addi	r2,r3,-48
    7b88:	00c00244 	movi	r3,9
    7b8c:	18827b36 	bltu	r3,r2,857c <___vfprintf_internal_r+0x1c34>
    7b90:	1821883a 	mov	r16,r3
    7b94:	0009883a 	mov	r4,zero
    7b98:	01400284 	movi	r5,10
    7b9c:	d9c15115 	stw	r7,1348(sp)
    7ba0:	00049540 	call	4954 <__mulsi3>
    7ba4:	d9414d17 	ldw	r5,1332(sp)
    7ba8:	b9800007 	ldb	r6,0(r23)
    7bac:	d9c15117 	ldw	r7,1348(sp)
    7bb0:	1145883a 	add	r2,r2,r5
    7bb4:	113ff404 	addi	r4,r2,-48
    7bb8:	30bff404 	addi	r2,r6,-48
    7bbc:	d9814d15 	stw	r6,1332(sp)
    7bc0:	bdc00044 	addi	r23,r23,1
    7bc4:	80bff42e 	bgeu	r16,r2,7b98 <___vfprintf_internal_r+0x1250>
    7bc8:	2027883a 	mov	r19,r4
    7bcc:	203bdf0e 	bge	r4,zero,6b4c <___vfprintf_internal_r+0x204>
    7bd0:	04ffffc4 	movi	r19,-1
    7bd4:	003bdd06 	br	6b4c <___vfprintf_internal_r+0x204>
    7bd8:	d8000405 	stb	zero,16(sp)
    7bdc:	39800017 	ldw	r6,0(r7)
    7be0:	39c00104 	addi	r7,r7,4
    7be4:	d9c14015 	stw	r7,1280(sp)
    7be8:	d9814115 	stw	r6,1284(sp)
    7bec:	3001c926 	beq	r6,zero,8314 <___vfprintf_internal_r+0x19cc>
    7bf0:	98000e16 	blt	r19,zero,7c2c <___vfprintf_internal_r+0x12e4>
    7bf4:	d9014117 	ldw	r4,1284(sp)
    7bf8:	000b883a 	mov	r5,zero
    7bfc:	980d883a 	mov	r6,r19
    7c00:	00060640 	call	6064 <memchr>
    7c04:	10025926 	beq	r2,zero,856c <___vfprintf_internal_r+0x1c24>
    7c08:	d8c14117 	ldw	r3,1284(sp)
    7c0c:	10cfc83a 	sub	r7,r2,r3
    7c10:	99c19e16 	blt	r19,r7,828c <___vfprintf_internal_r+0x1944>
    7c14:	d9c14515 	stw	r7,1300(sp)
    7c18:	38000916 	blt	r7,zero,7c40 <___vfprintf_internal_r+0x12f8>
    7c1c:	d8014615 	stw	zero,1304(sp)
    7c20:	003deb06 	br	73d0 <___vfprintf_internal_r+0xa88>
    7c24:	b8c00007 	ldb	r3,0(r23)
    7c28:	003bc606 	br	6b44 <___vfprintf_internal_r+0x1fc>
    7c2c:	d9014117 	ldw	r4,1284(sp)
    7c30:	000687c0 	call	687c <strlen>
    7c34:	d8814515 	stw	r2,1300(sp)
    7c38:	100f883a 	mov	r7,r2
    7c3c:	103ff70e 	bge	r2,zero,7c1c <___vfprintf_internal_r+0x12d4>
    7c40:	d8014515 	stw	zero,1300(sp)
    7c44:	d8014615 	stw	zero,1304(sp)
    7c48:	003de106 	br	73d0 <___vfprintf_internal_r+0xa88>
    7c4c:	20c03fcc 	andi	r3,r4,255
    7c50:	00800044 	movi	r2,1
    7c54:	18802d26 	beq	r3,r2,7d0c <___vfprintf_internal_r+0x13c4>
    7c58:	18800e36 	bltu	r3,r2,7c94 <___vfprintf_internal_r+0x134c>
    7c5c:	00800084 	movi	r2,2
    7c60:	1880fa26 	beq	r3,r2,804c <___vfprintf_internal_r+0x1704>
    7c64:	01000074 	movhi	r4,1
    7c68:	21073604 	addi	r4,r4,7384
    7c6c:	000687c0 	call	687c <strlen>
    7c70:	100f883a 	mov	r7,r2
    7c74:	dcc14515 	stw	r19,1300(sp)
    7c78:	9880010e 	bge	r19,r2,7c80 <___vfprintf_internal_r+0x1338>
    7c7c:	d8814515 	stw	r2,1300(sp)
    7c80:	00800074 	movhi	r2,1
    7c84:	10873604 	addi	r2,r2,7384
    7c88:	dcc14615 	stw	r19,1304(sp)
    7c8c:	d8814115 	stw	r2,1284(sp)
    7c90:	003dcf06 	br	73d0 <___vfprintf_internal_r+0xa88>
    7c94:	d9401904 	addi	r5,sp,100
    7c98:	dd000f04 	addi	r20,sp,60
    7c9c:	d9414115 	stw	r5,1284(sp)
    7ca0:	880a977a 	slli	r5,r17,29
    7ca4:	d9814117 	ldw	r6,1284(sp)
    7ca8:	8004d0fa 	srli	r2,r16,3
    7cac:	8806d0fa 	srli	r3,r17,3
    7cb0:	810001cc 	andi	r4,r16,7
    7cb4:	2884b03a 	or	r2,r5,r2
    7cb8:	31bfffc4 	addi	r6,r6,-1
    7cbc:	21000c04 	addi	r4,r4,48
    7cc0:	d9814115 	stw	r6,1284(sp)
    7cc4:	10cab03a 	or	r5,r2,r3
    7cc8:	31000005 	stb	r4,0(r6)
    7ccc:	1021883a 	mov	r16,r2
    7cd0:	1823883a 	mov	r17,r3
    7cd4:	283ff21e 	bne	r5,zero,7ca0 <___vfprintf_internal_r+0x1358>
    7cd8:	d8c14c17 	ldw	r3,1328(sp)
    7cdc:	1880004c 	andi	r2,r3,1
    7ce0:	1005003a 	cmpeq	r2,r2,zero
    7ce4:	103db31e 	bne	r2,zero,73b4 <___vfprintf_internal_r+0xa6c>
    7ce8:	20803fcc 	andi	r2,r4,255
    7cec:	1080201c 	xori	r2,r2,128
    7cf0:	10bfe004 	addi	r2,r2,-128
    7cf4:	00c00c04 	movi	r3,48
    7cf8:	10fdae26 	beq	r2,r3,73b4 <___vfprintf_internal_r+0xa6c>
    7cfc:	31bfffc4 	addi	r6,r6,-1
    7d00:	d9814115 	stw	r6,1284(sp)
    7d04:	30c00005 	stb	r3,0(r6)
    7d08:	003daa06 	br	73b4 <___vfprintf_internal_r+0xa6c>
    7d0c:	88800068 	cmpgeui	r2,r17,1
    7d10:	10002c1e 	bne	r2,zero,7dc4 <___vfprintf_internal_r+0x147c>
    7d14:	8800021e 	bne	r17,zero,7d20 <___vfprintf_internal_r+0x13d8>
    7d18:	00800244 	movi	r2,9
    7d1c:	14002936 	bltu	r2,r16,7dc4 <___vfprintf_internal_r+0x147c>
    7d20:	d90018c4 	addi	r4,sp,99
    7d24:	dd000f04 	addi	r20,sp,60
    7d28:	d9014115 	stw	r4,1284(sp)
    7d2c:	d9014117 	ldw	r4,1284(sp)
    7d30:	80800c04 	addi	r2,r16,48
    7d34:	20800005 	stb	r2,0(r4)
    7d38:	003d9e06 	br	73b4 <___vfprintf_internal_r+0xa6c>
    7d3c:	dc400d17 	ldw	r17,52(sp)
    7d40:	07000074 	movhi	fp,1
    7d44:	e7073d84 	addi	fp,fp,7414
    7d48:	9425883a 	add	r18,r18,r16
    7d4c:	8c400044 	addi	r17,r17,1
    7d50:	008001c4 	movi	r2,7
    7d54:	1f000015 	stw	fp,0(r3)
    7d58:	1c000115 	stw	r16,4(r3)
    7d5c:	dc800e15 	stw	r18,56(sp)
    7d60:	dc400d15 	stw	r17,52(sp)
    7d64:	147ddc16 	blt	r2,r17,74d8 <___vfprintf_internal_r+0xb90>
    7d68:	18c00204 	addi	r3,r3,8
    7d6c:	003c7406 	br	6f40 <___vfprintf_internal_r+0x5f8>
    7d70:	01000084 	movi	r4,2
    7d74:	d8000405 	stb	zero,16(sp)
    7d78:	003d8106 	br	7380 <___vfprintf_internal_r+0xa38>
    7d7c:	d9814c17 	ldw	r6,1328(sp)
    7d80:	30c4703a 	and	r2,r6,r3
    7d84:	1005003a 	cmpeq	r2,r2,zero
    7d88:	103cb326 	beq	r2,zero,7058 <___vfprintf_internal_r+0x710>
    7d8c:	d9014117 	ldw	r4,1284(sp)
    7d90:	94800044 	addi	r18,r18,1
    7d94:	8c400044 	addi	r17,r17,1
    7d98:	008001c4 	movi	r2,7
    7d9c:	a9000015 	stw	r4,0(r21)
    7da0:	a8c00115 	stw	r3,4(r21)
    7da4:	dc800e15 	stw	r18,56(sp)
    7da8:	dc400d15 	stw	r17,52(sp)
    7dac:	147e6016 	blt	r2,r17,7730 <___vfprintf_internal_r+0xde8>
    7db0:	acc00204 	addi	r19,r21,8
    7db4:	003cd106 	br	70fc <___vfprintf_internal_r+0x7b4>
    7db8:	07000074 	movhi	fp,1
    7dbc:	e7073d84 	addi	fp,fp,7414
    7dc0:	003c4906 	br	6ee8 <___vfprintf_internal_r+0x5a0>
    7dc4:	dd000f04 	addi	r20,sp,60
    7dc8:	dc801904 	addi	r18,sp,100
    7dcc:	8009883a 	mov	r4,r16
    7dd0:	880b883a 	mov	r5,r17
    7dd4:	01800284 	movi	r6,10
    7dd8:	000f883a 	mov	r7,zero
    7ddc:	000d2680 	call	d268 <__umoddi3>
    7de0:	12000c04 	addi	r8,r2,48
    7de4:	94bfffc4 	addi	r18,r18,-1
    7de8:	8009883a 	mov	r4,r16
    7dec:	880b883a 	mov	r5,r17
    7df0:	01800284 	movi	r6,10
    7df4:	000f883a 	mov	r7,zero
    7df8:	92000005 	stb	r8,0(r18)
    7dfc:	000cbfc0 	call	cbfc <__udivdi3>
    7e00:	1009883a 	mov	r4,r2
    7e04:	1021883a 	mov	r16,r2
    7e08:	18800068 	cmpgeui	r2,r3,1
    7e0c:	1823883a 	mov	r17,r3
    7e10:	103fee1e 	bne	r2,zero,7dcc <___vfprintf_internal_r+0x1484>
    7e14:	1800021e 	bne	r3,zero,7e20 <___vfprintf_internal_r+0x14d8>
    7e18:	00800244 	movi	r2,9
    7e1c:	113feb36 	bltu	r2,r4,7dcc <___vfprintf_internal_r+0x1484>
    7e20:	94bfffc4 	addi	r18,r18,-1
    7e24:	dc814115 	stw	r18,1284(sp)
    7e28:	003fc006 	br	7d2c <___vfprintf_internal_r+0x13e4>
    7e2c:	d9014c17 	ldw	r4,1328(sp)
    7e30:	2080004c 	andi	r2,r4,1
    7e34:	10009a1e 	bne	r2,zero,80a0 <___vfprintf_internal_r+0x1758>
    7e38:	d9401904 	addi	r5,sp,100
    7e3c:	dd000f04 	addi	r20,sp,60
    7e40:	d9414115 	stw	r5,1284(sp)
    7e44:	003d5b06 	br	73b4 <___vfprintf_internal_r+0xa6c>
    7e48:	d9014f17 	ldw	r4,1340(sp)
    7e4c:	b00b883a 	mov	r5,r22
    7e50:	d9800c04 	addi	r6,sp,48
    7e54:	00068f00 	call	68f0 <__sprint_r>
    7e58:	103c731e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    7e5c:	dc800e17 	ldw	r18,56(sp)
    7e60:	d8c01904 	addi	r3,sp,100
    7e64:	003cf906 	br	724c <___vfprintf_internal_r+0x904>
    7e68:	d8c14c17 	ldw	r3,1328(sp)
    7e6c:	1880040c 	andi	r2,r3,16
    7e70:	1000711e 	bne	r2,zero,8038 <___vfprintf_internal_r+0x16f0>
    7e74:	d9014c17 	ldw	r4,1328(sp)
    7e78:	2080100c 	andi	r2,r4,64
    7e7c:	10006e26 	beq	r2,zero,8038 <___vfprintf_internal_r+0x16f0>
    7e80:	3c00000b 	ldhu	r16,0(r7)
    7e84:	0023883a 	mov	r17,zero
    7e88:	39c00104 	addi	r7,r7,4
    7e8c:	d9c14015 	stw	r7,1280(sp)
    7e90:	003efa06 	br	7a7c <___vfprintf_internal_r+0x1134>
    7e94:	dc400d17 	ldw	r17,52(sp)
    7e98:	07000074 	movhi	fp,1
    7e9c:	e7073d84 	addi	fp,fp,7414
    7ea0:	9425883a 	add	r18,r18,r16
    7ea4:	8c400044 	addi	r17,r17,1
    7ea8:	008001c4 	movi	r2,7
    7eac:	1f000015 	stw	fp,0(r3)
    7eb0:	1c000115 	stw	r16,4(r3)
    7eb4:	dc800e15 	stw	r18,56(sp)
    7eb8:	dc400d15 	stw	r17,52(sp)
    7ebc:	147d7016 	blt	r2,r17,7480 <___vfprintf_internal_r+0xb38>
    7ec0:	18c00204 	addi	r3,r3,8
    7ec4:	003d7506 	br	749c <___vfprintf_internal_r+0xb54>
    7ec8:	dc800e17 	ldw	r18,56(sp)
    7ecc:	dc400d17 	ldw	r17,52(sp)
    7ed0:	07000074 	movhi	fp,1
    7ed4:	e7074184 	addi	fp,fp,7430
    7ed8:	003bba06 	br	6dc4 <___vfprintf_internal_r+0x47c>
    7edc:	d9014f17 	ldw	r4,1340(sp)
    7ee0:	b00b883a 	mov	r5,r22
    7ee4:	d9800c04 	addi	r6,sp,48
    7ee8:	00068f00 	call	68f0 <__sprint_r>
    7eec:	103c4e1e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    7ef0:	dc800e17 	ldw	r18,56(sp)
    7ef4:	d8c01904 	addi	r3,sp,100
    7ef8:	003ce306 	br	7288 <___vfprintf_internal_r+0x940>
    7efc:	3c000017 	ldw	r16,0(r7)
    7f00:	0009883a 	mov	r4,zero
    7f04:	39c00104 	addi	r7,r7,4
    7f08:	0023883a 	mov	r17,zero
    7f0c:	d9c14015 	stw	r7,1280(sp)
    7f10:	d8000405 	stb	zero,16(sp)
    7f14:	003d1a06 	br	7380 <___vfprintf_internal_r+0xa38>
    7f18:	38800017 	ldw	r2,0(r7)
    7f1c:	39c00104 	addi	r7,r7,4
    7f20:	d9c14015 	stw	r7,1280(sp)
    7f24:	1023d7fa 	srai	r17,r2,31
    7f28:	1021883a 	mov	r16,r2
    7f2c:	003d1206 	br	7378 <___vfprintf_internal_r+0xa30>
    7f30:	3c000017 	ldw	r16,0(r7)
    7f34:	01000044 	movi	r4,1
    7f38:	39c00104 	addi	r7,r7,4
    7f3c:	0023883a 	mov	r17,zero
    7f40:	d9c14015 	stw	r7,1280(sp)
    7f44:	d8000405 	stb	zero,16(sp)
    7f48:	003d0d06 	br	7380 <___vfprintf_internal_r+0xa38>
    7f4c:	00800074 	movhi	r2,1
    7f50:	10873d04 	addi	r2,r2,7412
    7f54:	94800044 	addi	r18,r18,1
    7f58:	8c400044 	addi	r17,r17,1
    7f5c:	a8800015 	stw	r2,0(r21)
    7f60:	00c00044 	movi	r3,1
    7f64:	008001c4 	movi	r2,7
    7f68:	a8c00115 	stw	r3,4(r21)
    7f6c:	dc800e15 	stw	r18,56(sp)
    7f70:	dc400d15 	stw	r17,52(sp)
    7f74:	1440ca16 	blt	r2,r17,82a0 <___vfprintf_internal_r+0x1958>
    7f78:	a8c00204 	addi	r3,r21,8
    7f7c:	2000061e 	bne	r4,zero,7f98 <___vfprintf_internal_r+0x1650>
    7f80:	d9414717 	ldw	r5,1308(sp)
    7f84:	2800041e 	bne	r5,zero,7f98 <___vfprintf_internal_r+0x1650>
    7f88:	d9814c17 	ldw	r6,1328(sp)
    7f8c:	3080004c 	andi	r2,r6,1
    7f90:	1005003a 	cmpeq	r2,r2,zero
    7f94:	103bea1e 	bne	r2,zero,6f40 <___vfprintf_internal_r+0x5f8>
    7f98:	00800044 	movi	r2,1
    7f9c:	dc400d17 	ldw	r17,52(sp)
    7fa0:	18800115 	stw	r2,4(r3)
    7fa4:	d8814917 	ldw	r2,1316(sp)
    7fa8:	94800044 	addi	r18,r18,1
    7fac:	8c400044 	addi	r17,r17,1
    7fb0:	18800015 	stw	r2,0(r3)
    7fb4:	008001c4 	movi	r2,7
    7fb8:	dc800e15 	stw	r18,56(sp)
    7fbc:	dc400d15 	stw	r17,52(sp)
    7fc0:	1440ca16 	blt	r2,r17,82ec <___vfprintf_internal_r+0x19a4>
    7fc4:	18c00204 	addi	r3,r3,8
    7fc8:	0121c83a 	sub	r16,zero,r4
    7fcc:	0400500e 	bge	zero,r16,8110 <___vfprintf_internal_r+0x17c8>
    7fd0:	00800404 	movi	r2,16
    7fd4:	1400800e 	bge	r2,r16,81d8 <___vfprintf_internal_r+0x1890>
    7fd8:	1027883a 	mov	r19,r2
    7fdc:	07000074 	movhi	fp,1
    7fe0:	e7073d84 	addi	fp,fp,7414
    7fe4:	050001c4 	movi	r20,7
    7fe8:	00000306 	br	7ff8 <___vfprintf_internal_r+0x16b0>
    7fec:	18c00204 	addi	r3,r3,8
    7ff0:	843ffc04 	addi	r16,r16,-16
    7ff4:	9c007a0e 	bge	r19,r16,81e0 <___vfprintf_internal_r+0x1898>
    7ff8:	94800404 	addi	r18,r18,16
    7ffc:	8c400044 	addi	r17,r17,1
    8000:	1f000015 	stw	fp,0(r3)
    8004:	1cc00115 	stw	r19,4(r3)
    8008:	dc800e15 	stw	r18,56(sp)
    800c:	dc400d15 	stw	r17,52(sp)
    8010:	a47ff60e 	bge	r20,r17,7fec <___vfprintf_internal_r+0x16a4>
    8014:	d9014f17 	ldw	r4,1340(sp)
    8018:	b00b883a 	mov	r5,r22
    801c:	d9800c04 	addi	r6,sp,48
    8020:	00068f00 	call	68f0 <__sprint_r>
    8024:	103c001e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    8028:	dc800e17 	ldw	r18,56(sp)
    802c:	dc400d17 	ldw	r17,52(sp)
    8030:	d8c01904 	addi	r3,sp,100
    8034:	003fee06 	br	7ff0 <___vfprintf_internal_r+0x16a8>
    8038:	3c000017 	ldw	r16,0(r7)
    803c:	0023883a 	mov	r17,zero
    8040:	39c00104 	addi	r7,r7,4
    8044:	d9c14015 	stw	r7,1280(sp)
    8048:	003e8c06 	br	7a7c <___vfprintf_internal_r+0x1134>
    804c:	d9401904 	addi	r5,sp,100
    8050:	dd000f04 	addi	r20,sp,60
    8054:	d9414115 	stw	r5,1284(sp)
    8058:	d9814417 	ldw	r6,1296(sp)
    805c:	880a973a 	slli	r5,r17,28
    8060:	8004d13a 	srli	r2,r16,4
    8064:	810003cc 	andi	r4,r16,15
    8068:	3109883a 	add	r4,r6,r4
    806c:	2884b03a 	or	r2,r5,r2
    8070:	21400003 	ldbu	r5,0(r4)
    8074:	d9014117 	ldw	r4,1284(sp)
    8078:	8806d13a 	srli	r3,r17,4
    807c:	1021883a 	mov	r16,r2
    8080:	213fffc4 	addi	r4,r4,-1
    8084:	d9014115 	stw	r4,1284(sp)
    8088:	d9814117 	ldw	r6,1284(sp)
    808c:	10c8b03a 	or	r4,r2,r3
    8090:	1823883a 	mov	r17,r3
    8094:	31400005 	stb	r5,0(r6)
    8098:	203fef1e 	bne	r4,zero,8058 <___vfprintf_internal_r+0x1710>
    809c:	003cc506 	br	73b4 <___vfprintf_internal_r+0xa6c>
    80a0:	00800c04 	movi	r2,48
    80a4:	d98018c4 	addi	r6,sp,99
    80a8:	dd000f04 	addi	r20,sp,60
    80ac:	d88018c5 	stb	r2,99(sp)
    80b0:	d9814115 	stw	r6,1284(sp)
    80b4:	003cbf06 	br	73b4 <___vfprintf_internal_r+0xa6c>
    80b8:	dc400d17 	ldw	r17,52(sp)
    80bc:	07000074 	movhi	fp,1
    80c0:	e7074184 	addi	fp,fp,7430
    80c4:	003bc106 	br	6fcc <___vfprintf_internal_r+0x684>
    80c8:	d9414c17 	ldw	r5,1328(sp)
    80cc:	2880040c 	andi	r2,r5,16
    80d0:	10007c26 	beq	r2,zero,82c4 <___vfprintf_internal_r+0x197c>
    80d4:	38800017 	ldw	r2,0(r7)
    80d8:	39c00104 	addi	r7,r7,4
    80dc:	d9c14015 	stw	r7,1280(sp)
    80e0:	d9814b17 	ldw	r6,1324(sp)
    80e4:	d9c14017 	ldw	r7,1280(sp)
    80e8:	11800015 	stw	r6,0(r2)
    80ec:	003a7206 	br	6ab8 <___vfprintf_internal_r+0x170>
    80f0:	d9014f17 	ldw	r4,1340(sp)
    80f4:	b00b883a 	mov	r5,r22
    80f8:	d9800c04 	addi	r6,sp,48
    80fc:	00068f00 	call	68f0 <__sprint_r>
    8100:	103bc91e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    8104:	dc800e17 	ldw	r18,56(sp)
    8108:	dc400d17 	ldw	r17,52(sp)
    810c:	d8c01904 	addi	r3,sp,100
    8110:	d9014717 	ldw	r4,1308(sp)
    8114:	d9414117 	ldw	r5,1284(sp)
    8118:	8c400044 	addi	r17,r17,1
    811c:	9125883a 	add	r18,r18,r4
    8120:	008001c4 	movi	r2,7
    8124:	19400015 	stw	r5,0(r3)
    8128:	19000115 	stw	r4,4(r3)
    812c:	dc800e15 	stw	r18,56(sp)
    8130:	dc400d15 	stw	r17,52(sp)
    8134:	147ce816 	blt	r2,r17,74d8 <___vfprintf_internal_r+0xb90>
    8138:	18c00204 	addi	r3,r3,8
    813c:	003b8006 	br	6f40 <___vfprintf_internal_r+0x5f8>
    8140:	38c00017 	ldw	r3,0(r7)
    8144:	39000204 	addi	r4,r7,8
    8148:	d9014015 	stw	r4,1280(sp)
    814c:	d8c14215 	stw	r3,1288(sp)
    8150:	39c00117 	ldw	r7,4(r7)
    8154:	d9c14315 	stw	r7,1292(sp)
    8158:	003e1a06 	br	79c4 <___vfprintf_internal_r+0x107c>
    815c:	0005883a 	mov	r2,zero
    8160:	1409c83a 	sub	r4,r2,r16
    8164:	1105803a 	cmpltu	r2,r2,r4
    8168:	044bc83a 	sub	r5,zero,r17
    816c:	2885c83a 	sub	r2,r5,r2
    8170:	2021883a 	mov	r16,r4
    8174:	1023883a 	mov	r17,r2
    8178:	01000044 	movi	r4,1
    817c:	00800b44 	movi	r2,45
    8180:	d8800405 	stb	r2,16(sp)
    8184:	003c7e06 	br	7380 <___vfprintf_internal_r+0xa38>
    8188:	d9014f17 	ldw	r4,1340(sp)
    818c:	b00b883a 	mov	r5,r22
    8190:	d9800c04 	addi	r6,sp,48
    8194:	00068f00 	call	68f0 <__sprint_r>
    8198:	103ba31e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    819c:	dc800e17 	ldw	r18,56(sp)
    81a0:	dc400d17 	ldw	r17,52(sp)
    81a4:	d9000517 	ldw	r4,20(sp)
    81a8:	d9401904 	addi	r5,sp,100
    81ac:	003da106 	br	7834 <___vfprintf_internal_r+0xeec>
    81b0:	d9014f17 	ldw	r4,1340(sp)
    81b4:	b00b883a 	mov	r5,r22
    81b8:	d9800c04 	addi	r6,sp,48
    81bc:	00068f00 	call	68f0 <__sprint_r>
    81c0:	103b991e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    81c4:	dc800e17 	ldw	r18,56(sp)
    81c8:	dc400d17 	ldw	r17,52(sp)
    81cc:	d9000517 	ldw	r4,20(sp)
    81d0:	d8c01904 	addi	r3,sp,100
    81d4:	003d8b06 	br	7804 <___vfprintf_internal_r+0xebc>
    81d8:	07000074 	movhi	fp,1
    81dc:	e7073d84 	addi	fp,fp,7414
    81e0:	9425883a 	add	r18,r18,r16
    81e4:	8c400044 	addi	r17,r17,1
    81e8:	008001c4 	movi	r2,7
    81ec:	1f000015 	stw	fp,0(r3)
    81f0:	1c000115 	stw	r16,4(r3)
    81f4:	dc800e15 	stw	r18,56(sp)
    81f8:	dc400d15 	stw	r17,52(sp)
    81fc:	147fbc16 	blt	r2,r17,80f0 <___vfprintf_internal_r+0x17a8>
    8200:	18c00204 	addi	r3,r3,8
    8204:	003fc206 	br	8110 <___vfprintf_internal_r+0x17c8>
    8208:	d9014f17 	ldw	r4,1340(sp)
    820c:	b00b883a 	mov	r5,r22
    8210:	d9800c04 	addi	r6,sp,48
    8214:	00068f00 	call	68f0 <__sprint_r>
    8218:	103b831e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    821c:	dc800e17 	ldw	r18,56(sp)
    8220:	d9000517 	ldw	r4,20(sp)
    8224:	d8c01904 	addi	r3,sp,100
    8228:	003cfc06 	br	761c <___vfprintf_internal_r+0xcd4>
    822c:	07000074 	movhi	fp,1
    8230:	e7073d84 	addi	fp,fp,7414
    8234:	003bde06 	br	71b0 <___vfprintf_internal_r+0x868>
    8238:	00800074 	movhi	r2,1
    823c:	10872c04 	addi	r2,r2,7344
    8240:	d8814115 	stw	r2,1284(sp)
    8244:	003def06 	br	7a04 <___vfprintf_internal_r+0x10bc>
    8248:	d9014217 	ldw	r4,1288(sp)
    824c:	d9414317 	ldw	r5,1292(sp)
    8250:	000c9640 	call	c964 <__isnand>
    8254:	10003926 	beq	r2,zero,833c <___vfprintf_internal_r+0x19f4>
    8258:	d9414d17 	ldw	r5,1332(sp)
    825c:	008011c4 	movi	r2,71
    8260:	1140ce16 	blt	r2,r5,859c <___vfprintf_internal_r+0x1c54>
    8264:	01800074 	movhi	r6,1
    8268:	31872d04 	addi	r6,r6,7348
    826c:	d9814115 	stw	r6,1284(sp)
    8270:	003de406 	br	7a04 <___vfprintf_internal_r+0x10bc>
    8274:	d9014c17 	ldw	r4,1328(sp)
    8278:	bdc00044 	addi	r23,r23,1
    827c:	b8c00007 	ldb	r3,0(r23)
    8280:	21000814 	ori	r4,r4,32
    8284:	d9014c15 	stw	r4,1328(sp)
    8288:	003a2e06 	br	6b44 <___vfprintf_internal_r+0x1fc>
    828c:	dcc14515 	stw	r19,1300(sp)
    8290:	98011016 	blt	r19,zero,86d4 <___vfprintf_internal_r+0x1d8c>
    8294:	980f883a 	mov	r7,r19
    8298:	d8014615 	stw	zero,1304(sp)
    829c:	003c4c06 	br	73d0 <___vfprintf_internal_r+0xa88>
    82a0:	d9014f17 	ldw	r4,1340(sp)
    82a4:	b00b883a 	mov	r5,r22
    82a8:	d9800c04 	addi	r6,sp,48
    82ac:	00068f00 	call	68f0 <__sprint_r>
    82b0:	103b5d1e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    82b4:	dc800e17 	ldw	r18,56(sp)
    82b8:	d9000517 	ldw	r4,20(sp)
    82bc:	d8c01904 	addi	r3,sp,100
    82c0:	003f2e06 	br	7f7c <___vfprintf_internal_r+0x1634>
    82c4:	d8c14c17 	ldw	r3,1328(sp)
    82c8:	1880100c 	andi	r2,r3,64
    82cc:	1000a026 	beq	r2,zero,8550 <___vfprintf_internal_r+0x1c08>
    82d0:	38800017 	ldw	r2,0(r7)
    82d4:	39c00104 	addi	r7,r7,4
    82d8:	d9c14015 	stw	r7,1280(sp)
    82dc:	d9014b17 	ldw	r4,1324(sp)
    82e0:	d9c14017 	ldw	r7,1280(sp)
    82e4:	1100000d 	sth	r4,0(r2)
    82e8:	0039f306 	br	6ab8 <___vfprintf_internal_r+0x170>
    82ec:	d9014f17 	ldw	r4,1340(sp)
    82f0:	b00b883a 	mov	r5,r22
    82f4:	d9800c04 	addi	r6,sp,48
    82f8:	00068f00 	call	68f0 <__sprint_r>
    82fc:	103b4a1e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    8300:	dc800e17 	ldw	r18,56(sp)
    8304:	dc400d17 	ldw	r17,52(sp)
    8308:	d9000517 	ldw	r4,20(sp)
    830c:	d8c01904 	addi	r3,sp,100
    8310:	003f2d06 	br	7fc8 <___vfprintf_internal_r+0x1680>
    8314:	00800184 	movi	r2,6
    8318:	14c09a36 	bltu	r2,r19,8584 <___vfprintf_internal_r+0x1c3c>
    831c:	dcc14515 	stw	r19,1300(sp)
    8320:	9800010e 	bge	r19,zero,8328 <___vfprintf_internal_r+0x19e0>
    8324:	d8014515 	stw	zero,1300(sp)
    8328:	00800074 	movhi	r2,1
    832c:	10872f04 	addi	r2,r2,7356
    8330:	980f883a 	mov	r7,r19
    8334:	d8814115 	stw	r2,1284(sp)
    8338:	003a7206 	br	6d04 <___vfprintf_internal_r+0x3bc>
    833c:	00bfffc4 	movi	r2,-1
    8340:	9880e226 	beq	r19,r2,86cc <___vfprintf_internal_r+0x1d84>
    8344:	d9414d17 	ldw	r5,1332(sp)
    8348:	008019c4 	movi	r2,103
    834c:	2880dc26 	beq	r5,r2,86c0 <___vfprintf_internal_r+0x1d78>
    8350:	008011c4 	movi	r2,71
    8354:	2880da26 	beq	r5,r2,86c0 <___vfprintf_internal_r+0x1d78>
    8358:	d9414c17 	ldw	r5,1328(sp)
    835c:	d9014317 	ldw	r4,1292(sp)
    8360:	d9814217 	ldw	r6,1288(sp)
    8364:	29404014 	ori	r5,r5,256
    8368:	d9414c15 	stw	r5,1328(sp)
    836c:	2000cc16 	blt	r4,zero,86a0 <___vfprintf_internal_r+0x1d58>
    8370:	3021883a 	mov	r16,r6
    8374:	2023883a 	mov	r17,r4
    8378:	0039883a 	mov	fp,zero
    837c:	d9414d17 	ldw	r5,1332(sp)
    8380:	00801984 	movi	r2,102
    8384:	2880b726 	beq	r5,r2,8664 <___vfprintf_internal_r+0x1d1c>
    8388:	00801184 	movi	r2,70
    838c:	2880b526 	beq	r5,r2,8664 <___vfprintf_internal_r+0x1d1c>
    8390:	00801944 	movi	r2,101
    8394:	2880c826 	beq	r5,r2,86b8 <___vfprintf_internal_r+0x1d70>
    8398:	00801144 	movi	r2,69
    839c:	2880c626 	beq	r5,r2,86b8 <___vfprintf_internal_r+0x1d70>
    83a0:	9829883a 	mov	r20,r19
    83a4:	d9014f17 	ldw	r4,1340(sp)
    83a8:	d8800504 	addi	r2,sp,20
    83ac:	880d883a 	mov	r6,r17
    83b0:	d8800115 	stw	r2,4(sp)
    83b4:	d8c00604 	addi	r3,sp,24
    83b8:	d8800704 	addi	r2,sp,28
    83bc:	800b883a 	mov	r5,r16
    83c0:	01c00084 	movi	r7,2
    83c4:	d8c00215 	stw	r3,8(sp)
    83c8:	d8800315 	stw	r2,12(sp)
    83cc:	dd000015 	stw	r20,0(sp)
    83d0:	0008c980 	call	8c98 <_dtoa_r>
    83d4:	d9814d17 	ldw	r6,1332(sp)
    83d8:	d8814115 	stw	r2,1284(sp)
    83dc:	008019c4 	movi	r2,103
    83e0:	30809526 	beq	r6,r2,8638 <___vfprintf_internal_r+0x1cf0>
    83e4:	d8c14d17 	ldw	r3,1332(sp)
    83e8:	008011c4 	movi	r2,71
    83ec:	18809226 	beq	r3,r2,8638 <___vfprintf_internal_r+0x1cf0>
    83f0:	d9414117 	ldw	r5,1284(sp)
    83f4:	d9814d17 	ldw	r6,1332(sp)
    83f8:	00801984 	movi	r2,102
    83fc:	2d25883a 	add	r18,r5,r20
    8400:	30808626 	beq	r6,r2,861c <___vfprintf_internal_r+0x1cd4>
    8404:	00801184 	movi	r2,70
    8408:	30808426 	beq	r6,r2,861c <___vfprintf_internal_r+0x1cd4>
    840c:	000d883a 	mov	r6,zero
    8410:	000f883a 	mov	r7,zero
    8414:	880b883a 	mov	r5,r17
    8418:	8009883a 	mov	r4,r16
    841c:	00043f40 	call	43f4 <__eqdf2>
    8420:	1000751e 	bne	r2,zero,85f8 <___vfprintf_internal_r+0x1cb0>
    8424:	9005883a 	mov	r2,r18
    8428:	dc800715 	stw	r18,28(sp)
    842c:	d9014117 	ldw	r4,1284(sp)
    8430:	d9414d17 	ldw	r5,1332(sp)
    8434:	00c019c4 	movi	r3,103
    8438:	1125c83a 	sub	r18,r2,r4
    843c:	28c06826 	beq	r5,r3,85e0 <___vfprintf_internal_r+0x1c98>
    8440:	008011c4 	movi	r2,71
    8444:	28806626 	beq	r5,r2,85e0 <___vfprintf_internal_r+0x1c98>
    8448:	d9000517 	ldw	r4,20(sp)
    844c:	d8c14d17 	ldw	r3,1332(sp)
    8450:	00801944 	movi	r2,101
    8454:	10c05516 	blt	r2,r3,85ac <___vfprintf_internal_r+0x1c64>
    8458:	213fffc4 	addi	r4,r4,-1
    845c:	d9000515 	stw	r4,20(sp)
    8460:	d8c00805 	stb	r3,32(sp)
    8464:	2021883a 	mov	r16,r4
    8468:	2000c116 	blt	r4,zero,8770 <___vfprintf_internal_r+0x1e28>
    846c:	00800ac4 	movi	r2,43
    8470:	d8800845 	stb	r2,33(sp)
    8474:	00800244 	movi	r2,9
    8478:	1400af0e 	bge	r2,r16,8738 <___vfprintf_internal_r+0x1df0>
    847c:	1027883a 	mov	r19,r2
    8480:	dc400b84 	addi	r17,sp,46
    8484:	8009883a 	mov	r4,r16
    8488:	01400284 	movi	r5,10
    848c:	00048e40 	call	48e4 <__modsi3>
    8490:	10800c04 	addi	r2,r2,48
    8494:	8c7fffc4 	addi	r17,r17,-1
    8498:	8009883a 	mov	r4,r16
    849c:	01400284 	movi	r5,10
    84a0:	88800005 	stb	r2,0(r17)
    84a4:	00048840 	call	4884 <__divsi3>
    84a8:	1021883a 	mov	r16,r2
    84ac:	98bff516 	blt	r19,r2,8484 <___vfprintf_internal_r+0x1b3c>
    84b0:	10c00c04 	addi	r3,r2,48
    84b4:	d88009c4 	addi	r2,sp,39
    84b8:	108001c4 	addi	r2,r2,7
    84bc:	897fffc4 	addi	r5,r17,-1
    84c0:	88ffffc5 	stb	r3,-1(r17)
    84c4:	2880a72e 	bgeu	r5,r2,8764 <___vfprintf_internal_r+0x1e1c>
    84c8:	1009883a 	mov	r4,r2
    84cc:	d9800804 	addi	r6,sp,32
    84d0:	d8c00884 	addi	r3,sp,34
    84d4:	28800003 	ldbu	r2,0(r5)
    84d8:	29400044 	addi	r5,r5,1
    84dc:	18800005 	stb	r2,0(r3)
    84e0:	18c00044 	addi	r3,r3,1
    84e4:	293ffb36 	bltu	r5,r4,84d4 <___vfprintf_internal_r+0x1b8c>
    84e8:	1987c83a 	sub	r3,r3,r6
    84ec:	00800044 	movi	r2,1
    84f0:	d8c14815 	stw	r3,1312(sp)
    84f4:	90cf883a 	add	r7,r18,r3
    84f8:	1480960e 	bge	r2,r18,8754 <___vfprintf_internal_r+0x1e0c>
    84fc:	39c00044 	addi	r7,r7,1
    8500:	d9c14515 	stw	r7,1300(sp)
    8504:	38003416 	blt	r7,zero,85d8 <___vfprintf_internal_r+0x1c90>
    8508:	e0803fcc 	andi	r2,fp,255
    850c:	1080201c 	xori	r2,r2,128
    8510:	10bfe004 	addi	r2,r2,-128
    8514:	10004e26 	beq	r2,zero,8650 <___vfprintf_internal_r+0x1d08>
    8518:	00800b44 	movi	r2,45
    851c:	dc814715 	stw	r18,1308(sp)
    8520:	d8014615 	stw	zero,1304(sp)
    8524:	d8800405 	stb	r2,16(sp)
    8528:	003bab06 	br	73d8 <___vfprintf_internal_r+0xa90>
    852c:	00800b44 	movi	r2,45
    8530:	d8800405 	stb	r2,16(sp)
    8534:	003d2d06 	br	79ec <___vfprintf_internal_r+0x10a4>
    8538:	d9014f17 	ldw	r4,1340(sp)
    853c:	b00b883a 	mov	r5,r22
    8540:	d9800c04 	addi	r6,sp,48
    8544:	00068f00 	call	68f0 <__sprint_r>
    8548:	103ab71e 	bne	r2,zero,7028 <___vfprintf_internal_r+0x6e0>
    854c:	003ab506 	br	7024 <___vfprintf_internal_r+0x6dc>
    8550:	38800017 	ldw	r2,0(r7)
    8554:	39c00104 	addi	r7,r7,4
    8558:	d9c14015 	stw	r7,1280(sp)
    855c:	d9414b17 	ldw	r5,1324(sp)
    8560:	d9c14017 	ldw	r7,1280(sp)
    8564:	11400015 	stw	r5,0(r2)
    8568:	00395306 	br	6ab8 <___vfprintf_internal_r+0x170>
    856c:	980f883a 	mov	r7,r19
    8570:	dcc14515 	stw	r19,1300(sp)
    8574:	d8014615 	stw	zero,1304(sp)
    8578:	003b9506 	br	73d0 <___vfprintf_internal_r+0xa88>
    857c:	0027883a 	mov	r19,zero
    8580:	00397206 	br	6b4c <___vfprintf_internal_r+0x204>
    8584:	00c00074 	movhi	r3,1
    8588:	18c72f04 	addi	r3,r3,7356
    858c:	100f883a 	mov	r7,r2
    8590:	d8814515 	stw	r2,1300(sp)
    8594:	d8c14115 	stw	r3,1284(sp)
    8598:	0039da06 	br	6d04 <___vfprintf_internal_r+0x3bc>
    859c:	00800074 	movhi	r2,1
    85a0:	10872e04 	addi	r2,r2,7352
    85a4:	d8814115 	stw	r2,1284(sp)
    85a8:	003d1606 	br	7a04 <___vfprintf_internal_r+0x10bc>
    85ac:	d9414d17 	ldw	r5,1332(sp)
    85b0:	00801984 	movi	r2,102
    85b4:	28804926 	beq	r5,r2,86dc <___vfprintf_internal_r+0x1d94>
    85b8:	200f883a 	mov	r7,r4
    85bc:	24805716 	blt	r4,r18,871c <___vfprintf_internal_r+0x1dd4>
    85c0:	d9414c17 	ldw	r5,1328(sp)
    85c4:	2880004c 	andi	r2,r5,1
    85c8:	10000126 	beq	r2,zero,85d0 <___vfprintf_internal_r+0x1c88>
    85cc:	21c00044 	addi	r7,r4,1
    85d0:	d9c14515 	stw	r7,1300(sp)
    85d4:	383fcc0e 	bge	r7,zero,8508 <___vfprintf_internal_r+0x1bc0>
    85d8:	d8014515 	stw	zero,1300(sp)
    85dc:	003fca06 	br	8508 <___vfprintf_internal_r+0x1bc0>
    85e0:	d9000517 	ldw	r4,20(sp)
    85e4:	00bfff04 	movi	r2,-4
    85e8:	1100480e 	bge	r2,r4,870c <___vfprintf_internal_r+0x1dc4>
    85ec:	99004716 	blt	r19,r4,870c <___vfprintf_internal_r+0x1dc4>
    85f0:	d8c14d15 	stw	r3,1332(sp)
    85f4:	003ff006 	br	85b8 <___vfprintf_internal_r+0x1c70>
    85f8:	d8800717 	ldw	r2,28(sp)
    85fc:	14bf8b2e 	bgeu	r2,r18,842c <___vfprintf_internal_r+0x1ae4>
    8600:	9007883a 	mov	r3,r18
    8604:	01000c04 	movi	r4,48
    8608:	11000005 	stb	r4,0(r2)
    860c:	10800044 	addi	r2,r2,1
    8610:	d8800715 	stw	r2,28(sp)
    8614:	18bffc1e 	bne	r3,r2,8608 <___vfprintf_internal_r+0x1cc0>
    8618:	003f8406 	br	842c <___vfprintf_internal_r+0x1ae4>
    861c:	d8814117 	ldw	r2,1284(sp)
    8620:	10c00007 	ldb	r3,0(r2)
    8624:	00800c04 	movi	r2,48
    8628:	18805b26 	beq	r3,r2,8798 <___vfprintf_internal_r+0x1e50>
    862c:	d9000517 	ldw	r4,20(sp)
    8630:	9125883a 	add	r18,r18,r4
    8634:	003f7506 	br	840c <___vfprintf_internal_r+0x1ac4>
    8638:	d9014c17 	ldw	r4,1328(sp)
    863c:	2080004c 	andi	r2,r4,1
    8640:	1005003a 	cmpeq	r2,r2,zero
    8644:	103f6a26 	beq	r2,zero,83f0 <___vfprintf_internal_r+0x1aa8>
    8648:	d8800717 	ldw	r2,28(sp)
    864c:	003f7706 	br	842c <___vfprintf_internal_r+0x1ae4>
    8650:	d9c14515 	stw	r7,1300(sp)
    8654:	38004d16 	blt	r7,zero,878c <___vfprintf_internal_r+0x1e44>
    8658:	dc814715 	stw	r18,1308(sp)
    865c:	d8014615 	stw	zero,1304(sp)
    8660:	003b5b06 	br	73d0 <___vfprintf_internal_r+0xa88>
    8664:	d9014f17 	ldw	r4,1340(sp)
    8668:	d8800504 	addi	r2,sp,20
    866c:	d8800115 	stw	r2,4(sp)
    8670:	d8c00604 	addi	r3,sp,24
    8674:	d8800704 	addi	r2,sp,28
    8678:	800b883a 	mov	r5,r16
    867c:	880d883a 	mov	r6,r17
    8680:	01c000c4 	movi	r7,3
    8684:	d8c00215 	stw	r3,8(sp)
    8688:	d8800315 	stw	r2,12(sp)
    868c:	dcc00015 	stw	r19,0(sp)
    8690:	9829883a 	mov	r20,r19
    8694:	0008c980 	call	8c98 <_dtoa_r>
    8698:	d8814115 	stw	r2,1284(sp)
    869c:	003f5106 	br	83e4 <___vfprintf_internal_r+0x1a9c>
    86a0:	d8c14217 	ldw	r3,1288(sp)
    86a4:	d9014317 	ldw	r4,1292(sp)
    86a8:	07000b44 	movi	fp,45
    86ac:	1821883a 	mov	r16,r3
    86b0:	2460003c 	xorhi	r17,r4,32768
    86b4:	003f3106 	br	837c <___vfprintf_internal_r+0x1a34>
    86b8:	9d000044 	addi	r20,r19,1
    86bc:	003f3906 	br	83a4 <___vfprintf_internal_r+0x1a5c>
    86c0:	983f251e 	bne	r19,zero,8358 <___vfprintf_internal_r+0x1a10>
    86c4:	04c00044 	movi	r19,1
    86c8:	003f2306 	br	8358 <___vfprintf_internal_r+0x1a10>
    86cc:	04c00184 	movi	r19,6
    86d0:	003f2106 	br	8358 <___vfprintf_internal_r+0x1a10>
    86d4:	d8014515 	stw	zero,1300(sp)
    86d8:	003eee06 	br	8294 <___vfprintf_internal_r+0x194c>
    86dc:	200f883a 	mov	r7,r4
    86e0:	0100370e 	bge	zero,r4,87c0 <___vfprintf_internal_r+0x1e78>
    86e4:	9800031e 	bne	r19,zero,86f4 <___vfprintf_internal_r+0x1dac>
    86e8:	d9814c17 	ldw	r6,1328(sp)
    86ec:	3080004c 	andi	r2,r6,1
    86f0:	103fb726 	beq	r2,zero,85d0 <___vfprintf_internal_r+0x1c88>
    86f4:	20800044 	addi	r2,r4,1
    86f8:	98a7883a 	add	r19,r19,r2
    86fc:	dcc14515 	stw	r19,1300(sp)
    8700:	980f883a 	mov	r7,r19
    8704:	983f800e 	bge	r19,zero,8508 <___vfprintf_internal_r+0x1bc0>
    8708:	003fb306 	br	85d8 <___vfprintf_internal_r+0x1c90>
    870c:	d9814d17 	ldw	r6,1332(sp)
    8710:	31bfff84 	addi	r6,r6,-2
    8714:	d9814d15 	stw	r6,1332(sp)
    8718:	003f4c06 	br	844c <___vfprintf_internal_r+0x1b04>
    871c:	0100180e 	bge	zero,r4,8780 <___vfprintf_internal_r+0x1e38>
    8720:	00800044 	movi	r2,1
    8724:	1485883a 	add	r2,r2,r18
    8728:	d8814515 	stw	r2,1300(sp)
    872c:	100f883a 	mov	r7,r2
    8730:	103f750e 	bge	r2,zero,8508 <___vfprintf_internal_r+0x1bc0>
    8734:	003fa806 	br	85d8 <___vfprintf_internal_r+0x1c90>
    8738:	80c00c04 	addi	r3,r16,48
    873c:	00800c04 	movi	r2,48
    8740:	d8c008c5 	stb	r3,35(sp)
    8744:	d9800804 	addi	r6,sp,32
    8748:	d8c00904 	addi	r3,sp,36
    874c:	d8800885 	stb	r2,34(sp)
    8750:	003f6506 	br	84e8 <___vfprintf_internal_r+0x1ba0>
    8754:	d9014c17 	ldw	r4,1328(sp)
    8758:	2084703a 	and	r2,r4,r2
    875c:	103f9c26 	beq	r2,zero,85d0 <___vfprintf_internal_r+0x1c88>
    8760:	003f6606 	br	84fc <___vfprintf_internal_r+0x1bb4>
    8764:	d9800804 	addi	r6,sp,32
    8768:	d8c00884 	addi	r3,sp,34
    876c:	003f5e06 	br	84e8 <___vfprintf_internal_r+0x1ba0>
    8770:	00800b44 	movi	r2,45
    8774:	0121c83a 	sub	r16,zero,r4
    8778:	d8800845 	stb	r2,33(sp)
    877c:	003f3d06 	br	8474 <___vfprintf_internal_r+0x1b2c>
    8780:	00800084 	movi	r2,2
    8784:	1105c83a 	sub	r2,r2,r4
    8788:	003fe606 	br	8724 <___vfprintf_internal_r+0x1ddc>
    878c:	d8014515 	stw	zero,1300(sp)
    8790:	dc814715 	stw	r18,1308(sp)
    8794:	003fb106 	br	865c <___vfprintf_internal_r+0x1d14>
    8798:	000d883a 	mov	r6,zero
    879c:	000f883a 	mov	r7,zero
    87a0:	8009883a 	mov	r4,r16
    87a4:	880b883a 	mov	r5,r17
    87a8:	000d8c80 	call	d8c8 <__nedf2>
    87ac:	103f9f26 	beq	r2,zero,862c <___vfprintf_internal_r+0x1ce4>
    87b0:	00800044 	movi	r2,1
    87b4:	1509c83a 	sub	r4,r2,r20
    87b8:	d9000515 	stw	r4,20(sp)
    87bc:	003f9b06 	br	862c <___vfprintf_internal_r+0x1ce4>
    87c0:	98000d1e 	bne	r19,zero,87f8 <___vfprintf_internal_r+0x1eb0>
    87c4:	d8c14c17 	ldw	r3,1328(sp)
    87c8:	1880004c 	andi	r2,r3,1
    87cc:	10000a1e 	bne	r2,zero,87f8 <___vfprintf_internal_r+0x1eb0>
    87d0:	01000044 	movi	r4,1
    87d4:	200f883a 	mov	r7,r4
    87d8:	d9014515 	stw	r4,1300(sp)
    87dc:	003f4a06 	br	8508 <___vfprintf_internal_r+0x1bc0>
    87e0:	3cc00017 	ldw	r19,0(r7)
    87e4:	39c00104 	addi	r7,r7,4
    87e8:	983d0e0e 	bge	r19,zero,7c24 <___vfprintf_internal_r+0x12dc>
    87ec:	b8c00007 	ldb	r3,0(r23)
    87f0:	04ffffc4 	movi	r19,-1
    87f4:	0038d306 	br	6b44 <___vfprintf_internal_r+0x1fc>
    87f8:	9cc00084 	addi	r19,r19,2
    87fc:	dcc14515 	stw	r19,1300(sp)
    8800:	980f883a 	mov	r7,r19
    8804:	983f400e 	bge	r19,zero,8508 <___vfprintf_internal_r+0x1bc0>
    8808:	003f7306 	br	85d8 <___vfprintf_internal_r+0x1c90>

0000880c <__vfprintf_internal>:
    880c:	00800074 	movhi	r2,1
    8810:	108ea504 	addi	r2,r2,14996
    8814:	2013883a 	mov	r9,r4
    8818:	11000017 	ldw	r4,0(r2)
    881c:	2805883a 	mov	r2,r5
    8820:	300f883a 	mov	r7,r6
    8824:	480b883a 	mov	r5,r9
    8828:	100d883a 	mov	r6,r2
    882c:	00069481 	jmpi	6948 <___vfprintf_internal_r>

00008830 <_write_r>:
    8830:	defffd04 	addi	sp,sp,-12
    8834:	dc000015 	stw	r16,0(sp)
    8838:	04000074 	movhi	r16,1
    883c:	84157704 	addi	r16,r16,21980
    8840:	dc400115 	stw	r17,4(sp)
    8844:	80000015 	stw	zero,0(r16)
    8848:	2023883a 	mov	r17,r4
    884c:	2809883a 	mov	r4,r5
    8850:	300b883a 	mov	r5,r6
    8854:	380d883a 	mov	r6,r7
    8858:	dfc00215 	stw	ra,8(sp)
    885c:	000e4f80 	call	e4f8 <write>
    8860:	1007883a 	mov	r3,r2
    8864:	00bfffc4 	movi	r2,-1
    8868:	18800626 	beq	r3,r2,8884 <_write_r+0x54>
    886c:	1805883a 	mov	r2,r3
    8870:	dfc00217 	ldw	ra,8(sp)
    8874:	dc400117 	ldw	r17,4(sp)
    8878:	dc000017 	ldw	r16,0(sp)
    887c:	dec00304 	addi	sp,sp,12
    8880:	f800283a 	ret
    8884:	80800017 	ldw	r2,0(r16)
    8888:	103ff826 	beq	r2,zero,886c <_write_r+0x3c>
    888c:	88800015 	stw	r2,0(r17)
    8890:	1805883a 	mov	r2,r3
    8894:	dfc00217 	ldw	ra,8(sp)
    8898:	dc400117 	ldw	r17,4(sp)
    889c:	dc000017 	ldw	r16,0(sp)
    88a0:	dec00304 	addi	sp,sp,12
    88a4:	f800283a 	ret

000088a8 <__swsetup_r>:
    88a8:	00800074 	movhi	r2,1
    88ac:	108ea504 	addi	r2,r2,14996
    88b0:	10c00017 	ldw	r3,0(r2)
    88b4:	defffd04 	addi	sp,sp,-12
    88b8:	dc400115 	stw	r17,4(sp)
    88bc:	dc000015 	stw	r16,0(sp)
    88c0:	dfc00215 	stw	ra,8(sp)
    88c4:	2023883a 	mov	r17,r4
    88c8:	2821883a 	mov	r16,r5
    88cc:	18000226 	beq	r3,zero,88d8 <__swsetup_r+0x30>
    88d0:	18800e17 	ldw	r2,56(r3)
    88d4:	10001f26 	beq	r2,zero,8954 <__swsetup_r+0xac>
    88d8:	8100030b 	ldhu	r4,12(r16)
    88dc:	2080020c 	andi	r2,r4,8
    88e0:	10002826 	beq	r2,zero,8984 <__swsetup_r+0xdc>
    88e4:	81400417 	ldw	r5,16(r16)
    88e8:	28001d26 	beq	r5,zero,8960 <__swsetup_r+0xb8>
    88ec:	2080004c 	andi	r2,r4,1
    88f0:	1005003a 	cmpeq	r2,r2,zero
    88f4:	10000b26 	beq	r2,zero,8924 <__swsetup_r+0x7c>
    88f8:	2080008c 	andi	r2,r4,2
    88fc:	10001226 	beq	r2,zero,8948 <__swsetup_r+0xa0>
    8900:	0005883a 	mov	r2,zero
    8904:	80800215 	stw	r2,8(r16)
    8908:	28000b26 	beq	r5,zero,8938 <__swsetup_r+0x90>
    890c:	0005883a 	mov	r2,zero
    8910:	dfc00217 	ldw	ra,8(sp)
    8914:	dc400117 	ldw	r17,4(sp)
    8918:	dc000017 	ldw	r16,0(sp)
    891c:	dec00304 	addi	sp,sp,12
    8920:	f800283a 	ret
    8924:	80800517 	ldw	r2,20(r16)
    8928:	80000215 	stw	zero,8(r16)
    892c:	0085c83a 	sub	r2,zero,r2
    8930:	80800615 	stw	r2,24(r16)
    8934:	283ff51e 	bne	r5,zero,890c <__swsetup_r+0x64>
    8938:	2080200c 	andi	r2,r4,128
    893c:	103ff326 	beq	r2,zero,890c <__swsetup_r+0x64>
    8940:	00bfffc4 	movi	r2,-1
    8944:	003ff206 	br	8910 <__swsetup_r+0x68>
    8948:	80800517 	ldw	r2,20(r16)
    894c:	80800215 	stw	r2,8(r16)
    8950:	003fed06 	br	8908 <__swsetup_r+0x60>
    8954:	1809883a 	mov	r4,r3
    8958:	00053f00 	call	53f0 <__sinit>
    895c:	003fde06 	br	88d8 <__swsetup_r+0x30>
    8960:	20c0a00c 	andi	r3,r4,640
    8964:	00808004 	movi	r2,512
    8968:	18bfe026 	beq	r3,r2,88ec <__swsetup_r+0x44>
    896c:	8809883a 	mov	r4,r17
    8970:	800b883a 	mov	r5,r16
    8974:	000afb80 	call	afb8 <__smakebuf_r>
    8978:	8100030b 	ldhu	r4,12(r16)
    897c:	81400417 	ldw	r5,16(r16)
    8980:	003fda06 	br	88ec <__swsetup_r+0x44>
    8984:	2080040c 	andi	r2,r4,16
    8988:	103fed26 	beq	r2,zero,8940 <__swsetup_r+0x98>
    898c:	2080010c 	andi	r2,r4,4
    8990:	10001226 	beq	r2,zero,89dc <__swsetup_r+0x134>
    8994:	81400c17 	ldw	r5,48(r16)
    8998:	28000526 	beq	r5,zero,89b0 <__swsetup_r+0x108>
    899c:	80801004 	addi	r2,r16,64
    89a0:	28800226 	beq	r5,r2,89ac <__swsetup_r+0x104>
    89a4:	8809883a 	mov	r4,r17
    89a8:	000a6cc0 	call	a6cc <_free_r>
    89ac:	80000c15 	stw	zero,48(r16)
    89b0:	8080030b 	ldhu	r2,12(r16)
    89b4:	81400417 	ldw	r5,16(r16)
    89b8:	80000115 	stw	zero,4(r16)
    89bc:	10bff6cc 	andi	r2,r2,65499
    89c0:	8080030d 	sth	r2,12(r16)
    89c4:	81400015 	stw	r5,0(r16)
    89c8:	8080030b 	ldhu	r2,12(r16)
    89cc:	10800214 	ori	r2,r2,8
    89d0:	113fffcc 	andi	r4,r2,65535
    89d4:	8080030d 	sth	r2,12(r16)
    89d8:	003fc306 	br	88e8 <__swsetup_r+0x40>
    89dc:	81400417 	ldw	r5,16(r16)
    89e0:	003ff906 	br	89c8 <__swsetup_r+0x120>

000089e4 <_close_r>:
    89e4:	defffd04 	addi	sp,sp,-12
    89e8:	dc000015 	stw	r16,0(sp)
    89ec:	04000074 	movhi	r16,1
    89f0:	84157704 	addi	r16,r16,21980
    89f4:	dc400115 	stw	r17,4(sp)
    89f8:	80000015 	stw	zero,0(r16)
    89fc:	2023883a 	mov	r17,r4
    8a00:	2809883a 	mov	r4,r5
    8a04:	dfc00215 	stw	ra,8(sp)
    8a08:	000db6c0 	call	db6c <close>
    8a0c:	1007883a 	mov	r3,r2
    8a10:	00bfffc4 	movi	r2,-1
    8a14:	18800626 	beq	r3,r2,8a30 <_close_r+0x4c>
    8a18:	1805883a 	mov	r2,r3
    8a1c:	dfc00217 	ldw	ra,8(sp)
    8a20:	dc400117 	ldw	r17,4(sp)
    8a24:	dc000017 	ldw	r16,0(sp)
    8a28:	dec00304 	addi	sp,sp,12
    8a2c:	f800283a 	ret
    8a30:	80800017 	ldw	r2,0(r16)
    8a34:	103ff826 	beq	r2,zero,8a18 <_close_r+0x34>
    8a38:	88800015 	stw	r2,0(r17)
    8a3c:	1805883a 	mov	r2,r3
    8a40:	dfc00217 	ldw	ra,8(sp)
    8a44:	dc400117 	ldw	r17,4(sp)
    8a48:	dc000017 	ldw	r16,0(sp)
    8a4c:	dec00304 	addi	sp,sp,12
    8a50:	f800283a 	ret

00008a54 <quorem>:
    8a54:	28c00417 	ldw	r3,16(r5)
    8a58:	20800417 	ldw	r2,16(r4)
    8a5c:	defff104 	addi	sp,sp,-60
    8a60:	dfc00e15 	stw	ra,56(sp)
    8a64:	df000d15 	stw	fp,52(sp)
    8a68:	ddc00c15 	stw	r23,48(sp)
    8a6c:	dd800b15 	stw	r22,44(sp)
    8a70:	dd400a15 	stw	r21,40(sp)
    8a74:	dd000915 	stw	r20,36(sp)
    8a78:	dcc00815 	stw	r19,32(sp)
    8a7c:	dc800715 	stw	r18,28(sp)
    8a80:	dc400615 	stw	r17,24(sp)
    8a84:	dc000515 	stw	r16,20(sp)
    8a88:	d9000315 	stw	r4,12(sp)
    8a8c:	d9400415 	stw	r5,16(sp)
    8a90:	10c07f16 	blt	r2,r3,8c90 <quorem+0x23c>
    8a94:	1d3fffc4 	addi	r20,r3,-1
    8a98:	d8c00417 	ldw	r3,16(sp)
    8a9c:	d9000317 	ldw	r4,12(sp)
    8aa0:	a505883a 	add	r2,r20,r20
    8aa4:	1085883a 	add	r2,r2,r2
    8aa8:	1cc00504 	addi	r19,r3,20
    8aac:	25c00504 	addi	r23,r4,20
    8ab0:	98ad883a 	add	r22,r19,r2
    8ab4:	15c7883a 	add	r3,r2,r23
    8ab8:	b1400017 	ldw	r5,0(r22)
    8abc:	19000017 	ldw	r4,0(r3)
    8ac0:	d8c00015 	stw	r3,0(sp)
    8ac4:	29400044 	addi	r5,r5,1
    8ac8:	d9000215 	stw	r4,8(sp)
    8acc:	00049440 	call	4944 <__udivsi3>
    8ad0:	1039883a 	mov	fp,r2
    8ad4:	10003d1e 	bne	r2,zero,8bcc <quorem+0x178>
    8ad8:	d9400417 	ldw	r5,16(sp)
    8adc:	d9000317 	ldw	r4,12(sp)
    8ae0:	000b3880 	call	b388 <__mcmp>
    8ae4:	10002c16 	blt	r2,zero,8b98 <quorem+0x144>
    8ae8:	e7000044 	addi	fp,fp,1
    8aec:	b80f883a 	mov	r7,r23
    8af0:	0011883a 	mov	r8,zero
    8af4:	0009883a 	mov	r4,zero
    8af8:	99400017 	ldw	r5,0(r19)
    8afc:	38c00017 	ldw	r3,0(r7)
    8b00:	9cc00104 	addi	r19,r19,4
    8b04:	28bfffcc 	andi	r2,r5,65535
    8b08:	2085883a 	add	r2,r4,r2
    8b0c:	11bfffcc 	andi	r6,r2,65535
    8b10:	193fffcc 	andi	r4,r3,65535
    8b14:	1004d43a 	srli	r2,r2,16
    8b18:	280ad43a 	srli	r5,r5,16
    8b1c:	2189c83a 	sub	r4,r4,r6
    8b20:	2209883a 	add	r4,r4,r8
    8b24:	1806d43a 	srli	r3,r3,16
    8b28:	288b883a 	add	r5,r5,r2
    8b2c:	200dd43a 	srai	r6,r4,16
    8b30:	28bfffcc 	andi	r2,r5,65535
    8b34:	1887c83a 	sub	r3,r3,r2
    8b38:	1987883a 	add	r3,r3,r6
    8b3c:	3900000d 	sth	r4,0(r7)
    8b40:	38c0008d 	sth	r3,2(r7)
    8b44:	2808d43a 	srli	r4,r5,16
    8b48:	39c00104 	addi	r7,r7,4
    8b4c:	1811d43a 	srai	r8,r3,16
    8b50:	b4ffe92e 	bgeu	r22,r19,8af8 <quorem+0xa4>
    8b54:	a505883a 	add	r2,r20,r20
    8b58:	1085883a 	add	r2,r2,r2
    8b5c:	b885883a 	add	r2,r23,r2
    8b60:	10c00017 	ldw	r3,0(r2)
    8b64:	18000c1e 	bne	r3,zero,8b98 <quorem+0x144>
    8b68:	113fff04 	addi	r4,r2,-4
    8b6c:	b900082e 	bgeu	r23,r4,8b90 <quorem+0x13c>
    8b70:	10bfff17 	ldw	r2,-4(r2)
    8b74:	10000326 	beq	r2,zero,8b84 <quorem+0x130>
    8b78:	00000506 	br	8b90 <quorem+0x13c>
    8b7c:	20800017 	ldw	r2,0(r4)
    8b80:	1000031e 	bne	r2,zero,8b90 <quorem+0x13c>
    8b84:	213fff04 	addi	r4,r4,-4
    8b88:	a53fffc4 	addi	r20,r20,-1
    8b8c:	b93ffb36 	bltu	r23,r4,8b7c <quorem+0x128>
    8b90:	d9000317 	ldw	r4,12(sp)
    8b94:	25000415 	stw	r20,16(r4)
    8b98:	e005883a 	mov	r2,fp
    8b9c:	dfc00e17 	ldw	ra,56(sp)
    8ba0:	df000d17 	ldw	fp,52(sp)
    8ba4:	ddc00c17 	ldw	r23,48(sp)
    8ba8:	dd800b17 	ldw	r22,44(sp)
    8bac:	dd400a17 	ldw	r21,40(sp)
    8bb0:	dd000917 	ldw	r20,36(sp)
    8bb4:	dcc00817 	ldw	r19,32(sp)
    8bb8:	dc800717 	ldw	r18,28(sp)
    8bbc:	dc400617 	ldw	r17,24(sp)
    8bc0:	dc000517 	ldw	r16,20(sp)
    8bc4:	dec00f04 	addi	sp,sp,60
    8bc8:	f800283a 	ret
    8bcc:	b823883a 	mov	r17,r23
    8bd0:	9825883a 	mov	r18,r19
    8bd4:	d8000115 	stw	zero,4(sp)
    8bd8:	002b883a 	mov	r21,zero
    8bdc:	94000017 	ldw	r16,0(r18)
    8be0:	e009883a 	mov	r4,fp
    8be4:	94800104 	addi	r18,r18,4
    8be8:	817fffcc 	andi	r5,r16,65535
    8bec:	00049540 	call	4954 <__mulsi3>
    8bf0:	800ad43a 	srli	r5,r16,16
    8bf4:	e009883a 	mov	r4,fp
    8bf8:	a8a1883a 	add	r16,r21,r2
    8bfc:	00049540 	call	4954 <__mulsi3>
    8c00:	89000017 	ldw	r4,0(r17)
    8c04:	80ffffcc 	andi	r3,r16,65535
    8c08:	8020d43a 	srli	r16,r16,16
    8c0c:	217fffcc 	andi	r5,r4,65535
    8c10:	28cbc83a 	sub	r5,r5,r3
    8c14:	d8c00117 	ldw	r3,4(sp)
    8c18:	2008d43a 	srli	r4,r4,16
    8c1c:	1405883a 	add	r2,r2,r16
    8c20:	28cb883a 	add	r5,r5,r3
    8c24:	280dd43a 	srai	r6,r5,16
    8c28:	10ffffcc 	andi	r3,r2,65535
    8c2c:	20c9c83a 	sub	r4,r4,r3
    8c30:	2189883a 	add	r4,r4,r6
    8c34:	8900008d 	sth	r4,2(r17)
    8c38:	2009d43a 	srai	r4,r4,16
    8c3c:	8940000d 	sth	r5,0(r17)
    8c40:	102ad43a 	srli	r21,r2,16
    8c44:	8c400104 	addi	r17,r17,4
    8c48:	d9000115 	stw	r4,4(sp)
    8c4c:	b4bfe32e 	bgeu	r22,r18,8bdc <quorem+0x188>
    8c50:	d9000217 	ldw	r4,8(sp)
    8c54:	203fa01e 	bne	r4,zero,8ad8 <quorem+0x84>
    8c58:	d8800017 	ldw	r2,0(sp)
    8c5c:	10ffff04 	addi	r3,r2,-4
    8c60:	b8c0082e 	bgeu	r23,r3,8c84 <quorem+0x230>
    8c64:	10bfff17 	ldw	r2,-4(r2)
    8c68:	10000326 	beq	r2,zero,8c78 <quorem+0x224>
    8c6c:	00000506 	br	8c84 <quorem+0x230>
    8c70:	18800017 	ldw	r2,0(r3)
    8c74:	1000031e 	bne	r2,zero,8c84 <quorem+0x230>
    8c78:	18ffff04 	addi	r3,r3,-4
    8c7c:	a53fffc4 	addi	r20,r20,-1
    8c80:	b8fffb36 	bltu	r23,r3,8c70 <quorem+0x21c>
    8c84:	d8c00317 	ldw	r3,12(sp)
    8c88:	1d000415 	stw	r20,16(r3)
    8c8c:	003f9206 	br	8ad8 <quorem+0x84>
    8c90:	0005883a 	mov	r2,zero
    8c94:	003fc106 	br	8b9c <quorem+0x148>

00008c98 <_dtoa_r>:
    8c98:	22001017 	ldw	r8,64(r4)
    8c9c:	deffda04 	addi	sp,sp,-152
    8ca0:	dd402115 	stw	r21,132(sp)
    8ca4:	dd002015 	stw	r20,128(sp)
    8ca8:	dc801e15 	stw	r18,120(sp)
    8cac:	dc401d15 	stw	r17,116(sp)
    8cb0:	dfc02515 	stw	ra,148(sp)
    8cb4:	df002415 	stw	fp,144(sp)
    8cb8:	ddc02315 	stw	r23,140(sp)
    8cbc:	dd802215 	stw	r22,136(sp)
    8cc0:	dcc01f15 	stw	r19,124(sp)
    8cc4:	dc001c15 	stw	r16,112(sp)
    8cc8:	d9001615 	stw	r4,88(sp)
    8ccc:	3023883a 	mov	r17,r6
    8cd0:	2829883a 	mov	r20,r5
    8cd4:	d9c01715 	stw	r7,92(sp)
    8cd8:	dc802817 	ldw	r18,160(sp)
    8cdc:	302b883a 	mov	r21,r6
    8ce0:	40000a26 	beq	r8,zero,8d0c <_dtoa_r+0x74>
    8ce4:	20801117 	ldw	r2,68(r4)
    8ce8:	400b883a 	mov	r5,r8
    8cec:	40800115 	stw	r2,4(r8)
    8cf0:	20c01117 	ldw	r3,68(r4)
    8cf4:	00800044 	movi	r2,1
    8cf8:	10c4983a 	sll	r2,r2,r3
    8cfc:	40800215 	stw	r2,8(r8)
    8d00:	000b22c0 	call	b22c <_Bfree>
    8d04:	d8c01617 	ldw	r3,88(sp)
    8d08:	18001015 	stw	zero,64(r3)
    8d0c:	8800a316 	blt	r17,zero,8f9c <_dtoa_r+0x304>
    8d10:	90000015 	stw	zero,0(r18)
    8d14:	a8dffc2c 	andhi	r3,r21,32752
    8d18:	009ffc34 	movhi	r2,32752
    8d1c:	18809126 	beq	r3,r2,8f64 <_dtoa_r+0x2cc>
    8d20:	000d883a 	mov	r6,zero
    8d24:	000f883a 	mov	r7,zero
    8d28:	a009883a 	mov	r4,r20
    8d2c:	a80b883a 	mov	r5,r21
    8d30:	dd001215 	stw	r20,72(sp)
    8d34:	dd401315 	stw	r21,76(sp)
    8d38:	000d8c80 	call	d8c8 <__nedf2>
    8d3c:	1000171e 	bne	r2,zero,8d9c <_dtoa_r+0x104>
    8d40:	d9802717 	ldw	r6,156(sp)
    8d44:	00800044 	movi	r2,1
    8d48:	30800015 	stw	r2,0(r6)
    8d4c:	d8802917 	ldw	r2,164(sp)
    8d50:	10029b26 	beq	r2,zero,97c0 <_dtoa_r+0xb28>
    8d54:	d9002917 	ldw	r4,164(sp)
    8d58:	00800074 	movhi	r2,1
    8d5c:	10873d44 	addi	r2,r2,7413
    8d60:	10ffffc4 	addi	r3,r2,-1
    8d64:	20800015 	stw	r2,0(r4)
    8d68:	1805883a 	mov	r2,r3
    8d6c:	dfc02517 	ldw	ra,148(sp)
    8d70:	df002417 	ldw	fp,144(sp)
    8d74:	ddc02317 	ldw	r23,140(sp)
    8d78:	dd802217 	ldw	r22,136(sp)
    8d7c:	dd402117 	ldw	r21,132(sp)
    8d80:	dd002017 	ldw	r20,128(sp)
    8d84:	dcc01f17 	ldw	r19,124(sp)
    8d88:	dc801e17 	ldw	r18,120(sp)
    8d8c:	dc401d17 	ldw	r17,116(sp)
    8d90:	dc001c17 	ldw	r16,112(sp)
    8d94:	dec02604 	addi	sp,sp,152
    8d98:	f800283a 	ret
    8d9c:	d9001617 	ldw	r4,88(sp)
    8da0:	d9401217 	ldw	r5,72(sp)
    8da4:	d8800104 	addi	r2,sp,4
    8da8:	a80d883a 	mov	r6,r21
    8dac:	d9c00204 	addi	r7,sp,8
    8db0:	d8800015 	stw	r2,0(sp)
    8db4:	000b8680 	call	b868 <__d2b>
    8db8:	d8800715 	stw	r2,28(sp)
    8dbc:	a804d53a 	srli	r2,r21,20
    8dc0:	1101ffcc 	andi	r4,r2,2047
    8dc4:	20008626 	beq	r4,zero,8fe0 <_dtoa_r+0x348>
    8dc8:	d8c01217 	ldw	r3,72(sp)
    8dcc:	00800434 	movhi	r2,16
    8dd0:	10bfffc4 	addi	r2,r2,-1
    8dd4:	ddc00117 	ldw	r23,4(sp)
    8dd8:	a884703a 	and	r2,r21,r2
    8ddc:	1811883a 	mov	r8,r3
    8de0:	124ffc34 	orhi	r9,r2,16368
    8de4:	25bf0044 	addi	r22,r4,-1023
    8de8:	d8000815 	stw	zero,32(sp)
    8dec:	0005883a 	mov	r2,zero
    8df0:	00cffe34 	movhi	r3,16376
    8df4:	480b883a 	mov	r5,r9
    8df8:	4009883a 	mov	r4,r8
    8dfc:	180f883a 	mov	r7,r3
    8e00:	100d883a 	mov	r6,r2
    8e04:	0003ce40 	call	3ce4 <__subdf3>
    8e08:	0218dbf4 	movhi	r8,25455
    8e0c:	4210d844 	addi	r8,r8,17249
    8e10:	024ff4f4 	movhi	r9,16339
    8e14:	4a61e9c4 	addi	r9,r9,-30809
    8e18:	480f883a 	mov	r7,r9
    8e1c:	400d883a 	mov	r6,r8
    8e20:	180b883a 	mov	r5,r3
    8e24:	1009883a 	mov	r4,r2
    8e28:	0003dd80 	call	3dd8 <__muldf3>
    8e2c:	0222d874 	movhi	r8,35681
    8e30:	42322cc4 	addi	r8,r8,-14157
    8e34:	024ff1f4 	movhi	r9,16327
    8e38:	4a628a04 	addi	r9,r9,-30168
    8e3c:	480f883a 	mov	r7,r9
    8e40:	400d883a 	mov	r6,r8
    8e44:	180b883a 	mov	r5,r3
    8e48:	1009883a 	mov	r4,r2
    8e4c:	0003d640 	call	3d64 <__adddf3>
    8e50:	b009883a 	mov	r4,r22
    8e54:	1021883a 	mov	r16,r2
    8e58:	1823883a 	mov	r17,r3
    8e5c:	000458c0 	call	458c <__floatsidf>
    8e60:	021427f4 	movhi	r8,20639
    8e64:	421e7ec4 	addi	r8,r8,31227
    8e68:	024ff4f4 	movhi	r9,16339
    8e6c:	4a5104c4 	addi	r9,r9,17427
    8e70:	480f883a 	mov	r7,r9
    8e74:	400d883a 	mov	r6,r8
    8e78:	180b883a 	mov	r5,r3
    8e7c:	1009883a 	mov	r4,r2
    8e80:	0003dd80 	call	3dd8 <__muldf3>
    8e84:	180f883a 	mov	r7,r3
    8e88:	880b883a 	mov	r5,r17
    8e8c:	100d883a 	mov	r6,r2
    8e90:	8009883a 	mov	r4,r16
    8e94:	0003d640 	call	3d64 <__adddf3>
    8e98:	1009883a 	mov	r4,r2
    8e9c:	180b883a 	mov	r5,r3
    8ea0:	1021883a 	mov	r16,r2
    8ea4:	1823883a 	mov	r17,r3
    8ea8:	00046840 	call	4684 <__fixdfsi>
    8eac:	000d883a 	mov	r6,zero
    8eb0:	000f883a 	mov	r7,zero
    8eb4:	8009883a 	mov	r4,r16
    8eb8:	880b883a 	mov	r5,r17
    8ebc:	d8800d15 	stw	r2,52(sp)
    8ec0:	000d9500 	call	d950 <__ltdf2>
    8ec4:	10031716 	blt	r2,zero,9b24 <_dtoa_r+0xe8c>
    8ec8:	d8c00d17 	ldw	r3,52(sp)
    8ecc:	00800584 	movi	r2,22
    8ed0:	10c1482e 	bgeu	r2,r3,93f4 <_dtoa_r+0x75c>
    8ed4:	01000044 	movi	r4,1
    8ed8:	d9000c15 	stw	r4,48(sp)
    8edc:	bd85c83a 	sub	r2,r23,r22
    8ee0:	11bfffc4 	addi	r6,r2,-1
    8ee4:	30030b16 	blt	r6,zero,9b14 <_dtoa_r+0xe7c>
    8ee8:	d9800a15 	stw	r6,40(sp)
    8eec:	d8001115 	stw	zero,68(sp)
    8ef0:	d8c00d17 	ldw	r3,52(sp)
    8ef4:	1802ff16 	blt	r3,zero,9af4 <_dtoa_r+0xe5c>
    8ef8:	d9000a17 	ldw	r4,40(sp)
    8efc:	d8c00915 	stw	r3,36(sp)
    8f00:	d8001015 	stw	zero,64(sp)
    8f04:	20c9883a 	add	r4,r4,r3
    8f08:	d9000a15 	stw	r4,40(sp)
    8f0c:	d9001717 	ldw	r4,92(sp)
    8f10:	00800244 	movi	r2,9
    8f14:	11004636 	bltu	r2,r4,9030 <_dtoa_r+0x398>
    8f18:	00800144 	movi	r2,5
    8f1c:	11020416 	blt	r2,r4,9730 <_dtoa_r+0xa98>
    8f20:	04400044 	movi	r17,1
    8f24:	d8c01717 	ldw	r3,92(sp)
    8f28:	00800144 	movi	r2,5
    8f2c:	10c1ed36 	bltu	r2,r3,96e4 <_dtoa_r+0xa4c>
    8f30:	18c5883a 	add	r2,r3,r3
    8f34:	1085883a 	add	r2,r2,r2
    8f38:	00c00074 	movhi	r3,1
    8f3c:	18e3d304 	addi	r3,r3,-28852
    8f40:	10c5883a 	add	r2,r2,r3
    8f44:	11000017 	ldw	r4,0(r2)
    8f48:	2000683a 	jmp	r4
    8f4c:	00009038 	rdprs	zero,zero,576
    8f50:	00009038 	rdprs	zero,zero,576
    8f54:	00009a38 	rdprs	zero,zero,616
    8f58:	00009a10 	cmplti	zero,zero,616
    8f5c:	00009a54 	movui	zero,617
    8f60:	00009a60 	cmpeqi	zero,zero,617
    8f64:	d9002717 	ldw	r4,156(sp)
    8f68:	0089c3c4 	movi	r2,9999
    8f6c:	20800015 	stw	r2,0(r4)
    8f70:	a0001026 	beq	r20,zero,8fb4 <_dtoa_r+0x31c>
    8f74:	00c00074 	movhi	r3,1
    8f78:	18c74904 	addi	r3,r3,7460
    8f7c:	d9802917 	ldw	r6,164(sp)
    8f80:	303f7926 	beq	r6,zero,8d68 <_dtoa_r+0xd0>
    8f84:	188000c7 	ldb	r2,3(r3)
    8f88:	190000c4 	addi	r4,r3,3
    8f8c:	1000101e 	bne	r2,zero,8fd0 <_dtoa_r+0x338>
    8f90:	d8802917 	ldw	r2,164(sp)
    8f94:	11000015 	stw	r4,0(r2)
    8f98:	003f7306 	br	8d68 <_dtoa_r+0xd0>
    8f9c:	00a00034 	movhi	r2,32768
    8fa0:	10bfffc4 	addi	r2,r2,-1
    8fa4:	00c00044 	movi	r3,1
    8fa8:	88aa703a 	and	r21,r17,r2
    8fac:	90c00015 	stw	r3,0(r18)
    8fb0:	003f5806 	br	8d14 <_dtoa_r+0x7c>
    8fb4:	00800434 	movhi	r2,16
    8fb8:	10bfffc4 	addi	r2,r2,-1
    8fbc:	a884703a 	and	r2,r21,r2
    8fc0:	103fec1e 	bne	r2,zero,8f74 <_dtoa_r+0x2dc>
    8fc4:	00c00074 	movhi	r3,1
    8fc8:	18c74604 	addi	r3,r3,7448
    8fcc:	003feb06 	br	8f7c <_dtoa_r+0x2e4>
    8fd0:	d8802917 	ldw	r2,164(sp)
    8fd4:	19000204 	addi	r4,r3,8
    8fd8:	11000015 	stw	r4,0(r2)
    8fdc:	003f6206 	br	8d68 <_dtoa_r+0xd0>
    8fe0:	ddc00117 	ldw	r23,4(sp)
    8fe4:	d8800217 	ldw	r2,8(sp)
    8fe8:	01000804 	movi	r4,32
    8fec:	b8c10c84 	addi	r3,r23,1074
    8ff0:	18a3883a 	add	r17,r3,r2
    8ff4:	2441b80e 	bge	r4,r17,96d8 <_dtoa_r+0xa40>
    8ff8:	00c01004 	movi	r3,64
    8ffc:	1c47c83a 	sub	r3,r3,r17
    9000:	88bff804 	addi	r2,r17,-32
    9004:	a8c6983a 	sll	r3,r21,r3
    9008:	a084d83a 	srl	r2,r20,r2
    900c:	1888b03a 	or	r4,r3,r2
    9010:	000d9d80 	call	d9d8 <__floatunsidf>
    9014:	1011883a 	mov	r8,r2
    9018:	00bf8434 	movhi	r2,65040
    901c:	01000044 	movi	r4,1
    9020:	10d3883a 	add	r9,r2,r3
    9024:	8dbef344 	addi	r22,r17,-1075
    9028:	d9000815 	stw	r4,32(sp)
    902c:	003f6f06 	br	8dec <_dtoa_r+0x154>
    9030:	d8001715 	stw	zero,92(sp)
    9034:	04400044 	movi	r17,1
    9038:	00bfffc4 	movi	r2,-1
    903c:	00c00044 	movi	r3,1
    9040:	d8800e15 	stw	r2,56(sp)
    9044:	d8002615 	stw	zero,152(sp)
    9048:	d8800f15 	stw	r2,60(sp)
    904c:	d8c00b15 	stw	r3,44(sp)
    9050:	1021883a 	mov	r16,r2
    9054:	d8801617 	ldw	r2,88(sp)
    9058:	10001115 	stw	zero,68(r2)
    905c:	d8801617 	ldw	r2,88(sp)
    9060:	11401117 	ldw	r5,68(r2)
    9064:	1009883a 	mov	r4,r2
    9068:	000b7ac0 	call	b7ac <_Balloc>
    906c:	d8c01617 	ldw	r3,88(sp)
    9070:	d8800515 	stw	r2,20(sp)
    9074:	18801015 	stw	r2,64(r3)
    9078:	00800384 	movi	r2,14
    907c:	14006836 	bltu	r2,r16,9220 <_dtoa_r+0x588>
    9080:	8805003a 	cmpeq	r2,r17,zero
    9084:	1000661e 	bne	r2,zero,9220 <_dtoa_r+0x588>
    9088:	d9000d17 	ldw	r4,52(sp)
    908c:	0102300e 	bge	zero,r4,9950 <_dtoa_r+0xcb8>
    9090:	208003cc 	andi	r2,r4,15
    9094:	100490fa 	slli	r2,r2,3
    9098:	2025d13a 	srai	r18,r4,4
    909c:	00c00074 	movhi	r3,1
    90a0:	18c75a04 	addi	r3,r3,7528
    90a4:	10c5883a 	add	r2,r2,r3
    90a8:	90c0040c 	andi	r3,r18,16
    90ac:	14000017 	ldw	r16,0(r2)
    90b0:	14400117 	ldw	r17,4(r2)
    90b4:	18036a1e 	bne	r3,zero,9e60 <_dtoa_r+0x11c8>
    90b8:	05800084 	movi	r22,2
    90bc:	90001026 	beq	r18,zero,9100 <_dtoa_r+0x468>
    90c0:	04c00074 	movhi	r19,1
    90c4:	9cc78c04 	addi	r19,r19,7728
    90c8:	9080004c 	andi	r2,r18,1
    90cc:	1005003a 	cmpeq	r2,r2,zero
    90d0:	1000081e 	bne	r2,zero,90f4 <_dtoa_r+0x45c>
    90d4:	99800017 	ldw	r6,0(r19)
    90d8:	99c00117 	ldw	r7,4(r19)
    90dc:	880b883a 	mov	r5,r17
    90e0:	8009883a 	mov	r4,r16
    90e4:	0003dd80 	call	3dd8 <__muldf3>
    90e8:	1021883a 	mov	r16,r2
    90ec:	b5800044 	addi	r22,r22,1
    90f0:	1823883a 	mov	r17,r3
    90f4:	9025d07a 	srai	r18,r18,1
    90f8:	9cc00204 	addi	r19,r19,8
    90fc:	903ff21e 	bne	r18,zero,90c8 <_dtoa_r+0x430>
    9100:	a80b883a 	mov	r5,r21
    9104:	a009883a 	mov	r4,r20
    9108:	880f883a 	mov	r7,r17
    910c:	800d883a 	mov	r6,r16
    9110:	000419c0 	call	419c <__divdf3>
    9114:	1029883a 	mov	r20,r2
    9118:	182b883a 	mov	r21,r3
    911c:	d8c00c17 	ldw	r3,48(sp)
    9120:	1805003a 	cmpeq	r2,r3,zero
    9124:	1000081e 	bne	r2,zero,9148 <_dtoa_r+0x4b0>
    9128:	0005883a 	mov	r2,zero
    912c:	00cffc34 	movhi	r3,16368
    9130:	180f883a 	mov	r7,r3
    9134:	a009883a 	mov	r4,r20
    9138:	a80b883a 	mov	r5,r21
    913c:	100d883a 	mov	r6,r2
    9140:	000d9500 	call	d950 <__ltdf2>
    9144:	1003fe16 	blt	r2,zero,a140 <_dtoa_r+0x14a8>
    9148:	b009883a 	mov	r4,r22
    914c:	000458c0 	call	458c <__floatsidf>
    9150:	180b883a 	mov	r5,r3
    9154:	1009883a 	mov	r4,r2
    9158:	a00d883a 	mov	r6,r20
    915c:	a80f883a 	mov	r7,r21
    9160:	0003dd80 	call	3dd8 <__muldf3>
    9164:	0011883a 	mov	r8,zero
    9168:	02500734 	movhi	r9,16412
    916c:	1009883a 	mov	r4,r2
    9170:	180b883a 	mov	r5,r3
    9174:	480f883a 	mov	r7,r9
    9178:	400d883a 	mov	r6,r8
    917c:	0003d640 	call	3d64 <__adddf3>
    9180:	d9000f17 	ldw	r4,60(sp)
    9184:	102d883a 	mov	r22,r2
    9188:	00bf3034 	movhi	r2,64704
    918c:	18b9883a 	add	fp,r3,r2
    9190:	e02f883a 	mov	r23,fp
    9194:	20028f1e 	bne	r4,zero,9bd4 <_dtoa_r+0xf3c>
    9198:	0005883a 	mov	r2,zero
    919c:	00d00534 	movhi	r3,16404
    91a0:	a009883a 	mov	r4,r20
    91a4:	a80b883a 	mov	r5,r21
    91a8:	180f883a 	mov	r7,r3
    91ac:	100d883a 	mov	r6,r2
    91b0:	0003ce40 	call	3ce4 <__subdf3>
    91b4:	1009883a 	mov	r4,r2
    91b8:	e00f883a 	mov	r7,fp
    91bc:	180b883a 	mov	r5,r3
    91c0:	b00d883a 	mov	r6,r22
    91c4:	1025883a 	mov	r18,r2
    91c8:	1827883a 	mov	r19,r3
    91cc:	000447c0 	call	447c <__gtdf2>
    91d0:	00834f16 	blt	zero,r2,9f10 <_dtoa_r+0x1278>
    91d4:	e0e0003c 	xorhi	r3,fp,32768
    91d8:	9009883a 	mov	r4,r18
    91dc:	980b883a 	mov	r5,r19
    91e0:	180f883a 	mov	r7,r3
    91e4:	b00d883a 	mov	r6,r22
    91e8:	000d9500 	call	d950 <__ltdf2>
    91ec:	1000080e 	bge	r2,zero,9210 <_dtoa_r+0x578>
    91f0:	0027883a 	mov	r19,zero
    91f4:	0025883a 	mov	r18,zero
    91f8:	d8802617 	ldw	r2,152(sp)
    91fc:	df000517 	ldw	fp,20(sp)
    9200:	d8000615 	stw	zero,24(sp)
    9204:	0084303a 	nor	r2,zero,r2
    9208:	d8800d15 	stw	r2,52(sp)
    920c:	00019b06 	br	987c <_dtoa_r+0xbe4>
    9210:	d9801217 	ldw	r6,72(sp)
    9214:	d8801317 	ldw	r2,76(sp)
    9218:	3029883a 	mov	r20,r6
    921c:	102b883a 	mov	r21,r2
    9220:	d8c00217 	ldw	r3,8(sp)
    9224:	18008516 	blt	r3,zero,943c <_dtoa_r+0x7a4>
    9228:	d9000d17 	ldw	r4,52(sp)
    922c:	00800384 	movi	r2,14
    9230:	11008216 	blt	r2,r4,943c <_dtoa_r+0x7a4>
    9234:	200490fa 	slli	r2,r4,3
    9238:	d9802617 	ldw	r6,152(sp)
    923c:	00c00074 	movhi	r3,1
    9240:	18c75a04 	addi	r3,r3,7528
    9244:	10c5883a 	add	r2,r2,r3
    9248:	14800017 	ldw	r18,0(r2)
    924c:	14c00117 	ldw	r19,4(r2)
    9250:	30031e16 	blt	r6,zero,9ecc <_dtoa_r+0x1234>
    9254:	d9000517 	ldw	r4,20(sp)
    9258:	d8c00f17 	ldw	r3,60(sp)
    925c:	a823883a 	mov	r17,r21
    9260:	a021883a 	mov	r16,r20
    9264:	192b883a 	add	r21,r3,r4
    9268:	2039883a 	mov	fp,r4
    926c:	00000f06 	br	92ac <_dtoa_r+0x614>
    9270:	0005883a 	mov	r2,zero
    9274:	00d00934 	movhi	r3,16420
    9278:	5009883a 	mov	r4,r10
    927c:	580b883a 	mov	r5,r11
    9280:	180f883a 	mov	r7,r3
    9284:	100d883a 	mov	r6,r2
    9288:	0003dd80 	call	3dd8 <__muldf3>
    928c:	180b883a 	mov	r5,r3
    9290:	000d883a 	mov	r6,zero
    9294:	000f883a 	mov	r7,zero
    9298:	1009883a 	mov	r4,r2
    929c:	1021883a 	mov	r16,r2
    92a0:	1823883a 	mov	r17,r3
    92a4:	000d8c80 	call	d8c8 <__nedf2>
    92a8:	10004526 	beq	r2,zero,93c0 <_dtoa_r+0x728>
    92ac:	900d883a 	mov	r6,r18
    92b0:	980f883a 	mov	r7,r19
    92b4:	8009883a 	mov	r4,r16
    92b8:	880b883a 	mov	r5,r17
    92bc:	000419c0 	call	419c <__divdf3>
    92c0:	180b883a 	mov	r5,r3
    92c4:	1009883a 	mov	r4,r2
    92c8:	00046840 	call	4684 <__fixdfsi>
    92cc:	1009883a 	mov	r4,r2
    92d0:	1029883a 	mov	r20,r2
    92d4:	000458c0 	call	458c <__floatsidf>
    92d8:	180f883a 	mov	r7,r3
    92dc:	9009883a 	mov	r4,r18
    92e0:	980b883a 	mov	r5,r19
    92e4:	100d883a 	mov	r6,r2
    92e8:	0003dd80 	call	3dd8 <__muldf3>
    92ec:	180f883a 	mov	r7,r3
    92f0:	880b883a 	mov	r5,r17
    92f4:	8009883a 	mov	r4,r16
    92f8:	100d883a 	mov	r6,r2
    92fc:	0003ce40 	call	3ce4 <__subdf3>
    9300:	1015883a 	mov	r10,r2
    9304:	a0800c04 	addi	r2,r20,48
    9308:	e0800005 	stb	r2,0(fp)
    930c:	e7000044 	addi	fp,fp,1
    9310:	1817883a 	mov	r11,r3
    9314:	e57fd61e 	bne	fp,r21,9270 <_dtoa_r+0x5d8>
    9318:	500d883a 	mov	r6,r10
    931c:	180f883a 	mov	r7,r3
    9320:	5009883a 	mov	r4,r10
    9324:	180b883a 	mov	r5,r3
    9328:	0003d640 	call	3d64 <__adddf3>
    932c:	100d883a 	mov	r6,r2
    9330:	9009883a 	mov	r4,r18
    9334:	980b883a 	mov	r5,r19
    9338:	180f883a 	mov	r7,r3
    933c:	1021883a 	mov	r16,r2
    9340:	1823883a 	mov	r17,r3
    9344:	000d9500 	call	d950 <__ltdf2>
    9348:	10000816 	blt	r2,zero,936c <_dtoa_r+0x6d4>
    934c:	980b883a 	mov	r5,r19
    9350:	800d883a 	mov	r6,r16
    9354:	880f883a 	mov	r7,r17
    9358:	9009883a 	mov	r4,r18
    935c:	00043f40 	call	43f4 <__eqdf2>
    9360:	1000171e 	bne	r2,zero,93c0 <_dtoa_r+0x728>
    9364:	a080004c 	andi	r2,r20,1
    9368:	10001526 	beq	r2,zero,93c0 <_dtoa_r+0x728>
    936c:	d8800d17 	ldw	r2,52(sp)
    9370:	d8800415 	stw	r2,16(sp)
    9374:	e009883a 	mov	r4,fp
    9378:	213fffc4 	addi	r4,r4,-1
    937c:	20c00007 	ldb	r3,0(r4)
    9380:	00800e44 	movi	r2,57
    9384:	1880081e 	bne	r3,r2,93a8 <_dtoa_r+0x710>
    9388:	d8800517 	ldw	r2,20(sp)
    938c:	113ffa1e 	bne	r2,r4,9378 <_dtoa_r+0x6e0>
    9390:	d8c00417 	ldw	r3,16(sp)
    9394:	d9800517 	ldw	r6,20(sp)
    9398:	00800c04 	movi	r2,48
    939c:	18c00044 	addi	r3,r3,1
    93a0:	d8c00415 	stw	r3,16(sp)
    93a4:	30800005 	stb	r2,0(r6)
    93a8:	20800003 	ldbu	r2,0(r4)
    93ac:	d8c00417 	ldw	r3,16(sp)
    93b0:	27000044 	addi	fp,r4,1
    93b4:	10800044 	addi	r2,r2,1
    93b8:	d8c00d15 	stw	r3,52(sp)
    93bc:	20800005 	stb	r2,0(r4)
    93c0:	d9001617 	ldw	r4,88(sp)
    93c4:	d9400717 	ldw	r5,28(sp)
    93c8:	000b22c0 	call	b22c <_Bfree>
    93cc:	e0000005 	stb	zero,0(fp)
    93d0:	d9800d17 	ldw	r6,52(sp)
    93d4:	d8c02717 	ldw	r3,156(sp)
    93d8:	d9002917 	ldw	r4,164(sp)
    93dc:	30800044 	addi	r2,r6,1
    93e0:	18800015 	stw	r2,0(r3)
    93e4:	20029c26 	beq	r4,zero,9e58 <_dtoa_r+0x11c0>
    93e8:	d8c00517 	ldw	r3,20(sp)
    93ec:	27000015 	stw	fp,0(r4)
    93f0:	003e5d06 	br	8d68 <_dtoa_r+0xd0>
    93f4:	d9800d17 	ldw	r6,52(sp)
    93f8:	00c00074 	movhi	r3,1
    93fc:	18c75a04 	addi	r3,r3,7528
    9400:	d9001217 	ldw	r4,72(sp)
    9404:	300490fa 	slli	r2,r6,3
    9408:	d9401317 	ldw	r5,76(sp)
    940c:	10c5883a 	add	r2,r2,r3
    9410:	12000017 	ldw	r8,0(r2)
    9414:	12400117 	ldw	r9,4(r2)
    9418:	400d883a 	mov	r6,r8
    941c:	480f883a 	mov	r7,r9
    9420:	000d9500 	call	d950 <__ltdf2>
    9424:	1000030e 	bge	r2,zero,9434 <_dtoa_r+0x79c>
    9428:	d8800d17 	ldw	r2,52(sp)
    942c:	10bfffc4 	addi	r2,r2,-1
    9430:	d8800d15 	stw	r2,52(sp)
    9434:	d8000c15 	stw	zero,48(sp)
    9438:	003ea806 	br	8edc <_dtoa_r+0x244>
    943c:	d9000b17 	ldw	r4,44(sp)
    9440:	202cc03a 	cmpne	r22,r4,zero
    9444:	b000c71e 	bne	r22,zero,9764 <_dtoa_r+0xacc>
    9448:	dc001117 	ldw	r16,68(sp)
    944c:	dc801017 	ldw	r18,64(sp)
    9450:	0027883a 	mov	r19,zero
    9454:	04000b0e 	bge	zero,r16,9484 <_dtoa_r+0x7ec>
    9458:	d8c00a17 	ldw	r3,40(sp)
    945c:	00c0090e 	bge	zero,r3,9484 <_dtoa_r+0x7ec>
    9460:	8005883a 	mov	r2,r16
    9464:	1c011316 	blt	r3,r16,98b4 <_dtoa_r+0xc1c>
    9468:	d9000a17 	ldw	r4,40(sp)
    946c:	d9801117 	ldw	r6,68(sp)
    9470:	80a1c83a 	sub	r16,r16,r2
    9474:	2089c83a 	sub	r4,r4,r2
    9478:	308dc83a 	sub	r6,r6,r2
    947c:	d9000a15 	stw	r4,40(sp)
    9480:	d9801115 	stw	r6,68(sp)
    9484:	d8801017 	ldw	r2,64(sp)
    9488:	0080150e 	bge	zero,r2,94e0 <_dtoa_r+0x848>
    948c:	d8c00b17 	ldw	r3,44(sp)
    9490:	1805003a 	cmpeq	r2,r3,zero
    9494:	1001c91e 	bne	r2,zero,9bbc <_dtoa_r+0xf24>
    9498:	04800e0e 	bge	zero,r18,94d4 <_dtoa_r+0x83c>
    949c:	d9001617 	ldw	r4,88(sp)
    94a0:	980b883a 	mov	r5,r19
    94a4:	900d883a 	mov	r6,r18
    94a8:	000c0780 	call	c078 <__pow5mult>
    94ac:	d9001617 	ldw	r4,88(sp)
    94b0:	d9800717 	ldw	r6,28(sp)
    94b4:	100b883a 	mov	r5,r2
    94b8:	1027883a 	mov	r19,r2
    94bc:	000bcbc0 	call	bcbc <__multiply>
    94c0:	d9001617 	ldw	r4,88(sp)
    94c4:	d9400717 	ldw	r5,28(sp)
    94c8:	1023883a 	mov	r17,r2
    94cc:	000b22c0 	call	b22c <_Bfree>
    94d0:	dc400715 	stw	r17,28(sp)
    94d4:	d9001017 	ldw	r4,64(sp)
    94d8:	248dc83a 	sub	r6,r4,r18
    94dc:	30010e1e 	bne	r6,zero,9918 <_dtoa_r+0xc80>
    94e0:	d9001617 	ldw	r4,88(sp)
    94e4:	04400044 	movi	r17,1
    94e8:	880b883a 	mov	r5,r17
    94ec:	000bf100 	call	bf10 <__i2b>
    94f0:	d9800917 	ldw	r6,36(sp)
    94f4:	1025883a 	mov	r18,r2
    94f8:	0180040e 	bge	zero,r6,950c <_dtoa_r+0x874>
    94fc:	d9001617 	ldw	r4,88(sp)
    9500:	100b883a 	mov	r5,r2
    9504:	000c0780 	call	c078 <__pow5mult>
    9508:	1025883a 	mov	r18,r2
    950c:	d8801717 	ldw	r2,92(sp)
    9510:	8880f30e 	bge	r17,r2,98e0 <_dtoa_r+0xc48>
    9514:	0023883a 	mov	r17,zero
    9518:	d9800917 	ldw	r6,36(sp)
    951c:	30019e1e 	bne	r6,zero,9b98 <_dtoa_r+0xf00>
    9520:	00c00044 	movi	r3,1
    9524:	d9000a17 	ldw	r4,40(sp)
    9528:	20c5883a 	add	r2,r4,r3
    952c:	10c007cc 	andi	r3,r2,31
    9530:	1800841e 	bne	r3,zero,9744 <_dtoa_r+0xaac>
    9534:	00800704 	movi	r2,28
    9538:	d9000a17 	ldw	r4,40(sp)
    953c:	d9801117 	ldw	r6,68(sp)
    9540:	80a1883a 	add	r16,r16,r2
    9544:	2089883a 	add	r4,r4,r2
    9548:	308d883a 	add	r6,r6,r2
    954c:	d9000a15 	stw	r4,40(sp)
    9550:	d9801115 	stw	r6,68(sp)
    9554:	d8801117 	ldw	r2,68(sp)
    9558:	0080050e 	bge	zero,r2,9570 <_dtoa_r+0x8d8>
    955c:	d9400717 	ldw	r5,28(sp)
    9560:	d9001617 	ldw	r4,88(sp)
    9564:	100d883a 	mov	r6,r2
    9568:	000bb700 	call	bb70 <__lshift>
    956c:	d8800715 	stw	r2,28(sp)
    9570:	d8c00a17 	ldw	r3,40(sp)
    9574:	00c0050e 	bge	zero,r3,958c <_dtoa_r+0x8f4>
    9578:	d9001617 	ldw	r4,88(sp)
    957c:	900b883a 	mov	r5,r18
    9580:	180d883a 	mov	r6,r3
    9584:	000bb700 	call	bb70 <__lshift>
    9588:	1025883a 	mov	r18,r2
    958c:	d9000c17 	ldw	r4,48(sp)
    9590:	2005003a 	cmpeq	r2,r4,zero
    9594:	10016f26 	beq	r2,zero,9b54 <_dtoa_r+0xebc>
    9598:	d9000f17 	ldw	r4,60(sp)
    959c:	0102170e 	bge	zero,r4,9dfc <_dtoa_r+0x1164>
    95a0:	d9800b17 	ldw	r6,44(sp)
    95a4:	3005003a 	cmpeq	r2,r6,zero
    95a8:	1000881e 	bne	r2,zero,97cc <_dtoa_r+0xb34>
    95ac:	0400050e 	bge	zero,r16,95c4 <_dtoa_r+0x92c>
    95b0:	d9001617 	ldw	r4,88(sp)
    95b4:	980b883a 	mov	r5,r19
    95b8:	800d883a 	mov	r6,r16
    95bc:	000bb700 	call	bb70 <__lshift>
    95c0:	1027883a 	mov	r19,r2
    95c4:	8804c03a 	cmpne	r2,r17,zero
    95c8:	1002541e 	bne	r2,zero,9f1c <_dtoa_r+0x1284>
    95cc:	980b883a 	mov	r5,r19
    95d0:	dd800517 	ldw	r22,20(sp)
    95d4:	dcc00615 	stw	r19,24(sp)
    95d8:	a700004c 	andi	fp,r20,1
    95dc:	2827883a 	mov	r19,r5
    95e0:	d9000717 	ldw	r4,28(sp)
    95e4:	900b883a 	mov	r5,r18
    95e8:	0008a540 	call	8a54 <quorem>
    95ec:	d9000717 	ldw	r4,28(sp)
    95f0:	d9400617 	ldw	r5,24(sp)
    95f4:	1023883a 	mov	r17,r2
    95f8:	8dc00c04 	addi	r23,r17,48
    95fc:	000b3880 	call	b388 <__mcmp>
    9600:	d9001617 	ldw	r4,88(sp)
    9604:	900b883a 	mov	r5,r18
    9608:	980d883a 	mov	r6,r19
    960c:	1029883a 	mov	r20,r2
    9610:	000b9e40 	call	b9e4 <__mdiff>
    9614:	102b883a 	mov	r21,r2
    9618:	10800317 	ldw	r2,12(r2)
    961c:	1001281e 	bne	r2,zero,9ac0 <_dtoa_r+0xe28>
    9620:	d9000717 	ldw	r4,28(sp)
    9624:	a80b883a 	mov	r5,r21
    9628:	000b3880 	call	b388 <__mcmp>
    962c:	d9001617 	ldw	r4,88(sp)
    9630:	1021883a 	mov	r16,r2
    9634:	a80b883a 	mov	r5,r21
    9638:	000b22c0 	call	b22c <_Bfree>
    963c:	8000041e 	bne	r16,zero,9650 <_dtoa_r+0x9b8>
    9640:	d8801717 	ldw	r2,92(sp)
    9644:	1000021e 	bne	r2,zero,9650 <_dtoa_r+0x9b8>
    9648:	e004c03a 	cmpne	r2,fp,zero
    964c:	10011726 	beq	r2,zero,9aac <_dtoa_r+0xe14>
    9650:	a0010616 	blt	r20,zero,9a6c <_dtoa_r+0xdd4>
    9654:	a000041e 	bne	r20,zero,9668 <_dtoa_r+0x9d0>
    9658:	d8c01717 	ldw	r3,92(sp)
    965c:	1800021e 	bne	r3,zero,9668 <_dtoa_r+0x9d0>
    9660:	e004c03a 	cmpne	r2,fp,zero
    9664:	10010126 	beq	r2,zero,9a6c <_dtoa_r+0xdd4>
    9668:	04023d16 	blt	zero,r16,9f60 <_dtoa_r+0x12c8>
    966c:	b5c00005 	stb	r23,0(r22)
    9670:	d9800517 	ldw	r6,20(sp)
    9674:	d9000f17 	ldw	r4,60(sp)
    9678:	b5800044 	addi	r22,r22,1
    967c:	3105883a 	add	r2,r6,r4
    9680:	b0806526 	beq	r22,r2,9818 <_dtoa_r+0xb80>
    9684:	d9400717 	ldw	r5,28(sp)
    9688:	d9001617 	ldw	r4,88(sp)
    968c:	01800284 	movi	r6,10
    9690:	000f883a 	mov	r7,zero
    9694:	000bf4c0 	call	bf4c <__multadd>
    9698:	d8800715 	stw	r2,28(sp)
    969c:	d8800617 	ldw	r2,24(sp)
    96a0:	14c10c26 	beq	r2,r19,9ad4 <_dtoa_r+0xe3c>
    96a4:	d9400617 	ldw	r5,24(sp)
    96a8:	d9001617 	ldw	r4,88(sp)
    96ac:	01800284 	movi	r6,10
    96b0:	000f883a 	mov	r7,zero
    96b4:	000bf4c0 	call	bf4c <__multadd>
    96b8:	d9001617 	ldw	r4,88(sp)
    96bc:	980b883a 	mov	r5,r19
    96c0:	01800284 	movi	r6,10
    96c4:	000f883a 	mov	r7,zero
    96c8:	d8800615 	stw	r2,24(sp)
    96cc:	000bf4c0 	call	bf4c <__multadd>
    96d0:	1027883a 	mov	r19,r2
    96d4:	003fc206 	br	95e0 <_dtoa_r+0x948>
    96d8:	2445c83a 	sub	r2,r4,r17
    96dc:	a088983a 	sll	r4,r20,r2
    96e0:	003e4b06 	br	9010 <_dtoa_r+0x378>
    96e4:	01bfffc4 	movi	r6,-1
    96e8:	00800044 	movi	r2,1
    96ec:	d9800e15 	stw	r6,56(sp)
    96f0:	d9800f15 	stw	r6,60(sp)
    96f4:	d8800b15 	stw	r2,44(sp)
    96f8:	d8c01617 	ldw	r3,88(sp)
    96fc:	008005c4 	movi	r2,23
    9700:	18001115 	stw	zero,68(r3)
    9704:	1580082e 	bgeu	r2,r22,9728 <_dtoa_r+0xa90>
    9708:	00c00104 	movi	r3,4
    970c:	0009883a 	mov	r4,zero
    9710:	18c7883a 	add	r3,r3,r3
    9714:	18800504 	addi	r2,r3,20
    9718:	21000044 	addi	r4,r4,1
    971c:	b0bffc2e 	bgeu	r22,r2,9710 <_dtoa_r+0xa78>
    9720:	d9801617 	ldw	r6,88(sp)
    9724:	31001115 	stw	r4,68(r6)
    9728:	dc000f17 	ldw	r16,60(sp)
    972c:	003e4b06 	br	905c <_dtoa_r+0x3c4>
    9730:	d9801717 	ldw	r6,92(sp)
    9734:	0023883a 	mov	r17,zero
    9738:	31bfff04 	addi	r6,r6,-4
    973c:	d9801715 	stw	r6,92(sp)
    9740:	003df806 	br	8f24 <_dtoa_r+0x28c>
    9744:	00800804 	movi	r2,32
    9748:	10c9c83a 	sub	r4,r2,r3
    974c:	00c00104 	movi	r3,4
    9750:	19005a16 	blt	r3,r4,98bc <_dtoa_r+0xc24>
    9754:	008000c4 	movi	r2,3
    9758:	113f7e16 	blt	r2,r4,9554 <_dtoa_r+0x8bc>
    975c:	20800704 	addi	r2,r4,28
    9760:	003f7506 	br	9538 <_dtoa_r+0x8a0>
    9764:	d9801717 	ldw	r6,92(sp)
    9768:	00800044 	movi	r2,1
    976c:	1180a10e 	bge	r2,r6,99f4 <_dtoa_r+0xd5c>
    9770:	d9800f17 	ldw	r6,60(sp)
    9774:	d8c01017 	ldw	r3,64(sp)
    9778:	30bfffc4 	addi	r2,r6,-1
    977c:	1881c616 	blt	r3,r2,9e98 <_dtoa_r+0x1200>
    9780:	18a5c83a 	sub	r18,r3,r2
    9784:	d8800f17 	ldw	r2,60(sp)
    9788:	10026216 	blt	r2,zero,a114 <_dtoa_r+0x147c>
    978c:	dc001117 	ldw	r16,68(sp)
    9790:	1007883a 	mov	r3,r2
    9794:	d9800a17 	ldw	r6,40(sp)
    9798:	d8801117 	ldw	r2,68(sp)
    979c:	d9001617 	ldw	r4,88(sp)
    97a0:	30cd883a 	add	r6,r6,r3
    97a4:	10c5883a 	add	r2,r2,r3
    97a8:	01400044 	movi	r5,1
    97ac:	d9800a15 	stw	r6,40(sp)
    97b0:	d8801115 	stw	r2,68(sp)
    97b4:	000bf100 	call	bf10 <__i2b>
    97b8:	1027883a 	mov	r19,r2
    97bc:	003f2506 	br	9454 <_dtoa_r+0x7bc>
    97c0:	00c00074 	movhi	r3,1
    97c4:	18c73d04 	addi	r3,r3,7412
    97c8:	003d6706 	br	8d68 <_dtoa_r+0xd0>
    97cc:	dd800517 	ldw	r22,20(sp)
    97d0:	04000044 	movi	r16,1
    97d4:	00000706 	br	97f4 <_dtoa_r+0xb5c>
    97d8:	d9400717 	ldw	r5,28(sp)
    97dc:	d9001617 	ldw	r4,88(sp)
    97e0:	01800284 	movi	r6,10
    97e4:	000f883a 	mov	r7,zero
    97e8:	000bf4c0 	call	bf4c <__multadd>
    97ec:	d8800715 	stw	r2,28(sp)
    97f0:	84000044 	addi	r16,r16,1
    97f4:	d9000717 	ldw	r4,28(sp)
    97f8:	900b883a 	mov	r5,r18
    97fc:	0008a540 	call	8a54 <quorem>
    9800:	15c00c04 	addi	r23,r2,48
    9804:	b5c00005 	stb	r23,0(r22)
    9808:	d8c00f17 	ldw	r3,60(sp)
    980c:	b5800044 	addi	r22,r22,1
    9810:	80fff116 	blt	r16,r3,97d8 <_dtoa_r+0xb40>
    9814:	d8000615 	stw	zero,24(sp)
    9818:	d9400717 	ldw	r5,28(sp)
    981c:	d9001617 	ldw	r4,88(sp)
    9820:	01800044 	movi	r6,1
    9824:	000bb700 	call	bb70 <__lshift>
    9828:	1009883a 	mov	r4,r2
    982c:	900b883a 	mov	r5,r18
    9830:	d8800715 	stw	r2,28(sp)
    9834:	000b3880 	call	b388 <__mcmp>
    9838:	00803c0e 	bge	zero,r2,992c <_dtoa_r+0xc94>
    983c:	b009883a 	mov	r4,r22
    9840:	213fffc4 	addi	r4,r4,-1
    9844:	21400003 	ldbu	r5,0(r4)
    9848:	00800e44 	movi	r2,57
    984c:	28c03fcc 	andi	r3,r5,255
    9850:	18c0201c 	xori	r3,r3,128
    9854:	18ffe004 	addi	r3,r3,-128
    9858:	1881981e 	bne	r3,r2,9ebc <_dtoa_r+0x1224>
    985c:	d9800517 	ldw	r6,20(sp)
    9860:	21bff71e 	bne	r4,r6,9840 <_dtoa_r+0xba8>
    9864:	d8800d17 	ldw	r2,52(sp)
    9868:	37000044 	addi	fp,r6,1
    986c:	10800044 	addi	r2,r2,1
    9870:	d8800d15 	stw	r2,52(sp)
    9874:	00800c44 	movi	r2,49
    9878:	30800005 	stb	r2,0(r6)
    987c:	d9001617 	ldw	r4,88(sp)
    9880:	900b883a 	mov	r5,r18
    9884:	000b22c0 	call	b22c <_Bfree>
    9888:	983ecd26 	beq	r19,zero,93c0 <_dtoa_r+0x728>
    988c:	d8c00617 	ldw	r3,24(sp)
    9890:	18000426 	beq	r3,zero,98a4 <_dtoa_r+0xc0c>
    9894:	1cc00326 	beq	r3,r19,98a4 <_dtoa_r+0xc0c>
    9898:	d9001617 	ldw	r4,88(sp)
    989c:	180b883a 	mov	r5,r3
    98a0:	000b22c0 	call	b22c <_Bfree>
    98a4:	d9001617 	ldw	r4,88(sp)
    98a8:	980b883a 	mov	r5,r19
    98ac:	000b22c0 	call	b22c <_Bfree>
    98b0:	003ec306 	br	93c0 <_dtoa_r+0x728>
    98b4:	1805883a 	mov	r2,r3
    98b8:	003eeb06 	br	9468 <_dtoa_r+0x7d0>
    98bc:	d9800a17 	ldw	r6,40(sp)
    98c0:	d8c01117 	ldw	r3,68(sp)
    98c4:	20bfff04 	addi	r2,r4,-4
    98c8:	308d883a 	add	r6,r6,r2
    98cc:	1887883a 	add	r3,r3,r2
    98d0:	80a1883a 	add	r16,r16,r2
    98d4:	d9800a15 	stw	r6,40(sp)
    98d8:	d8c01115 	stw	r3,68(sp)
    98dc:	003f1d06 	br	9554 <_dtoa_r+0x8bc>
    98e0:	a03f0c1e 	bne	r20,zero,9514 <_dtoa_r+0x87c>
    98e4:	00800434 	movhi	r2,16
    98e8:	10bfffc4 	addi	r2,r2,-1
    98ec:	a884703a 	and	r2,r21,r2
    98f0:	103f081e 	bne	r2,zero,9514 <_dtoa_r+0x87c>
    98f4:	a89ffc2c 	andhi	r2,r21,32752
    98f8:	103f0626 	beq	r2,zero,9514 <_dtoa_r+0x87c>
    98fc:	d8c01117 	ldw	r3,68(sp)
    9900:	d9000a17 	ldw	r4,40(sp)
    9904:	18c00044 	addi	r3,r3,1
    9908:	21000044 	addi	r4,r4,1
    990c:	d8c01115 	stw	r3,68(sp)
    9910:	d9000a15 	stw	r4,40(sp)
    9914:	003f0006 	br	9518 <_dtoa_r+0x880>
    9918:	d9400717 	ldw	r5,28(sp)
    991c:	d9001617 	ldw	r4,88(sp)
    9920:	000c0780 	call	c078 <__pow5mult>
    9924:	d8800715 	stw	r2,28(sp)
    9928:	003eed06 	br	94e0 <_dtoa_r+0x848>
    992c:	1000021e 	bne	r2,zero,9938 <_dtoa_r+0xca0>
    9930:	b880004c 	andi	r2,r23,1
    9934:	103fc11e 	bne	r2,zero,983c <_dtoa_r+0xba4>
    9938:	b5bfffc4 	addi	r22,r22,-1
    993c:	b0c00007 	ldb	r3,0(r22)
    9940:	00800c04 	movi	r2,48
    9944:	18bffc26 	beq	r3,r2,9938 <_dtoa_r+0xca0>
    9948:	b7000044 	addi	fp,r22,1
    994c:	003fcb06 	br	987c <_dtoa_r+0xbe4>
    9950:	d9800d17 	ldw	r6,52(sp)
    9954:	018fc83a 	sub	r7,zero,r6
    9958:	3801f726 	beq	r7,zero,a138 <_dtoa_r+0x14a0>
    995c:	398003cc 	andi	r6,r7,15
    9960:	300c90fa 	slli	r6,r6,3
    9964:	01400074 	movhi	r5,1
    9968:	29475a04 	addi	r5,r5,7528
    996c:	d9001217 	ldw	r4,72(sp)
    9970:	314d883a 	add	r6,r6,r5
    9974:	30c00117 	ldw	r3,4(r6)
    9978:	30800017 	ldw	r2,0(r6)
    997c:	d9401317 	ldw	r5,76(sp)
    9980:	3821d13a 	srai	r16,r7,4
    9984:	100d883a 	mov	r6,r2
    9988:	180f883a 	mov	r7,r3
    998c:	0003dd80 	call	3dd8 <__muldf3>
    9990:	1011883a 	mov	r8,r2
    9994:	1813883a 	mov	r9,r3
    9998:	1029883a 	mov	r20,r2
    999c:	182b883a 	mov	r21,r3
    99a0:	8001e526 	beq	r16,zero,a138 <_dtoa_r+0x14a0>
    99a4:	05800084 	movi	r22,2
    99a8:	04400074 	movhi	r17,1
    99ac:	8c478c04 	addi	r17,r17,7728
    99b0:	8080004c 	andi	r2,r16,1
    99b4:	1005003a 	cmpeq	r2,r2,zero
    99b8:	1000081e 	bne	r2,zero,99dc <_dtoa_r+0xd44>
    99bc:	89800017 	ldw	r6,0(r17)
    99c0:	89c00117 	ldw	r7,4(r17)
    99c4:	480b883a 	mov	r5,r9
    99c8:	4009883a 	mov	r4,r8
    99cc:	0003dd80 	call	3dd8 <__muldf3>
    99d0:	1011883a 	mov	r8,r2
    99d4:	b5800044 	addi	r22,r22,1
    99d8:	1813883a 	mov	r9,r3
    99dc:	8021d07a 	srai	r16,r16,1
    99e0:	8c400204 	addi	r17,r17,8
    99e4:	803ff21e 	bne	r16,zero,99b0 <_dtoa_r+0xd18>
    99e8:	4029883a 	mov	r20,r8
    99ec:	482b883a 	mov	r21,r9
    99f0:	003dca06 	br	911c <_dtoa_r+0x484>
    99f4:	d9000817 	ldw	r4,32(sp)
    99f8:	2005003a 	cmpeq	r2,r4,zero
    99fc:	1001f61e 	bne	r2,zero,a1d8 <_dtoa_r+0x1540>
    9a00:	dc001117 	ldw	r16,68(sp)
    9a04:	dc801017 	ldw	r18,64(sp)
    9a08:	18c10cc4 	addi	r3,r3,1075
    9a0c:	003f6106 	br	9794 <_dtoa_r+0xafc>
    9a10:	d8000b15 	stw	zero,44(sp)
    9a14:	d9802617 	ldw	r6,152(sp)
    9a18:	d8c00d17 	ldw	r3,52(sp)
    9a1c:	30800044 	addi	r2,r6,1
    9a20:	18ad883a 	add	r22,r3,r2
    9a24:	b13fffc4 	addi	r4,r22,-1
    9a28:	d9000e15 	stw	r4,56(sp)
    9a2c:	0581f60e 	bge	zero,r22,a208 <_dtoa_r+0x1570>
    9a30:	dd800f15 	stw	r22,60(sp)
    9a34:	003f3006 	br	96f8 <_dtoa_r+0xa60>
    9a38:	d8000b15 	stw	zero,44(sp)
    9a3c:	d9002617 	ldw	r4,152(sp)
    9a40:	0101eb0e 	bge	zero,r4,a1f0 <_dtoa_r+0x1558>
    9a44:	202d883a 	mov	r22,r4
    9a48:	d9000e15 	stw	r4,56(sp)
    9a4c:	d9000f15 	stw	r4,60(sp)
    9a50:	003f2906 	br	96f8 <_dtoa_r+0xa60>
    9a54:	01800044 	movi	r6,1
    9a58:	d9800b15 	stw	r6,44(sp)
    9a5c:	003ff706 	br	9a3c <_dtoa_r+0xda4>
    9a60:	01000044 	movi	r4,1
    9a64:	d9000b15 	stw	r4,44(sp)
    9a68:	003fea06 	br	9a14 <_dtoa_r+0xd7c>
    9a6c:	04000c0e 	bge	zero,r16,9aa0 <_dtoa_r+0xe08>
    9a70:	d9400717 	ldw	r5,28(sp)
    9a74:	d9001617 	ldw	r4,88(sp)
    9a78:	01800044 	movi	r6,1
    9a7c:	000bb700 	call	bb70 <__lshift>
    9a80:	1009883a 	mov	r4,r2
    9a84:	900b883a 	mov	r5,r18
    9a88:	d8800715 	stw	r2,28(sp)
    9a8c:	000b3880 	call	b388 <__mcmp>
    9a90:	0081e00e 	bge	zero,r2,a214 <_dtoa_r+0x157c>
    9a94:	bdc00044 	addi	r23,r23,1
    9a98:	00800e84 	movi	r2,58
    9a9c:	b881a226 	beq	r23,r2,a128 <_dtoa_r+0x1490>
    9aa0:	b7000044 	addi	fp,r22,1
    9aa4:	b5c00005 	stb	r23,0(r22)
    9aa8:	003f7406 	br	987c <_dtoa_r+0xbe4>
    9aac:	00800e44 	movi	r2,57
    9ab0:	b8819d26 	beq	r23,r2,a128 <_dtoa_r+0x1490>
    9ab4:	053ffa0e 	bge	zero,r20,9aa0 <_dtoa_r+0xe08>
    9ab8:	8dc00c44 	addi	r23,r17,49
    9abc:	003ff806 	br	9aa0 <_dtoa_r+0xe08>
    9ac0:	d9001617 	ldw	r4,88(sp)
    9ac4:	a80b883a 	mov	r5,r21
    9ac8:	04000044 	movi	r16,1
    9acc:	000b22c0 	call	b22c <_Bfree>
    9ad0:	003edf06 	br	9650 <_dtoa_r+0x9b8>
    9ad4:	d9001617 	ldw	r4,88(sp)
    9ad8:	980b883a 	mov	r5,r19
    9adc:	01800284 	movi	r6,10
    9ae0:	000f883a 	mov	r7,zero
    9ae4:	000bf4c0 	call	bf4c <__multadd>
    9ae8:	1027883a 	mov	r19,r2
    9aec:	d8800615 	stw	r2,24(sp)
    9af0:	003ebb06 	br	95e0 <_dtoa_r+0x948>
    9af4:	d9801117 	ldw	r6,68(sp)
    9af8:	d8800d17 	ldw	r2,52(sp)
    9afc:	d8000915 	stw	zero,36(sp)
    9b00:	308dc83a 	sub	r6,r6,r2
    9b04:	0087c83a 	sub	r3,zero,r2
    9b08:	d9801115 	stw	r6,68(sp)
    9b0c:	d8c01015 	stw	r3,64(sp)
    9b10:	003cfe06 	br	8f0c <_dtoa_r+0x274>
    9b14:	018dc83a 	sub	r6,zero,r6
    9b18:	d9801115 	stw	r6,68(sp)
    9b1c:	d8000a15 	stw	zero,40(sp)
    9b20:	003cf306 	br	8ef0 <_dtoa_r+0x258>
    9b24:	d9000d17 	ldw	r4,52(sp)
    9b28:	000458c0 	call	458c <__floatsidf>
    9b2c:	880b883a 	mov	r5,r17
    9b30:	8009883a 	mov	r4,r16
    9b34:	180f883a 	mov	r7,r3
    9b38:	100d883a 	mov	r6,r2
    9b3c:	000d8c80 	call	d8c8 <__nedf2>
    9b40:	103ce126 	beq	r2,zero,8ec8 <_dtoa_r+0x230>
    9b44:	d9800d17 	ldw	r6,52(sp)
    9b48:	31bfffc4 	addi	r6,r6,-1
    9b4c:	d9800d15 	stw	r6,52(sp)
    9b50:	003cdd06 	br	8ec8 <_dtoa_r+0x230>
    9b54:	d9000717 	ldw	r4,28(sp)
    9b58:	900b883a 	mov	r5,r18
    9b5c:	000b3880 	call	b388 <__mcmp>
    9b60:	103e8d0e 	bge	r2,zero,9598 <_dtoa_r+0x900>
    9b64:	d9400717 	ldw	r5,28(sp)
    9b68:	d9001617 	ldw	r4,88(sp)
    9b6c:	01800284 	movi	r6,10
    9b70:	000f883a 	mov	r7,zero
    9b74:	000bf4c0 	call	bf4c <__multadd>
    9b78:	d9800d17 	ldw	r6,52(sp)
    9b7c:	d8800715 	stw	r2,28(sp)
    9b80:	31bfffc4 	addi	r6,r6,-1
    9b84:	d9800d15 	stw	r6,52(sp)
    9b88:	b001a71e 	bne	r22,zero,a228 <_dtoa_r+0x1590>
    9b8c:	d8800e17 	ldw	r2,56(sp)
    9b90:	d8800f15 	stw	r2,60(sp)
    9b94:	003e8006 	br	9598 <_dtoa_r+0x900>
    9b98:	90800417 	ldw	r2,16(r18)
    9b9c:	1085883a 	add	r2,r2,r2
    9ba0:	1085883a 	add	r2,r2,r2
    9ba4:	1485883a 	add	r2,r2,r18
    9ba8:	11000417 	ldw	r4,16(r2)
    9bac:	000b2540 	call	b254 <__hi0bits>
    9bb0:	00c00804 	movi	r3,32
    9bb4:	1887c83a 	sub	r3,r3,r2
    9bb8:	003e5a06 	br	9524 <_dtoa_r+0x88c>
    9bbc:	d9400717 	ldw	r5,28(sp)
    9bc0:	d9801017 	ldw	r6,64(sp)
    9bc4:	d9001617 	ldw	r4,88(sp)
    9bc8:	000c0780 	call	c078 <__pow5mult>
    9bcc:	d8800715 	stw	r2,28(sp)
    9bd0:	003e4306 	br	94e0 <_dtoa_r+0x848>
    9bd4:	d9800f17 	ldw	r6,60(sp)
    9bd8:	d8800d17 	ldw	r2,52(sp)
    9bdc:	d9800315 	stw	r6,12(sp)
    9be0:	d8800415 	stw	r2,16(sp)
    9be4:	d8c00b17 	ldw	r3,44(sp)
    9be8:	1805003a 	cmpeq	r2,r3,zero
    9bec:	1000e21e 	bne	r2,zero,9f78 <_dtoa_r+0x12e0>
    9bf0:	d9000317 	ldw	r4,12(sp)
    9bf4:	0005883a 	mov	r2,zero
    9bf8:	00cff834 	movhi	r3,16352
    9bfc:	200c90fa 	slli	r6,r4,3
    9c00:	01000074 	movhi	r4,1
    9c04:	21075a04 	addi	r4,r4,7528
    9c08:	180b883a 	mov	r5,r3
    9c0c:	310d883a 	add	r6,r6,r4
    9c10:	327fff17 	ldw	r9,-4(r6)
    9c14:	323ffe17 	ldw	r8,-8(r6)
    9c18:	1009883a 	mov	r4,r2
    9c1c:	480f883a 	mov	r7,r9
    9c20:	400d883a 	mov	r6,r8
    9c24:	000419c0 	call	419c <__divdf3>
    9c28:	180b883a 	mov	r5,r3
    9c2c:	b00d883a 	mov	r6,r22
    9c30:	b80f883a 	mov	r7,r23
    9c34:	1009883a 	mov	r4,r2
    9c38:	0003ce40 	call	3ce4 <__subdf3>
    9c3c:	a80b883a 	mov	r5,r21
    9c40:	a009883a 	mov	r4,r20
    9c44:	d8c01915 	stw	r3,100(sp)
    9c48:	d8801815 	stw	r2,96(sp)
    9c4c:	00046840 	call	4684 <__fixdfsi>
    9c50:	1009883a 	mov	r4,r2
    9c54:	1027883a 	mov	r19,r2
    9c58:	000458c0 	call	458c <__floatsidf>
    9c5c:	a80b883a 	mov	r5,r21
    9c60:	a009883a 	mov	r4,r20
    9c64:	180f883a 	mov	r7,r3
    9c68:	100d883a 	mov	r6,r2
    9c6c:	0003ce40 	call	3ce4 <__subdf3>
    9c70:	d9801817 	ldw	r6,96(sp)
    9c74:	1823883a 	mov	r17,r3
    9c78:	d8801415 	stw	r2,80(sp)
    9c7c:	302d883a 	mov	r22,r6
    9c80:	d9800517 	ldw	r6,20(sp)
    9c84:	9cc00c04 	addi	r19,r19,48
    9c88:	dc401515 	stw	r17,84(sp)
    9c8c:	d8c01917 	ldw	r3,100(sp)
    9c90:	34c00005 	stb	r19,0(r6)
    9c94:	d8800517 	ldw	r2,20(sp)
    9c98:	d9401917 	ldw	r5,100(sp)
    9c9c:	d9801417 	ldw	r6,80(sp)
    9ca0:	b009883a 	mov	r4,r22
    9ca4:	880f883a 	mov	r7,r17
    9ca8:	182f883a 	mov	r23,r3
    9cac:	17000044 	addi	fp,r2,1
    9cb0:	000447c0 	call	447c <__gtdf2>
    9cb4:	00804e16 	blt	zero,r2,9df0 <_dtoa_r+0x1158>
    9cb8:	d9801417 	ldw	r6,80(sp)
    9cbc:	0005883a 	mov	r2,zero
    9cc0:	00cffc34 	movhi	r3,16368
    9cc4:	180b883a 	mov	r5,r3
    9cc8:	880f883a 	mov	r7,r17
    9ccc:	1009883a 	mov	r4,r2
    9cd0:	0003ce40 	call	3ce4 <__subdf3>
    9cd4:	d9401917 	ldw	r5,100(sp)
    9cd8:	180f883a 	mov	r7,r3
    9cdc:	b009883a 	mov	r4,r22
    9ce0:	100d883a 	mov	r6,r2
    9ce4:	000447c0 	call	447c <__gtdf2>
    9ce8:	00bda216 	blt	zero,r2,9374 <_dtoa_r+0x6dc>
    9cec:	d8c00317 	ldw	r3,12(sp)
    9cf0:	00800044 	movi	r2,1
    9cf4:	10c01216 	blt	r2,r3,9d40 <_dtoa_r+0x10a8>
    9cf8:	003d4506 	br	9210 <_dtoa_r+0x578>
    9cfc:	d9801417 	ldw	r6,80(sp)
    9d00:	0005883a 	mov	r2,zero
    9d04:	00cffc34 	movhi	r3,16368
    9d08:	180b883a 	mov	r5,r3
    9d0c:	880f883a 	mov	r7,r17
    9d10:	1009883a 	mov	r4,r2
    9d14:	0003ce40 	call	3ce4 <__subdf3>
    9d18:	d9c01b17 	ldw	r7,108(sp)
    9d1c:	180b883a 	mov	r5,r3
    9d20:	1009883a 	mov	r4,r2
    9d24:	b00d883a 	mov	r6,r22
    9d28:	000d9500 	call	d950 <__ltdf2>
    9d2c:	103d9116 	blt	r2,zero,9374 <_dtoa_r+0x6dc>
    9d30:	d9800517 	ldw	r6,20(sp)
    9d34:	d9000317 	ldw	r4,12(sp)
    9d38:	3105883a 	add	r2,r6,r4
    9d3c:	e0bd3426 	beq	fp,r2,9210 <_dtoa_r+0x578>
    9d40:	04500934 	movhi	r17,16420
    9d44:	0021883a 	mov	r16,zero
    9d48:	b80b883a 	mov	r5,r23
    9d4c:	b009883a 	mov	r4,r22
    9d50:	800d883a 	mov	r6,r16
    9d54:	880f883a 	mov	r7,r17
    9d58:	0003dd80 	call	3dd8 <__muldf3>
    9d5c:	d9401517 	ldw	r5,84(sp)
    9d60:	d9001417 	ldw	r4,80(sp)
    9d64:	880f883a 	mov	r7,r17
    9d68:	000d883a 	mov	r6,zero
    9d6c:	d8801a15 	stw	r2,104(sp)
    9d70:	d8c01b15 	stw	r3,108(sp)
    9d74:	0003dd80 	call	3dd8 <__muldf3>
    9d78:	180b883a 	mov	r5,r3
    9d7c:	1009883a 	mov	r4,r2
    9d80:	1823883a 	mov	r17,r3
    9d84:	1021883a 	mov	r16,r2
    9d88:	00046840 	call	4684 <__fixdfsi>
    9d8c:	1009883a 	mov	r4,r2
    9d90:	102b883a 	mov	r21,r2
    9d94:	000458c0 	call	458c <__floatsidf>
    9d98:	880b883a 	mov	r5,r17
    9d9c:	8009883a 	mov	r4,r16
    9da0:	180f883a 	mov	r7,r3
    9da4:	100d883a 	mov	r6,r2
    9da8:	0003ce40 	call	3ce4 <__subdf3>
    9dac:	1021883a 	mov	r16,r2
    9db0:	d9001b17 	ldw	r4,108(sp)
    9db4:	1823883a 	mov	r17,r3
    9db8:	dc001415 	stw	r16,80(sp)
    9dbc:	ad400c04 	addi	r21,r21,48
    9dc0:	dc401515 	stw	r17,84(sp)
    9dc4:	d8801a17 	ldw	r2,104(sp)
    9dc8:	e5400005 	stb	r21,0(fp)
    9dcc:	202f883a 	mov	r23,r4
    9dd0:	d9c01b17 	ldw	r7,108(sp)
    9dd4:	d9001417 	ldw	r4,80(sp)
    9dd8:	880b883a 	mov	r5,r17
    9ddc:	100d883a 	mov	r6,r2
    9de0:	102d883a 	mov	r22,r2
    9de4:	e7000044 	addi	fp,fp,1
    9de8:	000d9500 	call	d950 <__ltdf2>
    9dec:	103fc30e 	bge	r2,zero,9cfc <_dtoa_r+0x1064>
    9df0:	d9000417 	ldw	r4,16(sp)
    9df4:	d9000d15 	stw	r4,52(sp)
    9df8:	003d7106 	br	93c0 <_dtoa_r+0x728>
    9dfc:	d9801717 	ldw	r6,92(sp)
    9e00:	00800084 	movi	r2,2
    9e04:	11bde60e 	bge	r2,r6,95a0 <_dtoa_r+0x908>
    9e08:	203cfb1e 	bne	r4,zero,91f8 <_dtoa_r+0x560>
    9e0c:	d9001617 	ldw	r4,88(sp)
    9e10:	900b883a 	mov	r5,r18
    9e14:	01800144 	movi	r6,5
    9e18:	000f883a 	mov	r7,zero
    9e1c:	000bf4c0 	call	bf4c <__multadd>
    9e20:	d9000717 	ldw	r4,28(sp)
    9e24:	100b883a 	mov	r5,r2
    9e28:	1025883a 	mov	r18,r2
    9e2c:	000b3880 	call	b388 <__mcmp>
    9e30:	00bcf10e 	bge	zero,r2,91f8 <_dtoa_r+0x560>
    9e34:	d8c00d17 	ldw	r3,52(sp)
    9e38:	d9000517 	ldw	r4,20(sp)
    9e3c:	d8000615 	stw	zero,24(sp)
    9e40:	18c00044 	addi	r3,r3,1
    9e44:	d8c00d15 	stw	r3,52(sp)
    9e48:	00800c44 	movi	r2,49
    9e4c:	27000044 	addi	fp,r4,1
    9e50:	20800005 	stb	r2,0(r4)
    9e54:	003e8906 	br	987c <_dtoa_r+0xbe4>
    9e58:	d8c00517 	ldw	r3,20(sp)
    9e5c:	003bc206 	br	8d68 <_dtoa_r+0xd0>
    9e60:	01800074 	movhi	r6,1
    9e64:	31878c04 	addi	r6,r6,7728
    9e68:	30c00917 	ldw	r3,36(r6)
    9e6c:	30800817 	ldw	r2,32(r6)
    9e70:	d9001217 	ldw	r4,72(sp)
    9e74:	d9401317 	ldw	r5,76(sp)
    9e78:	180f883a 	mov	r7,r3
    9e7c:	100d883a 	mov	r6,r2
    9e80:	000419c0 	call	419c <__divdf3>
    9e84:	948003cc 	andi	r18,r18,15
    9e88:	058000c4 	movi	r22,3
    9e8c:	1029883a 	mov	r20,r2
    9e90:	182b883a 	mov	r21,r3
    9e94:	003c8906 	br	90bc <_dtoa_r+0x424>
    9e98:	d9001017 	ldw	r4,64(sp)
    9e9c:	d9800917 	ldw	r6,36(sp)
    9ea0:	0025883a 	mov	r18,zero
    9ea4:	1105c83a 	sub	r2,r2,r4
    9ea8:	2089883a 	add	r4,r4,r2
    9eac:	308d883a 	add	r6,r6,r2
    9eb0:	d9001015 	stw	r4,64(sp)
    9eb4:	d9800915 	stw	r6,36(sp)
    9eb8:	003e3206 	br	9784 <_dtoa_r+0xaec>
    9ebc:	28800044 	addi	r2,r5,1
    9ec0:	27000044 	addi	fp,r4,1
    9ec4:	20800005 	stb	r2,0(r4)
    9ec8:	003e6c06 	br	987c <_dtoa_r+0xbe4>
    9ecc:	d8800f17 	ldw	r2,60(sp)
    9ed0:	00bce016 	blt	zero,r2,9254 <_dtoa_r+0x5bc>
    9ed4:	d9800f17 	ldw	r6,60(sp)
    9ed8:	303cc51e 	bne	r6,zero,91f0 <_dtoa_r+0x558>
    9edc:	0005883a 	mov	r2,zero
    9ee0:	00d00534 	movhi	r3,16404
    9ee4:	980b883a 	mov	r5,r19
    9ee8:	180f883a 	mov	r7,r3
    9eec:	9009883a 	mov	r4,r18
    9ef0:	100d883a 	mov	r6,r2
    9ef4:	0003dd80 	call	3dd8 <__muldf3>
    9ef8:	180b883a 	mov	r5,r3
    9efc:	a80f883a 	mov	r7,r21
    9f00:	1009883a 	mov	r4,r2
    9f04:	a00d883a 	mov	r6,r20
    9f08:	00045040 	call	4504 <__gedf2>
    9f0c:	103cb80e 	bge	r2,zero,91f0 <_dtoa_r+0x558>
    9f10:	0027883a 	mov	r19,zero
    9f14:	0025883a 	mov	r18,zero
    9f18:	003fc606 	br	9e34 <_dtoa_r+0x119c>
    9f1c:	99400117 	ldw	r5,4(r19)
    9f20:	d9001617 	ldw	r4,88(sp)
    9f24:	000b7ac0 	call	b7ac <_Balloc>
    9f28:	99800417 	ldw	r6,16(r19)
    9f2c:	11000304 	addi	r4,r2,12
    9f30:	99400304 	addi	r5,r19,12
    9f34:	318d883a 	add	r6,r6,r6
    9f38:	318d883a 	add	r6,r6,r6
    9f3c:	31800204 	addi	r6,r6,8
    9f40:	1023883a 	mov	r17,r2
    9f44:	00061480 	call	6148 <memcpy>
    9f48:	d9001617 	ldw	r4,88(sp)
    9f4c:	880b883a 	mov	r5,r17
    9f50:	01800044 	movi	r6,1
    9f54:	000bb700 	call	bb70 <__lshift>
    9f58:	100b883a 	mov	r5,r2
    9f5c:	003d9c06 	br	95d0 <_dtoa_r+0x938>
    9f60:	00800e44 	movi	r2,57
    9f64:	b8807026 	beq	r23,r2,a128 <_dtoa_r+0x1490>
    9f68:	b8800044 	addi	r2,r23,1
    9f6c:	b7000044 	addi	fp,r22,1
    9f70:	b0800005 	stb	r2,0(r22)
    9f74:	003e4106 	br	987c <_dtoa_r+0xbe4>
    9f78:	d8800317 	ldw	r2,12(sp)
    9f7c:	01800074 	movhi	r6,1
    9f80:	31875a04 	addi	r6,r6,7528
    9f84:	b009883a 	mov	r4,r22
    9f88:	100e90fa 	slli	r7,r2,3
    9f8c:	b80b883a 	mov	r5,r23
    9f90:	398f883a 	add	r7,r7,r6
    9f94:	38bffe17 	ldw	r2,-8(r7)
    9f98:	d9800517 	ldw	r6,20(sp)
    9f9c:	38ffff17 	ldw	r3,-4(r7)
    9fa0:	37000044 	addi	fp,r6,1
    9fa4:	180f883a 	mov	r7,r3
    9fa8:	100d883a 	mov	r6,r2
    9fac:	0003dd80 	call	3dd8 <__muldf3>
    9fb0:	a80b883a 	mov	r5,r21
    9fb4:	a009883a 	mov	r4,r20
    9fb8:	182f883a 	mov	r23,r3
    9fbc:	102d883a 	mov	r22,r2
    9fc0:	00046840 	call	4684 <__fixdfsi>
    9fc4:	1009883a 	mov	r4,r2
    9fc8:	1027883a 	mov	r19,r2
    9fcc:	000458c0 	call	458c <__floatsidf>
    9fd0:	a80b883a 	mov	r5,r21
    9fd4:	a009883a 	mov	r4,r20
    9fd8:	180f883a 	mov	r7,r3
    9fdc:	100d883a 	mov	r6,r2
    9fe0:	0003ce40 	call	3ce4 <__subdf3>
    9fe4:	180b883a 	mov	r5,r3
    9fe8:	d8c00517 	ldw	r3,20(sp)
    9fec:	9cc00c04 	addi	r19,r19,48
    9ff0:	1009883a 	mov	r4,r2
    9ff4:	1cc00005 	stb	r19,0(r3)
    9ff8:	2021883a 	mov	r16,r4
    9ffc:	d9000317 	ldw	r4,12(sp)
    a000:	00800044 	movi	r2,1
    a004:	2823883a 	mov	r17,r5
    a008:	20802226 	beq	r4,r2,a094 <_dtoa_r+0x13fc>
    a00c:	1029883a 	mov	r20,r2
    a010:	0005883a 	mov	r2,zero
    a014:	00d00934 	movhi	r3,16420
    a018:	180f883a 	mov	r7,r3
    a01c:	100d883a 	mov	r6,r2
    a020:	880b883a 	mov	r5,r17
    a024:	8009883a 	mov	r4,r16
    a028:	0003dd80 	call	3dd8 <__muldf3>
    a02c:	180b883a 	mov	r5,r3
    a030:	1009883a 	mov	r4,r2
    a034:	1823883a 	mov	r17,r3
    a038:	1021883a 	mov	r16,r2
    a03c:	00046840 	call	4684 <__fixdfsi>
    a040:	1009883a 	mov	r4,r2
    a044:	102b883a 	mov	r21,r2
    a048:	000458c0 	call	458c <__floatsidf>
    a04c:	880b883a 	mov	r5,r17
    a050:	8009883a 	mov	r4,r16
    a054:	180f883a 	mov	r7,r3
    a058:	100d883a 	mov	r6,r2
    a05c:	0003ce40 	call	3ce4 <__subdf3>
    a060:	180b883a 	mov	r5,r3
    a064:	d8c00517 	ldw	r3,20(sp)
    a068:	1009883a 	mov	r4,r2
    a06c:	ad400c04 	addi	r21,r21,48
    a070:	1d05883a 	add	r2,r3,r20
    a074:	15400005 	stb	r21,0(r2)
    a078:	2021883a 	mov	r16,r4
    a07c:	d9000317 	ldw	r4,12(sp)
    a080:	a5000044 	addi	r20,r20,1
    a084:	2823883a 	mov	r17,r5
    a088:	a13fe11e 	bne	r20,r4,a010 <_dtoa_r+0x1378>
    a08c:	e505883a 	add	r2,fp,r20
    a090:	173fffc4 	addi	fp,r2,-1
    a094:	0025883a 	mov	r18,zero
    a098:	04cff834 	movhi	r19,16352
    a09c:	b009883a 	mov	r4,r22
    a0a0:	b80b883a 	mov	r5,r23
    a0a4:	900d883a 	mov	r6,r18
    a0a8:	980f883a 	mov	r7,r19
    a0ac:	0003d640 	call	3d64 <__adddf3>
    a0b0:	180b883a 	mov	r5,r3
    a0b4:	1009883a 	mov	r4,r2
    a0b8:	800d883a 	mov	r6,r16
    a0bc:	880f883a 	mov	r7,r17
    a0c0:	000d9500 	call	d950 <__ltdf2>
    a0c4:	103cab16 	blt	r2,zero,9374 <_dtoa_r+0x6dc>
    a0c8:	0009883a 	mov	r4,zero
    a0cc:	980b883a 	mov	r5,r19
    a0d0:	b80f883a 	mov	r7,r23
    a0d4:	b00d883a 	mov	r6,r22
    a0d8:	0003ce40 	call	3ce4 <__subdf3>
    a0dc:	180b883a 	mov	r5,r3
    a0e0:	880f883a 	mov	r7,r17
    a0e4:	1009883a 	mov	r4,r2
    a0e8:	800d883a 	mov	r6,r16
    a0ec:	000447c0 	call	447c <__gtdf2>
    a0f0:	00bc470e 	bge	zero,r2,9210 <_dtoa_r+0x578>
    a0f4:	00c00c04 	movi	r3,48
    a0f8:	e73fffc4 	addi	fp,fp,-1
    a0fc:	e0800007 	ldb	r2,0(fp)
    a100:	10fffd26 	beq	r2,r3,a0f8 <_dtoa_r+0x1460>
    a104:	d9800417 	ldw	r6,16(sp)
    a108:	e7000044 	addi	fp,fp,1
    a10c:	d9800d15 	stw	r6,52(sp)
    a110:	003cab06 	br	93c0 <_dtoa_r+0x728>
    a114:	d8c00f17 	ldw	r3,60(sp)
    a118:	d9001117 	ldw	r4,68(sp)
    a11c:	20e1c83a 	sub	r16,r4,r3
    a120:	0007883a 	mov	r3,zero
    a124:	003d9b06 	br	9794 <_dtoa_r+0xafc>
    a128:	00800e44 	movi	r2,57
    a12c:	b0800005 	stb	r2,0(r22)
    a130:	b5800044 	addi	r22,r22,1
    a134:	003dc106 	br	983c <_dtoa_r+0xba4>
    a138:	05800084 	movi	r22,2
    a13c:	003bf706 	br	911c <_dtoa_r+0x484>
    a140:	d9000f17 	ldw	r4,60(sp)
    a144:	013c000e 	bge	zero,r4,9148 <_dtoa_r+0x4b0>
    a148:	d9800e17 	ldw	r6,56(sp)
    a14c:	01bc300e 	bge	zero,r6,9210 <_dtoa_r+0x578>
    a150:	0005883a 	mov	r2,zero
    a154:	00d00934 	movhi	r3,16420
    a158:	a80b883a 	mov	r5,r21
    a15c:	180f883a 	mov	r7,r3
    a160:	a009883a 	mov	r4,r20
    a164:	100d883a 	mov	r6,r2
    a168:	0003dd80 	call	3dd8 <__muldf3>
    a16c:	b1000044 	addi	r4,r22,1
    a170:	1021883a 	mov	r16,r2
    a174:	1823883a 	mov	r17,r3
    a178:	000458c0 	call	458c <__floatsidf>
    a17c:	880b883a 	mov	r5,r17
    a180:	8009883a 	mov	r4,r16
    a184:	180f883a 	mov	r7,r3
    a188:	100d883a 	mov	r6,r2
    a18c:	0003dd80 	call	3dd8 <__muldf3>
    a190:	0011883a 	mov	r8,zero
    a194:	02500734 	movhi	r9,16412
    a198:	180b883a 	mov	r5,r3
    a19c:	480f883a 	mov	r7,r9
    a1a0:	1009883a 	mov	r4,r2
    a1a4:	400d883a 	mov	r6,r8
    a1a8:	0003d640 	call	3d64 <__adddf3>
    a1ac:	102d883a 	mov	r22,r2
    a1b0:	00bf3034 	movhi	r2,64704
    a1b4:	10ef883a 	add	r23,r2,r3
    a1b8:	d8800d17 	ldw	r2,52(sp)
    a1bc:	d8c00e17 	ldw	r3,56(sp)
    a1c0:	8029883a 	mov	r20,r16
    a1c4:	10bfffc4 	addi	r2,r2,-1
    a1c8:	882b883a 	mov	r21,r17
    a1cc:	d8800415 	stw	r2,16(sp)
    a1d0:	d8c00315 	stw	r3,12(sp)
    a1d4:	003e8306 	br	9be4 <_dtoa_r+0xf4c>
    a1d8:	d8800117 	ldw	r2,4(sp)
    a1dc:	dc001117 	ldw	r16,68(sp)
    a1e0:	dc801017 	ldw	r18,64(sp)
    a1e4:	00c00d84 	movi	r3,54
    a1e8:	1887c83a 	sub	r3,r3,r2
    a1ec:	003d6906 	br	9794 <_dtoa_r+0xafc>
    a1f0:	01800044 	movi	r6,1
    a1f4:	3021883a 	mov	r16,r6
    a1f8:	d9800f15 	stw	r6,60(sp)
    a1fc:	d9802615 	stw	r6,152(sp)
    a200:	d9800e15 	stw	r6,56(sp)
    a204:	003b9306 	br	9054 <_dtoa_r+0x3bc>
    a208:	b021883a 	mov	r16,r22
    a20c:	dd800f15 	stw	r22,60(sp)
    a210:	003b9006 	br	9054 <_dtoa_r+0x3bc>
    a214:	103e221e 	bne	r2,zero,9aa0 <_dtoa_r+0xe08>
    a218:	b880004c 	andi	r2,r23,1
    a21c:	1005003a 	cmpeq	r2,r2,zero
    a220:	103e1f1e 	bne	r2,zero,9aa0 <_dtoa_r+0xe08>
    a224:	003e1b06 	br	9a94 <_dtoa_r+0xdfc>
    a228:	d9001617 	ldw	r4,88(sp)
    a22c:	980b883a 	mov	r5,r19
    a230:	01800284 	movi	r6,10
    a234:	000f883a 	mov	r7,zero
    a238:	000bf4c0 	call	bf4c <__multadd>
    a23c:	d8c00e17 	ldw	r3,56(sp)
    a240:	1027883a 	mov	r19,r2
    a244:	d8c00f15 	stw	r3,60(sp)
    a248:	003cd306 	br	9598 <_dtoa_r+0x900>

0000a24c <_fclose_r>:
    a24c:	defffc04 	addi	sp,sp,-16
    a250:	dc400115 	stw	r17,4(sp)
    a254:	dc000015 	stw	r16,0(sp)
    a258:	dfc00315 	stw	ra,12(sp)
    a25c:	dc800215 	stw	r18,8(sp)
    a260:	2821883a 	mov	r16,r5
    a264:	2023883a 	mov	r17,r4
    a268:	28002926 	beq	r5,zero,a310 <_fclose_r+0xc4>
    a26c:	00053e00 	call	53e0 <__sfp_lock_acquire>
    a270:	88000226 	beq	r17,zero,a27c <_fclose_r+0x30>
    a274:	88800e17 	ldw	r2,56(r17)
    a278:	10002d26 	beq	r2,zero,a330 <_fclose_r+0xe4>
    a27c:	8080030f 	ldh	r2,12(r16)
    a280:	10002226 	beq	r2,zero,a30c <_fclose_r+0xc0>
    a284:	8809883a 	mov	r4,r17
    a288:	800b883a 	mov	r5,r16
    a28c:	000a3700 	call	a370 <_fflush_r>
    a290:	1025883a 	mov	r18,r2
    a294:	80800b17 	ldw	r2,44(r16)
    a298:	10000426 	beq	r2,zero,a2ac <_fclose_r+0x60>
    a29c:	81400717 	ldw	r5,28(r16)
    a2a0:	8809883a 	mov	r4,r17
    a2a4:	103ee83a 	callr	r2
    a2a8:	10002a16 	blt	r2,zero,a354 <_fclose_r+0x108>
    a2ac:	8080030b 	ldhu	r2,12(r16)
    a2b0:	1080200c 	andi	r2,r2,128
    a2b4:	1000231e 	bne	r2,zero,a344 <_fclose_r+0xf8>
    a2b8:	81400c17 	ldw	r5,48(r16)
    a2bc:	28000526 	beq	r5,zero,a2d4 <_fclose_r+0x88>
    a2c0:	80801004 	addi	r2,r16,64
    a2c4:	28800226 	beq	r5,r2,a2d0 <_fclose_r+0x84>
    a2c8:	8809883a 	mov	r4,r17
    a2cc:	000a6cc0 	call	a6cc <_free_r>
    a2d0:	80000c15 	stw	zero,48(r16)
    a2d4:	81401117 	ldw	r5,68(r16)
    a2d8:	28000326 	beq	r5,zero,a2e8 <_fclose_r+0x9c>
    a2dc:	8809883a 	mov	r4,r17
    a2e0:	000a6cc0 	call	a6cc <_free_r>
    a2e4:	80001115 	stw	zero,68(r16)
    a2e8:	8000030d 	sth	zero,12(r16)
    a2ec:	00053e40 	call	53e4 <__sfp_lock_release>
    a2f0:	9005883a 	mov	r2,r18
    a2f4:	dfc00317 	ldw	ra,12(sp)
    a2f8:	dc800217 	ldw	r18,8(sp)
    a2fc:	dc400117 	ldw	r17,4(sp)
    a300:	dc000017 	ldw	r16,0(sp)
    a304:	dec00404 	addi	sp,sp,16
    a308:	f800283a 	ret
    a30c:	00053e40 	call	53e4 <__sfp_lock_release>
    a310:	0025883a 	mov	r18,zero
    a314:	9005883a 	mov	r2,r18
    a318:	dfc00317 	ldw	ra,12(sp)
    a31c:	dc800217 	ldw	r18,8(sp)
    a320:	dc400117 	ldw	r17,4(sp)
    a324:	dc000017 	ldw	r16,0(sp)
    a328:	dec00404 	addi	sp,sp,16
    a32c:	f800283a 	ret
    a330:	8809883a 	mov	r4,r17
    a334:	00053f00 	call	53f0 <__sinit>
    a338:	8080030f 	ldh	r2,12(r16)
    a33c:	103fd11e 	bne	r2,zero,a284 <_fclose_r+0x38>
    a340:	003ff206 	br	a30c <_fclose_r+0xc0>
    a344:	81400417 	ldw	r5,16(r16)
    a348:	8809883a 	mov	r4,r17
    a34c:	000a6cc0 	call	a6cc <_free_r>
    a350:	003fd906 	br	a2b8 <_fclose_r+0x6c>
    a354:	04bfffc4 	movi	r18,-1
    a358:	003fd406 	br	a2ac <_fclose_r+0x60>

0000a35c <fclose>:
    a35c:	00800074 	movhi	r2,1
    a360:	108ea504 	addi	r2,r2,14996
    a364:	200b883a 	mov	r5,r4
    a368:	11000017 	ldw	r4,0(r2)
    a36c:	000a24c1 	jmpi	a24c <_fclose_r>

0000a370 <_fflush_r>:
    a370:	defffb04 	addi	sp,sp,-20
    a374:	dcc00315 	stw	r19,12(sp)
    a378:	dc800215 	stw	r18,8(sp)
    a37c:	dfc00415 	stw	ra,16(sp)
    a380:	dc400115 	stw	r17,4(sp)
    a384:	dc000015 	stw	r16,0(sp)
    a388:	2027883a 	mov	r19,r4
    a38c:	2825883a 	mov	r18,r5
    a390:	20000226 	beq	r4,zero,a39c <_fflush_r+0x2c>
    a394:	20800e17 	ldw	r2,56(r4)
    a398:	10005626 	beq	r2,zero,a4f4 <_fflush_r+0x184>
    a39c:	9100030b 	ldhu	r4,12(r18)
    a3a0:	20ffffcc 	andi	r3,r4,65535
    a3a4:	18e0001c 	xori	r3,r3,32768
    a3a8:	18e00004 	addi	r3,r3,-32768
    a3ac:	1880020c 	andi	r2,r3,8
    a3b0:	1000261e 	bne	r2,zero,a44c <_fflush_r+0xdc>
    a3b4:	90c00117 	ldw	r3,4(r18)
    a3b8:	20820014 	ori	r2,r4,2048
    a3bc:	9080030d 	sth	r2,12(r18)
    a3c0:	1009883a 	mov	r4,r2
    a3c4:	00c0400e 	bge	zero,r3,a4c8 <_fflush_r+0x158>
    a3c8:	92000a17 	ldw	r8,40(r18)
    a3cc:	40004026 	beq	r8,zero,a4d0 <_fflush_r+0x160>
    a3d0:	2084000c 	andi	r2,r4,4096
    a3d4:	10005326 	beq	r2,zero,a524 <_fflush_r+0x1b4>
    a3d8:	94001417 	ldw	r16,80(r18)
    a3dc:	9080030b 	ldhu	r2,12(r18)
    a3e0:	1080010c 	andi	r2,r2,4
    a3e4:	1000481e 	bne	r2,zero,a508 <_fflush_r+0x198>
    a3e8:	91400717 	ldw	r5,28(r18)
    a3ec:	9809883a 	mov	r4,r19
    a3f0:	800d883a 	mov	r6,r16
    a3f4:	000f883a 	mov	r7,zero
    a3f8:	403ee83a 	callr	r8
    a3fc:	8080261e 	bne	r16,r2,a498 <_fflush_r+0x128>
    a400:	9080030b 	ldhu	r2,12(r18)
    a404:	91000417 	ldw	r4,16(r18)
    a408:	90000115 	stw	zero,4(r18)
    a40c:	10bdffcc 	andi	r2,r2,63487
    a410:	10ffffcc 	andi	r3,r2,65535
    a414:	18c4000c 	andi	r3,r3,4096
    a418:	9080030d 	sth	r2,12(r18)
    a41c:	91000015 	stw	r4,0(r18)
    a420:	18002b26 	beq	r3,zero,a4d0 <_fflush_r+0x160>
    a424:	0007883a 	mov	r3,zero
    a428:	1805883a 	mov	r2,r3
    a42c:	94001415 	stw	r16,80(r18)
    a430:	dfc00417 	ldw	ra,16(sp)
    a434:	dcc00317 	ldw	r19,12(sp)
    a438:	dc800217 	ldw	r18,8(sp)
    a43c:	dc400117 	ldw	r17,4(sp)
    a440:	dc000017 	ldw	r16,0(sp)
    a444:	dec00504 	addi	sp,sp,20
    a448:	f800283a 	ret
    a44c:	94400417 	ldw	r17,16(r18)
    a450:	88001f26 	beq	r17,zero,a4d0 <_fflush_r+0x160>
    a454:	90800017 	ldw	r2,0(r18)
    a458:	18c000cc 	andi	r3,r3,3
    a45c:	94400015 	stw	r17,0(r18)
    a460:	1461c83a 	sub	r16,r2,r17
    a464:	18002526 	beq	r3,zero,a4fc <_fflush_r+0x18c>
    a468:	0005883a 	mov	r2,zero
    a46c:	90800215 	stw	r2,8(r18)
    a470:	0400170e 	bge	zero,r16,a4d0 <_fflush_r+0x160>
    a474:	90c00917 	ldw	r3,36(r18)
    a478:	91400717 	ldw	r5,28(r18)
    a47c:	880d883a 	mov	r6,r17
    a480:	800f883a 	mov	r7,r16
    a484:	9809883a 	mov	r4,r19
    a488:	183ee83a 	callr	r3
    a48c:	88a3883a 	add	r17,r17,r2
    a490:	80a1c83a 	sub	r16,r16,r2
    a494:	00bff616 	blt	zero,r2,a470 <_fflush_r+0x100>
    a498:	9080030b 	ldhu	r2,12(r18)
    a49c:	00ffffc4 	movi	r3,-1
    a4a0:	10801014 	ori	r2,r2,64
    a4a4:	9080030d 	sth	r2,12(r18)
    a4a8:	1805883a 	mov	r2,r3
    a4ac:	dfc00417 	ldw	ra,16(sp)
    a4b0:	dcc00317 	ldw	r19,12(sp)
    a4b4:	dc800217 	ldw	r18,8(sp)
    a4b8:	dc400117 	ldw	r17,4(sp)
    a4bc:	dc000017 	ldw	r16,0(sp)
    a4c0:	dec00504 	addi	sp,sp,20
    a4c4:	f800283a 	ret
    a4c8:	90800f17 	ldw	r2,60(r18)
    a4cc:	00bfbe16 	blt	zero,r2,a3c8 <_fflush_r+0x58>
    a4d0:	0007883a 	mov	r3,zero
    a4d4:	1805883a 	mov	r2,r3
    a4d8:	dfc00417 	ldw	ra,16(sp)
    a4dc:	dcc00317 	ldw	r19,12(sp)
    a4e0:	dc800217 	ldw	r18,8(sp)
    a4e4:	dc400117 	ldw	r17,4(sp)
    a4e8:	dc000017 	ldw	r16,0(sp)
    a4ec:	dec00504 	addi	sp,sp,20
    a4f0:	f800283a 	ret
    a4f4:	00053f00 	call	53f0 <__sinit>
    a4f8:	003fa806 	br	a39c <_fflush_r+0x2c>
    a4fc:	90800517 	ldw	r2,20(r18)
    a500:	90800215 	stw	r2,8(r18)
    a504:	003fda06 	br	a470 <_fflush_r+0x100>
    a508:	90800117 	ldw	r2,4(r18)
    a50c:	90c00c17 	ldw	r3,48(r18)
    a510:	80a1c83a 	sub	r16,r16,r2
    a514:	183fb426 	beq	r3,zero,a3e8 <_fflush_r+0x78>
    a518:	90800f17 	ldw	r2,60(r18)
    a51c:	80a1c83a 	sub	r16,r16,r2
    a520:	003fb106 	br	a3e8 <_fflush_r+0x78>
    a524:	91400717 	ldw	r5,28(r18)
    a528:	9809883a 	mov	r4,r19
    a52c:	000d883a 	mov	r6,zero
    a530:	01c00044 	movi	r7,1
    a534:	403ee83a 	callr	r8
    a538:	1021883a 	mov	r16,r2
    a53c:	00bfffc4 	movi	r2,-1
    a540:	80800226 	beq	r16,r2,a54c <_fflush_r+0x1dc>
    a544:	92000a17 	ldw	r8,40(r18)
    a548:	003fa406 	br	a3dc <_fflush_r+0x6c>
    a54c:	98c00017 	ldw	r3,0(r19)
    a550:	00800744 	movi	r2,29
    a554:	18bfde26 	beq	r3,r2,a4d0 <_fflush_r+0x160>
    a558:	9080030b 	ldhu	r2,12(r18)
    a55c:	8007883a 	mov	r3,r16
    a560:	10801014 	ori	r2,r2,64
    a564:	9080030d 	sth	r2,12(r18)
    a568:	003fcf06 	br	a4a8 <_fflush_r+0x138>

0000a56c <fflush>:
    a56c:	01400074 	movhi	r5,1
    a570:	2968dc04 	addi	r5,r5,-23696
    a574:	2007883a 	mov	r3,r4
    a578:	20000526 	beq	r4,zero,a590 <fflush+0x24>
    a57c:	00800074 	movhi	r2,1
    a580:	108ea504 	addi	r2,r2,14996
    a584:	11000017 	ldw	r4,0(r2)
    a588:	180b883a 	mov	r5,r3
    a58c:	000a3701 	jmpi	a370 <_fflush_r>
    a590:	00800074 	movhi	r2,1
    a594:	108ea604 	addi	r2,r2,15000
    a598:	11000017 	ldw	r4,0(r2)
    a59c:	000567c1 	jmpi	567c <_fwalk_reent>

0000a5a0 <_malloc_trim_r>:
    a5a0:	defffb04 	addi	sp,sp,-20
    a5a4:	dcc00315 	stw	r19,12(sp)
    a5a8:	04c00074 	movhi	r19,1
    a5ac:	9cc8fa04 	addi	r19,r19,9192
    a5b0:	dc800215 	stw	r18,8(sp)
    a5b4:	dc400115 	stw	r17,4(sp)
    a5b8:	dc000015 	stw	r16,0(sp)
    a5bc:	2823883a 	mov	r17,r5
    a5c0:	2025883a 	mov	r18,r4
    a5c4:	dfc00415 	stw	ra,16(sp)
    a5c8:	000e2000 	call	e200 <__malloc_lock>
    a5cc:	98800217 	ldw	r2,8(r19)
    a5d0:	9009883a 	mov	r4,r18
    a5d4:	000b883a 	mov	r5,zero
    a5d8:	10c00117 	ldw	r3,4(r2)
    a5dc:	00bfff04 	movi	r2,-4
    a5e0:	18a0703a 	and	r16,r3,r2
    a5e4:	8463c83a 	sub	r17,r16,r17
    a5e8:	8c43fbc4 	addi	r17,r17,4079
    a5ec:	8822d33a 	srli	r17,r17,12
    a5f0:	0083ffc4 	movi	r2,4095
    a5f4:	8c7fffc4 	addi	r17,r17,-1
    a5f8:	8822933a 	slli	r17,r17,12
    a5fc:	1440060e 	bge	r2,r17,a618 <_malloc_trim_r+0x78>
    a600:	00065ec0 	call	65ec <_sbrk_r>
    a604:	98c00217 	ldw	r3,8(r19)
    a608:	9009883a 	mov	r4,r18
    a60c:	044bc83a 	sub	r5,zero,r17
    a610:	80c7883a 	add	r3,r16,r3
    a614:	10c00926 	beq	r2,r3,a63c <_malloc_trim_r+0x9c>
    a618:	000e2200 	call	e220 <__malloc_unlock>
    a61c:	0005883a 	mov	r2,zero
    a620:	dfc00417 	ldw	ra,16(sp)
    a624:	dcc00317 	ldw	r19,12(sp)
    a628:	dc800217 	ldw	r18,8(sp)
    a62c:	dc400117 	ldw	r17,4(sp)
    a630:	dc000017 	ldw	r16,0(sp)
    a634:	dec00504 	addi	sp,sp,20
    a638:	f800283a 	ret
    a63c:	9009883a 	mov	r4,r18
    a640:	00065ec0 	call	65ec <_sbrk_r>
    a644:	844dc83a 	sub	r6,r16,r17
    a648:	00ffffc4 	movi	r3,-1
    a64c:	9009883a 	mov	r4,r18
    a650:	000b883a 	mov	r5,zero
    a654:	01c00074 	movhi	r7,1
    a658:	39d58104 	addi	r7,r7,22020
    a65c:	31800054 	ori	r6,r6,1
    a660:	10c00926 	beq	r2,r3,a688 <_malloc_trim_r+0xe8>
    a664:	38800017 	ldw	r2,0(r7)
    a668:	98c00217 	ldw	r3,8(r19)
    a66c:	9009883a 	mov	r4,r18
    a670:	1445c83a 	sub	r2,r2,r17
    a674:	38800015 	stw	r2,0(r7)
    a678:	19800115 	stw	r6,4(r3)
    a67c:	000e2200 	call	e220 <__malloc_unlock>
    a680:	00800044 	movi	r2,1
    a684:	003fe606 	br	a620 <_malloc_trim_r+0x80>
    a688:	00065ec0 	call	65ec <_sbrk_r>
    a68c:	99800217 	ldw	r6,8(r19)
    a690:	100f883a 	mov	r7,r2
    a694:	9009883a 	mov	r4,r18
    a698:	1187c83a 	sub	r3,r2,r6
    a69c:	008003c4 	movi	r2,15
    a6a0:	19400054 	ori	r5,r3,1
    a6a4:	10ffdc0e 	bge	r2,r3,a618 <_malloc_trim_r+0x78>
    a6a8:	00800074 	movhi	r2,1
    a6ac:	108ea804 	addi	r2,r2,15008
    a6b0:	10c00017 	ldw	r3,0(r2)
    a6b4:	00800074 	movhi	r2,1
    a6b8:	10958104 	addi	r2,r2,22020
    a6bc:	31400115 	stw	r5,4(r6)
    a6c0:	38c7c83a 	sub	r3,r7,r3
    a6c4:	10c00015 	stw	r3,0(r2)
    a6c8:	003fd306 	br	a618 <_malloc_trim_r+0x78>

0000a6cc <_free_r>:
    a6cc:	defffd04 	addi	sp,sp,-12
    a6d0:	dc400115 	stw	r17,4(sp)
    a6d4:	dc000015 	stw	r16,0(sp)
    a6d8:	dfc00215 	stw	ra,8(sp)
    a6dc:	2821883a 	mov	r16,r5
    a6e0:	2023883a 	mov	r17,r4
    a6e4:	28005a26 	beq	r5,zero,a850 <_free_r+0x184>
    a6e8:	000e2000 	call	e200 <__malloc_lock>
    a6ec:	823ffe04 	addi	r8,r16,-8
    a6f0:	41400117 	ldw	r5,4(r8)
    a6f4:	00bfff84 	movi	r2,-2
    a6f8:	02800074 	movhi	r10,1
    a6fc:	5288fa04 	addi	r10,r10,9192
    a700:	288e703a 	and	r7,r5,r2
    a704:	41cd883a 	add	r6,r8,r7
    a708:	30c00117 	ldw	r3,4(r6)
    a70c:	51000217 	ldw	r4,8(r10)
    a710:	00bfff04 	movi	r2,-4
    a714:	1892703a 	and	r9,r3,r2
    a718:	5017883a 	mov	r11,r10
    a71c:	31006726 	beq	r6,r4,a8bc <_free_r+0x1f0>
    a720:	2880004c 	andi	r2,r5,1
    a724:	1005003a 	cmpeq	r2,r2,zero
    a728:	32400115 	stw	r9,4(r6)
    a72c:	10001a1e 	bne	r2,zero,a798 <_free_r+0xcc>
    a730:	000b883a 	mov	r5,zero
    a734:	3247883a 	add	r3,r6,r9
    a738:	18800117 	ldw	r2,4(r3)
    a73c:	1080004c 	andi	r2,r2,1
    a740:	1000231e 	bne	r2,zero,a7d0 <_free_r+0x104>
    a744:	280ac03a 	cmpne	r5,r5,zero
    a748:	3a4f883a 	add	r7,r7,r9
    a74c:	2800451e 	bne	r5,zero,a864 <_free_r+0x198>
    a750:	31000217 	ldw	r4,8(r6)
    a754:	00800074 	movhi	r2,1
    a758:	1088fc04 	addi	r2,r2,9200
    a75c:	20807b26 	beq	r4,r2,a94c <_free_r+0x280>
    a760:	30800317 	ldw	r2,12(r6)
    a764:	3a07883a 	add	r3,r7,r8
    a768:	19c00015 	stw	r7,0(r3)
    a76c:	11000215 	stw	r4,8(r2)
    a770:	20800315 	stw	r2,12(r4)
    a774:	38800054 	ori	r2,r7,1
    a778:	40800115 	stw	r2,4(r8)
    a77c:	28001a26 	beq	r5,zero,a7e8 <_free_r+0x11c>
    a780:	8809883a 	mov	r4,r17
    a784:	dfc00217 	ldw	ra,8(sp)
    a788:	dc400117 	ldw	r17,4(sp)
    a78c:	dc000017 	ldw	r16,0(sp)
    a790:	dec00304 	addi	sp,sp,12
    a794:	000e2201 	jmpi	e220 <__malloc_unlock>
    a798:	80bffe17 	ldw	r2,-8(r16)
    a79c:	50c00204 	addi	r3,r10,8
    a7a0:	4091c83a 	sub	r8,r8,r2
    a7a4:	41000217 	ldw	r4,8(r8)
    a7a8:	388f883a 	add	r7,r7,r2
    a7ac:	20c06126 	beq	r4,r3,a934 <_free_r+0x268>
    a7b0:	40800317 	ldw	r2,12(r8)
    a7b4:	3247883a 	add	r3,r6,r9
    a7b8:	000b883a 	mov	r5,zero
    a7bc:	11000215 	stw	r4,8(r2)
    a7c0:	20800315 	stw	r2,12(r4)
    a7c4:	18800117 	ldw	r2,4(r3)
    a7c8:	1080004c 	andi	r2,r2,1
    a7cc:	103fdd26 	beq	r2,zero,a744 <_free_r+0x78>
    a7d0:	38800054 	ori	r2,r7,1
    a7d4:	3a07883a 	add	r3,r7,r8
    a7d8:	280ac03a 	cmpne	r5,r5,zero
    a7dc:	40800115 	stw	r2,4(r8)
    a7e0:	19c00015 	stw	r7,0(r3)
    a7e4:	283fe61e 	bne	r5,zero,a780 <_free_r+0xb4>
    a7e8:	00807fc4 	movi	r2,511
    a7ec:	11c01f2e 	bgeu	r2,r7,a86c <_free_r+0x1a0>
    a7f0:	3806d27a 	srli	r3,r7,9
    a7f4:	1800481e 	bne	r3,zero,a918 <_free_r+0x24c>
    a7f8:	3804d0fa 	srli	r2,r7,3
    a7fc:	100690fa 	slli	r3,r2,3
    a800:	1acd883a 	add	r6,r3,r11
    a804:	31400217 	ldw	r5,8(r6)
    a808:	31405926 	beq	r6,r5,a970 <_free_r+0x2a4>
    a80c:	28800117 	ldw	r2,4(r5)
    a810:	00ffff04 	movi	r3,-4
    a814:	10c4703a 	and	r2,r2,r3
    a818:	3880022e 	bgeu	r7,r2,a824 <_free_r+0x158>
    a81c:	29400217 	ldw	r5,8(r5)
    a820:	317ffa1e 	bne	r6,r5,a80c <_free_r+0x140>
    a824:	29800317 	ldw	r6,12(r5)
    a828:	41800315 	stw	r6,12(r8)
    a82c:	41400215 	stw	r5,8(r8)
    a830:	8809883a 	mov	r4,r17
    a834:	2a000315 	stw	r8,12(r5)
    a838:	32000215 	stw	r8,8(r6)
    a83c:	dfc00217 	ldw	ra,8(sp)
    a840:	dc400117 	ldw	r17,4(sp)
    a844:	dc000017 	ldw	r16,0(sp)
    a848:	dec00304 	addi	sp,sp,12
    a84c:	000e2201 	jmpi	e220 <__malloc_unlock>
    a850:	dfc00217 	ldw	ra,8(sp)
    a854:	dc400117 	ldw	r17,4(sp)
    a858:	dc000017 	ldw	r16,0(sp)
    a85c:	dec00304 	addi	sp,sp,12
    a860:	f800283a 	ret
    a864:	31000217 	ldw	r4,8(r6)
    a868:	003fbd06 	br	a760 <_free_r+0x94>
    a86c:	3806d0fa 	srli	r3,r7,3
    a870:	00800044 	movi	r2,1
    a874:	51400117 	ldw	r5,4(r10)
    a878:	180890fa 	slli	r4,r3,3
    a87c:	1807d0ba 	srai	r3,r3,2
    a880:	22c9883a 	add	r4,r4,r11
    a884:	21800217 	ldw	r6,8(r4)
    a888:	10c4983a 	sll	r2,r2,r3
    a88c:	41000315 	stw	r4,12(r8)
    a890:	41800215 	stw	r6,8(r8)
    a894:	288ab03a 	or	r5,r5,r2
    a898:	22000215 	stw	r8,8(r4)
    a89c:	8809883a 	mov	r4,r17
    a8a0:	51400115 	stw	r5,4(r10)
    a8a4:	32000315 	stw	r8,12(r6)
    a8a8:	dfc00217 	ldw	ra,8(sp)
    a8ac:	dc400117 	ldw	r17,4(sp)
    a8b0:	dc000017 	ldw	r16,0(sp)
    a8b4:	dec00304 	addi	sp,sp,12
    a8b8:	000e2201 	jmpi	e220 <__malloc_unlock>
    a8bc:	2880004c 	andi	r2,r5,1
    a8c0:	3a4d883a 	add	r6,r7,r9
    a8c4:	1000071e 	bne	r2,zero,a8e4 <_free_r+0x218>
    a8c8:	80bffe17 	ldw	r2,-8(r16)
    a8cc:	4091c83a 	sub	r8,r8,r2
    a8d0:	41000317 	ldw	r4,12(r8)
    a8d4:	40c00217 	ldw	r3,8(r8)
    a8d8:	308d883a 	add	r6,r6,r2
    a8dc:	20c00215 	stw	r3,8(r4)
    a8e0:	19000315 	stw	r4,12(r3)
    a8e4:	00800074 	movhi	r2,1
    a8e8:	108ea704 	addi	r2,r2,15004
    a8ec:	11000017 	ldw	r4,0(r2)
    a8f0:	30c00054 	ori	r3,r6,1
    a8f4:	52000215 	stw	r8,8(r10)
    a8f8:	40c00115 	stw	r3,4(r8)
    a8fc:	313fa036 	bltu	r6,r4,a780 <_free_r+0xb4>
    a900:	00800074 	movhi	r2,1
    a904:	10957404 	addi	r2,r2,21968
    a908:	11400017 	ldw	r5,0(r2)
    a90c:	8809883a 	mov	r4,r17
    a910:	000a5a00 	call	a5a0 <_malloc_trim_r>
    a914:	003f9a06 	br	a780 <_free_r+0xb4>
    a918:	00800104 	movi	r2,4
    a91c:	10c0072e 	bgeu	r2,r3,a93c <_free_r+0x270>
    a920:	00800504 	movi	r2,20
    a924:	10c01936 	bltu	r2,r3,a98c <_free_r+0x2c0>
    a928:	188016c4 	addi	r2,r3,91
    a92c:	100690fa 	slli	r3,r2,3
    a930:	003fb306 	br	a800 <_free_r+0x134>
    a934:	01400044 	movi	r5,1
    a938:	003f7e06 	br	a734 <_free_r+0x68>
    a93c:	3804d1ba 	srli	r2,r7,6
    a940:	10800e04 	addi	r2,r2,56
    a944:	100690fa 	slli	r3,r2,3
    a948:	003fad06 	br	a800 <_free_r+0x134>
    a94c:	22000315 	stw	r8,12(r4)
    a950:	22000215 	stw	r8,8(r4)
    a954:	3a05883a 	add	r2,r7,r8
    a958:	38c00054 	ori	r3,r7,1
    a95c:	11c00015 	stw	r7,0(r2)
    a960:	41000215 	stw	r4,8(r8)
    a964:	40c00115 	stw	r3,4(r8)
    a968:	41000315 	stw	r4,12(r8)
    a96c:	003f8406 	br	a780 <_free_r+0xb4>
    a970:	1005d0ba 	srai	r2,r2,2
    a974:	00c00044 	movi	r3,1
    a978:	51000117 	ldw	r4,4(r10)
    a97c:	1886983a 	sll	r3,r3,r2
    a980:	20c8b03a 	or	r4,r4,r3
    a984:	51000115 	stw	r4,4(r10)
    a988:	003fa706 	br	a828 <_free_r+0x15c>
    a98c:	00801504 	movi	r2,84
    a990:	10c00436 	bltu	r2,r3,a9a4 <_free_r+0x2d8>
    a994:	3804d33a 	srli	r2,r7,12
    a998:	10801b84 	addi	r2,r2,110
    a99c:	100690fa 	slli	r3,r2,3
    a9a0:	003f9706 	br	a800 <_free_r+0x134>
    a9a4:	00805504 	movi	r2,340
    a9a8:	10c00436 	bltu	r2,r3,a9bc <_free_r+0x2f0>
    a9ac:	3804d3fa 	srli	r2,r7,15
    a9b0:	10801dc4 	addi	r2,r2,119
    a9b4:	100690fa 	slli	r3,r2,3
    a9b8:	003f9106 	br	a800 <_free_r+0x134>
    a9bc:	00815504 	movi	r2,1364
    a9c0:	10c0032e 	bgeu	r2,r3,a9d0 <_free_r+0x304>
    a9c4:	00801f84 	movi	r2,126
    a9c8:	00c0fc04 	movi	r3,1008
    a9cc:	003f8c06 	br	a800 <_free_r+0x134>
    a9d0:	3804d4ba 	srli	r2,r7,18
    a9d4:	10801f04 	addi	r2,r2,124
    a9d8:	100690fa 	slli	r3,r2,3
    a9dc:	003f8806 	br	a800 <_free_r+0x134>

0000a9e0 <__sfvwrite_r>:
    a9e0:	30800217 	ldw	r2,8(r6)
    a9e4:	defff504 	addi	sp,sp,-44
    a9e8:	df000915 	stw	fp,36(sp)
    a9ec:	dd800715 	stw	r22,28(sp)
    a9f0:	dc800315 	stw	r18,12(sp)
    a9f4:	dfc00a15 	stw	ra,40(sp)
    a9f8:	ddc00815 	stw	r23,32(sp)
    a9fc:	dd400615 	stw	r21,24(sp)
    aa00:	dd000515 	stw	r20,20(sp)
    aa04:	dcc00415 	stw	r19,16(sp)
    aa08:	dc400215 	stw	r17,8(sp)
    aa0c:	dc000115 	stw	r16,4(sp)
    aa10:	302d883a 	mov	r22,r6
    aa14:	2039883a 	mov	fp,r4
    aa18:	2825883a 	mov	r18,r5
    aa1c:	10001c26 	beq	r2,zero,aa90 <__sfvwrite_r+0xb0>
    aa20:	29c0030b 	ldhu	r7,12(r5)
    aa24:	3880020c 	andi	r2,r7,8
    aa28:	10002726 	beq	r2,zero,aac8 <__sfvwrite_r+0xe8>
    aa2c:	28800417 	ldw	r2,16(r5)
    aa30:	10002526 	beq	r2,zero,aac8 <__sfvwrite_r+0xe8>
    aa34:	3880008c 	andi	r2,r7,2
    aa38:	b5400017 	ldw	r21,0(r22)
    aa3c:	10002826 	beq	r2,zero,aae0 <__sfvwrite_r+0x100>
    aa40:	0021883a 	mov	r16,zero
    aa44:	0023883a 	mov	r17,zero
    aa48:	880d883a 	mov	r6,r17
    aa4c:	e009883a 	mov	r4,fp
    aa50:	00810004 	movi	r2,1024
    aa54:	80006e26 	beq	r16,zero,ac10 <__sfvwrite_r+0x230>
    aa58:	800f883a 	mov	r7,r16
    aa5c:	91400717 	ldw	r5,28(r18)
    aa60:	1400012e 	bgeu	r2,r16,aa68 <__sfvwrite_r+0x88>
    aa64:	100f883a 	mov	r7,r2
    aa68:	90c00917 	ldw	r3,36(r18)
    aa6c:	183ee83a 	callr	r3
    aa70:	1007883a 	mov	r3,r2
    aa74:	80a1c83a 	sub	r16,r16,r2
    aa78:	88a3883a 	add	r17,r17,r2
    aa7c:	00806d0e 	bge	zero,r2,ac34 <__sfvwrite_r+0x254>
    aa80:	b0800217 	ldw	r2,8(r22)
    aa84:	10c5c83a 	sub	r2,r2,r3
    aa88:	b0800215 	stw	r2,8(r22)
    aa8c:	103fee1e 	bne	r2,zero,aa48 <__sfvwrite_r+0x68>
    aa90:	0009883a 	mov	r4,zero
    aa94:	2005883a 	mov	r2,r4
    aa98:	dfc00a17 	ldw	ra,40(sp)
    aa9c:	df000917 	ldw	fp,36(sp)
    aaa0:	ddc00817 	ldw	r23,32(sp)
    aaa4:	dd800717 	ldw	r22,28(sp)
    aaa8:	dd400617 	ldw	r21,24(sp)
    aaac:	dd000517 	ldw	r20,20(sp)
    aab0:	dcc00417 	ldw	r19,16(sp)
    aab4:	dc800317 	ldw	r18,12(sp)
    aab8:	dc400217 	ldw	r17,8(sp)
    aabc:	dc000117 	ldw	r16,4(sp)
    aac0:	dec00b04 	addi	sp,sp,44
    aac4:	f800283a 	ret
    aac8:	00088a80 	call	88a8 <__swsetup_r>
    aacc:	1000e41e 	bne	r2,zero,ae60 <__sfvwrite_r+0x480>
    aad0:	91c0030b 	ldhu	r7,12(r18)
    aad4:	b5400017 	ldw	r21,0(r22)
    aad8:	3880008c 	andi	r2,r7,2
    aadc:	103fd81e 	bne	r2,zero,aa40 <__sfvwrite_r+0x60>
    aae0:	3880004c 	andi	r2,r7,1
    aae4:	1005003a 	cmpeq	r2,r2,zero
    aae8:	10005726 	beq	r2,zero,ac48 <__sfvwrite_r+0x268>
    aaec:	0029883a 	mov	r20,zero
    aaf0:	002f883a 	mov	r23,zero
    aaf4:	a0004226 	beq	r20,zero,ac00 <__sfvwrite_r+0x220>
    aaf8:	3880800c 	andi	r2,r7,512
    aafc:	94000217 	ldw	r16,8(r18)
    ab00:	10008b26 	beq	r2,zero,ad30 <__sfvwrite_r+0x350>
    ab04:	800d883a 	mov	r6,r16
    ab08:	a400a536 	bltu	r20,r16,ada0 <__sfvwrite_r+0x3c0>
    ab0c:	3881200c 	andi	r2,r7,1152
    ab10:	10002726 	beq	r2,zero,abb0 <__sfvwrite_r+0x1d0>
    ab14:	90800517 	ldw	r2,20(r18)
    ab18:	92000417 	ldw	r8,16(r18)
    ab1c:	91400017 	ldw	r5,0(r18)
    ab20:	1087883a 	add	r3,r2,r2
    ab24:	1887883a 	add	r3,r3,r2
    ab28:	1808d7fa 	srli	r4,r3,31
    ab2c:	2a21c83a 	sub	r16,r5,r8
    ab30:	80800044 	addi	r2,r16,1
    ab34:	20c9883a 	add	r4,r4,r3
    ab38:	2027d07a 	srai	r19,r4,1
    ab3c:	a085883a 	add	r2,r20,r2
    ab40:	980d883a 	mov	r6,r19
    ab44:	9880022e 	bgeu	r19,r2,ab50 <__sfvwrite_r+0x170>
    ab48:	1027883a 	mov	r19,r2
    ab4c:	100d883a 	mov	r6,r2
    ab50:	3881000c 	andi	r2,r7,1024
    ab54:	1000b826 	beq	r2,zero,ae38 <__sfvwrite_r+0x458>
    ab58:	300b883a 	mov	r5,r6
    ab5c:	e009883a 	mov	r4,fp
    ab60:	00059240 	call	5924 <_malloc_r>
    ab64:	10003126 	beq	r2,zero,ac2c <__sfvwrite_r+0x24c>
    ab68:	91400417 	ldw	r5,16(r18)
    ab6c:	1009883a 	mov	r4,r2
    ab70:	800d883a 	mov	r6,r16
    ab74:	1023883a 	mov	r17,r2
    ab78:	00061480 	call	6148 <memcpy>
    ab7c:	90c0030b 	ldhu	r3,12(r18)
    ab80:	00beffc4 	movi	r2,-1025
    ab84:	1886703a 	and	r3,r3,r2
    ab88:	18c02014 	ori	r3,r3,128
    ab8c:	90c0030d 	sth	r3,12(r18)
    ab90:	9c07c83a 	sub	r3,r19,r16
    ab94:	8c05883a 	add	r2,r17,r16
    ab98:	a00d883a 	mov	r6,r20
    ab9c:	a021883a 	mov	r16,r20
    aba0:	90800015 	stw	r2,0(r18)
    aba4:	90c00215 	stw	r3,8(r18)
    aba8:	94400415 	stw	r17,16(r18)
    abac:	94c00515 	stw	r19,20(r18)
    abb0:	91000017 	ldw	r4,0(r18)
    abb4:	b80b883a 	mov	r5,r23
    abb8:	a023883a 	mov	r17,r20
    abbc:	000b14c0 	call	b14c <memmove>
    abc0:	90c00217 	ldw	r3,8(r18)
    abc4:	90800017 	ldw	r2,0(r18)
    abc8:	a027883a 	mov	r19,r20
    abcc:	1c07c83a 	sub	r3,r3,r16
    abd0:	1405883a 	add	r2,r2,r16
    abd4:	90c00215 	stw	r3,8(r18)
    abd8:	a021883a 	mov	r16,r20
    abdc:	90800015 	stw	r2,0(r18)
    abe0:	b0800217 	ldw	r2,8(r22)
    abe4:	1405c83a 	sub	r2,r2,r16
    abe8:	b0800215 	stw	r2,8(r22)
    abec:	103fa826 	beq	r2,zero,aa90 <__sfvwrite_r+0xb0>
    abf0:	a469c83a 	sub	r20,r20,r17
    abf4:	91c0030b 	ldhu	r7,12(r18)
    abf8:	bcef883a 	add	r23,r23,r19
    abfc:	a03fbe1e 	bne	r20,zero,aaf8 <__sfvwrite_r+0x118>
    ac00:	adc00017 	ldw	r23,0(r21)
    ac04:	ad000117 	ldw	r20,4(r21)
    ac08:	ad400204 	addi	r21,r21,8
    ac0c:	003fb906 	br	aaf4 <__sfvwrite_r+0x114>
    ac10:	ac400017 	ldw	r17,0(r21)
    ac14:	ac000117 	ldw	r16,4(r21)
    ac18:	ad400204 	addi	r21,r21,8
    ac1c:	003f8a06 	br	aa48 <__sfvwrite_r+0x68>
    ac20:	91400417 	ldw	r5,16(r18)
    ac24:	e009883a 	mov	r4,fp
    ac28:	000a6cc0 	call	a6cc <_free_r>
    ac2c:	00800304 	movi	r2,12
    ac30:	e0800015 	stw	r2,0(fp)
    ac34:	9080030b 	ldhu	r2,12(r18)
    ac38:	013fffc4 	movi	r4,-1
    ac3c:	10801014 	ori	r2,r2,64
    ac40:	9080030d 	sth	r2,12(r18)
    ac44:	003f9306 	br	aa94 <__sfvwrite_r+0xb4>
    ac48:	0027883a 	mov	r19,zero
    ac4c:	002f883a 	mov	r23,zero
    ac50:	d8000015 	stw	zero,0(sp)
    ac54:	0029883a 	mov	r20,zero
    ac58:	98001e26 	beq	r19,zero,acd4 <__sfvwrite_r+0x2f4>
    ac5c:	d8c00017 	ldw	r3,0(sp)
    ac60:	1804c03a 	cmpne	r2,r3,zero
    ac64:	10005e26 	beq	r2,zero,ade0 <__sfvwrite_r+0x400>
    ac68:	9821883a 	mov	r16,r19
    ac6c:	a4c0012e 	bgeu	r20,r19,ac74 <__sfvwrite_r+0x294>
    ac70:	a021883a 	mov	r16,r20
    ac74:	91000017 	ldw	r4,0(r18)
    ac78:	90800417 	ldw	r2,16(r18)
    ac7c:	91800217 	ldw	r6,8(r18)
    ac80:	91c00517 	ldw	r7,20(r18)
    ac84:	1100022e 	bgeu	r2,r4,ac90 <__sfvwrite_r+0x2b0>
    ac88:	31e3883a 	add	r17,r6,r7
    ac8c:	8c001616 	blt	r17,r16,ace8 <__sfvwrite_r+0x308>
    ac90:	81c03816 	blt	r16,r7,ad74 <__sfvwrite_r+0x394>
    ac94:	90c00917 	ldw	r3,36(r18)
    ac98:	91400717 	ldw	r5,28(r18)
    ac9c:	e009883a 	mov	r4,fp
    aca0:	b80d883a 	mov	r6,r23
    aca4:	183ee83a 	callr	r3
    aca8:	1023883a 	mov	r17,r2
    acac:	00bfe10e 	bge	zero,r2,ac34 <__sfvwrite_r+0x254>
    acb0:	a469c83a 	sub	r20,r20,r17
    acb4:	a0001826 	beq	r20,zero,ad18 <__sfvwrite_r+0x338>
    acb8:	b0800217 	ldw	r2,8(r22)
    acbc:	1445c83a 	sub	r2,r2,r17
    acc0:	b0800215 	stw	r2,8(r22)
    acc4:	103f7226 	beq	r2,zero,aa90 <__sfvwrite_r+0xb0>
    acc8:	9c67c83a 	sub	r19,r19,r17
    accc:	bc6f883a 	add	r23,r23,r17
    acd0:	983fe21e 	bne	r19,zero,ac5c <__sfvwrite_r+0x27c>
    acd4:	adc00017 	ldw	r23,0(r21)
    acd8:	acc00117 	ldw	r19,4(r21)
    acdc:	ad400204 	addi	r21,r21,8
    ace0:	d8000015 	stw	zero,0(sp)
    ace4:	003fdc06 	br	ac58 <__sfvwrite_r+0x278>
    ace8:	b80b883a 	mov	r5,r23
    acec:	880d883a 	mov	r6,r17
    acf0:	000b14c0 	call	b14c <memmove>
    acf4:	90c00017 	ldw	r3,0(r18)
    acf8:	e009883a 	mov	r4,fp
    acfc:	900b883a 	mov	r5,r18
    ad00:	1c47883a 	add	r3,r3,r17
    ad04:	90c00015 	stw	r3,0(r18)
    ad08:	000a3700 	call	a370 <_fflush_r>
    ad0c:	103fc91e 	bne	r2,zero,ac34 <__sfvwrite_r+0x254>
    ad10:	a469c83a 	sub	r20,r20,r17
    ad14:	a03fe81e 	bne	r20,zero,acb8 <__sfvwrite_r+0x2d8>
    ad18:	e009883a 	mov	r4,fp
    ad1c:	900b883a 	mov	r5,r18
    ad20:	000a3700 	call	a370 <_fflush_r>
    ad24:	103fc31e 	bne	r2,zero,ac34 <__sfvwrite_r+0x254>
    ad28:	d8000015 	stw	zero,0(sp)
    ad2c:	003fe206 	br	acb8 <__sfvwrite_r+0x2d8>
    ad30:	91000017 	ldw	r4,0(r18)
    ad34:	90800417 	ldw	r2,16(r18)
    ad38:	1100022e 	bgeu	r2,r4,ad44 <__sfvwrite_r+0x364>
    ad3c:	8023883a 	mov	r17,r16
    ad40:	85003136 	bltu	r16,r20,ae08 <__sfvwrite_r+0x428>
    ad44:	91c00517 	ldw	r7,20(r18)
    ad48:	a1c01836 	bltu	r20,r7,adac <__sfvwrite_r+0x3cc>
    ad4c:	90c00917 	ldw	r3,36(r18)
    ad50:	91400717 	ldw	r5,28(r18)
    ad54:	e009883a 	mov	r4,fp
    ad58:	b80d883a 	mov	r6,r23
    ad5c:	183ee83a 	callr	r3
    ad60:	1021883a 	mov	r16,r2
    ad64:	00bfb30e 	bge	zero,r2,ac34 <__sfvwrite_r+0x254>
    ad68:	1023883a 	mov	r17,r2
    ad6c:	1027883a 	mov	r19,r2
    ad70:	003f9b06 	br	abe0 <__sfvwrite_r+0x200>
    ad74:	b80b883a 	mov	r5,r23
    ad78:	800d883a 	mov	r6,r16
    ad7c:	000b14c0 	call	b14c <memmove>
    ad80:	90c00217 	ldw	r3,8(r18)
    ad84:	90800017 	ldw	r2,0(r18)
    ad88:	8023883a 	mov	r17,r16
    ad8c:	1c07c83a 	sub	r3,r3,r16
    ad90:	1405883a 	add	r2,r2,r16
    ad94:	90c00215 	stw	r3,8(r18)
    ad98:	90800015 	stw	r2,0(r18)
    ad9c:	003fc406 	br	acb0 <__sfvwrite_r+0x2d0>
    ada0:	a00d883a 	mov	r6,r20
    ada4:	a021883a 	mov	r16,r20
    ada8:	003f8106 	br	abb0 <__sfvwrite_r+0x1d0>
    adac:	b80b883a 	mov	r5,r23
    adb0:	a00d883a 	mov	r6,r20
    adb4:	000b14c0 	call	b14c <memmove>
    adb8:	90c00217 	ldw	r3,8(r18)
    adbc:	90800017 	ldw	r2,0(r18)
    adc0:	a021883a 	mov	r16,r20
    adc4:	1d07c83a 	sub	r3,r3,r20
    adc8:	1505883a 	add	r2,r2,r20
    adcc:	a023883a 	mov	r17,r20
    add0:	a027883a 	mov	r19,r20
    add4:	90c00215 	stw	r3,8(r18)
    add8:	90800015 	stw	r2,0(r18)
    addc:	003f8006 	br	abe0 <__sfvwrite_r+0x200>
    ade0:	b809883a 	mov	r4,r23
    ade4:	01400284 	movi	r5,10
    ade8:	980d883a 	mov	r6,r19
    adec:	00060640 	call	6064 <memchr>
    adf0:	10001726 	beq	r2,zero,ae50 <__sfvwrite_r+0x470>
    adf4:	15c5c83a 	sub	r2,r2,r23
    adf8:	15000044 	addi	r20,r2,1
    adfc:	00800044 	movi	r2,1
    ae00:	d8800015 	stw	r2,0(sp)
    ae04:	003f9806 	br	ac68 <__sfvwrite_r+0x288>
    ae08:	b80b883a 	mov	r5,r23
    ae0c:	800d883a 	mov	r6,r16
    ae10:	000b14c0 	call	b14c <memmove>
    ae14:	90c00017 	ldw	r3,0(r18)
    ae18:	e009883a 	mov	r4,fp
    ae1c:	900b883a 	mov	r5,r18
    ae20:	1c07883a 	add	r3,r3,r16
    ae24:	90c00015 	stw	r3,0(r18)
    ae28:	8027883a 	mov	r19,r16
    ae2c:	000a3700 	call	a370 <_fflush_r>
    ae30:	103f6b26 	beq	r2,zero,abe0 <__sfvwrite_r+0x200>
    ae34:	003f7f06 	br	ac34 <__sfvwrite_r+0x254>
    ae38:	400b883a 	mov	r5,r8
    ae3c:	e009883a 	mov	r4,fp
    ae40:	000c3300 	call	c330 <_realloc_r>
    ae44:	103f7626 	beq	r2,zero,ac20 <__sfvwrite_r+0x240>
    ae48:	1023883a 	mov	r17,r2
    ae4c:	003f5006 	br	ab90 <__sfvwrite_r+0x1b0>
    ae50:	00c00044 	movi	r3,1
    ae54:	9d000044 	addi	r20,r19,1
    ae58:	d8c00015 	stw	r3,0(sp)
    ae5c:	003f8206 	br	ac68 <__sfvwrite_r+0x288>
    ae60:	9080030b 	ldhu	r2,12(r18)
    ae64:	00c00244 	movi	r3,9
    ae68:	013fffc4 	movi	r4,-1
    ae6c:	10801014 	ori	r2,r2,64
    ae70:	9080030d 	sth	r2,12(r18)
    ae74:	e0c00015 	stw	r3,0(fp)
    ae78:	003f0606 	br	aa94 <__sfvwrite_r+0xb4>

0000ae7c <__locale_charset>:
    ae7c:	d0a00517 	ldw	r2,-32748(gp)
    ae80:	f800283a 	ret

0000ae84 <_localeconv_r>:
    ae84:	00800074 	movhi	r2,1
    ae88:	10874e04 	addi	r2,r2,7480
    ae8c:	f800283a 	ret

0000ae90 <localeconv>:
    ae90:	00800074 	movhi	r2,1
    ae94:	108ea504 	addi	r2,r2,14996
    ae98:	11000017 	ldw	r4,0(r2)
    ae9c:	000ae841 	jmpi	ae84 <_localeconv_r>

0000aea0 <_setlocale_r>:
    aea0:	defffc04 	addi	sp,sp,-16
    aea4:	00c00074 	movhi	r3,1
    aea8:	18c72404 	addi	r3,r3,7312
    aeac:	dc800215 	stw	r18,8(sp)
    aeb0:	dc400115 	stw	r17,4(sp)
    aeb4:	dc000015 	stw	r16,0(sp)
    aeb8:	2023883a 	mov	r17,r4
    aebc:	2825883a 	mov	r18,r5
    aec0:	dfc00315 	stw	ra,12(sp)
    aec4:	3021883a 	mov	r16,r6
    aec8:	3009883a 	mov	r4,r6
    aecc:	180b883a 	mov	r5,r3
    aed0:	30000926 	beq	r6,zero,aef8 <_setlocale_r+0x58>
    aed4:	000c9940 	call	c994 <strcmp>
    aed8:	8009883a 	mov	r4,r16
    aedc:	01400074 	movhi	r5,1
    aee0:	29473504 	addi	r5,r5,7380
    aee4:	10000b1e 	bne	r2,zero,af14 <_setlocale_r+0x74>
    aee8:	8c000d15 	stw	r16,52(r17)
    aeec:	8c800c15 	stw	r18,48(r17)
    aef0:	00c00074 	movhi	r3,1
    aef4:	18c72404 	addi	r3,r3,7312
    aef8:	1805883a 	mov	r2,r3
    aefc:	dfc00317 	ldw	ra,12(sp)
    af00:	dc800217 	ldw	r18,8(sp)
    af04:	dc400117 	ldw	r17,4(sp)
    af08:	dc000017 	ldw	r16,0(sp)
    af0c:	dec00404 	addi	sp,sp,16
    af10:	f800283a 	ret
    af14:	000c9940 	call	c994 <strcmp>
    af18:	0007883a 	mov	r3,zero
    af1c:	103ff226 	beq	r2,zero,aee8 <_setlocale_r+0x48>
    af20:	003ff506 	br	aef8 <_setlocale_r+0x58>

0000af24 <setlocale>:
    af24:	01800074 	movhi	r6,1
    af28:	318ea504 	addi	r6,r6,14996
    af2c:	2007883a 	mov	r3,r4
    af30:	31000017 	ldw	r4,0(r6)
    af34:	280d883a 	mov	r6,r5
    af38:	180b883a 	mov	r5,r3
    af3c:	000aea01 	jmpi	aea0 <_setlocale_r>

0000af40 <_lseek_r>:
    af40:	defffd04 	addi	sp,sp,-12
    af44:	dc000015 	stw	r16,0(sp)
    af48:	04000074 	movhi	r16,1
    af4c:	84157704 	addi	r16,r16,21980
    af50:	dc400115 	stw	r17,4(sp)
    af54:	80000015 	stw	zero,0(r16)
    af58:	2023883a 	mov	r17,r4
    af5c:	2809883a 	mov	r4,r5
    af60:	300b883a 	mov	r5,r6
    af64:	380d883a 	mov	r6,r7
    af68:	dfc00215 	stw	ra,8(sp)
    af6c:	000e0400 	call	e040 <lseek>
    af70:	1007883a 	mov	r3,r2
    af74:	00bfffc4 	movi	r2,-1
    af78:	18800626 	beq	r3,r2,af94 <_lseek_r+0x54>
    af7c:	1805883a 	mov	r2,r3
    af80:	dfc00217 	ldw	ra,8(sp)
    af84:	dc400117 	ldw	r17,4(sp)
    af88:	dc000017 	ldw	r16,0(sp)
    af8c:	dec00304 	addi	sp,sp,12
    af90:	f800283a 	ret
    af94:	80800017 	ldw	r2,0(r16)
    af98:	103ff826 	beq	r2,zero,af7c <_lseek_r+0x3c>
    af9c:	88800015 	stw	r2,0(r17)
    afa0:	1805883a 	mov	r2,r3
    afa4:	dfc00217 	ldw	ra,8(sp)
    afa8:	dc400117 	ldw	r17,4(sp)
    afac:	dc000017 	ldw	r16,0(sp)
    afb0:	dec00304 	addi	sp,sp,12
    afb4:	f800283a 	ret

0000afb8 <__smakebuf_r>:
    afb8:	2880030b 	ldhu	r2,12(r5)
    afbc:	deffed04 	addi	sp,sp,-76
    afc0:	dc401015 	stw	r17,64(sp)
    afc4:	1080008c 	andi	r2,r2,2
    afc8:	dc000f15 	stw	r16,60(sp)
    afcc:	dfc01215 	stw	ra,72(sp)
    afd0:	dc801115 	stw	r18,68(sp)
    afd4:	2821883a 	mov	r16,r5
    afd8:	2023883a 	mov	r17,r4
    afdc:	10000b26 	beq	r2,zero,b00c <__smakebuf_r+0x54>
    afe0:	28c010c4 	addi	r3,r5,67
    afe4:	00800044 	movi	r2,1
    afe8:	28800515 	stw	r2,20(r5)
    afec:	28c00415 	stw	r3,16(r5)
    aff0:	28c00015 	stw	r3,0(r5)
    aff4:	dfc01217 	ldw	ra,72(sp)
    aff8:	dc801117 	ldw	r18,68(sp)
    affc:	dc401017 	ldw	r17,64(sp)
    b000:	dc000f17 	ldw	r16,60(sp)
    b004:	dec01304 	addi	sp,sp,76
    b008:	f800283a 	ret
    b00c:	2940038f 	ldh	r5,14(r5)
    b010:	28002116 	blt	r5,zero,b098 <__smakebuf_r+0xe0>
    b014:	d80d883a 	mov	r6,sp
    b018:	000cb180 	call	cb18 <_fstat_r>
    b01c:	10001e16 	blt	r2,zero,b098 <__smakebuf_r+0xe0>
    b020:	d8800117 	ldw	r2,4(sp)
    b024:	00e00014 	movui	r3,32768
    b028:	113c000c 	andi	r4,r2,61440
    b02c:	20c03126 	beq	r4,r3,b0f4 <__smakebuf_r+0x13c>
    b030:	8080030b 	ldhu	r2,12(r16)
    b034:	00c80004 	movi	r3,8192
    b038:	10820014 	ori	r2,r2,2048
    b03c:	8080030d 	sth	r2,12(r16)
    b040:	20c01e26 	beq	r4,r3,b0bc <__smakebuf_r+0x104>
    b044:	04810004 	movi	r18,1024
    b048:	8809883a 	mov	r4,r17
    b04c:	900b883a 	mov	r5,r18
    b050:	00059240 	call	5924 <_malloc_r>
    b054:	1009883a 	mov	r4,r2
    b058:	10003126 	beq	r2,zero,b120 <__smakebuf_r+0x168>
    b05c:	80c0030b 	ldhu	r3,12(r16)
    b060:	00800034 	movhi	r2,0
    b064:	10953504 	addi	r2,r2,21716
    b068:	88800f15 	stw	r2,60(r17)
    b06c:	18c02014 	ori	r3,r3,128
    b070:	84800515 	stw	r18,20(r16)
    b074:	80c0030d 	sth	r3,12(r16)
    b078:	81000415 	stw	r4,16(r16)
    b07c:	81000015 	stw	r4,0(r16)
    b080:	dfc01217 	ldw	ra,72(sp)
    b084:	dc801117 	ldw	r18,68(sp)
    b088:	dc401017 	ldw	r17,64(sp)
    b08c:	dc000f17 	ldw	r16,60(sp)
    b090:	dec01304 	addi	sp,sp,76
    b094:	f800283a 	ret
    b098:	80c0030b 	ldhu	r3,12(r16)
    b09c:	1880200c 	andi	r2,r3,128
    b0a0:	10000426 	beq	r2,zero,b0b4 <__smakebuf_r+0xfc>
    b0a4:	04801004 	movi	r18,64
    b0a8:	18820014 	ori	r2,r3,2048
    b0ac:	8080030d 	sth	r2,12(r16)
    b0b0:	003fe506 	br	b048 <__smakebuf_r+0x90>
    b0b4:	04810004 	movi	r18,1024
    b0b8:	003ffb06 	br	b0a8 <__smakebuf_r+0xf0>
    b0bc:	8140038f 	ldh	r5,14(r16)
    b0c0:	8809883a 	mov	r4,r17
    b0c4:	000cb8c0 	call	cb8c <_isatty_r>
    b0c8:	103fde26 	beq	r2,zero,b044 <__smakebuf_r+0x8c>
    b0cc:	8080030b 	ldhu	r2,12(r16)
    b0d0:	80c010c4 	addi	r3,r16,67
    b0d4:	04810004 	movi	r18,1024
    b0d8:	10800054 	ori	r2,r2,1
    b0dc:	8080030d 	sth	r2,12(r16)
    b0e0:	00800044 	movi	r2,1
    b0e4:	80c00415 	stw	r3,16(r16)
    b0e8:	80800515 	stw	r2,20(r16)
    b0ec:	80c00015 	stw	r3,0(r16)
    b0f0:	003fd506 	br	b048 <__smakebuf_r+0x90>
    b0f4:	80c00a17 	ldw	r3,40(r16)
    b0f8:	00800034 	movhi	r2,0
    b0fc:	1099ce04 	addi	r2,r2,26424
    b100:	18bfcb1e 	bne	r3,r2,b030 <__smakebuf_r+0x78>
    b104:	8080030b 	ldhu	r2,12(r16)
    b108:	00c10004 	movi	r3,1024
    b10c:	1825883a 	mov	r18,r3
    b110:	10c4b03a 	or	r2,r2,r3
    b114:	8080030d 	sth	r2,12(r16)
    b118:	80c01315 	stw	r3,76(r16)
    b11c:	003fca06 	br	b048 <__smakebuf_r+0x90>
    b120:	8100030b 	ldhu	r4,12(r16)
    b124:	2080800c 	andi	r2,r4,512
    b128:	103fb21e 	bne	r2,zero,aff4 <__smakebuf_r+0x3c>
    b12c:	80c010c4 	addi	r3,r16,67
    b130:	21000094 	ori	r4,r4,2
    b134:	00800044 	movi	r2,1
    b138:	80800515 	stw	r2,20(r16)
    b13c:	8100030d 	sth	r4,12(r16)
    b140:	80c00415 	stw	r3,16(r16)
    b144:	80c00015 	stw	r3,0(r16)
    b148:	003faa06 	br	aff4 <__smakebuf_r+0x3c>

0000b14c <memmove>:
    b14c:	2807883a 	mov	r3,r5
    b150:	2011883a 	mov	r8,r4
    b154:	29000c2e 	bgeu	r5,r4,b188 <memmove+0x3c>
    b158:	298f883a 	add	r7,r5,r6
    b15c:	21c00a2e 	bgeu	r4,r7,b188 <memmove+0x3c>
    b160:	30000726 	beq	r6,zero,b180 <memmove+0x34>
    b164:	2187883a 	add	r3,r4,r6
    b168:	198dc83a 	sub	r6,r3,r6
    b16c:	39ffffc4 	addi	r7,r7,-1
    b170:	38800003 	ldbu	r2,0(r7)
    b174:	18ffffc4 	addi	r3,r3,-1
    b178:	18800005 	stb	r2,0(r3)
    b17c:	19bffb1e 	bne	r3,r6,b16c <memmove+0x20>
    b180:	2005883a 	mov	r2,r4
    b184:	f800283a 	ret
    b188:	01c003c4 	movi	r7,15
    b18c:	39800a36 	bltu	r7,r6,b1b8 <memmove+0x6c>
    b190:	303ffb26 	beq	r6,zero,b180 <memmove+0x34>
    b194:	400f883a 	mov	r7,r8
    b198:	320d883a 	add	r6,r6,r8
    b19c:	28800003 	ldbu	r2,0(r5)
    b1a0:	29400044 	addi	r5,r5,1
    b1a4:	38800005 	stb	r2,0(r7)
    b1a8:	39c00044 	addi	r7,r7,1
    b1ac:	39bffb1e 	bne	r7,r6,b19c <memmove+0x50>
    b1b0:	2005883a 	mov	r2,r4
    b1b4:	f800283a 	ret
    b1b8:	1904b03a 	or	r2,r3,r4
    b1bc:	108000cc 	andi	r2,r2,3
    b1c0:	103ff31e 	bne	r2,zero,b190 <memmove+0x44>
    b1c4:	3811883a 	mov	r8,r7
    b1c8:	180b883a 	mov	r5,r3
    b1cc:	200f883a 	mov	r7,r4
    b1d0:	28c00017 	ldw	r3,0(r5)
    b1d4:	31bffc04 	addi	r6,r6,-16
    b1d8:	38c00015 	stw	r3,0(r7)
    b1dc:	28800117 	ldw	r2,4(r5)
    b1e0:	38800115 	stw	r2,4(r7)
    b1e4:	28c00217 	ldw	r3,8(r5)
    b1e8:	38c00215 	stw	r3,8(r7)
    b1ec:	28800317 	ldw	r2,12(r5)
    b1f0:	29400404 	addi	r5,r5,16
    b1f4:	38800315 	stw	r2,12(r7)
    b1f8:	39c00404 	addi	r7,r7,16
    b1fc:	41bff436 	bltu	r8,r6,b1d0 <memmove+0x84>
    b200:	008000c4 	movi	r2,3
    b204:	1180072e 	bgeu	r2,r6,b224 <memmove+0xd8>
    b208:	1007883a 	mov	r3,r2
    b20c:	28800017 	ldw	r2,0(r5)
    b210:	31bfff04 	addi	r6,r6,-4
    b214:	29400104 	addi	r5,r5,4
    b218:	38800015 	stw	r2,0(r7)
    b21c:	39c00104 	addi	r7,r7,4
    b220:	19bffa36 	bltu	r3,r6,b20c <memmove+0xc0>
    b224:	3811883a 	mov	r8,r7
    b228:	003fd906 	br	b190 <memmove+0x44>

0000b22c <_Bfree>:
    b22c:	28000826 	beq	r5,zero,b250 <_Bfree+0x24>
    b230:	28800117 	ldw	r2,4(r5)
    b234:	21001317 	ldw	r4,76(r4)
    b238:	1085883a 	add	r2,r2,r2
    b23c:	1085883a 	add	r2,r2,r2
    b240:	1105883a 	add	r2,r2,r4
    b244:	10c00017 	ldw	r3,0(r2)
    b248:	28c00015 	stw	r3,0(r5)
    b24c:	11400015 	stw	r5,0(r2)
    b250:	f800283a 	ret

0000b254 <__hi0bits>:
    b254:	20bfffec 	andhi	r2,r4,65535
    b258:	10001426 	beq	r2,zero,b2ac <__hi0bits+0x58>
    b25c:	0007883a 	mov	r3,zero
    b260:	20bfc02c 	andhi	r2,r4,65280
    b264:	1000021e 	bne	r2,zero,b270 <__hi0bits+0x1c>
    b268:	2008923a 	slli	r4,r4,8
    b26c:	18c00204 	addi	r3,r3,8
    b270:	20bc002c 	andhi	r2,r4,61440
    b274:	1000021e 	bne	r2,zero,b280 <__hi0bits+0x2c>
    b278:	2008913a 	slli	r4,r4,4
    b27c:	18c00104 	addi	r3,r3,4
    b280:	20b0002c 	andhi	r2,r4,49152
    b284:	1000031e 	bne	r2,zero,b294 <__hi0bits+0x40>
    b288:	2105883a 	add	r2,r4,r4
    b28c:	18c00084 	addi	r3,r3,2
    b290:	1089883a 	add	r4,r2,r2
    b294:	20000316 	blt	r4,zero,b2a4 <__hi0bits+0x50>
    b298:	2090002c 	andhi	r2,r4,16384
    b29c:	10000626 	beq	r2,zero,b2b8 <__hi0bits+0x64>
    b2a0:	18c00044 	addi	r3,r3,1
    b2a4:	1805883a 	mov	r2,r3
    b2a8:	f800283a 	ret
    b2ac:	2008943a 	slli	r4,r4,16
    b2b0:	00c00404 	movi	r3,16
    b2b4:	003fea06 	br	b260 <__hi0bits+0xc>
    b2b8:	00c00804 	movi	r3,32
    b2bc:	1805883a 	mov	r2,r3
    b2c0:	f800283a 	ret

0000b2c4 <__lo0bits>:
    b2c4:	20c00017 	ldw	r3,0(r4)
    b2c8:	188001cc 	andi	r2,r3,7
    b2cc:	10000a26 	beq	r2,zero,b2f8 <__lo0bits+0x34>
    b2d0:	1880004c 	andi	r2,r3,1
    b2d4:	1005003a 	cmpeq	r2,r2,zero
    b2d8:	10002126 	beq	r2,zero,b360 <__lo0bits+0x9c>
    b2dc:	1880008c 	andi	r2,r3,2
    b2e0:	1000251e 	bne	r2,zero,b378 <__lo0bits+0xb4>
    b2e4:	1804d0ba 	srli	r2,r3,2
    b2e8:	01400084 	movi	r5,2
    b2ec:	20800015 	stw	r2,0(r4)
    b2f0:	2805883a 	mov	r2,r5
    b2f4:	f800283a 	ret
    b2f8:	18bfffcc 	andi	r2,r3,65535
    b2fc:	10001526 	beq	r2,zero,b354 <__lo0bits+0x90>
    b300:	000b883a 	mov	r5,zero
    b304:	18803fcc 	andi	r2,r3,255
    b308:	1000021e 	bne	r2,zero,b314 <__lo0bits+0x50>
    b30c:	1806d23a 	srli	r3,r3,8
    b310:	29400204 	addi	r5,r5,8
    b314:	188003cc 	andi	r2,r3,15
    b318:	1000021e 	bne	r2,zero,b324 <__lo0bits+0x60>
    b31c:	1806d13a 	srli	r3,r3,4
    b320:	29400104 	addi	r5,r5,4
    b324:	188000cc 	andi	r2,r3,3
    b328:	1000021e 	bne	r2,zero,b334 <__lo0bits+0x70>
    b32c:	1806d0ba 	srli	r3,r3,2
    b330:	29400084 	addi	r5,r5,2
    b334:	1880004c 	andi	r2,r3,1
    b338:	1000031e 	bne	r2,zero,b348 <__lo0bits+0x84>
    b33c:	1806d07a 	srli	r3,r3,1
    b340:	18000a26 	beq	r3,zero,b36c <__lo0bits+0xa8>
    b344:	29400044 	addi	r5,r5,1
    b348:	2805883a 	mov	r2,r5
    b34c:	20c00015 	stw	r3,0(r4)
    b350:	f800283a 	ret
    b354:	1806d43a 	srli	r3,r3,16
    b358:	01400404 	movi	r5,16
    b35c:	003fe906 	br	b304 <__lo0bits+0x40>
    b360:	000b883a 	mov	r5,zero
    b364:	2805883a 	mov	r2,r5
    b368:	f800283a 	ret
    b36c:	01400804 	movi	r5,32
    b370:	2805883a 	mov	r2,r5
    b374:	f800283a 	ret
    b378:	1804d07a 	srli	r2,r3,1
    b37c:	01400044 	movi	r5,1
    b380:	20800015 	stw	r2,0(r4)
    b384:	003fda06 	br	b2f0 <__lo0bits+0x2c>

0000b388 <__mcmp>:
    b388:	20800417 	ldw	r2,16(r4)
    b38c:	28c00417 	ldw	r3,16(r5)
    b390:	10cfc83a 	sub	r7,r2,r3
    b394:	38000c1e 	bne	r7,zero,b3c8 <__mcmp+0x40>
    b398:	18c5883a 	add	r2,r3,r3
    b39c:	1085883a 	add	r2,r2,r2
    b3a0:	10c00504 	addi	r3,r2,20
    b3a4:	21000504 	addi	r4,r4,20
    b3a8:	28cb883a 	add	r5,r5,r3
    b3ac:	2085883a 	add	r2,r4,r2
    b3b0:	10bfff04 	addi	r2,r2,-4
    b3b4:	297fff04 	addi	r5,r5,-4
    b3b8:	11800017 	ldw	r6,0(r2)
    b3bc:	28c00017 	ldw	r3,0(r5)
    b3c0:	30c0031e 	bne	r6,r3,b3d0 <__mcmp+0x48>
    b3c4:	20bffa36 	bltu	r4,r2,b3b0 <__mcmp+0x28>
    b3c8:	3805883a 	mov	r2,r7
    b3cc:	f800283a 	ret
    b3d0:	30c00336 	bltu	r6,r3,b3e0 <__mcmp+0x58>
    b3d4:	01c00044 	movi	r7,1
    b3d8:	3805883a 	mov	r2,r7
    b3dc:	f800283a 	ret
    b3e0:	01ffffc4 	movi	r7,-1
    b3e4:	003ff806 	br	b3c8 <__mcmp+0x40>

0000b3e8 <__ulp>:
    b3e8:	295ffc2c 	andhi	r5,r5,32752
    b3ec:	013f3034 	movhi	r4,64704
    b3f0:	290b883a 	add	r5,r5,r4
    b3f4:	0145c83a 	sub	r2,zero,r5
    b3f8:	1007d53a 	srai	r3,r2,20
    b3fc:	000d883a 	mov	r6,zero
    b400:	0140040e 	bge	zero,r5,b414 <__ulp+0x2c>
    b404:	280f883a 	mov	r7,r5
    b408:	3807883a 	mov	r3,r7
    b40c:	3005883a 	mov	r2,r6
    b410:	f800283a 	ret
    b414:	008004c4 	movi	r2,19
    b418:	193ffb04 	addi	r4,r3,-20
    b41c:	10c00c0e 	bge	r2,r3,b450 <__ulp+0x68>
    b420:	008007c4 	movi	r2,31
    b424:	1107c83a 	sub	r3,r2,r4
    b428:	00800784 	movi	r2,30
    b42c:	01400044 	movi	r5,1
    b430:	11000216 	blt	r2,r4,b43c <__ulp+0x54>
    b434:	00800044 	movi	r2,1
    b438:	10ca983a 	sll	r5,r2,r3
    b43c:	000f883a 	mov	r7,zero
    b440:	280d883a 	mov	r6,r5
    b444:	3807883a 	mov	r3,r7
    b448:	3005883a 	mov	r2,r6
    b44c:	f800283a 	ret
    b450:	00800234 	movhi	r2,8
    b454:	10cfd83a 	sra	r7,r2,r3
    b458:	000d883a 	mov	r6,zero
    b45c:	3005883a 	mov	r2,r6
    b460:	3807883a 	mov	r3,r7
    b464:	f800283a 	ret

0000b468 <__b2d>:
    b468:	20800417 	ldw	r2,16(r4)
    b46c:	defff904 	addi	sp,sp,-28
    b470:	dd000415 	stw	r20,16(sp)
    b474:	1085883a 	add	r2,r2,r2
    b478:	25000504 	addi	r20,r4,20
    b47c:	1085883a 	add	r2,r2,r2
    b480:	dc000015 	stw	r16,0(sp)
    b484:	a0a1883a 	add	r16,r20,r2
    b488:	dd400515 	stw	r21,20(sp)
    b48c:	857fff17 	ldw	r21,-4(r16)
    b490:	dc400115 	stw	r17,4(sp)
    b494:	dfc00615 	stw	ra,24(sp)
    b498:	a809883a 	mov	r4,r21
    b49c:	2823883a 	mov	r17,r5
    b4a0:	dcc00315 	stw	r19,12(sp)
    b4a4:	dc800215 	stw	r18,8(sp)
    b4a8:	000b2540 	call	b254 <__hi0bits>
    b4ac:	100b883a 	mov	r5,r2
    b4b0:	00800804 	movi	r2,32
    b4b4:	1145c83a 	sub	r2,r2,r5
    b4b8:	88800015 	stw	r2,0(r17)
    b4bc:	00800284 	movi	r2,10
    b4c0:	80ffff04 	addi	r3,r16,-4
    b4c4:	11401416 	blt	r2,r5,b518 <__b2d+0xb0>
    b4c8:	008002c4 	movi	r2,11
    b4cc:	1149c83a 	sub	r4,r2,r5
    b4d0:	a0c02736 	bltu	r20,r3,b570 <__b2d+0x108>
    b4d4:	000d883a 	mov	r6,zero
    b4d8:	28800544 	addi	r2,r5,21
    b4dc:	a906d83a 	srl	r3,r21,r4
    b4e0:	a884983a 	sll	r2,r21,r2
    b4e4:	1ccffc34 	orhi	r19,r3,16368
    b4e8:	11a4b03a 	or	r18,r2,r6
    b4ec:	9005883a 	mov	r2,r18
    b4f0:	9807883a 	mov	r3,r19
    b4f4:	dfc00617 	ldw	ra,24(sp)
    b4f8:	dd400517 	ldw	r21,20(sp)
    b4fc:	dd000417 	ldw	r20,16(sp)
    b500:	dcc00317 	ldw	r19,12(sp)
    b504:	dc800217 	ldw	r18,8(sp)
    b508:	dc400117 	ldw	r17,4(sp)
    b50c:	dc000017 	ldw	r16,0(sp)
    b510:	dec00704 	addi	sp,sp,28
    b514:	f800283a 	ret
    b518:	a0c00e36 	bltu	r20,r3,b554 <__b2d+0xec>
    b51c:	293ffd44 	addi	r4,r5,-11
    b520:	000d883a 	mov	r6,zero
    b524:	20000f26 	beq	r4,zero,b564 <__b2d+0xfc>
    b528:	00800804 	movi	r2,32
    b52c:	110bc83a 	sub	r5,r2,r4
    b530:	a0c01236 	bltu	r20,r3,b57c <__b2d+0x114>
    b534:	000f883a 	mov	r7,zero
    b538:	a904983a 	sll	r2,r21,r4
    b53c:	3146d83a 	srl	r3,r6,r5
    b540:	3108983a 	sll	r4,r6,r4
    b544:	108ffc34 	orhi	r2,r2,16368
    b548:	18a6b03a 	or	r19,r3,r2
    b54c:	3924b03a 	or	r18,r7,r4
    b550:	003fe606 	br	b4ec <__b2d+0x84>
    b554:	293ffd44 	addi	r4,r5,-11
    b558:	81bffe17 	ldw	r6,-8(r16)
    b55c:	80fffe04 	addi	r3,r16,-8
    b560:	203ff11e 	bne	r4,zero,b528 <__b2d+0xc0>
    b564:	accffc34 	orhi	r19,r21,16368
    b568:	3025883a 	mov	r18,r6
    b56c:	003fdf06 	br	b4ec <__b2d+0x84>
    b570:	18bfff17 	ldw	r2,-4(r3)
    b574:	110cd83a 	srl	r6,r2,r4
    b578:	003fd706 	br	b4d8 <__b2d+0x70>
    b57c:	18bfff17 	ldw	r2,-4(r3)
    b580:	114ed83a 	srl	r7,r2,r5
    b584:	003fec06 	br	b538 <__b2d+0xd0>

0000b588 <__ratio>:
    b588:	defff904 	addi	sp,sp,-28
    b58c:	dc400215 	stw	r17,8(sp)
    b590:	2823883a 	mov	r17,r5
    b594:	d80b883a 	mov	r5,sp
    b598:	dfc00615 	stw	ra,24(sp)
    b59c:	dd000515 	stw	r20,20(sp)
    b5a0:	dcc00415 	stw	r19,16(sp)
    b5a4:	dc800315 	stw	r18,12(sp)
    b5a8:	2025883a 	mov	r18,r4
    b5ac:	000b4680 	call	b468 <__b2d>
    b5b0:	8809883a 	mov	r4,r17
    b5b4:	d9400104 	addi	r5,sp,4
    b5b8:	1027883a 	mov	r19,r2
    b5bc:	1829883a 	mov	r20,r3
    b5c0:	000b4680 	call	b468 <__b2d>
    b5c4:	89000417 	ldw	r4,16(r17)
    b5c8:	91c00417 	ldw	r7,16(r18)
    b5cc:	d9800117 	ldw	r6,4(sp)
    b5d0:	180b883a 	mov	r5,r3
    b5d4:	390fc83a 	sub	r7,r7,r4
    b5d8:	1009883a 	mov	r4,r2
    b5dc:	d8800017 	ldw	r2,0(sp)
    b5e0:	380e917a 	slli	r7,r7,5
    b5e4:	2011883a 	mov	r8,r4
    b5e8:	1185c83a 	sub	r2,r2,r6
    b5ec:	11c5883a 	add	r2,r2,r7
    b5f0:	1006953a 	slli	r3,r2,20
    b5f4:	2813883a 	mov	r9,r5
    b5f8:	00800d0e 	bge	zero,r2,b630 <__ratio+0xa8>
    b5fc:	1d29883a 	add	r20,r3,r20
    b600:	a00b883a 	mov	r5,r20
    b604:	480f883a 	mov	r7,r9
    b608:	9809883a 	mov	r4,r19
    b60c:	400d883a 	mov	r6,r8
    b610:	000419c0 	call	419c <__divdf3>
    b614:	dfc00617 	ldw	ra,24(sp)
    b618:	dd000517 	ldw	r20,20(sp)
    b61c:	dcc00417 	ldw	r19,16(sp)
    b620:	dc800317 	ldw	r18,12(sp)
    b624:	dc400217 	ldw	r17,8(sp)
    b628:	dec00704 	addi	sp,sp,28
    b62c:	f800283a 	ret
    b630:	28d3c83a 	sub	r9,r5,r3
    b634:	003ff206 	br	b600 <__ratio+0x78>

0000b638 <_mprec_log10>:
    b638:	defffe04 	addi	sp,sp,-8
    b63c:	008005c4 	movi	r2,23
    b640:	dc000015 	stw	r16,0(sp)
    b644:	dfc00115 	stw	ra,4(sp)
    b648:	2021883a 	mov	r16,r4
    b64c:	11000c16 	blt	r2,r4,b680 <_mprec_log10+0x48>
    b650:	200490fa 	slli	r2,r4,3
    b654:	00c00074 	movhi	r3,1
    b658:	18c75a04 	addi	r3,r3,7528
    b65c:	10c5883a 	add	r2,r2,r3
    b660:	12400117 	ldw	r9,4(r2)
    b664:	12000017 	ldw	r8,0(r2)
    b668:	4807883a 	mov	r3,r9
    b66c:	4005883a 	mov	r2,r8
    b670:	dfc00117 	ldw	ra,4(sp)
    b674:	dc000017 	ldw	r16,0(sp)
    b678:	dec00204 	addi	sp,sp,8
    b67c:	f800283a 	ret
    b680:	0011883a 	mov	r8,zero
    b684:	024ffc34 	movhi	r9,16368
    b688:	0005883a 	mov	r2,zero
    b68c:	00d00934 	movhi	r3,16420
    b690:	480b883a 	mov	r5,r9
    b694:	4009883a 	mov	r4,r8
    b698:	180f883a 	mov	r7,r3
    b69c:	100d883a 	mov	r6,r2
    b6a0:	0003dd80 	call	3dd8 <__muldf3>
    b6a4:	843fffc4 	addi	r16,r16,-1
    b6a8:	1011883a 	mov	r8,r2
    b6ac:	1813883a 	mov	r9,r3
    b6b0:	803ff51e 	bne	r16,zero,b688 <_mprec_log10+0x50>
    b6b4:	4005883a 	mov	r2,r8
    b6b8:	4807883a 	mov	r3,r9
    b6bc:	dfc00117 	ldw	ra,4(sp)
    b6c0:	dc000017 	ldw	r16,0(sp)
    b6c4:	dec00204 	addi	sp,sp,8
    b6c8:	f800283a 	ret

0000b6cc <__copybits>:
    b6cc:	297fffc4 	addi	r5,r5,-1
    b6d0:	30800417 	ldw	r2,16(r6)
    b6d4:	280bd17a 	srai	r5,r5,5
    b6d8:	31800504 	addi	r6,r6,20
    b6dc:	1085883a 	add	r2,r2,r2
    b6e0:	294b883a 	add	r5,r5,r5
    b6e4:	294b883a 	add	r5,r5,r5
    b6e8:	1085883a 	add	r2,r2,r2
    b6ec:	290b883a 	add	r5,r5,r4
    b6f0:	3087883a 	add	r3,r6,r2
    b6f4:	29400104 	addi	r5,r5,4
    b6f8:	30c0052e 	bgeu	r6,r3,b710 <__copybits+0x44>
    b6fc:	30800017 	ldw	r2,0(r6)
    b700:	31800104 	addi	r6,r6,4
    b704:	20800015 	stw	r2,0(r4)
    b708:	21000104 	addi	r4,r4,4
    b70c:	30fffb36 	bltu	r6,r3,b6fc <__copybits+0x30>
    b710:	2140032e 	bgeu	r4,r5,b720 <__copybits+0x54>
    b714:	20000015 	stw	zero,0(r4)
    b718:	21000104 	addi	r4,r4,4
    b71c:	217ffd36 	bltu	r4,r5,b714 <__copybits+0x48>
    b720:	f800283a 	ret

0000b724 <__any_on>:
    b724:	20800417 	ldw	r2,16(r4)
    b728:	2807d17a 	srai	r3,r5,5
    b72c:	21000504 	addi	r4,r4,20
    b730:	10c00d0e 	bge	r2,r3,b768 <__any_on+0x44>
    b734:	1085883a 	add	r2,r2,r2
    b738:	1085883a 	add	r2,r2,r2
    b73c:	208d883a 	add	r6,r4,r2
    b740:	2180182e 	bgeu	r4,r6,b7a4 <__any_on+0x80>
    b744:	30bfff17 	ldw	r2,-4(r6)
    b748:	30ffff04 	addi	r3,r6,-4
    b74c:	1000041e 	bne	r2,zero,b760 <__any_on+0x3c>
    b750:	20c0142e 	bgeu	r4,r3,b7a4 <__any_on+0x80>
    b754:	18ffff04 	addi	r3,r3,-4
    b758:	18800017 	ldw	r2,0(r3)
    b75c:	103ffc26 	beq	r2,zero,b750 <__any_on+0x2c>
    b760:	00800044 	movi	r2,1
    b764:	f800283a 	ret
    b768:	18800a0e 	bge	r3,r2,b794 <__any_on+0x70>
    b76c:	294007cc 	andi	r5,r5,31
    b770:	28000826 	beq	r5,zero,b794 <__any_on+0x70>
    b774:	18c5883a 	add	r2,r3,r3
    b778:	1085883a 	add	r2,r2,r2
    b77c:	208d883a 	add	r6,r4,r2
    b780:	30c00017 	ldw	r3,0(r6)
    b784:	1944d83a 	srl	r2,r3,r5
    b788:	1144983a 	sll	r2,r2,r5
    b78c:	18bff41e 	bne	r3,r2,b760 <__any_on+0x3c>
    b790:	003feb06 	br	b740 <__any_on+0x1c>
    b794:	18c5883a 	add	r2,r3,r3
    b798:	1085883a 	add	r2,r2,r2
    b79c:	208d883a 	add	r6,r4,r2
    b7a0:	003fe706 	br	b740 <__any_on+0x1c>
    b7a4:	0005883a 	mov	r2,zero
    b7a8:	f800283a 	ret

0000b7ac <_Balloc>:
    b7ac:	20c01317 	ldw	r3,76(r4)
    b7b0:	defffb04 	addi	sp,sp,-20
    b7b4:	dcc00315 	stw	r19,12(sp)
    b7b8:	dc800215 	stw	r18,8(sp)
    b7bc:	dfc00415 	stw	ra,16(sp)
    b7c0:	2825883a 	mov	r18,r5
    b7c4:	dc400115 	stw	r17,4(sp)
    b7c8:	dc000015 	stw	r16,0(sp)
    b7cc:	2027883a 	mov	r19,r4
    b7d0:	01800404 	movi	r6,16
    b7d4:	01400104 	movi	r5,4
    b7d8:	18001726 	beq	r3,zero,b838 <_Balloc+0x8c>
    b7dc:	01400044 	movi	r5,1
    b7e0:	9485883a 	add	r2,r18,r18
    b7e4:	2ca2983a 	sll	r17,r5,r18
    b7e8:	1085883a 	add	r2,r2,r2
    b7ec:	10c7883a 	add	r3,r2,r3
    b7f0:	1c000017 	ldw	r16,0(r3)
    b7f4:	8c4d883a 	add	r6,r17,r17
    b7f8:	318d883a 	add	r6,r6,r6
    b7fc:	9809883a 	mov	r4,r19
    b800:	31800504 	addi	r6,r6,20
    b804:	80001226 	beq	r16,zero,b850 <_Balloc+0xa4>
    b808:	80800017 	ldw	r2,0(r16)
    b80c:	18800015 	stw	r2,0(r3)
    b810:	80000415 	stw	zero,16(r16)
    b814:	80000315 	stw	zero,12(r16)
    b818:	8005883a 	mov	r2,r16
    b81c:	dfc00417 	ldw	ra,16(sp)
    b820:	dcc00317 	ldw	r19,12(sp)
    b824:	dc800217 	ldw	r18,8(sp)
    b828:	dc400117 	ldw	r17,4(sp)
    b82c:	dc000017 	ldw	r16,0(sp)
    b830:	dec00504 	addi	sp,sp,20
    b834:	f800283a 	ret
    b838:	000ca500 	call	ca50 <_calloc_r>
    b83c:	1007883a 	mov	r3,r2
    b840:	0021883a 	mov	r16,zero
    b844:	98801315 	stw	r2,76(r19)
    b848:	103fe41e 	bne	r2,zero,b7dc <_Balloc+0x30>
    b84c:	003ff206 	br	b818 <_Balloc+0x6c>
    b850:	000ca500 	call	ca50 <_calloc_r>
    b854:	103ff026 	beq	r2,zero,b818 <_Balloc+0x6c>
    b858:	1021883a 	mov	r16,r2
    b85c:	14800115 	stw	r18,4(r2)
    b860:	14400215 	stw	r17,8(r2)
    b864:	003fea06 	br	b810 <_Balloc+0x64>

0000b868 <__d2b>:
    b868:	defff504 	addi	sp,sp,-44
    b86c:	dcc00515 	stw	r19,20(sp)
    b870:	04c00044 	movi	r19,1
    b874:	dc000215 	stw	r16,8(sp)
    b878:	2821883a 	mov	r16,r5
    b87c:	980b883a 	mov	r5,r19
    b880:	ddc00915 	stw	r23,36(sp)
    b884:	dd800815 	stw	r22,32(sp)
    b888:	dd400715 	stw	r21,28(sp)
    b88c:	dd000615 	stw	r20,24(sp)
    b890:	dc800415 	stw	r18,16(sp)
    b894:	dc400315 	stw	r17,12(sp)
    b898:	dfc00a15 	stw	ra,40(sp)
    b89c:	3023883a 	mov	r17,r6
    b8a0:	382d883a 	mov	r22,r7
    b8a4:	ddc00b17 	ldw	r23,44(sp)
    b8a8:	000b7ac0 	call	b7ac <_Balloc>
    b8ac:	1025883a 	mov	r18,r2
    b8b0:	00a00034 	movhi	r2,32768
    b8b4:	10bfffc4 	addi	r2,r2,-1
    b8b8:	8888703a 	and	r4,r17,r2
    b8bc:	202ad53a 	srli	r21,r4,20
    b8c0:	00800434 	movhi	r2,16
    b8c4:	10bfffc4 	addi	r2,r2,-1
    b8c8:	8886703a 	and	r3,r17,r2
    b8cc:	a829003a 	cmpeq	r20,r21,zero
    b8d0:	800b883a 	mov	r5,r16
    b8d4:	d8c00115 	stw	r3,4(sp)
    b8d8:	94000504 	addi	r16,r18,20
    b8dc:	a000021e 	bne	r20,zero,b8e8 <__d2b+0x80>
    b8e0:	18c00434 	orhi	r3,r3,16
    b8e4:	d8c00115 	stw	r3,4(sp)
    b8e8:	28002726 	beq	r5,zero,b988 <__d2b+0x120>
    b8ec:	d809883a 	mov	r4,sp
    b8f0:	d9400015 	stw	r5,0(sp)
    b8f4:	000b2c40 	call	b2c4 <__lo0bits>
    b8f8:	100d883a 	mov	r6,r2
    b8fc:	10003526 	beq	r2,zero,b9d4 <__d2b+0x16c>
    b900:	d8c00117 	ldw	r3,4(sp)
    b904:	00800804 	movi	r2,32
    b908:	1185c83a 	sub	r2,r2,r6
    b90c:	d9000017 	ldw	r4,0(sp)
    b910:	1886983a 	sll	r3,r3,r2
    b914:	1906b03a 	or	r3,r3,r4
    b918:	90c00515 	stw	r3,20(r18)
    b91c:	d8c00117 	ldw	r3,4(sp)
    b920:	1986d83a 	srl	r3,r3,r6
    b924:	d8c00115 	stw	r3,4(sp)
    b928:	180b003a 	cmpeq	r5,r3,zero
    b92c:	00800084 	movi	r2,2
    b930:	114bc83a 	sub	r5,r2,r5
    b934:	80c00115 	stw	r3,4(r16)
    b938:	91400415 	stw	r5,16(r18)
    b93c:	a0001a1e 	bne	r20,zero,b9a8 <__d2b+0x140>
    b940:	3545883a 	add	r2,r6,r21
    b944:	10bef344 	addi	r2,r2,-1075
    b948:	00c00d44 	movi	r3,53
    b94c:	b0800015 	stw	r2,0(r22)
    b950:	1987c83a 	sub	r3,r3,r6
    b954:	b8c00015 	stw	r3,0(r23)
    b958:	9005883a 	mov	r2,r18
    b95c:	dfc00a17 	ldw	ra,40(sp)
    b960:	ddc00917 	ldw	r23,36(sp)
    b964:	dd800817 	ldw	r22,32(sp)
    b968:	dd400717 	ldw	r21,28(sp)
    b96c:	dd000617 	ldw	r20,24(sp)
    b970:	dcc00517 	ldw	r19,20(sp)
    b974:	dc800417 	ldw	r18,16(sp)
    b978:	dc400317 	ldw	r17,12(sp)
    b97c:	dc000217 	ldw	r16,8(sp)
    b980:	dec00b04 	addi	sp,sp,44
    b984:	f800283a 	ret
    b988:	d9000104 	addi	r4,sp,4
    b98c:	000b2c40 	call	b2c4 <__lo0bits>
    b990:	11800804 	addi	r6,r2,32
    b994:	d8800117 	ldw	r2,4(sp)
    b998:	94c00415 	stw	r19,16(r18)
    b99c:	980b883a 	mov	r5,r19
    b9a0:	90800515 	stw	r2,20(r18)
    b9a4:	a03fe626 	beq	r20,zero,b940 <__d2b+0xd8>
    b9a8:	2945883a 	add	r2,r5,r5
    b9ac:	1085883a 	add	r2,r2,r2
    b9b0:	1405883a 	add	r2,r2,r16
    b9b4:	113fff17 	ldw	r4,-4(r2)
    b9b8:	30fef384 	addi	r3,r6,-1074
    b9bc:	2820917a 	slli	r16,r5,5
    b9c0:	b0c00015 	stw	r3,0(r22)
    b9c4:	000b2540 	call	b254 <__hi0bits>
    b9c8:	80a1c83a 	sub	r16,r16,r2
    b9cc:	bc000015 	stw	r16,0(r23)
    b9d0:	003fe106 	br	b958 <__d2b+0xf0>
    b9d4:	d8800017 	ldw	r2,0(sp)
    b9d8:	90800515 	stw	r2,20(r18)
    b9dc:	d8c00117 	ldw	r3,4(sp)
    b9e0:	003fd106 	br	b928 <__d2b+0xc0>

0000b9e4 <__mdiff>:
    b9e4:	defffb04 	addi	sp,sp,-20
    b9e8:	dc000015 	stw	r16,0(sp)
    b9ec:	2821883a 	mov	r16,r5
    b9f0:	dc800215 	stw	r18,8(sp)
    b9f4:	300b883a 	mov	r5,r6
    b9f8:	2025883a 	mov	r18,r4
    b9fc:	8009883a 	mov	r4,r16
    ba00:	dc400115 	stw	r17,4(sp)
    ba04:	dfc00415 	stw	ra,16(sp)
    ba08:	dcc00315 	stw	r19,12(sp)
    ba0c:	3023883a 	mov	r17,r6
    ba10:	000b3880 	call	b388 <__mcmp>
    ba14:	10004226 	beq	r2,zero,bb20 <__mdiff+0x13c>
    ba18:	10005016 	blt	r2,zero,bb5c <__mdiff+0x178>
    ba1c:	0027883a 	mov	r19,zero
    ba20:	81400117 	ldw	r5,4(r16)
    ba24:	9009883a 	mov	r4,r18
    ba28:	000b7ac0 	call	b7ac <_Balloc>
    ba2c:	1019883a 	mov	r12,r2
    ba30:	82800417 	ldw	r10,16(r16)
    ba34:	88800417 	ldw	r2,16(r17)
    ba38:	81800504 	addi	r6,r16,20
    ba3c:	5287883a 	add	r3,r10,r10
    ba40:	1085883a 	add	r2,r2,r2
    ba44:	18c7883a 	add	r3,r3,r3
    ba48:	1085883a 	add	r2,r2,r2
    ba4c:	8a000504 	addi	r8,r17,20
    ba50:	64c00315 	stw	r19,12(r12)
    ba54:	30db883a 	add	r13,r6,r3
    ba58:	4097883a 	add	r11,r8,r2
    ba5c:	61c00504 	addi	r7,r12,20
    ba60:	0013883a 	mov	r9,zero
    ba64:	31000017 	ldw	r4,0(r6)
    ba68:	41400017 	ldw	r5,0(r8)
    ba6c:	42000104 	addi	r8,r8,4
    ba70:	20bfffcc 	andi	r2,r4,65535
    ba74:	28ffffcc 	andi	r3,r5,65535
    ba78:	10c5c83a 	sub	r2,r2,r3
    ba7c:	1245883a 	add	r2,r2,r9
    ba80:	2008d43a 	srli	r4,r4,16
    ba84:	280ad43a 	srli	r5,r5,16
    ba88:	1007d43a 	srai	r3,r2,16
    ba8c:	3880000d 	sth	r2,0(r7)
    ba90:	2149c83a 	sub	r4,r4,r5
    ba94:	20c9883a 	add	r4,r4,r3
    ba98:	3900008d 	sth	r4,2(r7)
    ba9c:	31800104 	addi	r6,r6,4
    baa0:	39c00104 	addi	r7,r7,4
    baa4:	2013d43a 	srai	r9,r4,16
    baa8:	42ffee36 	bltu	r8,r11,ba64 <__mdiff+0x80>
    baac:	33400c2e 	bgeu	r6,r13,bae0 <__mdiff+0xfc>
    bab0:	30800017 	ldw	r2,0(r6)
    bab4:	31800104 	addi	r6,r6,4
    bab8:	10ffffcc 	andi	r3,r2,65535
    babc:	1a47883a 	add	r3,r3,r9
    bac0:	1004d43a 	srli	r2,r2,16
    bac4:	1809d43a 	srai	r4,r3,16
    bac8:	38c0000d 	sth	r3,0(r7)
    bacc:	1105883a 	add	r2,r2,r4
    bad0:	3880008d 	sth	r2,2(r7)
    bad4:	1013d43a 	srai	r9,r2,16
    bad8:	39c00104 	addi	r7,r7,4
    badc:	337ff436 	bltu	r6,r13,bab0 <__mdiff+0xcc>
    bae0:	38bfff17 	ldw	r2,-4(r7)
    bae4:	38ffff04 	addi	r3,r7,-4
    bae8:	1000041e 	bne	r2,zero,bafc <__mdiff+0x118>
    baec:	18ffff04 	addi	r3,r3,-4
    baf0:	18800017 	ldw	r2,0(r3)
    baf4:	52bfffc4 	addi	r10,r10,-1
    baf8:	103ffc26 	beq	r2,zero,baec <__mdiff+0x108>
    bafc:	6005883a 	mov	r2,r12
    bb00:	62800415 	stw	r10,16(r12)
    bb04:	dfc00417 	ldw	ra,16(sp)
    bb08:	dcc00317 	ldw	r19,12(sp)
    bb0c:	dc800217 	ldw	r18,8(sp)
    bb10:	dc400117 	ldw	r17,4(sp)
    bb14:	dc000017 	ldw	r16,0(sp)
    bb18:	dec00504 	addi	sp,sp,20
    bb1c:	f800283a 	ret
    bb20:	9009883a 	mov	r4,r18
    bb24:	000b883a 	mov	r5,zero
    bb28:	000b7ac0 	call	b7ac <_Balloc>
    bb2c:	1019883a 	mov	r12,r2
    bb30:	00800044 	movi	r2,1
    bb34:	60800415 	stw	r2,16(r12)
    bb38:	6005883a 	mov	r2,r12
    bb3c:	60000515 	stw	zero,20(r12)
    bb40:	dfc00417 	ldw	ra,16(sp)
    bb44:	dcc00317 	ldw	r19,12(sp)
    bb48:	dc800217 	ldw	r18,8(sp)
    bb4c:	dc400117 	ldw	r17,4(sp)
    bb50:	dc000017 	ldw	r16,0(sp)
    bb54:	dec00504 	addi	sp,sp,20
    bb58:	f800283a 	ret
    bb5c:	880d883a 	mov	r6,r17
    bb60:	04c00044 	movi	r19,1
    bb64:	8023883a 	mov	r17,r16
    bb68:	3021883a 	mov	r16,r6
    bb6c:	003fac06 	br	ba20 <__mdiff+0x3c>

0000bb70 <__lshift>:
    bb70:	defff904 	addi	sp,sp,-28
    bb74:	28800417 	ldw	r2,16(r5)
    bb78:	dc000015 	stw	r16,0(sp)
    bb7c:	3021d17a 	srai	r16,r6,5
    bb80:	28c00217 	ldw	r3,8(r5)
    bb84:	10800044 	addi	r2,r2,1
    bb88:	dc400115 	stw	r17,4(sp)
    bb8c:	80a3883a 	add	r17,r16,r2
    bb90:	dd400515 	stw	r21,20(sp)
    bb94:	dd000415 	stw	r20,16(sp)
    bb98:	dc800215 	stw	r18,8(sp)
    bb9c:	dfc00615 	stw	ra,24(sp)
    bba0:	2825883a 	mov	r18,r5
    bba4:	dcc00315 	stw	r19,12(sp)
    bba8:	3029883a 	mov	r20,r6
    bbac:	202b883a 	mov	r21,r4
    bbb0:	29400117 	ldw	r5,4(r5)
    bbb4:	1c40030e 	bge	r3,r17,bbc4 <__lshift+0x54>
    bbb8:	18c7883a 	add	r3,r3,r3
    bbbc:	29400044 	addi	r5,r5,1
    bbc0:	1c7ffd16 	blt	r3,r17,bbb8 <__lshift+0x48>
    bbc4:	a809883a 	mov	r4,r21
    bbc8:	000b7ac0 	call	b7ac <_Balloc>
    bbcc:	1027883a 	mov	r19,r2
    bbd0:	11400504 	addi	r5,r2,20
    bbd4:	0400090e 	bge	zero,r16,bbfc <__lshift+0x8c>
    bbd8:	2805883a 	mov	r2,r5
    bbdc:	0007883a 	mov	r3,zero
    bbe0:	18c00044 	addi	r3,r3,1
    bbe4:	10000015 	stw	zero,0(r2)
    bbe8:	10800104 	addi	r2,r2,4
    bbec:	80fffc1e 	bne	r16,r3,bbe0 <__lshift+0x70>
    bbf0:	8405883a 	add	r2,r16,r16
    bbf4:	1085883a 	add	r2,r2,r2
    bbf8:	288b883a 	add	r5,r5,r2
    bbfc:	90800417 	ldw	r2,16(r18)
    bc00:	91000504 	addi	r4,r18,20
    bc04:	a18007cc 	andi	r6,r20,31
    bc08:	1085883a 	add	r2,r2,r2
    bc0c:	1085883a 	add	r2,r2,r2
    bc10:	208f883a 	add	r7,r4,r2
    bc14:	30001e26 	beq	r6,zero,bc90 <__lshift+0x120>
    bc18:	00800804 	movi	r2,32
    bc1c:	1191c83a 	sub	r8,r2,r6
    bc20:	0007883a 	mov	r3,zero
    bc24:	20800017 	ldw	r2,0(r4)
    bc28:	1184983a 	sll	r2,r2,r6
    bc2c:	1884b03a 	or	r2,r3,r2
    bc30:	28800015 	stw	r2,0(r5)
    bc34:	20c00017 	ldw	r3,0(r4)
    bc38:	21000104 	addi	r4,r4,4
    bc3c:	29400104 	addi	r5,r5,4
    bc40:	1a06d83a 	srl	r3,r3,r8
    bc44:	21fff736 	bltu	r4,r7,bc24 <__lshift+0xb4>
    bc48:	28c00015 	stw	r3,0(r5)
    bc4c:	18000126 	beq	r3,zero,bc54 <__lshift+0xe4>
    bc50:	8c400044 	addi	r17,r17,1
    bc54:	88bfffc4 	addi	r2,r17,-1
    bc58:	98800415 	stw	r2,16(r19)
    bc5c:	a809883a 	mov	r4,r21
    bc60:	900b883a 	mov	r5,r18
    bc64:	000b22c0 	call	b22c <_Bfree>
    bc68:	9805883a 	mov	r2,r19
    bc6c:	dfc00617 	ldw	ra,24(sp)
    bc70:	dd400517 	ldw	r21,20(sp)
    bc74:	dd000417 	ldw	r20,16(sp)
    bc78:	dcc00317 	ldw	r19,12(sp)
    bc7c:	dc800217 	ldw	r18,8(sp)
    bc80:	dc400117 	ldw	r17,4(sp)
    bc84:	dc000017 	ldw	r16,0(sp)
    bc88:	dec00704 	addi	sp,sp,28
    bc8c:	f800283a 	ret
    bc90:	20800017 	ldw	r2,0(r4)
    bc94:	21000104 	addi	r4,r4,4
    bc98:	28800015 	stw	r2,0(r5)
    bc9c:	29400104 	addi	r5,r5,4
    bca0:	21ffec2e 	bgeu	r4,r7,bc54 <__lshift+0xe4>
    bca4:	20800017 	ldw	r2,0(r4)
    bca8:	21000104 	addi	r4,r4,4
    bcac:	28800015 	stw	r2,0(r5)
    bcb0:	29400104 	addi	r5,r5,4
    bcb4:	21fff636 	bltu	r4,r7,bc90 <__lshift+0x120>
    bcb8:	003fe606 	br	bc54 <__lshift+0xe4>

0000bcbc <__multiply>:
    bcbc:	defff004 	addi	sp,sp,-64
    bcc0:	dc800815 	stw	r18,32(sp)
    bcc4:	dc400715 	stw	r17,28(sp)
    bcc8:	2c800417 	ldw	r18,16(r5)
    bccc:	34400417 	ldw	r17,16(r6)
    bcd0:	dcc00915 	stw	r19,36(sp)
    bcd4:	dc000615 	stw	r16,24(sp)
    bcd8:	dfc00f15 	stw	ra,60(sp)
    bcdc:	df000e15 	stw	fp,56(sp)
    bce0:	ddc00d15 	stw	r23,52(sp)
    bce4:	dd800c15 	stw	r22,48(sp)
    bce8:	dd400b15 	stw	r21,44(sp)
    bcec:	dd000a15 	stw	r20,40(sp)
    bcf0:	2821883a 	mov	r16,r5
    bcf4:	3027883a 	mov	r19,r6
    bcf8:	9440040e 	bge	r18,r17,bd0c <__multiply+0x50>
    bcfc:	8825883a 	mov	r18,r17
    bd00:	2c400417 	ldw	r17,16(r5)
    bd04:	2827883a 	mov	r19,r5
    bd08:	3021883a 	mov	r16,r6
    bd0c:	80800217 	ldw	r2,8(r16)
    bd10:	9447883a 	add	r3,r18,r17
    bd14:	d8c00415 	stw	r3,16(sp)
    bd18:	81400117 	ldw	r5,4(r16)
    bd1c:	10c0010e 	bge	r2,r3,bd24 <__multiply+0x68>
    bd20:	29400044 	addi	r5,r5,1
    bd24:	000b7ac0 	call	b7ac <_Balloc>
    bd28:	d8800515 	stw	r2,20(sp)
    bd2c:	d9000417 	ldw	r4,16(sp)
    bd30:	d8c00517 	ldw	r3,20(sp)
    bd34:	2105883a 	add	r2,r4,r4
    bd38:	1085883a 	add	r2,r2,r2
    bd3c:	19000504 	addi	r4,r3,20
    bd40:	2085883a 	add	r2,r4,r2
    bd44:	d8800315 	stw	r2,12(sp)
    bd48:	2080052e 	bgeu	r4,r2,bd60 <__multiply+0xa4>
    bd4c:	2005883a 	mov	r2,r4
    bd50:	d8c00317 	ldw	r3,12(sp)
    bd54:	10000015 	stw	zero,0(r2)
    bd58:	10800104 	addi	r2,r2,4
    bd5c:	10fffc36 	bltu	r2,r3,bd50 <__multiply+0x94>
    bd60:	8c45883a 	add	r2,r17,r17
    bd64:	9487883a 	add	r3,r18,r18
    bd68:	9dc00504 	addi	r23,r19,20
    bd6c:	1085883a 	add	r2,r2,r2
    bd70:	84000504 	addi	r16,r16,20
    bd74:	18c7883a 	add	r3,r3,r3
    bd78:	b885883a 	add	r2,r23,r2
    bd7c:	dc000015 	stw	r16,0(sp)
    bd80:	d8800215 	stw	r2,8(sp)
    bd84:	80f9883a 	add	fp,r16,r3
    bd88:	b880432e 	bgeu	r23,r2,be98 <__multiply+0x1dc>
    bd8c:	d9000115 	stw	r4,4(sp)
    bd90:	b9000017 	ldw	r4,0(r23)
    bd94:	253fffcc 	andi	r20,r4,65535
    bd98:	a0001a26 	beq	r20,zero,be04 <__multiply+0x148>
    bd9c:	dcc00017 	ldw	r19,0(sp)
    bda0:	dc800117 	ldw	r18,4(sp)
    bda4:	002b883a 	mov	r21,zero
    bda8:	9c400017 	ldw	r17,0(r19)
    bdac:	94000017 	ldw	r16,0(r18)
    bdb0:	a009883a 	mov	r4,r20
    bdb4:	897fffcc 	andi	r5,r17,65535
    bdb8:	00049540 	call	4954 <__mulsi3>
    bdbc:	880ad43a 	srli	r5,r17,16
    bdc0:	80ffffcc 	andi	r3,r16,65535
    bdc4:	a8c7883a 	add	r3,r21,r3
    bdc8:	a009883a 	mov	r4,r20
    bdcc:	10e3883a 	add	r17,r2,r3
    bdd0:	8020d43a 	srli	r16,r16,16
    bdd4:	00049540 	call	4954 <__mulsi3>
    bdd8:	8806d43a 	srli	r3,r17,16
    bddc:	1405883a 	add	r2,r2,r16
    bde0:	9cc00104 	addi	r19,r19,4
    bde4:	1887883a 	add	r3,r3,r2
    bde8:	90c0008d 	sth	r3,2(r18)
    bdec:	9440000d 	sth	r17,0(r18)
    bdf0:	182ad43a 	srli	r21,r3,16
    bdf4:	94800104 	addi	r18,r18,4
    bdf8:	9f3feb36 	bltu	r19,fp,bda8 <__multiply+0xec>
    bdfc:	95400015 	stw	r21,0(r18)
    be00:	b9000017 	ldw	r4,0(r23)
    be04:	202ad43a 	srli	r21,r4,16
    be08:	a8001c26 	beq	r21,zero,be7c <__multiply+0x1c0>
    be0c:	d9000117 	ldw	r4,4(sp)
    be10:	dd000017 	ldw	r20,0(sp)
    be14:	002d883a 	mov	r22,zero
    be18:	24c00017 	ldw	r19,0(r4)
    be1c:	2025883a 	mov	r18,r4
    be20:	9823883a 	mov	r17,r19
    be24:	a4000017 	ldw	r16,0(r20)
    be28:	a809883a 	mov	r4,r21
    be2c:	a5000104 	addi	r20,r20,4
    be30:	817fffcc 	andi	r5,r16,65535
    be34:	00049540 	call	4954 <__mulsi3>
    be38:	8806d43a 	srli	r3,r17,16
    be3c:	800ad43a 	srli	r5,r16,16
    be40:	94c0000d 	sth	r19,0(r18)
    be44:	b0c7883a 	add	r3,r22,r3
    be48:	10e1883a 	add	r16,r2,r3
    be4c:	9400008d 	sth	r16,2(r18)
    be50:	a809883a 	mov	r4,r21
    be54:	94800104 	addi	r18,r18,4
    be58:	00049540 	call	4954 <__mulsi3>
    be5c:	94400017 	ldw	r17,0(r18)
    be60:	8020d43a 	srli	r16,r16,16
    be64:	88ffffcc 	andi	r3,r17,65535
    be68:	10c5883a 	add	r2,r2,r3
    be6c:	80a7883a 	add	r19,r16,r2
    be70:	982cd43a 	srli	r22,r19,16
    be74:	a73feb36 	bltu	r20,fp,be24 <__multiply+0x168>
    be78:	94c00015 	stw	r19,0(r18)
    be7c:	d8800217 	ldw	r2,8(sp)
    be80:	bdc00104 	addi	r23,r23,4
    be84:	b880042e 	bgeu	r23,r2,be98 <__multiply+0x1dc>
    be88:	d8c00117 	ldw	r3,4(sp)
    be8c:	18c00104 	addi	r3,r3,4
    be90:	d8c00115 	stw	r3,4(sp)
    be94:	003fbe06 	br	bd90 <__multiply+0xd4>
    be98:	d9000417 	ldw	r4,16(sp)
    be9c:	01000c0e 	bge	zero,r4,bed0 <__multiply+0x214>
    bea0:	d8c00317 	ldw	r3,12(sp)
    bea4:	18bfff17 	ldw	r2,-4(r3)
    bea8:	18ffff04 	addi	r3,r3,-4
    beac:	10000326 	beq	r2,zero,bebc <__multiply+0x200>
    beb0:	00000706 	br	bed0 <__multiply+0x214>
    beb4:	18800017 	ldw	r2,0(r3)
    beb8:	1000051e 	bne	r2,zero,bed0 <__multiply+0x214>
    bebc:	d9000417 	ldw	r4,16(sp)
    bec0:	18ffff04 	addi	r3,r3,-4
    bec4:	213fffc4 	addi	r4,r4,-1
    bec8:	d9000415 	stw	r4,16(sp)
    becc:	203ff91e 	bne	r4,zero,beb4 <__multiply+0x1f8>
    bed0:	d8800417 	ldw	r2,16(sp)
    bed4:	d8c00517 	ldw	r3,20(sp)
    bed8:	18800415 	stw	r2,16(r3)
    bedc:	1805883a 	mov	r2,r3
    bee0:	dfc00f17 	ldw	ra,60(sp)
    bee4:	df000e17 	ldw	fp,56(sp)
    bee8:	ddc00d17 	ldw	r23,52(sp)
    beec:	dd800c17 	ldw	r22,48(sp)
    bef0:	dd400b17 	ldw	r21,44(sp)
    bef4:	dd000a17 	ldw	r20,40(sp)
    bef8:	dcc00917 	ldw	r19,36(sp)
    befc:	dc800817 	ldw	r18,32(sp)
    bf00:	dc400717 	ldw	r17,28(sp)
    bf04:	dc000617 	ldw	r16,24(sp)
    bf08:	dec01004 	addi	sp,sp,64
    bf0c:	f800283a 	ret

0000bf10 <__i2b>:
    bf10:	defffd04 	addi	sp,sp,-12
    bf14:	dc000015 	stw	r16,0(sp)
    bf18:	04000044 	movi	r16,1
    bf1c:	dc800115 	stw	r18,4(sp)
    bf20:	2825883a 	mov	r18,r5
    bf24:	800b883a 	mov	r5,r16
    bf28:	dfc00215 	stw	ra,8(sp)
    bf2c:	000b7ac0 	call	b7ac <_Balloc>
    bf30:	14000415 	stw	r16,16(r2)
    bf34:	14800515 	stw	r18,20(r2)
    bf38:	dfc00217 	ldw	ra,8(sp)
    bf3c:	dc800117 	ldw	r18,4(sp)
    bf40:	dc000017 	ldw	r16,0(sp)
    bf44:	dec00304 	addi	sp,sp,12
    bf48:	f800283a 	ret

0000bf4c <__multadd>:
    bf4c:	defff604 	addi	sp,sp,-40
    bf50:	dd800615 	stw	r22,24(sp)
    bf54:	2d800417 	ldw	r22,16(r5)
    bf58:	df000815 	stw	fp,32(sp)
    bf5c:	ddc00715 	stw	r23,28(sp)
    bf60:	dd400515 	stw	r21,20(sp)
    bf64:	dd000415 	stw	r20,16(sp)
    bf68:	dcc00315 	stw	r19,12(sp)
    bf6c:	dc800215 	stw	r18,8(sp)
    bf70:	dfc00915 	stw	ra,36(sp)
    bf74:	dc400115 	stw	r17,4(sp)
    bf78:	dc000015 	stw	r16,0(sp)
    bf7c:	282f883a 	mov	r23,r5
    bf80:	2039883a 	mov	fp,r4
    bf84:	302b883a 	mov	r21,r6
    bf88:	3829883a 	mov	r20,r7
    bf8c:	2c800504 	addi	r18,r5,20
    bf90:	0027883a 	mov	r19,zero
    bf94:	94400017 	ldw	r17,0(r18)
    bf98:	a80b883a 	mov	r5,r21
    bf9c:	9cc00044 	addi	r19,r19,1
    bfa0:	893fffcc 	andi	r4,r17,65535
    bfa4:	00049540 	call	4954 <__mulsi3>
    bfa8:	8808d43a 	srli	r4,r17,16
    bfac:	1521883a 	add	r16,r2,r20
    bfb0:	a80b883a 	mov	r5,r21
    bfb4:	00049540 	call	4954 <__mulsi3>
    bfb8:	8008d43a 	srli	r4,r16,16
    bfbc:	843fffcc 	andi	r16,r16,65535
    bfc0:	1105883a 	add	r2,r2,r4
    bfc4:	1006943a 	slli	r3,r2,16
    bfc8:	1028d43a 	srli	r20,r2,16
    bfcc:	1c07883a 	add	r3,r3,r16
    bfd0:	90c00015 	stw	r3,0(r18)
    bfd4:	94800104 	addi	r18,r18,4
    bfd8:	9dbfee16 	blt	r19,r22,bf94 <__multadd+0x48>
    bfdc:	a0000826 	beq	r20,zero,c000 <__multadd+0xb4>
    bfe0:	b8800217 	ldw	r2,8(r23)
    bfe4:	b080130e 	bge	r22,r2,c034 <__multadd+0xe8>
    bfe8:	b585883a 	add	r2,r22,r22
    bfec:	1085883a 	add	r2,r2,r2
    bff0:	15c5883a 	add	r2,r2,r23
    bff4:	b0c00044 	addi	r3,r22,1
    bff8:	15000515 	stw	r20,20(r2)
    bffc:	b8c00415 	stw	r3,16(r23)
    c000:	b805883a 	mov	r2,r23
    c004:	dfc00917 	ldw	ra,36(sp)
    c008:	df000817 	ldw	fp,32(sp)
    c00c:	ddc00717 	ldw	r23,28(sp)
    c010:	dd800617 	ldw	r22,24(sp)
    c014:	dd400517 	ldw	r21,20(sp)
    c018:	dd000417 	ldw	r20,16(sp)
    c01c:	dcc00317 	ldw	r19,12(sp)
    c020:	dc800217 	ldw	r18,8(sp)
    c024:	dc400117 	ldw	r17,4(sp)
    c028:	dc000017 	ldw	r16,0(sp)
    c02c:	dec00a04 	addi	sp,sp,40
    c030:	f800283a 	ret
    c034:	b9400117 	ldw	r5,4(r23)
    c038:	e009883a 	mov	r4,fp
    c03c:	29400044 	addi	r5,r5,1
    c040:	000b7ac0 	call	b7ac <_Balloc>
    c044:	b9800417 	ldw	r6,16(r23)
    c048:	b9400304 	addi	r5,r23,12
    c04c:	11000304 	addi	r4,r2,12
    c050:	318d883a 	add	r6,r6,r6
    c054:	318d883a 	add	r6,r6,r6
    c058:	31800204 	addi	r6,r6,8
    c05c:	1023883a 	mov	r17,r2
    c060:	00061480 	call	6148 <memcpy>
    c064:	b80b883a 	mov	r5,r23
    c068:	e009883a 	mov	r4,fp
    c06c:	000b22c0 	call	b22c <_Bfree>
    c070:	882f883a 	mov	r23,r17
    c074:	003fdc06 	br	bfe8 <__multadd+0x9c>

0000c078 <__pow5mult>:
    c078:	defffa04 	addi	sp,sp,-24
    c07c:	308000cc 	andi	r2,r6,3
    c080:	dd000415 	stw	r20,16(sp)
    c084:	dcc00315 	stw	r19,12(sp)
    c088:	dc000015 	stw	r16,0(sp)
    c08c:	dfc00515 	stw	ra,20(sp)
    c090:	dc800215 	stw	r18,8(sp)
    c094:	dc400115 	stw	r17,4(sp)
    c098:	3021883a 	mov	r16,r6
    c09c:	2027883a 	mov	r19,r4
    c0a0:	2829883a 	mov	r20,r5
    c0a4:	10002b1e 	bne	r2,zero,c154 <__pow5mult+0xdc>
    c0a8:	8025d0ba 	srai	r18,r16,2
    c0ac:	90001b26 	beq	r18,zero,c11c <__pow5mult+0xa4>
    c0b0:	9c001217 	ldw	r16,72(r19)
    c0b4:	8000081e 	bne	r16,zero,c0d8 <__pow5mult+0x60>
    c0b8:	00003006 	br	c17c <__pow5mult+0x104>
    c0bc:	800b883a 	mov	r5,r16
    c0c0:	800d883a 	mov	r6,r16
    c0c4:	9809883a 	mov	r4,r19
    c0c8:	90001426 	beq	r18,zero,c11c <__pow5mult+0xa4>
    c0cc:	80800017 	ldw	r2,0(r16)
    c0d0:	10001b26 	beq	r2,zero,c140 <__pow5mult+0xc8>
    c0d4:	1021883a 	mov	r16,r2
    c0d8:	9080004c 	andi	r2,r18,1
    c0dc:	1005003a 	cmpeq	r2,r2,zero
    c0e0:	9025d07a 	srai	r18,r18,1
    c0e4:	800d883a 	mov	r6,r16
    c0e8:	9809883a 	mov	r4,r19
    c0ec:	a00b883a 	mov	r5,r20
    c0f0:	103ff21e 	bne	r2,zero,c0bc <__pow5mult+0x44>
    c0f4:	000bcbc0 	call	bcbc <__multiply>
    c0f8:	a00b883a 	mov	r5,r20
    c0fc:	9809883a 	mov	r4,r19
    c100:	1023883a 	mov	r17,r2
    c104:	000b22c0 	call	b22c <_Bfree>
    c108:	8829883a 	mov	r20,r17
    c10c:	800b883a 	mov	r5,r16
    c110:	800d883a 	mov	r6,r16
    c114:	9809883a 	mov	r4,r19
    c118:	903fec1e 	bne	r18,zero,c0cc <__pow5mult+0x54>
    c11c:	a005883a 	mov	r2,r20
    c120:	dfc00517 	ldw	ra,20(sp)
    c124:	dd000417 	ldw	r20,16(sp)
    c128:	dcc00317 	ldw	r19,12(sp)
    c12c:	dc800217 	ldw	r18,8(sp)
    c130:	dc400117 	ldw	r17,4(sp)
    c134:	dc000017 	ldw	r16,0(sp)
    c138:	dec00604 	addi	sp,sp,24
    c13c:	f800283a 	ret
    c140:	000bcbc0 	call	bcbc <__multiply>
    c144:	80800015 	stw	r2,0(r16)
    c148:	1021883a 	mov	r16,r2
    c14c:	10000015 	stw	zero,0(r2)
    c150:	003fe106 	br	c0d8 <__pow5mult+0x60>
    c154:	1085883a 	add	r2,r2,r2
    c158:	00c00074 	movhi	r3,1
    c15c:	18c7a004 	addi	r3,r3,7808
    c160:	1085883a 	add	r2,r2,r2
    c164:	10c5883a 	add	r2,r2,r3
    c168:	11bfff17 	ldw	r6,-4(r2)
    c16c:	000f883a 	mov	r7,zero
    c170:	000bf4c0 	call	bf4c <__multadd>
    c174:	1029883a 	mov	r20,r2
    c178:	003fcb06 	br	c0a8 <__pow5mult+0x30>
    c17c:	9809883a 	mov	r4,r19
    c180:	01409c44 	movi	r5,625
    c184:	000bf100 	call	bf10 <__i2b>
    c188:	98801215 	stw	r2,72(r19)
    c18c:	1021883a 	mov	r16,r2
    c190:	10000015 	stw	zero,0(r2)
    c194:	003fd006 	br	c0d8 <__pow5mult+0x60>

0000c198 <__s2b>:
    c198:	defff904 	addi	sp,sp,-28
    c19c:	dcc00315 	stw	r19,12(sp)
    c1a0:	dc800215 	stw	r18,8(sp)
    c1a4:	2827883a 	mov	r19,r5
    c1a8:	2025883a 	mov	r18,r4
    c1ac:	01400244 	movi	r5,9
    c1b0:	39000204 	addi	r4,r7,8
    c1b4:	dd000415 	stw	r20,16(sp)
    c1b8:	dc400115 	stw	r17,4(sp)
    c1bc:	dfc00615 	stw	ra,24(sp)
    c1c0:	dd400515 	stw	r21,20(sp)
    c1c4:	dc000015 	stw	r16,0(sp)
    c1c8:	3829883a 	mov	r20,r7
    c1cc:	3023883a 	mov	r17,r6
    c1d0:	00048840 	call	4884 <__divsi3>
    c1d4:	00c00044 	movi	r3,1
    c1d8:	1880350e 	bge	r3,r2,c2b0 <__s2b+0x118>
    c1dc:	000b883a 	mov	r5,zero
    c1e0:	18c7883a 	add	r3,r3,r3
    c1e4:	29400044 	addi	r5,r5,1
    c1e8:	18bffd16 	blt	r3,r2,c1e0 <__s2b+0x48>
    c1ec:	9009883a 	mov	r4,r18
    c1f0:	000b7ac0 	call	b7ac <_Balloc>
    c1f4:	1011883a 	mov	r8,r2
    c1f8:	d8800717 	ldw	r2,28(sp)
    c1fc:	00c00044 	movi	r3,1
    c200:	01800244 	movi	r6,9
    c204:	40800515 	stw	r2,20(r8)
    c208:	40c00415 	stw	r3,16(r8)
    c20c:	3440260e 	bge	r6,r17,c2a8 <__s2b+0x110>
    c210:	3021883a 	mov	r16,r6
    c214:	99ab883a 	add	r21,r19,r6
    c218:	9c05883a 	add	r2,r19,r16
    c21c:	11c00007 	ldb	r7,0(r2)
    c220:	400b883a 	mov	r5,r8
    c224:	9009883a 	mov	r4,r18
    c228:	39fff404 	addi	r7,r7,-48
    c22c:	01800284 	movi	r6,10
    c230:	000bf4c0 	call	bf4c <__multadd>
    c234:	84000044 	addi	r16,r16,1
    c238:	1011883a 	mov	r8,r2
    c23c:	8c3ff61e 	bne	r17,r16,c218 <__s2b+0x80>
    c240:	ac45883a 	add	r2,r21,r17
    c244:	117ffe04 	addi	r5,r2,-8
    c248:	880d883a 	mov	r6,r17
    c24c:	35000c0e 	bge	r6,r20,c280 <__s2b+0xe8>
    c250:	a185c83a 	sub	r2,r20,r6
    c254:	2821883a 	mov	r16,r5
    c258:	28a3883a 	add	r17,r5,r2
    c25c:	81c00007 	ldb	r7,0(r16)
    c260:	400b883a 	mov	r5,r8
    c264:	9009883a 	mov	r4,r18
    c268:	39fff404 	addi	r7,r7,-48
    c26c:	01800284 	movi	r6,10
    c270:	000bf4c0 	call	bf4c <__multadd>
    c274:	84000044 	addi	r16,r16,1
    c278:	1011883a 	mov	r8,r2
    c27c:	847ff71e 	bne	r16,r17,c25c <__s2b+0xc4>
    c280:	4005883a 	mov	r2,r8
    c284:	dfc00617 	ldw	ra,24(sp)
    c288:	dd400517 	ldw	r21,20(sp)
    c28c:	dd000417 	ldw	r20,16(sp)
    c290:	dcc00317 	ldw	r19,12(sp)
    c294:	dc800217 	ldw	r18,8(sp)
    c298:	dc400117 	ldw	r17,4(sp)
    c29c:	dc000017 	ldw	r16,0(sp)
    c2a0:	dec00704 	addi	sp,sp,28
    c2a4:	f800283a 	ret
    c2a8:	99400284 	addi	r5,r19,10
    c2ac:	003fe706 	br	c24c <__s2b+0xb4>
    c2b0:	000b883a 	mov	r5,zero
    c2b4:	003fcd06 	br	c1ec <__s2b+0x54>

0000c2b8 <_read_r>:
    c2b8:	defffd04 	addi	sp,sp,-12
    c2bc:	dc000015 	stw	r16,0(sp)
    c2c0:	04000074 	movhi	r16,1
    c2c4:	84157704 	addi	r16,r16,21980
    c2c8:	dc400115 	stw	r17,4(sp)
    c2cc:	80000015 	stw	zero,0(r16)
    c2d0:	2023883a 	mov	r17,r4
    c2d4:	2809883a 	mov	r4,r5
    c2d8:	300b883a 	mov	r5,r6
    c2dc:	380d883a 	mov	r6,r7
    c2e0:	dfc00215 	stw	ra,8(sp)
    c2e4:	000e2400 	call	e240 <read>
    c2e8:	1007883a 	mov	r3,r2
    c2ec:	00bfffc4 	movi	r2,-1
    c2f0:	18800626 	beq	r3,r2,c30c <_read_r+0x54>
    c2f4:	1805883a 	mov	r2,r3
    c2f8:	dfc00217 	ldw	ra,8(sp)
    c2fc:	dc400117 	ldw	r17,4(sp)
    c300:	dc000017 	ldw	r16,0(sp)
    c304:	dec00304 	addi	sp,sp,12
    c308:	f800283a 	ret
    c30c:	80800017 	ldw	r2,0(r16)
    c310:	103ff826 	beq	r2,zero,c2f4 <_read_r+0x3c>
    c314:	88800015 	stw	r2,0(r17)
    c318:	1805883a 	mov	r2,r3
    c31c:	dfc00217 	ldw	ra,8(sp)
    c320:	dc400117 	ldw	r17,4(sp)
    c324:	dc000017 	ldw	r16,0(sp)
    c328:	dec00304 	addi	sp,sp,12
    c32c:	f800283a 	ret

0000c330 <_realloc_r>:
    c330:	defff404 	addi	sp,sp,-48
    c334:	dd800815 	stw	r22,32(sp)
    c338:	dc800415 	stw	r18,16(sp)
    c33c:	dc400315 	stw	r17,12(sp)
    c340:	dfc00b15 	stw	ra,44(sp)
    c344:	df000a15 	stw	fp,40(sp)
    c348:	ddc00915 	stw	r23,36(sp)
    c34c:	dd400715 	stw	r21,28(sp)
    c350:	dd000615 	stw	r20,24(sp)
    c354:	dcc00515 	stw	r19,20(sp)
    c358:	dc000215 	stw	r16,8(sp)
    c35c:	2825883a 	mov	r18,r5
    c360:	3023883a 	mov	r17,r6
    c364:	202d883a 	mov	r22,r4
    c368:	2800c926 	beq	r5,zero,c690 <_realloc_r+0x360>
    c36c:	000e2000 	call	e200 <__malloc_lock>
    c370:	943ffe04 	addi	r16,r18,-8
    c374:	88c002c4 	addi	r3,r17,11
    c378:	00800584 	movi	r2,22
    c37c:	82000117 	ldw	r8,4(r16)
    c380:	10c01b2e 	bgeu	r2,r3,c3f0 <_realloc_r+0xc0>
    c384:	00bffe04 	movi	r2,-8
    c388:	188e703a 	and	r7,r3,r2
    c38c:	3839883a 	mov	fp,r7
    c390:	38001a16 	blt	r7,zero,c3fc <_realloc_r+0xcc>
    c394:	e4401936 	bltu	fp,r17,c3fc <_realloc_r+0xcc>
    c398:	013fff04 	movi	r4,-4
    c39c:	4126703a 	and	r19,r8,r4
    c3a0:	99c02616 	blt	r19,r7,c43c <_realloc_r+0x10c>
    c3a4:	802b883a 	mov	r21,r16
    c3a8:	9829883a 	mov	r20,r19
    c3ac:	84000204 	addi	r16,r16,8
    c3b0:	a80f883a 	mov	r7,r21
    c3b4:	a70dc83a 	sub	r6,r20,fp
    c3b8:	008003c4 	movi	r2,15
    c3bc:	1180c136 	bltu	r2,r6,c6c4 <_realloc_r+0x394>
    c3c0:	38800117 	ldw	r2,4(r7)
    c3c4:	a549883a 	add	r4,r20,r21
    c3c8:	1080004c 	andi	r2,r2,1
    c3cc:	a084b03a 	or	r2,r20,r2
    c3d0:	38800115 	stw	r2,4(r7)
    c3d4:	20c00117 	ldw	r3,4(r4)
    c3d8:	18c00054 	ori	r3,r3,1
    c3dc:	20c00115 	stw	r3,4(r4)
    c3e0:	b009883a 	mov	r4,r22
    c3e4:	000e2200 	call	e220 <__malloc_unlock>
    c3e8:	8023883a 	mov	r17,r16
    c3ec:	00000606 	br	c408 <_realloc_r+0xd8>
    c3f0:	01c00404 	movi	r7,16
    c3f4:	3839883a 	mov	fp,r7
    c3f8:	e47fe72e 	bgeu	fp,r17,c398 <_realloc_r+0x68>
    c3fc:	00800304 	movi	r2,12
    c400:	0023883a 	mov	r17,zero
    c404:	b0800015 	stw	r2,0(r22)
    c408:	8805883a 	mov	r2,r17
    c40c:	dfc00b17 	ldw	ra,44(sp)
    c410:	df000a17 	ldw	fp,40(sp)
    c414:	ddc00917 	ldw	r23,36(sp)
    c418:	dd800817 	ldw	r22,32(sp)
    c41c:	dd400717 	ldw	r21,28(sp)
    c420:	dd000617 	ldw	r20,24(sp)
    c424:	dcc00517 	ldw	r19,20(sp)
    c428:	dc800417 	ldw	r18,16(sp)
    c42c:	dc400317 	ldw	r17,12(sp)
    c430:	dc000217 	ldw	r16,8(sp)
    c434:	dec00c04 	addi	sp,sp,48
    c438:	f800283a 	ret
    c43c:	00800074 	movhi	r2,1
    c440:	1088fa04 	addi	r2,r2,9192
    c444:	12400217 	ldw	r9,8(r2)
    c448:	84cd883a 	add	r6,r16,r19
    c44c:	802b883a 	mov	r21,r16
    c450:	3240b926 	beq	r6,r9,c738 <_realloc_r+0x408>
    c454:	31400117 	ldw	r5,4(r6)
    c458:	00bfff84 	movi	r2,-2
    c45c:	2884703a 	and	r2,r5,r2
    c460:	1185883a 	add	r2,r2,r6
    c464:	10c00117 	ldw	r3,4(r2)
    c468:	18c0004c 	andi	r3,r3,1
    c46c:	1807003a 	cmpeq	r3,r3,zero
    c470:	1800a326 	beq	r3,zero,c700 <_realloc_r+0x3d0>
    c474:	2908703a 	and	r4,r5,r4
    c478:	9929883a 	add	r20,r19,r4
    c47c:	a1c0a30e 	bge	r20,r7,c70c <_realloc_r+0x3dc>
    c480:	4080004c 	andi	r2,r8,1
    c484:	1000551e 	bne	r2,zero,c5dc <_realloc_r+0x2ac>
    c488:	80800017 	ldw	r2,0(r16)
    c48c:	80afc83a 	sub	r23,r16,r2
    c490:	b8c00117 	ldw	r3,4(r23)
    c494:	00bfff04 	movi	r2,-4
    c498:	1884703a 	and	r2,r3,r2
    c49c:	30002e26 	beq	r6,zero,c558 <_realloc_r+0x228>
    c4a0:	3240b926 	beq	r6,r9,c788 <_realloc_r+0x458>
    c4a4:	98a9883a 	add	r20,r19,r2
    c4a8:	2509883a 	add	r4,r4,r20
    c4ac:	d9000015 	stw	r4,0(sp)
    c4b0:	21c02a16 	blt	r4,r7,c55c <_realloc_r+0x22c>
    c4b4:	30800317 	ldw	r2,12(r6)
    c4b8:	30c00217 	ldw	r3,8(r6)
    c4bc:	01400904 	movi	r5,36
    c4c0:	99bfff04 	addi	r6,r19,-4
    c4c4:	18800315 	stw	r2,12(r3)
    c4c8:	10c00215 	stw	r3,8(r2)
    c4cc:	b9000317 	ldw	r4,12(r23)
    c4d0:	b8800217 	ldw	r2,8(r23)
    c4d4:	b82b883a 	mov	r21,r23
    c4d8:	bc000204 	addi	r16,r23,8
    c4dc:	20800215 	stw	r2,8(r4)
    c4e0:	11000315 	stw	r4,12(r2)
    c4e4:	2980e436 	bltu	r5,r6,c878 <_realloc_r+0x548>
    c4e8:	008004c4 	movi	r2,19
    c4ec:	9009883a 	mov	r4,r18
    c4f0:	8011883a 	mov	r8,r16
    c4f4:	11800f2e 	bgeu	r2,r6,c534 <_realloc_r+0x204>
    c4f8:	90800017 	ldw	r2,0(r18)
    c4fc:	ba000404 	addi	r8,r23,16
    c500:	91000204 	addi	r4,r18,8
    c504:	b8800215 	stw	r2,8(r23)
    c508:	90c00117 	ldw	r3,4(r18)
    c50c:	008006c4 	movi	r2,27
    c510:	b8c00315 	stw	r3,12(r23)
    c514:	1180072e 	bgeu	r2,r6,c534 <_realloc_r+0x204>
    c518:	90c00217 	ldw	r3,8(r18)
    c51c:	ba000604 	addi	r8,r23,24
    c520:	91000404 	addi	r4,r18,16
    c524:	b8c00415 	stw	r3,16(r23)
    c528:	90800317 	ldw	r2,12(r18)
    c52c:	b8800515 	stw	r2,20(r23)
    c530:	3140e726 	beq	r6,r5,c8d0 <_realloc_r+0x5a0>
    c534:	20800017 	ldw	r2,0(r4)
    c538:	dd000017 	ldw	r20,0(sp)
    c53c:	b80f883a 	mov	r7,r23
    c540:	40800015 	stw	r2,0(r8)
    c544:	20c00117 	ldw	r3,4(r4)
    c548:	40c00115 	stw	r3,4(r8)
    c54c:	20800217 	ldw	r2,8(r4)
    c550:	40800215 	stw	r2,8(r8)
    c554:	003f9706 	br	c3b4 <_realloc_r+0x84>
    c558:	98a9883a 	add	r20,r19,r2
    c55c:	a1c01f16 	blt	r20,r7,c5dc <_realloc_r+0x2ac>
    c560:	b8c00317 	ldw	r3,12(r23)
    c564:	b8800217 	ldw	r2,8(r23)
    c568:	99bfff04 	addi	r6,r19,-4
    c56c:	01400904 	movi	r5,36
    c570:	b82b883a 	mov	r21,r23
    c574:	18800215 	stw	r2,8(r3)
    c578:	10c00315 	stw	r3,12(r2)
    c57c:	bc000204 	addi	r16,r23,8
    c580:	2980c336 	bltu	r5,r6,c890 <_realloc_r+0x560>
    c584:	008004c4 	movi	r2,19
    c588:	9009883a 	mov	r4,r18
    c58c:	8011883a 	mov	r8,r16
    c590:	11800f2e 	bgeu	r2,r6,c5d0 <_realloc_r+0x2a0>
    c594:	90800017 	ldw	r2,0(r18)
    c598:	ba000404 	addi	r8,r23,16
    c59c:	91000204 	addi	r4,r18,8
    c5a0:	b8800215 	stw	r2,8(r23)
    c5a4:	90c00117 	ldw	r3,4(r18)
    c5a8:	008006c4 	movi	r2,27
    c5ac:	b8c00315 	stw	r3,12(r23)
    c5b0:	1180072e 	bgeu	r2,r6,c5d0 <_realloc_r+0x2a0>
    c5b4:	90c00217 	ldw	r3,8(r18)
    c5b8:	ba000604 	addi	r8,r23,24
    c5bc:	91000404 	addi	r4,r18,16
    c5c0:	b8c00415 	stw	r3,16(r23)
    c5c4:	90800317 	ldw	r2,12(r18)
    c5c8:	b8800515 	stw	r2,20(r23)
    c5cc:	3140c726 	beq	r6,r5,c8ec <_realloc_r+0x5bc>
    c5d0:	20800017 	ldw	r2,0(r4)
    c5d4:	b80f883a 	mov	r7,r23
    c5d8:	003fd906 	br	c540 <_realloc_r+0x210>
    c5dc:	880b883a 	mov	r5,r17
    c5e0:	b009883a 	mov	r4,r22
    c5e4:	00059240 	call	5924 <_malloc_r>
    c5e8:	1023883a 	mov	r17,r2
    c5ec:	10002526 	beq	r2,zero,c684 <_realloc_r+0x354>
    c5f0:	80800117 	ldw	r2,4(r16)
    c5f4:	00ffff84 	movi	r3,-2
    c5f8:	893ffe04 	addi	r4,r17,-8
    c5fc:	10c4703a 	and	r2,r2,r3
    c600:	8085883a 	add	r2,r16,r2
    c604:	20809526 	beq	r4,r2,c85c <_realloc_r+0x52c>
    c608:	99bfff04 	addi	r6,r19,-4
    c60c:	01c00904 	movi	r7,36
    c610:	39804536 	bltu	r7,r6,c728 <_realloc_r+0x3f8>
    c614:	008004c4 	movi	r2,19
    c618:	9009883a 	mov	r4,r18
    c61c:	880b883a 	mov	r5,r17
    c620:	11800f2e 	bgeu	r2,r6,c660 <_realloc_r+0x330>
    c624:	90800017 	ldw	r2,0(r18)
    c628:	89400204 	addi	r5,r17,8
    c62c:	91000204 	addi	r4,r18,8
    c630:	88800015 	stw	r2,0(r17)
    c634:	90c00117 	ldw	r3,4(r18)
    c638:	008006c4 	movi	r2,27
    c63c:	88c00115 	stw	r3,4(r17)
    c640:	1180072e 	bgeu	r2,r6,c660 <_realloc_r+0x330>
    c644:	90c00217 	ldw	r3,8(r18)
    c648:	89400404 	addi	r5,r17,16
    c64c:	91000404 	addi	r4,r18,16
    c650:	88c00215 	stw	r3,8(r17)
    c654:	90800317 	ldw	r2,12(r18)
    c658:	88800315 	stw	r2,12(r17)
    c65c:	31c09126 	beq	r6,r7,c8a4 <_realloc_r+0x574>
    c660:	20800017 	ldw	r2,0(r4)
    c664:	28800015 	stw	r2,0(r5)
    c668:	20c00117 	ldw	r3,4(r4)
    c66c:	28c00115 	stw	r3,4(r5)
    c670:	20800217 	ldw	r2,8(r4)
    c674:	28800215 	stw	r2,8(r5)
    c678:	900b883a 	mov	r5,r18
    c67c:	b009883a 	mov	r4,r22
    c680:	000a6cc0 	call	a6cc <_free_r>
    c684:	b009883a 	mov	r4,r22
    c688:	000e2200 	call	e220 <__malloc_unlock>
    c68c:	003f5e06 	br	c408 <_realloc_r+0xd8>
    c690:	300b883a 	mov	r5,r6
    c694:	dfc00b17 	ldw	ra,44(sp)
    c698:	df000a17 	ldw	fp,40(sp)
    c69c:	ddc00917 	ldw	r23,36(sp)
    c6a0:	dd800817 	ldw	r22,32(sp)
    c6a4:	dd400717 	ldw	r21,28(sp)
    c6a8:	dd000617 	ldw	r20,24(sp)
    c6ac:	dcc00517 	ldw	r19,20(sp)
    c6b0:	dc800417 	ldw	r18,16(sp)
    c6b4:	dc400317 	ldw	r17,12(sp)
    c6b8:	dc000217 	ldw	r16,8(sp)
    c6bc:	dec00c04 	addi	sp,sp,48
    c6c0:	00059241 	jmpi	5924 <_malloc_r>
    c6c4:	38800117 	ldw	r2,4(r7)
    c6c8:	e54b883a 	add	r5,fp,r21
    c6cc:	31000054 	ori	r4,r6,1
    c6d0:	1080004c 	andi	r2,r2,1
    c6d4:	1704b03a 	or	r2,r2,fp
    c6d8:	38800115 	stw	r2,4(r7)
    c6dc:	29000115 	stw	r4,4(r5)
    c6e0:	2987883a 	add	r3,r5,r6
    c6e4:	18800117 	ldw	r2,4(r3)
    c6e8:	29400204 	addi	r5,r5,8
    c6ec:	b009883a 	mov	r4,r22
    c6f0:	10800054 	ori	r2,r2,1
    c6f4:	18800115 	stw	r2,4(r3)
    c6f8:	000a6cc0 	call	a6cc <_free_r>
    c6fc:	003f3806 	br	c3e0 <_realloc_r+0xb0>
    c700:	000d883a 	mov	r6,zero
    c704:	0009883a 	mov	r4,zero
    c708:	003f5d06 	br	c480 <_realloc_r+0x150>
    c70c:	30c00217 	ldw	r3,8(r6)
    c710:	30800317 	ldw	r2,12(r6)
    c714:	800f883a 	mov	r7,r16
    c718:	84000204 	addi	r16,r16,8
    c71c:	10c00215 	stw	r3,8(r2)
    c720:	18800315 	stw	r2,12(r3)
    c724:	003f2306 	br	c3b4 <_realloc_r+0x84>
    c728:	8809883a 	mov	r4,r17
    c72c:	900b883a 	mov	r5,r18
    c730:	000b14c0 	call	b14c <memmove>
    c734:	003fd006 	br	c678 <_realloc_r+0x348>
    c738:	30800117 	ldw	r2,4(r6)
    c73c:	e0c00404 	addi	r3,fp,16
    c740:	1108703a 	and	r4,r2,r4
    c744:	9905883a 	add	r2,r19,r4
    c748:	10ff4d16 	blt	r2,r3,c480 <_realloc_r+0x150>
    c74c:	1705c83a 	sub	r2,r2,fp
    c750:	870b883a 	add	r5,r16,fp
    c754:	10800054 	ori	r2,r2,1
    c758:	28800115 	stw	r2,4(r5)
    c75c:	80c00117 	ldw	r3,4(r16)
    c760:	00800074 	movhi	r2,1
    c764:	1088fa04 	addi	r2,r2,9192
    c768:	b009883a 	mov	r4,r22
    c76c:	18c0004c 	andi	r3,r3,1
    c770:	e0c6b03a 	or	r3,fp,r3
    c774:	11400215 	stw	r5,8(r2)
    c778:	80c00115 	stw	r3,4(r16)
    c77c:	000e2200 	call	e220 <__malloc_unlock>
    c780:	84400204 	addi	r17,r16,8
    c784:	003f2006 	br	c408 <_realloc_r+0xd8>
    c788:	98a9883a 	add	r20,r19,r2
    c78c:	2509883a 	add	r4,r4,r20
    c790:	e0800404 	addi	r2,fp,16
    c794:	d9000115 	stw	r4,4(sp)
    c798:	20bf7016 	blt	r4,r2,c55c <_realloc_r+0x22c>
    c79c:	b8c00317 	ldw	r3,12(r23)
    c7a0:	b8800217 	ldw	r2,8(r23)
    c7a4:	99bfff04 	addi	r6,r19,-4
    c7a8:	01400904 	movi	r5,36
    c7ac:	18800215 	stw	r2,8(r3)
    c7b0:	10c00315 	stw	r3,12(r2)
    c7b4:	bc400204 	addi	r17,r23,8
    c7b8:	29804136 	bltu	r5,r6,c8c0 <_realloc_r+0x590>
    c7bc:	008004c4 	movi	r2,19
    c7c0:	9009883a 	mov	r4,r18
    c7c4:	880f883a 	mov	r7,r17
    c7c8:	11800f2e 	bgeu	r2,r6,c808 <_realloc_r+0x4d8>
    c7cc:	90800017 	ldw	r2,0(r18)
    c7d0:	b9c00404 	addi	r7,r23,16
    c7d4:	91000204 	addi	r4,r18,8
    c7d8:	b8800215 	stw	r2,8(r23)
    c7dc:	90c00117 	ldw	r3,4(r18)
    c7e0:	008006c4 	movi	r2,27
    c7e4:	b8c00315 	stw	r3,12(r23)
    c7e8:	1180072e 	bgeu	r2,r6,c808 <_realloc_r+0x4d8>
    c7ec:	90c00217 	ldw	r3,8(r18)
    c7f0:	b9c00604 	addi	r7,r23,24
    c7f4:	91000404 	addi	r4,r18,16
    c7f8:	b8c00415 	stw	r3,16(r23)
    c7fc:	90800317 	ldw	r2,12(r18)
    c800:	b8800515 	stw	r2,20(r23)
    c804:	31404026 	beq	r6,r5,c908 <_realloc_r+0x5d8>
    c808:	20800017 	ldw	r2,0(r4)
    c80c:	38800015 	stw	r2,0(r7)
    c810:	20c00117 	ldw	r3,4(r4)
    c814:	38c00115 	stw	r3,4(r7)
    c818:	20800217 	ldw	r2,8(r4)
    c81c:	38800215 	stw	r2,8(r7)
    c820:	d8c00117 	ldw	r3,4(sp)
    c824:	bf0b883a 	add	r5,r23,fp
    c828:	b009883a 	mov	r4,r22
    c82c:	1f05c83a 	sub	r2,r3,fp
    c830:	10800054 	ori	r2,r2,1
    c834:	28800115 	stw	r2,4(r5)
    c838:	b8c00117 	ldw	r3,4(r23)
    c83c:	00800074 	movhi	r2,1
    c840:	1088fa04 	addi	r2,r2,9192
    c844:	11400215 	stw	r5,8(r2)
    c848:	18c0004c 	andi	r3,r3,1
    c84c:	e0c6b03a 	or	r3,fp,r3
    c850:	b8c00115 	stw	r3,4(r23)
    c854:	000e2200 	call	e220 <__malloc_unlock>
    c858:	003eeb06 	br	c408 <_realloc_r+0xd8>
    c85c:	20800117 	ldw	r2,4(r4)
    c860:	00ffff04 	movi	r3,-4
    c864:	800f883a 	mov	r7,r16
    c868:	10c4703a 	and	r2,r2,r3
    c86c:	98a9883a 	add	r20,r19,r2
    c870:	84000204 	addi	r16,r16,8
    c874:	003ecf06 	br	c3b4 <_realloc_r+0x84>
    c878:	900b883a 	mov	r5,r18
    c87c:	8009883a 	mov	r4,r16
    c880:	000b14c0 	call	b14c <memmove>
    c884:	dd000017 	ldw	r20,0(sp)
    c888:	b80f883a 	mov	r7,r23
    c88c:	003ec906 	br	c3b4 <_realloc_r+0x84>
    c890:	900b883a 	mov	r5,r18
    c894:	8009883a 	mov	r4,r16
    c898:	000b14c0 	call	b14c <memmove>
    c89c:	b80f883a 	mov	r7,r23
    c8a0:	003ec406 	br	c3b4 <_realloc_r+0x84>
    c8a4:	90c00417 	ldw	r3,16(r18)
    c8a8:	89400604 	addi	r5,r17,24
    c8ac:	91000604 	addi	r4,r18,24
    c8b0:	88c00415 	stw	r3,16(r17)
    c8b4:	90800517 	ldw	r2,20(r18)
    c8b8:	88800515 	stw	r2,20(r17)
    c8bc:	003f6806 	br	c660 <_realloc_r+0x330>
    c8c0:	900b883a 	mov	r5,r18
    c8c4:	8809883a 	mov	r4,r17
    c8c8:	000b14c0 	call	b14c <memmove>
    c8cc:	003fd406 	br	c820 <_realloc_r+0x4f0>
    c8d0:	90c00417 	ldw	r3,16(r18)
    c8d4:	91000604 	addi	r4,r18,24
    c8d8:	ba000804 	addi	r8,r23,32
    c8dc:	b8c00615 	stw	r3,24(r23)
    c8e0:	90800517 	ldw	r2,20(r18)
    c8e4:	b8800715 	stw	r2,28(r23)
    c8e8:	003f1206 	br	c534 <_realloc_r+0x204>
    c8ec:	90c00417 	ldw	r3,16(r18)
    c8f0:	91000604 	addi	r4,r18,24
    c8f4:	ba000804 	addi	r8,r23,32
    c8f8:	b8c00615 	stw	r3,24(r23)
    c8fc:	90800517 	ldw	r2,20(r18)
    c900:	b8800715 	stw	r2,28(r23)
    c904:	003f3206 	br	c5d0 <_realloc_r+0x2a0>
    c908:	90c00417 	ldw	r3,16(r18)
    c90c:	91000604 	addi	r4,r18,24
    c910:	b9c00804 	addi	r7,r23,32
    c914:	b8c00615 	stw	r3,24(r23)
    c918:	90800517 	ldw	r2,20(r18)
    c91c:	b8800715 	stw	r2,28(r23)
    c920:	003fb906 	br	c808 <_realloc_r+0x4d8>

0000c924 <__isinfd>:
    c924:	200d883a 	mov	r6,r4
    c928:	0109c83a 	sub	r4,zero,r4
    c92c:	2188b03a 	or	r4,r4,r6
    c930:	2008d7fa 	srli	r4,r4,31
    c934:	00a00034 	movhi	r2,32768
    c938:	10bfffc4 	addi	r2,r2,-1
    c93c:	1144703a 	and	r2,r2,r5
    c940:	2088b03a 	or	r4,r4,r2
    c944:	009ffc34 	movhi	r2,32752
    c948:	1105c83a 	sub	r2,r2,r4
    c94c:	0087c83a 	sub	r3,zero,r2
    c950:	10c4b03a 	or	r2,r2,r3
    c954:	1004d7fa 	srli	r2,r2,31
    c958:	00c00044 	movi	r3,1
    c95c:	1885c83a 	sub	r2,r3,r2
    c960:	f800283a 	ret

0000c964 <__isnand>:
    c964:	200d883a 	mov	r6,r4
    c968:	0109c83a 	sub	r4,zero,r4
    c96c:	2188b03a 	or	r4,r4,r6
    c970:	2008d7fa 	srli	r4,r4,31
    c974:	00a00034 	movhi	r2,32768
    c978:	10bfffc4 	addi	r2,r2,-1
    c97c:	1144703a 	and	r2,r2,r5
    c980:	2088b03a 	or	r4,r4,r2
    c984:	009ffc34 	movhi	r2,32752
    c988:	1105c83a 	sub	r2,r2,r4
    c98c:	1004d7fa 	srli	r2,r2,31
    c990:	f800283a 	ret

0000c994 <strcmp>:
    c994:	2144b03a 	or	r2,r4,r5
    c998:	108000cc 	andi	r2,r2,3
    c99c:	10001d1e 	bne	r2,zero,ca14 <strcmp+0x80>
    c9a0:	200f883a 	mov	r7,r4
    c9a4:	28800017 	ldw	r2,0(r5)
    c9a8:	21000017 	ldw	r4,0(r4)
    c9ac:	280d883a 	mov	r6,r5
    c9b0:	2080161e 	bne	r4,r2,ca0c <strcmp+0x78>
    c9b4:	023fbff4 	movhi	r8,65279
    c9b8:	423fbfc4 	addi	r8,r8,-257
    c9bc:	2207883a 	add	r3,r4,r8
    c9c0:	01602074 	movhi	r5,32897
    c9c4:	29602004 	addi	r5,r5,-32640
    c9c8:	1946703a 	and	r3,r3,r5
    c9cc:	0104303a 	nor	r2,zero,r4
    c9d0:	10c4703a 	and	r2,r2,r3
    c9d4:	10001c1e 	bne	r2,zero,ca48 <strcmp+0xb4>
    c9d8:	4013883a 	mov	r9,r8
    c9dc:	2811883a 	mov	r8,r5
    c9e0:	00000106 	br	c9e8 <strcmp+0x54>
    c9e4:	1800181e 	bne	r3,zero,ca48 <strcmp+0xb4>
    c9e8:	39c00104 	addi	r7,r7,4
    c9ec:	39000017 	ldw	r4,0(r7)
    c9f0:	31800104 	addi	r6,r6,4
    c9f4:	31400017 	ldw	r5,0(r6)
    c9f8:	2245883a 	add	r2,r4,r9
    c9fc:	1204703a 	and	r2,r2,r8
    ca00:	0106303a 	nor	r3,zero,r4
    ca04:	1886703a 	and	r3,r3,r2
    ca08:	217ff626 	beq	r4,r5,c9e4 <strcmp+0x50>
    ca0c:	3809883a 	mov	r4,r7
    ca10:	300b883a 	mov	r5,r6
    ca14:	20c00007 	ldb	r3,0(r4)
    ca18:	1800051e 	bne	r3,zero,ca30 <strcmp+0x9c>
    ca1c:	00000606 	br	ca38 <strcmp+0xa4>
    ca20:	21000044 	addi	r4,r4,1
    ca24:	20c00007 	ldb	r3,0(r4)
    ca28:	29400044 	addi	r5,r5,1
    ca2c:	18000226 	beq	r3,zero,ca38 <strcmp+0xa4>
    ca30:	28800007 	ldb	r2,0(r5)
    ca34:	18bffa26 	beq	r3,r2,ca20 <strcmp+0x8c>
    ca38:	20c00003 	ldbu	r3,0(r4)
    ca3c:	28800003 	ldbu	r2,0(r5)
    ca40:	1885c83a 	sub	r2,r3,r2
    ca44:	f800283a 	ret
    ca48:	0005883a 	mov	r2,zero
    ca4c:	f800283a 	ret

0000ca50 <_calloc_r>:
    ca50:	defffe04 	addi	sp,sp,-8
    ca54:	dc400015 	stw	r17,0(sp)
    ca58:	2023883a 	mov	r17,r4
    ca5c:	2809883a 	mov	r4,r5
    ca60:	300b883a 	mov	r5,r6
    ca64:	dfc00115 	stw	ra,4(sp)
    ca68:	00049540 	call	4954 <__mulsi3>
    ca6c:	100b883a 	mov	r5,r2
    ca70:	8809883a 	mov	r4,r17
    ca74:	00059240 	call	5924 <_malloc_r>
    ca78:	1023883a 	mov	r17,r2
    ca7c:	01c00904 	movi	r7,36
    ca80:	10000d26 	beq	r2,zero,cab8 <_calloc_r+0x68>
    ca84:	10ffff17 	ldw	r3,-4(r2)
    ca88:	1009883a 	mov	r4,r2
    ca8c:	00bfff04 	movi	r2,-4
    ca90:	1886703a 	and	r3,r3,r2
    ca94:	1887883a 	add	r3,r3,r2
    ca98:	180d883a 	mov	r6,r3
    ca9c:	000b883a 	mov	r5,zero
    caa0:	38c01736 	bltu	r7,r3,cb00 <_calloc_r+0xb0>
    caa4:	008004c4 	movi	r2,19
    caa8:	10c00836 	bltu	r2,r3,cacc <_calloc_r+0x7c>
    caac:	20000215 	stw	zero,8(r4)
    cab0:	20000015 	stw	zero,0(r4)
    cab4:	20000115 	stw	zero,4(r4)
    cab8:	8805883a 	mov	r2,r17
    cabc:	dfc00117 	ldw	ra,4(sp)
    cac0:	dc400017 	ldw	r17,0(sp)
    cac4:	dec00204 	addi	sp,sp,8
    cac8:	f800283a 	ret
    cacc:	008006c4 	movi	r2,27
    cad0:	88000015 	stw	zero,0(r17)
    cad4:	88000115 	stw	zero,4(r17)
    cad8:	89000204 	addi	r4,r17,8
    cadc:	10fff32e 	bgeu	r2,r3,caac <_calloc_r+0x5c>
    cae0:	88000215 	stw	zero,8(r17)
    cae4:	88000315 	stw	zero,12(r17)
    cae8:	89000404 	addi	r4,r17,16
    caec:	19ffef1e 	bne	r3,r7,caac <_calloc_r+0x5c>
    caf0:	89000604 	addi	r4,r17,24
    caf4:	88000415 	stw	zero,16(r17)
    caf8:	88000515 	stw	zero,20(r17)
    cafc:	003feb06 	br	caac <_calloc_r+0x5c>
    cb00:	00061e80 	call	61e8 <memset>
    cb04:	8805883a 	mov	r2,r17
    cb08:	dfc00117 	ldw	ra,4(sp)
    cb0c:	dc400017 	ldw	r17,0(sp)
    cb10:	dec00204 	addi	sp,sp,8
    cb14:	f800283a 	ret

0000cb18 <_fstat_r>:
    cb18:	defffd04 	addi	sp,sp,-12
    cb1c:	dc000015 	stw	r16,0(sp)
    cb20:	04000074 	movhi	r16,1
    cb24:	84157704 	addi	r16,r16,21980
    cb28:	dc400115 	stw	r17,4(sp)
    cb2c:	80000015 	stw	zero,0(r16)
    cb30:	2023883a 	mov	r17,r4
    cb34:	2809883a 	mov	r4,r5
    cb38:	300b883a 	mov	r5,r6
    cb3c:	dfc00215 	stw	ra,8(sp)
    cb40:	000dcf80 	call	dcf8 <fstat>
    cb44:	1007883a 	mov	r3,r2
    cb48:	00bfffc4 	movi	r2,-1
    cb4c:	18800626 	beq	r3,r2,cb68 <_fstat_r+0x50>
    cb50:	1805883a 	mov	r2,r3
    cb54:	dfc00217 	ldw	ra,8(sp)
    cb58:	dc400117 	ldw	r17,4(sp)
    cb5c:	dc000017 	ldw	r16,0(sp)
    cb60:	dec00304 	addi	sp,sp,12
    cb64:	f800283a 	ret
    cb68:	80800017 	ldw	r2,0(r16)
    cb6c:	103ff826 	beq	r2,zero,cb50 <_fstat_r+0x38>
    cb70:	88800015 	stw	r2,0(r17)
    cb74:	1805883a 	mov	r2,r3
    cb78:	dfc00217 	ldw	ra,8(sp)
    cb7c:	dc400117 	ldw	r17,4(sp)
    cb80:	dc000017 	ldw	r16,0(sp)
    cb84:	dec00304 	addi	sp,sp,12
    cb88:	f800283a 	ret

0000cb8c <_isatty_r>:
    cb8c:	defffd04 	addi	sp,sp,-12
    cb90:	dc000015 	stw	r16,0(sp)
    cb94:	04000074 	movhi	r16,1
    cb98:	84157704 	addi	r16,r16,21980
    cb9c:	dc400115 	stw	r17,4(sp)
    cba0:	80000015 	stw	zero,0(r16)
    cba4:	2023883a 	mov	r17,r4
    cba8:	2809883a 	mov	r4,r5
    cbac:	dfc00215 	stw	ra,8(sp)
    cbb0:	000de300 	call	de30 <isatty>
    cbb4:	1007883a 	mov	r3,r2
    cbb8:	00bfffc4 	movi	r2,-1
    cbbc:	18800626 	beq	r3,r2,cbd8 <_isatty_r+0x4c>
    cbc0:	1805883a 	mov	r2,r3
    cbc4:	dfc00217 	ldw	ra,8(sp)
    cbc8:	dc400117 	ldw	r17,4(sp)
    cbcc:	dc000017 	ldw	r16,0(sp)
    cbd0:	dec00304 	addi	sp,sp,12
    cbd4:	f800283a 	ret
    cbd8:	80800017 	ldw	r2,0(r16)
    cbdc:	103ff826 	beq	r2,zero,cbc0 <_isatty_r+0x34>
    cbe0:	88800015 	stw	r2,0(r17)
    cbe4:	1805883a 	mov	r2,r3
    cbe8:	dfc00217 	ldw	ra,8(sp)
    cbec:	dc400117 	ldw	r17,4(sp)
    cbf0:	dc000017 	ldw	r16,0(sp)
    cbf4:	dec00304 	addi	sp,sp,12
    cbf8:	f800283a 	ret

0000cbfc <__udivdi3>:
    cbfc:	defff104 	addi	sp,sp,-60
    cc00:	0015883a 	mov	r10,zero
    cc04:	2005883a 	mov	r2,r4
    cc08:	3011883a 	mov	r8,r6
    cc0c:	df000d15 	stw	fp,52(sp)
    cc10:	dd400a15 	stw	r21,40(sp)
    cc14:	dcc00815 	stw	r19,32(sp)
    cc18:	dfc00e15 	stw	ra,56(sp)
    cc1c:	ddc00c15 	stw	r23,48(sp)
    cc20:	dd800b15 	stw	r22,44(sp)
    cc24:	dd000915 	stw	r20,36(sp)
    cc28:	dc800715 	stw	r18,28(sp)
    cc2c:	dc400615 	stw	r17,24(sp)
    cc30:	dc000515 	stw	r16,20(sp)
    cc34:	da800315 	stw	r10,12(sp)
    cc38:	4027883a 	mov	r19,r8
    cc3c:	1039883a 	mov	fp,r2
    cc40:	282b883a 	mov	r21,r5
    cc44:	da800415 	stw	r10,16(sp)
    cc48:	3800401e 	bne	r7,zero,cd4c <__udivdi3+0x150>
    cc4c:	2a006536 	bltu	r5,r8,cde4 <__udivdi3+0x1e8>
    cc50:	4000b526 	beq	r8,zero,cf28 <__udivdi3+0x32c>
    cc54:	00bfffd4 	movui	r2,65535
    cc58:	14c0ad36 	bltu	r2,r19,cf10 <__udivdi3+0x314>
    cc5c:	00803fc4 	movi	r2,255
    cc60:	14c15e36 	bltu	r2,r19,d1dc <__udivdi3+0x5e0>
    cc64:	000b883a 	mov	r5,zero
    cc68:	0005883a 	mov	r2,zero
    cc6c:	9884d83a 	srl	r2,r19,r2
    cc70:	01000074 	movhi	r4,1
    cc74:	2106e404 	addi	r4,r4,7056
    cc78:	01800804 	movi	r6,32
    cc7c:	1105883a 	add	r2,r2,r4
    cc80:	10c00003 	ldbu	r3,0(r2)
    cc84:	28c7883a 	add	r3,r5,r3
    cc88:	30e9c83a 	sub	r20,r6,r3
    cc8c:	a0010a1e 	bne	r20,zero,d0b8 <__udivdi3+0x4bc>
    cc90:	982ed43a 	srli	r23,r19,16
    cc94:	acebc83a 	sub	r21,r21,r19
    cc98:	9dbfffcc 	andi	r22,r19,65535
    cc9c:	05000044 	movi	r20,1
    cca0:	a809883a 	mov	r4,r21
    cca4:	b80b883a 	mov	r5,r23
    cca8:	00049440 	call	4944 <__udivsi3>
    ccac:	100b883a 	mov	r5,r2
    ccb0:	b009883a 	mov	r4,r22
    ccb4:	1021883a 	mov	r16,r2
    ccb8:	00049540 	call	4954 <__mulsi3>
    ccbc:	a809883a 	mov	r4,r21
    ccc0:	b80b883a 	mov	r5,r23
    ccc4:	1023883a 	mov	r17,r2
    ccc8:	000494c0 	call	494c <__umodsi3>
    cccc:	1004943a 	slli	r2,r2,16
    ccd0:	e006d43a 	srli	r3,fp,16
    ccd4:	10c4b03a 	or	r2,r2,r3
    ccd8:	1440042e 	bgeu	r2,r17,ccec <__udivdi3+0xf0>
    ccdc:	14c5883a 	add	r2,r2,r19
    cce0:	843fffc4 	addi	r16,r16,-1
    cce4:	14c00136 	bltu	r2,r19,ccec <__udivdi3+0xf0>
    cce8:	14415c36 	bltu	r2,r17,d25c <__udivdi3+0x660>
    ccec:	1463c83a 	sub	r17,r2,r17
    ccf0:	8809883a 	mov	r4,r17
    ccf4:	b80b883a 	mov	r5,r23
    ccf8:	00049440 	call	4944 <__udivsi3>
    ccfc:	100b883a 	mov	r5,r2
    cd00:	b009883a 	mov	r4,r22
    cd04:	102b883a 	mov	r21,r2
    cd08:	00049540 	call	4954 <__mulsi3>
    cd0c:	8809883a 	mov	r4,r17
    cd10:	b80b883a 	mov	r5,r23
    cd14:	1025883a 	mov	r18,r2
    cd18:	000494c0 	call	494c <__umodsi3>
    cd1c:	1004943a 	slli	r2,r2,16
    cd20:	e0ffffcc 	andi	r3,fp,65535
    cd24:	10c4b03a 	or	r2,r2,r3
    cd28:	1480042e 	bgeu	r2,r18,cd3c <__udivdi3+0x140>
    cd2c:	9885883a 	add	r2,r19,r2
    cd30:	ad7fffc4 	addi	r21,r21,-1
    cd34:	14c00136 	bltu	r2,r19,cd3c <__udivdi3+0x140>
    cd38:	14813c36 	bltu	r2,r18,d22c <__udivdi3+0x630>
    cd3c:	8004943a 	slli	r2,r16,16
    cd40:	a009883a 	mov	r4,r20
    cd44:	a884b03a 	or	r2,r21,r2
    cd48:	00001506 	br	cda0 <__udivdi3+0x1a4>
    cd4c:	380d883a 	mov	r6,r7
    cd50:	29c06c36 	bltu	r5,r7,cf04 <__udivdi3+0x308>
    cd54:	00bfffd4 	movui	r2,65535
    cd58:	11c06436 	bltu	r2,r7,ceec <__udivdi3+0x2f0>
    cd5c:	00803fc4 	movi	r2,255
    cd60:	11c11836 	bltu	r2,r7,d1c4 <__udivdi3+0x5c8>
    cd64:	000b883a 	mov	r5,zero
    cd68:	0005883a 	mov	r2,zero
    cd6c:	3084d83a 	srl	r2,r6,r2
    cd70:	01000074 	movhi	r4,1
    cd74:	2106e404 	addi	r4,r4,7056
    cd78:	01c00804 	movi	r7,32
    cd7c:	1105883a 	add	r2,r2,r4
    cd80:	10c00003 	ldbu	r3,0(r2)
    cd84:	28c7883a 	add	r3,r5,r3
    cd88:	38edc83a 	sub	r22,r7,r3
    cd8c:	b000731e 	bne	r22,zero,cf5c <__udivdi3+0x360>
    cd90:	35400136 	bltu	r6,r21,cd98 <__udivdi3+0x19c>
    cd94:	e4c05b36 	bltu	fp,r19,cf04 <__udivdi3+0x308>
    cd98:	00800044 	movi	r2,1
    cd9c:	0009883a 	mov	r4,zero
    cda0:	d8800315 	stw	r2,12(sp)
    cda4:	d9400317 	ldw	r5,12(sp)
    cda8:	d9000415 	stw	r4,16(sp)
    cdac:	2007883a 	mov	r3,r4
    cdb0:	2805883a 	mov	r2,r5
    cdb4:	dfc00e17 	ldw	ra,56(sp)
    cdb8:	df000d17 	ldw	fp,52(sp)
    cdbc:	ddc00c17 	ldw	r23,48(sp)
    cdc0:	dd800b17 	ldw	r22,44(sp)
    cdc4:	dd400a17 	ldw	r21,40(sp)
    cdc8:	dd000917 	ldw	r20,36(sp)
    cdcc:	dcc00817 	ldw	r19,32(sp)
    cdd0:	dc800717 	ldw	r18,28(sp)
    cdd4:	dc400617 	ldw	r17,24(sp)
    cdd8:	dc000517 	ldw	r16,20(sp)
    cddc:	dec00f04 	addi	sp,sp,60
    cde0:	f800283a 	ret
    cde4:	00bfffd4 	movui	r2,65535
    cde8:	12005636 	bltu	r2,r8,cf44 <__udivdi3+0x348>
    cdec:	00803fc4 	movi	r2,255
    cdf0:	12010036 	bltu	r2,r8,d1f4 <__udivdi3+0x5f8>
    cdf4:	000b883a 	mov	r5,zero
    cdf8:	0005883a 	mov	r2,zero
    cdfc:	9884d83a 	srl	r2,r19,r2
    ce00:	01000074 	movhi	r4,1
    ce04:	2106e404 	addi	r4,r4,7056
    ce08:	01800804 	movi	r6,32
    ce0c:	1105883a 	add	r2,r2,r4
    ce10:	10c00003 	ldbu	r3,0(r2)
    ce14:	28c7883a 	add	r3,r5,r3
    ce18:	30cbc83a 	sub	r5,r6,r3
    ce1c:	28000626 	beq	r5,zero,ce38 <__udivdi3+0x23c>
    ce20:	3145c83a 	sub	r2,r6,r5
    ce24:	e084d83a 	srl	r2,fp,r2
    ce28:	a946983a 	sll	r3,r21,r5
    ce2c:	e178983a 	sll	fp,fp,r5
    ce30:	9966983a 	sll	r19,r19,r5
    ce34:	18aab03a 	or	r21,r3,r2
    ce38:	982ed43a 	srli	r23,r19,16
    ce3c:	a809883a 	mov	r4,r21
    ce40:	9cbfffcc 	andi	r18,r19,65535
    ce44:	b80b883a 	mov	r5,r23
    ce48:	00049440 	call	4944 <__udivsi3>
    ce4c:	100b883a 	mov	r5,r2
    ce50:	9009883a 	mov	r4,r18
    ce54:	1021883a 	mov	r16,r2
    ce58:	00049540 	call	4954 <__mulsi3>
    ce5c:	a809883a 	mov	r4,r21
    ce60:	b80b883a 	mov	r5,r23
    ce64:	1023883a 	mov	r17,r2
    ce68:	000494c0 	call	494c <__umodsi3>
    ce6c:	1004943a 	slli	r2,r2,16
    ce70:	e006d43a 	srli	r3,fp,16
    ce74:	10c4b03a 	or	r2,r2,r3
    ce78:	1440042e 	bgeu	r2,r17,ce8c <__udivdi3+0x290>
    ce7c:	14c5883a 	add	r2,r2,r19
    ce80:	843fffc4 	addi	r16,r16,-1
    ce84:	14c00136 	bltu	r2,r19,ce8c <__udivdi3+0x290>
    ce88:	1440ea36 	bltu	r2,r17,d234 <__udivdi3+0x638>
    ce8c:	1463c83a 	sub	r17,r2,r17
    ce90:	8809883a 	mov	r4,r17
    ce94:	b80b883a 	mov	r5,r23
    ce98:	00049440 	call	4944 <__udivsi3>
    ce9c:	100b883a 	mov	r5,r2
    cea0:	9009883a 	mov	r4,r18
    cea4:	102b883a 	mov	r21,r2
    cea8:	00049540 	call	4954 <__mulsi3>
    ceac:	8809883a 	mov	r4,r17
    ceb0:	b80b883a 	mov	r5,r23
    ceb4:	1025883a 	mov	r18,r2
    ceb8:	000494c0 	call	494c <__umodsi3>
    cebc:	1004943a 	slli	r2,r2,16
    cec0:	e0ffffcc 	andi	r3,fp,65535
    cec4:	10c4b03a 	or	r2,r2,r3
    cec8:	1480042e 	bgeu	r2,r18,cedc <__udivdi3+0x2e0>
    cecc:	9885883a 	add	r2,r19,r2
    ced0:	ad7fffc4 	addi	r21,r21,-1
    ced4:	14c00136 	bltu	r2,r19,cedc <__udivdi3+0x2e0>
    ced8:	1480d936 	bltu	r2,r18,d240 <__udivdi3+0x644>
    cedc:	8004943a 	slli	r2,r16,16
    cee0:	0009883a 	mov	r4,zero
    cee4:	a884b03a 	or	r2,r21,r2
    cee8:	003fad06 	br	cda0 <__udivdi3+0x1a4>
    ceec:	00804034 	movhi	r2,256
    cef0:	10bfffc4 	addi	r2,r2,-1
    cef4:	11c0b636 	bltu	r2,r7,d1d0 <__udivdi3+0x5d4>
    cef8:	01400404 	movi	r5,16
    cefc:	2805883a 	mov	r2,r5
    cf00:	003f9a06 	br	cd6c <__udivdi3+0x170>
    cf04:	0005883a 	mov	r2,zero
    cf08:	0009883a 	mov	r4,zero
    cf0c:	003fa406 	br	cda0 <__udivdi3+0x1a4>
    cf10:	00804034 	movhi	r2,256
    cf14:	10bfffc4 	addi	r2,r2,-1
    cf18:	14c0b336 	bltu	r2,r19,d1e8 <__udivdi3+0x5ec>
    cf1c:	01400404 	movi	r5,16
    cf20:	2805883a 	mov	r2,r5
    cf24:	003f5106 	br	cc6c <__udivdi3+0x70>
    cf28:	01000044 	movi	r4,1
    cf2c:	000b883a 	mov	r5,zero
    cf30:	00049440 	call	4944 <__udivsi3>
    cf34:	1027883a 	mov	r19,r2
    cf38:	00bfffd4 	movui	r2,65535
    cf3c:	14fff436 	bltu	r2,r19,cf10 <__udivdi3+0x314>
    cf40:	003f4606 	br	cc5c <__udivdi3+0x60>
    cf44:	00804034 	movhi	r2,256
    cf48:	10bfffc4 	addi	r2,r2,-1
    cf4c:	1200ac36 	bltu	r2,r8,d200 <__udivdi3+0x604>
    cf50:	01400404 	movi	r5,16
    cf54:	2805883a 	mov	r2,r5
    cf58:	003fa806 	br	cdfc <__udivdi3+0x200>
    cf5c:	3d85c83a 	sub	r2,r7,r22
    cf60:	3588983a 	sll	r4,r6,r22
    cf64:	9886d83a 	srl	r3,r19,r2
    cf68:	a8a2d83a 	srl	r17,r21,r2
    cf6c:	e084d83a 	srl	r2,fp,r2
    cf70:	20eeb03a 	or	r23,r4,r3
    cf74:	b824d43a 	srli	r18,r23,16
    cf78:	ad86983a 	sll	r3,r21,r22
    cf7c:	8809883a 	mov	r4,r17
    cf80:	900b883a 	mov	r5,r18
    cf84:	1886b03a 	or	r3,r3,r2
    cf88:	d8c00115 	stw	r3,4(sp)
    cf8c:	bc3fffcc 	andi	r16,r23,65535
    cf90:	00049440 	call	4944 <__udivsi3>
    cf94:	100b883a 	mov	r5,r2
    cf98:	8009883a 	mov	r4,r16
    cf9c:	1029883a 	mov	r20,r2
    cfa0:	00049540 	call	4954 <__mulsi3>
    cfa4:	900b883a 	mov	r5,r18
    cfa8:	8809883a 	mov	r4,r17
    cfac:	102b883a 	mov	r21,r2
    cfb0:	000494c0 	call	494c <__umodsi3>
    cfb4:	d9400117 	ldw	r5,4(sp)
    cfb8:	1004943a 	slli	r2,r2,16
    cfbc:	9da6983a 	sll	r19,r19,r22
    cfc0:	2806d43a 	srli	r3,r5,16
    cfc4:	10c4b03a 	or	r2,r2,r3
    cfc8:	1540032e 	bgeu	r2,r21,cfd8 <__udivdi3+0x3dc>
    cfcc:	15c5883a 	add	r2,r2,r23
    cfd0:	a53fffc4 	addi	r20,r20,-1
    cfd4:	15c0912e 	bgeu	r2,r23,d21c <__udivdi3+0x620>
    cfd8:	1563c83a 	sub	r17,r2,r21
    cfdc:	8809883a 	mov	r4,r17
    cfe0:	900b883a 	mov	r5,r18
    cfe4:	00049440 	call	4944 <__udivsi3>
    cfe8:	100b883a 	mov	r5,r2
    cfec:	8009883a 	mov	r4,r16
    cff0:	102b883a 	mov	r21,r2
    cff4:	00049540 	call	4954 <__mulsi3>
    cff8:	8809883a 	mov	r4,r17
    cffc:	900b883a 	mov	r5,r18
    d000:	1021883a 	mov	r16,r2
    d004:	000494c0 	call	494c <__umodsi3>
    d008:	da800117 	ldw	r10,4(sp)
    d00c:	1004943a 	slli	r2,r2,16
    d010:	50ffffcc 	andi	r3,r10,65535
    d014:	10c6b03a 	or	r3,r2,r3
    d018:	1c00032e 	bgeu	r3,r16,d028 <__udivdi3+0x42c>
    d01c:	1dc7883a 	add	r3,r3,r23
    d020:	ad7fffc4 	addi	r21,r21,-1
    d024:	1dc0792e 	bgeu	r3,r23,d20c <__udivdi3+0x610>
    d028:	a004943a 	slli	r2,r20,16
    d02c:	982ed43a 	srli	r23,r19,16
    d030:	9cffffcc 	andi	r19,r19,65535
    d034:	a8a4b03a 	or	r18,r21,r2
    d038:	947fffcc 	andi	r17,r18,65535
    d03c:	902ad43a 	srli	r21,r18,16
    d040:	8809883a 	mov	r4,r17
    d044:	980b883a 	mov	r5,r19
    d048:	1c21c83a 	sub	r16,r3,r16
    d04c:	00049540 	call	4954 <__mulsi3>
    d050:	8809883a 	mov	r4,r17
    d054:	b80b883a 	mov	r5,r23
    d058:	1029883a 	mov	r20,r2
    d05c:	00049540 	call	4954 <__mulsi3>
    d060:	980b883a 	mov	r5,r19
    d064:	a809883a 	mov	r4,r21
    d068:	1023883a 	mov	r17,r2
    d06c:	00049540 	call	4954 <__mulsi3>
    d070:	a809883a 	mov	r4,r21
    d074:	b80b883a 	mov	r5,r23
    d078:	1027883a 	mov	r19,r2
    d07c:	00049540 	call	4954 <__mulsi3>
    d080:	1009883a 	mov	r4,r2
    d084:	a004d43a 	srli	r2,r20,16
    d088:	8ce3883a 	add	r17,r17,r19
    d08c:	1447883a 	add	r3,r2,r17
    d090:	1cc0022e 	bgeu	r3,r19,d09c <__udivdi3+0x4a0>
    d094:	00800074 	movhi	r2,1
    d098:	2089883a 	add	r4,r4,r2
    d09c:	1804d43a 	srli	r2,r3,16
    d0a0:	2085883a 	add	r2,r4,r2
    d0a4:	80804436 	bltu	r16,r2,d1b8 <__udivdi3+0x5bc>
    d0a8:	80803e26 	beq	r16,r2,d1a4 <__udivdi3+0x5a8>
    d0ac:	9005883a 	mov	r2,r18
    d0b0:	0009883a 	mov	r4,zero
    d0b4:	003f3a06 	br	cda0 <__udivdi3+0x1a4>
    d0b8:	9d26983a 	sll	r19,r19,r20
    d0bc:	3505c83a 	sub	r2,r6,r20
    d0c0:	a8a2d83a 	srl	r17,r21,r2
    d0c4:	982ed43a 	srli	r23,r19,16
    d0c8:	e084d83a 	srl	r2,fp,r2
    d0cc:	ad06983a 	sll	r3,r21,r20
    d0d0:	8809883a 	mov	r4,r17
    d0d4:	b80b883a 	mov	r5,r23
    d0d8:	1886b03a 	or	r3,r3,r2
    d0dc:	d8c00015 	stw	r3,0(sp)
    d0e0:	9dbfffcc 	andi	r22,r19,65535
    d0e4:	00049440 	call	4944 <__udivsi3>
    d0e8:	100b883a 	mov	r5,r2
    d0ec:	b009883a 	mov	r4,r22
    d0f0:	d8800215 	stw	r2,8(sp)
    d0f4:	00049540 	call	4954 <__mulsi3>
    d0f8:	8809883a 	mov	r4,r17
    d0fc:	b80b883a 	mov	r5,r23
    d100:	102b883a 	mov	r21,r2
    d104:	000494c0 	call	494c <__umodsi3>
    d108:	d9000017 	ldw	r4,0(sp)
    d10c:	1004943a 	slli	r2,r2,16
    d110:	2006d43a 	srli	r3,r4,16
    d114:	10c4b03a 	or	r2,r2,r3
    d118:	1540052e 	bgeu	r2,r21,d130 <__udivdi3+0x534>
    d11c:	d9400217 	ldw	r5,8(sp)
    d120:	14c5883a 	add	r2,r2,r19
    d124:	297fffc4 	addi	r5,r5,-1
    d128:	d9400215 	stw	r5,8(sp)
    d12c:	14c0462e 	bgeu	r2,r19,d248 <__udivdi3+0x64c>
    d130:	1563c83a 	sub	r17,r2,r21
    d134:	8809883a 	mov	r4,r17
    d138:	b80b883a 	mov	r5,r23
    d13c:	00049440 	call	4944 <__udivsi3>
    d140:	100b883a 	mov	r5,r2
    d144:	b009883a 	mov	r4,r22
    d148:	1025883a 	mov	r18,r2
    d14c:	00049540 	call	4954 <__mulsi3>
    d150:	8809883a 	mov	r4,r17
    d154:	b80b883a 	mov	r5,r23
    d158:	1021883a 	mov	r16,r2
    d15c:	000494c0 	call	494c <__umodsi3>
    d160:	da800017 	ldw	r10,0(sp)
    d164:	1004943a 	slli	r2,r2,16
    d168:	50ffffcc 	andi	r3,r10,65535
    d16c:	10c6b03a 	or	r3,r2,r3
    d170:	1c00062e 	bgeu	r3,r16,d18c <__udivdi3+0x590>
    d174:	1cc7883a 	add	r3,r3,r19
    d178:	94bfffc4 	addi	r18,r18,-1
    d17c:	1cc00336 	bltu	r3,r19,d18c <__udivdi3+0x590>
    d180:	1c00022e 	bgeu	r3,r16,d18c <__udivdi3+0x590>
    d184:	94bfffc4 	addi	r18,r18,-1
    d188:	1cc7883a 	add	r3,r3,r19
    d18c:	d9000217 	ldw	r4,8(sp)
    d190:	e538983a 	sll	fp,fp,r20
    d194:	1c2bc83a 	sub	r21,r3,r16
    d198:	2004943a 	slli	r2,r4,16
    d19c:	90a8b03a 	or	r20,r18,r2
    d1a0:	003ebf06 	br	cca0 <__udivdi3+0xa4>
    d1a4:	1804943a 	slli	r2,r3,16
    d1a8:	e588983a 	sll	r4,fp,r22
    d1ac:	a0ffffcc 	andi	r3,r20,65535
    d1b0:	10c5883a 	add	r2,r2,r3
    d1b4:	20bfbd2e 	bgeu	r4,r2,d0ac <__udivdi3+0x4b0>
    d1b8:	90bfffc4 	addi	r2,r18,-1
    d1bc:	0009883a 	mov	r4,zero
    d1c0:	003ef706 	br	cda0 <__udivdi3+0x1a4>
    d1c4:	01400204 	movi	r5,8
    d1c8:	2805883a 	mov	r2,r5
    d1cc:	003ee706 	br	cd6c <__udivdi3+0x170>
    d1d0:	01400604 	movi	r5,24
    d1d4:	2805883a 	mov	r2,r5
    d1d8:	003ee406 	br	cd6c <__udivdi3+0x170>
    d1dc:	01400204 	movi	r5,8
    d1e0:	2805883a 	mov	r2,r5
    d1e4:	003ea106 	br	cc6c <__udivdi3+0x70>
    d1e8:	01400604 	movi	r5,24
    d1ec:	2805883a 	mov	r2,r5
    d1f0:	003e9e06 	br	cc6c <__udivdi3+0x70>
    d1f4:	01400204 	movi	r5,8
    d1f8:	2805883a 	mov	r2,r5
    d1fc:	003eff06 	br	cdfc <__udivdi3+0x200>
    d200:	01400604 	movi	r5,24
    d204:	2805883a 	mov	r2,r5
    d208:	003efc06 	br	cdfc <__udivdi3+0x200>
    d20c:	1c3f862e 	bgeu	r3,r16,d028 <__udivdi3+0x42c>
    d210:	1dc7883a 	add	r3,r3,r23
    d214:	ad7fffc4 	addi	r21,r21,-1
    d218:	003f8306 	br	d028 <__udivdi3+0x42c>
    d21c:	157f6e2e 	bgeu	r2,r21,cfd8 <__udivdi3+0x3dc>
    d220:	a53fffc4 	addi	r20,r20,-1
    d224:	15c5883a 	add	r2,r2,r23
    d228:	003f6b06 	br	cfd8 <__udivdi3+0x3dc>
    d22c:	ad7fffc4 	addi	r21,r21,-1
    d230:	003ec206 	br	cd3c <__udivdi3+0x140>
    d234:	843fffc4 	addi	r16,r16,-1
    d238:	14c5883a 	add	r2,r2,r19
    d23c:	003f1306 	br	ce8c <__udivdi3+0x290>
    d240:	ad7fffc4 	addi	r21,r21,-1
    d244:	003f2506 	br	cedc <__udivdi3+0x2e0>
    d248:	157fb92e 	bgeu	r2,r21,d130 <__udivdi3+0x534>
    d24c:	297fffc4 	addi	r5,r5,-1
    d250:	14c5883a 	add	r2,r2,r19
    d254:	d9400215 	stw	r5,8(sp)
    d258:	003fb506 	br	d130 <__udivdi3+0x534>
    d25c:	843fffc4 	addi	r16,r16,-1
    d260:	14c5883a 	add	r2,r2,r19
    d264:	003ea106 	br	ccec <__udivdi3+0xf0>

0000d268 <__umoddi3>:
    d268:	defff004 	addi	sp,sp,-64
    d26c:	3011883a 	mov	r8,r6
    d270:	000d883a 	mov	r6,zero
    d274:	dd400b15 	stw	r21,44(sp)
    d278:	dcc00915 	stw	r19,36(sp)
    d27c:	dc000615 	stw	r16,24(sp)
    d280:	dfc00f15 	stw	ra,60(sp)
    d284:	df000e15 	stw	fp,56(sp)
    d288:	ddc00d15 	stw	r23,52(sp)
    d28c:	dd800c15 	stw	r22,48(sp)
    d290:	dd000a15 	stw	r20,40(sp)
    d294:	dc800815 	stw	r18,32(sp)
    d298:	dc400715 	stw	r17,28(sp)
    d29c:	2817883a 	mov	r11,r5
    d2a0:	d9800415 	stw	r6,16(sp)
    d2a4:	4027883a 	mov	r19,r8
    d2a8:	d9800515 	stw	r6,20(sp)
    d2ac:	2021883a 	mov	r16,r4
    d2b0:	282b883a 	mov	r21,r5
    d2b4:	38002c1e 	bne	r7,zero,d368 <__umoddi3+0x100>
    d2b8:	2a005636 	bltu	r5,r8,d414 <__umoddi3+0x1ac>
    d2bc:	40009a26 	beq	r8,zero,d528 <__umoddi3+0x2c0>
    d2c0:	00bfffd4 	movui	r2,65535
    d2c4:	14c09236 	bltu	r2,r19,d510 <__umoddi3+0x2a8>
    d2c8:	00803fc4 	movi	r2,255
    d2cc:	14c15c36 	bltu	r2,r19,d840 <__umoddi3+0x5d8>
    d2d0:	000b883a 	mov	r5,zero
    d2d4:	0005883a 	mov	r2,zero
    d2d8:	9884d83a 	srl	r2,r19,r2
    d2dc:	01000074 	movhi	r4,1
    d2e0:	2106e404 	addi	r4,r4,7056
    d2e4:	01800804 	movi	r6,32
    d2e8:	1105883a 	add	r2,r2,r4
    d2ec:	10c00003 	ldbu	r3,0(r2)
    d2f0:	28c7883a 	add	r3,r5,r3
    d2f4:	30e5c83a 	sub	r18,r6,r3
    d2f8:	9000a41e 	bne	r18,zero,d58c <__umoddi3+0x324>
    d2fc:	982ed43a 	srli	r23,r19,16
    d300:	acebc83a 	sub	r21,r21,r19
    d304:	9d3fffcc 	andi	r20,r19,65535
    d308:	002d883a 	mov	r22,zero
    d30c:	a809883a 	mov	r4,r21
    d310:	b80b883a 	mov	r5,r23
    d314:	00049440 	call	4944 <__udivsi3>
    d318:	100b883a 	mov	r5,r2
    d31c:	a009883a 	mov	r4,r20
    d320:	00049540 	call	4954 <__mulsi3>
    d324:	a809883a 	mov	r4,r21
    d328:	b80b883a 	mov	r5,r23
    d32c:	1023883a 	mov	r17,r2
    d330:	000494c0 	call	494c <__umodsi3>
    d334:	1004943a 	slli	r2,r2,16
    d338:	8006d43a 	srli	r3,r16,16
    d33c:	10c4b03a 	or	r2,r2,r3
    d340:	1440032e 	bgeu	r2,r17,d350 <__umoddi3+0xe8>
    d344:	14c5883a 	add	r2,r2,r19
    d348:	14c00136 	bltu	r2,r19,d350 <__umoddi3+0xe8>
    d34c:	14415836 	bltu	r2,r17,d8b0 <__umoddi3+0x648>
    d350:	1463c83a 	sub	r17,r2,r17
    d354:	8809883a 	mov	r4,r17
    d358:	b80b883a 	mov	r5,r23
    d35c:	00049440 	call	4944 <__udivsi3>
    d360:	a009883a 	mov	r4,r20
    d364:	00005306 	br	d4b4 <__umoddi3+0x24c>
    d368:	380d883a 	mov	r6,r7
    d36c:	29c0132e 	bgeu	r5,r7,d3bc <__umoddi3+0x154>
    d370:	d9000415 	stw	r4,16(sp)
    d374:	d9400515 	stw	r5,20(sp)
    d378:	d9400417 	ldw	r5,16(sp)
    d37c:	5813883a 	mov	r9,r11
    d380:	2811883a 	mov	r8,r5
    d384:	4005883a 	mov	r2,r8
    d388:	4807883a 	mov	r3,r9
    d38c:	dfc00f17 	ldw	ra,60(sp)
    d390:	df000e17 	ldw	fp,56(sp)
    d394:	ddc00d17 	ldw	r23,52(sp)
    d398:	dd800c17 	ldw	r22,48(sp)
    d39c:	dd400b17 	ldw	r21,44(sp)
    d3a0:	dd000a17 	ldw	r20,40(sp)
    d3a4:	dcc00917 	ldw	r19,36(sp)
    d3a8:	dc800817 	ldw	r18,32(sp)
    d3ac:	dc400717 	ldw	r17,28(sp)
    d3b0:	dc000617 	ldw	r16,24(sp)
    d3b4:	dec01004 	addi	sp,sp,64
    d3b8:	f800283a 	ret
    d3bc:	00bfffd4 	movui	r2,65535
    d3c0:	11c06636 	bltu	r2,r7,d55c <__umoddi3+0x2f4>
    d3c4:	00803fc4 	movi	r2,255
    d3c8:	11c12036 	bltu	r2,r7,d84c <__umoddi3+0x5e4>
    d3cc:	000b883a 	mov	r5,zero
    d3d0:	0005883a 	mov	r2,zero
    d3d4:	3084d83a 	srl	r2,r6,r2
    d3d8:	01000074 	movhi	r4,1
    d3dc:	2106e404 	addi	r4,r4,7056
    d3e0:	01c00804 	movi	r7,32
    d3e4:	1105883a 	add	r2,r2,r4
    d3e8:	10c00003 	ldbu	r3,0(r2)
    d3ec:	28c7883a 	add	r3,r5,r3
    d3f0:	38e5c83a 	sub	r18,r7,r3
    d3f4:	9000941e 	bne	r18,zero,d648 <__umoddi3+0x3e0>
    d3f8:	35405e36 	bltu	r6,r21,d574 <__umoddi3+0x30c>
    d3fc:	84c05d2e 	bgeu	r16,r19,d574 <__umoddi3+0x30c>
    d400:	8011883a 	mov	r8,r16
    d404:	a813883a 	mov	r9,r21
    d408:	dc000415 	stw	r16,16(sp)
    d40c:	dd400515 	stw	r21,20(sp)
    d410:	003fdc06 	br	d384 <__umoddi3+0x11c>
    d414:	00bfffd4 	movui	r2,65535
    d418:	12004a36 	bltu	r2,r8,d544 <__umoddi3+0x2dc>
    d41c:	00803fc4 	movi	r2,255
    d420:	12010d36 	bltu	r2,r8,d858 <__umoddi3+0x5f0>
    d424:	000b883a 	mov	r5,zero
    d428:	0005883a 	mov	r2,zero
    d42c:	9884d83a 	srl	r2,r19,r2
    d430:	01000074 	movhi	r4,1
    d434:	2106e404 	addi	r4,r4,7056
    d438:	01800804 	movi	r6,32
    d43c:	1105883a 	add	r2,r2,r4
    d440:	10c00003 	ldbu	r3,0(r2)
    d444:	28c7883a 	add	r3,r5,r3
    d448:	30c7c83a 	sub	r3,r6,r3
    d44c:	1800dc1e 	bne	r3,zero,d7c0 <__umoddi3+0x558>
    d450:	002d883a 	mov	r22,zero
    d454:	982ed43a 	srli	r23,r19,16
    d458:	a809883a 	mov	r4,r21
    d45c:	9cbfffcc 	andi	r18,r19,65535
    d460:	b80b883a 	mov	r5,r23
    d464:	00049440 	call	4944 <__udivsi3>
    d468:	100b883a 	mov	r5,r2
    d46c:	9009883a 	mov	r4,r18
    d470:	00049540 	call	4954 <__mulsi3>
    d474:	a809883a 	mov	r4,r21
    d478:	b80b883a 	mov	r5,r23
    d47c:	1023883a 	mov	r17,r2
    d480:	000494c0 	call	494c <__umodsi3>
    d484:	1004943a 	slli	r2,r2,16
    d488:	8006d43a 	srli	r3,r16,16
    d48c:	10c4b03a 	or	r2,r2,r3
    d490:	1440032e 	bgeu	r2,r17,d4a0 <__umoddi3+0x238>
    d494:	14c5883a 	add	r2,r2,r19
    d498:	14c00136 	bltu	r2,r19,d4a0 <__umoddi3+0x238>
    d49c:	14410236 	bltu	r2,r17,d8a8 <__umoddi3+0x640>
    d4a0:	1463c83a 	sub	r17,r2,r17
    d4a4:	8809883a 	mov	r4,r17
    d4a8:	b80b883a 	mov	r5,r23
    d4ac:	00049440 	call	4944 <__udivsi3>
    d4b0:	9009883a 	mov	r4,r18
    d4b4:	100b883a 	mov	r5,r2
    d4b8:	00049540 	call	4954 <__mulsi3>
    d4bc:	8809883a 	mov	r4,r17
    d4c0:	b80b883a 	mov	r5,r23
    d4c4:	102b883a 	mov	r21,r2
    d4c8:	000494c0 	call	494c <__umodsi3>
    d4cc:	1004943a 	slli	r2,r2,16
    d4d0:	80ffffcc 	andi	r3,r16,65535
    d4d4:	10c4b03a 	or	r2,r2,r3
    d4d8:	1540042e 	bgeu	r2,r21,d4ec <__umoddi3+0x284>
    d4dc:	14c5883a 	add	r2,r2,r19
    d4e0:	14c00236 	bltu	r2,r19,d4ec <__umoddi3+0x284>
    d4e4:	1540012e 	bgeu	r2,r21,d4ec <__umoddi3+0x284>
    d4e8:	14c5883a 	add	r2,r2,r19
    d4ec:	1545c83a 	sub	r2,r2,r21
    d4f0:	1584d83a 	srl	r2,r2,r22
    d4f4:	0013883a 	mov	r9,zero
    d4f8:	d8800415 	stw	r2,16(sp)
    d4fc:	d8c00417 	ldw	r3,16(sp)
    d500:	0005883a 	mov	r2,zero
    d504:	d8800515 	stw	r2,20(sp)
    d508:	1811883a 	mov	r8,r3
    d50c:	003f9d06 	br	d384 <__umoddi3+0x11c>
    d510:	00804034 	movhi	r2,256
    d514:	10bfffc4 	addi	r2,r2,-1
    d518:	14c0c636 	bltu	r2,r19,d834 <__umoddi3+0x5cc>
    d51c:	01400404 	movi	r5,16
    d520:	2805883a 	mov	r2,r5
    d524:	003f6c06 	br	d2d8 <__umoddi3+0x70>
    d528:	01000044 	movi	r4,1
    d52c:	000b883a 	mov	r5,zero
    d530:	00049440 	call	4944 <__udivsi3>
    d534:	1027883a 	mov	r19,r2
    d538:	00bfffd4 	movui	r2,65535
    d53c:	14fff436 	bltu	r2,r19,d510 <__umoddi3+0x2a8>
    d540:	003f6106 	br	d2c8 <__umoddi3+0x60>
    d544:	00804034 	movhi	r2,256
    d548:	10bfffc4 	addi	r2,r2,-1
    d54c:	1200c536 	bltu	r2,r8,d864 <__umoddi3+0x5fc>
    d550:	01400404 	movi	r5,16
    d554:	2805883a 	mov	r2,r5
    d558:	003fb406 	br	d42c <__umoddi3+0x1c4>
    d55c:	00804034 	movhi	r2,256
    d560:	10bfffc4 	addi	r2,r2,-1
    d564:	11c0c236 	bltu	r2,r7,d870 <__umoddi3+0x608>
    d568:	01400404 	movi	r5,16
    d56c:	2805883a 	mov	r2,r5
    d570:	003f9806 	br	d3d4 <__umoddi3+0x16c>
    d574:	84c9c83a 	sub	r4,r16,r19
    d578:	8105803a 	cmpltu	r2,r16,r4
    d57c:	a987c83a 	sub	r3,r21,r6
    d580:	18abc83a 	sub	r21,r3,r2
    d584:	2021883a 	mov	r16,r4
    d588:	003f9d06 	br	d400 <__umoddi3+0x198>
    d58c:	9ca6983a 	sll	r19,r19,r18
    d590:	3485c83a 	sub	r2,r6,r18
    d594:	a8a2d83a 	srl	r17,r21,r2
    d598:	982ed43a 	srli	r23,r19,16
    d59c:	ac86983a 	sll	r3,r21,r18
    d5a0:	8084d83a 	srl	r2,r16,r2
    d5a4:	8809883a 	mov	r4,r17
    d5a8:	b80b883a 	mov	r5,r23
    d5ac:	18b8b03a 	or	fp,r3,r2
    d5b0:	9d3fffcc 	andi	r20,r19,65535
    d5b4:	00049440 	call	4944 <__udivsi3>
    d5b8:	100b883a 	mov	r5,r2
    d5bc:	a009883a 	mov	r4,r20
    d5c0:	00049540 	call	4954 <__mulsi3>
    d5c4:	8809883a 	mov	r4,r17
    d5c8:	b80b883a 	mov	r5,r23
    d5cc:	102b883a 	mov	r21,r2
    d5d0:	000494c0 	call	494c <__umodsi3>
    d5d4:	1004943a 	slli	r2,r2,16
    d5d8:	e006d43a 	srli	r3,fp,16
    d5dc:	902d883a 	mov	r22,r18
    d5e0:	10c4b03a 	or	r2,r2,r3
    d5e4:	1540022e 	bgeu	r2,r21,d5f0 <__umoddi3+0x388>
    d5e8:	14c5883a 	add	r2,r2,r19
    d5ec:	14c0ab2e 	bgeu	r2,r19,d89c <__umoddi3+0x634>
    d5f0:	1563c83a 	sub	r17,r2,r21
    d5f4:	8809883a 	mov	r4,r17
    d5f8:	b80b883a 	mov	r5,r23
    d5fc:	00049440 	call	4944 <__udivsi3>
    d600:	100b883a 	mov	r5,r2
    d604:	a009883a 	mov	r4,r20
    d608:	00049540 	call	4954 <__mulsi3>
    d60c:	8809883a 	mov	r4,r17
    d610:	b80b883a 	mov	r5,r23
    d614:	102b883a 	mov	r21,r2
    d618:	000494c0 	call	494c <__umodsi3>
    d61c:	1004943a 	slli	r2,r2,16
    d620:	e0ffffcc 	andi	r3,fp,65535
    d624:	10c4b03a 	or	r2,r2,r3
    d628:	1540042e 	bgeu	r2,r21,d63c <__umoddi3+0x3d4>
    d62c:	14c5883a 	add	r2,r2,r19
    d630:	14c00236 	bltu	r2,r19,d63c <__umoddi3+0x3d4>
    d634:	1540012e 	bgeu	r2,r21,d63c <__umoddi3+0x3d4>
    d638:	14c5883a 	add	r2,r2,r19
    d63c:	84a0983a 	sll	r16,r16,r18
    d640:	156bc83a 	sub	r21,r2,r21
    d644:	003f3106 	br	d30c <__umoddi3+0xa4>
    d648:	3c8fc83a 	sub	r7,r7,r18
    d64c:	3486983a 	sll	r3,r6,r18
    d650:	99c4d83a 	srl	r2,r19,r7
    d654:	a9e2d83a 	srl	r17,r21,r7
    d658:	ac8c983a 	sll	r6,r21,r18
    d65c:	18acb03a 	or	r22,r3,r2
    d660:	b02ed43a 	srli	r23,r22,16
    d664:	81c4d83a 	srl	r2,r16,r7
    d668:	8809883a 	mov	r4,r17
    d66c:	b80b883a 	mov	r5,r23
    d670:	308cb03a 	or	r6,r6,r2
    d674:	d9c00315 	stw	r7,12(sp)
    d678:	d9800215 	stw	r6,8(sp)
    d67c:	b53fffcc 	andi	r20,r22,65535
    d680:	00049440 	call	4944 <__udivsi3>
    d684:	100b883a 	mov	r5,r2
    d688:	a009883a 	mov	r4,r20
    d68c:	1039883a 	mov	fp,r2
    d690:	00049540 	call	4954 <__mulsi3>
    d694:	8809883a 	mov	r4,r17
    d698:	b80b883a 	mov	r5,r23
    d69c:	102b883a 	mov	r21,r2
    d6a0:	000494c0 	call	494c <__umodsi3>
    d6a4:	d9000217 	ldw	r4,8(sp)
    d6a8:	1004943a 	slli	r2,r2,16
    d6ac:	9ca6983a 	sll	r19,r19,r18
    d6b0:	2006d43a 	srli	r3,r4,16
    d6b4:	84a0983a 	sll	r16,r16,r18
    d6b8:	dcc00015 	stw	r19,0(sp)
    d6bc:	10c4b03a 	or	r2,r2,r3
    d6c0:	dc000115 	stw	r16,4(sp)
    d6c4:	1540032e 	bgeu	r2,r21,d6d4 <__umoddi3+0x46c>
    d6c8:	1585883a 	add	r2,r2,r22
    d6cc:	e73fffc4 	addi	fp,fp,-1
    d6d0:	15806e2e 	bgeu	r2,r22,d88c <__umoddi3+0x624>
    d6d4:	1563c83a 	sub	r17,r2,r21
    d6d8:	8809883a 	mov	r4,r17
    d6dc:	b80b883a 	mov	r5,r23
    d6e0:	00049440 	call	4944 <__udivsi3>
    d6e4:	100b883a 	mov	r5,r2
    d6e8:	a009883a 	mov	r4,r20
    d6ec:	1021883a 	mov	r16,r2
    d6f0:	00049540 	call	4954 <__mulsi3>
    d6f4:	b80b883a 	mov	r5,r23
    d6f8:	8809883a 	mov	r4,r17
    d6fc:	1029883a 	mov	r20,r2
    d700:	000494c0 	call	494c <__umodsi3>
    d704:	d9400217 	ldw	r5,8(sp)
    d708:	1004943a 	slli	r2,r2,16
    d70c:	28ffffcc 	andi	r3,r5,65535
    d710:	10c4b03a 	or	r2,r2,r3
    d714:	1500032e 	bgeu	r2,r20,d724 <__umoddi3+0x4bc>
    d718:	1585883a 	add	r2,r2,r22
    d71c:	843fffc4 	addi	r16,r16,-1
    d720:	1580562e 	bgeu	r2,r22,d87c <__umoddi3+0x614>
    d724:	d9800017 	ldw	r6,0(sp)
    d728:	e022943a 	slli	r17,fp,16
    d72c:	302ed43a 	srli	r23,r6,16
    d730:	8462b03a 	or	r17,r16,r17
    d734:	34ffffcc 	andi	r19,r6,65535
    d738:	882ad43a 	srli	r21,r17,16
    d73c:	8c7fffcc 	andi	r17,r17,65535
    d740:	8809883a 	mov	r4,r17
    d744:	980b883a 	mov	r5,r19
    d748:	1521c83a 	sub	r16,r2,r20
    d74c:	00049540 	call	4954 <__mulsi3>
    d750:	8809883a 	mov	r4,r17
    d754:	b80b883a 	mov	r5,r23
    d758:	1029883a 	mov	r20,r2
    d75c:	00049540 	call	4954 <__mulsi3>
    d760:	980b883a 	mov	r5,r19
    d764:	a809883a 	mov	r4,r21
    d768:	1023883a 	mov	r17,r2
    d76c:	00049540 	call	4954 <__mulsi3>
    d770:	a809883a 	mov	r4,r21
    d774:	b80b883a 	mov	r5,r23
    d778:	1027883a 	mov	r19,r2
    d77c:	00049540 	call	4954 <__mulsi3>
    d780:	100b883a 	mov	r5,r2
    d784:	a004d43a 	srli	r2,r20,16
    d788:	8ce3883a 	add	r17,r17,r19
    d78c:	1449883a 	add	r4,r2,r17
    d790:	24c0022e 	bgeu	r4,r19,d79c <__umoddi3+0x534>
    d794:	00800074 	movhi	r2,1
    d798:	288b883a 	add	r5,r5,r2
    d79c:	2004d43a 	srli	r2,r4,16
    d7a0:	2008943a 	slli	r4,r4,16
    d7a4:	a0ffffcc 	andi	r3,r20,65535
    d7a8:	288d883a 	add	r6,r5,r2
    d7ac:	20c9883a 	add	r4,r4,r3
    d7b0:	81800b36 	bltu	r16,r6,d7e0 <__umoddi3+0x578>
    d7b4:	81804026 	beq	r16,r6,d8b8 <__umoddi3+0x650>
    d7b8:	818dc83a 	sub	r6,r16,r6
    d7bc:	00000f06 	br	d7fc <__umoddi3+0x594>
    d7c0:	30c5c83a 	sub	r2,r6,r3
    d7c4:	182d883a 	mov	r22,r3
    d7c8:	8084d83a 	srl	r2,r16,r2
    d7cc:	a8c6983a 	sll	r3,r21,r3
    d7d0:	9da6983a 	sll	r19,r19,r22
    d7d4:	85a0983a 	sll	r16,r16,r22
    d7d8:	18aab03a 	or	r21,r3,r2
    d7dc:	003f1d06 	br	d454 <__umoddi3+0x1ec>
    d7e0:	d8c00017 	ldw	r3,0(sp)
    d7e4:	20c5c83a 	sub	r2,r4,r3
    d7e8:	2089803a 	cmpltu	r4,r4,r2
    d7ec:	3587c83a 	sub	r3,r6,r22
    d7f0:	1907c83a 	sub	r3,r3,r4
    d7f4:	80cdc83a 	sub	r6,r16,r3
    d7f8:	1009883a 	mov	r4,r2
    d7fc:	d9400117 	ldw	r5,4(sp)
    d800:	2905c83a 	sub	r2,r5,r4
    d804:	2887803a 	cmpltu	r3,r5,r2
    d808:	30c7c83a 	sub	r3,r6,r3
    d80c:	d9800317 	ldw	r6,12(sp)
    d810:	1484d83a 	srl	r2,r2,r18
    d814:	1988983a 	sll	r4,r3,r6
    d818:	1c86d83a 	srl	r3,r3,r18
    d81c:	2088b03a 	or	r4,r4,r2
    d820:	2011883a 	mov	r8,r4
    d824:	1813883a 	mov	r9,r3
    d828:	d9000415 	stw	r4,16(sp)
    d82c:	d8c00515 	stw	r3,20(sp)
    d830:	003ed406 	br	d384 <__umoddi3+0x11c>
    d834:	01400604 	movi	r5,24
    d838:	2805883a 	mov	r2,r5
    d83c:	003ea606 	br	d2d8 <__umoddi3+0x70>
    d840:	01400204 	movi	r5,8
    d844:	2805883a 	mov	r2,r5
    d848:	003ea306 	br	d2d8 <__umoddi3+0x70>
    d84c:	01400204 	movi	r5,8
    d850:	2805883a 	mov	r2,r5
    d854:	003edf06 	br	d3d4 <__umoddi3+0x16c>
    d858:	01400204 	movi	r5,8
    d85c:	2805883a 	mov	r2,r5
    d860:	003ef206 	br	d42c <__umoddi3+0x1c4>
    d864:	01400604 	movi	r5,24
    d868:	2805883a 	mov	r2,r5
    d86c:	003eef06 	br	d42c <__umoddi3+0x1c4>
    d870:	01400604 	movi	r5,24
    d874:	2805883a 	mov	r2,r5
    d878:	003ed606 	br	d3d4 <__umoddi3+0x16c>
    d87c:	153fa92e 	bgeu	r2,r20,d724 <__umoddi3+0x4bc>
    d880:	843fffc4 	addi	r16,r16,-1
    d884:	1585883a 	add	r2,r2,r22
    d888:	003fa606 	br	d724 <__umoddi3+0x4bc>
    d88c:	157f912e 	bgeu	r2,r21,d6d4 <__umoddi3+0x46c>
    d890:	e73fffc4 	addi	fp,fp,-1
    d894:	1585883a 	add	r2,r2,r22
    d898:	003f8e06 	br	d6d4 <__umoddi3+0x46c>
    d89c:	157f542e 	bgeu	r2,r21,d5f0 <__umoddi3+0x388>
    d8a0:	14c5883a 	add	r2,r2,r19
    d8a4:	003f5206 	br	d5f0 <__umoddi3+0x388>
    d8a8:	14c5883a 	add	r2,r2,r19
    d8ac:	003efc06 	br	d4a0 <__umoddi3+0x238>
    d8b0:	14c5883a 	add	r2,r2,r19
    d8b4:	003ea606 	br	d350 <__umoddi3+0xe8>
    d8b8:	d8800117 	ldw	r2,4(sp)
    d8bc:	113fc836 	bltu	r2,r4,d7e0 <__umoddi3+0x578>
    d8c0:	000d883a 	mov	r6,zero
    d8c4:	003fcd06 	br	d7fc <__umoddi3+0x594>

0000d8c8 <__nedf2>:
    d8c8:	deffef04 	addi	sp,sp,-68
    d8cc:	dc400f15 	stw	r17,60(sp)
    d8d0:	dc400404 	addi	r17,sp,16
    d8d4:	2005883a 	mov	r2,r4
    d8d8:	2807883a 	mov	r3,r5
    d8dc:	dc000e15 	stw	r16,56(sp)
    d8e0:	d809883a 	mov	r4,sp
    d8e4:	880b883a 	mov	r5,r17
    d8e8:	dc000904 	addi	r16,sp,36
    d8ec:	d8c00115 	stw	r3,4(sp)
    d8f0:	d8800015 	stw	r2,0(sp)
    d8f4:	d9800215 	stw	r6,8(sp)
    d8f8:	dfc01015 	stw	ra,64(sp)
    d8fc:	d9c00315 	stw	r7,12(sp)
    d900:	000501c0 	call	501c <__unpack_d>
    d904:	d9000204 	addi	r4,sp,8
    d908:	800b883a 	mov	r5,r16
    d90c:	000501c0 	call	501c <__unpack_d>
    d910:	d8800417 	ldw	r2,16(sp)
    d914:	00c00044 	movi	r3,1
    d918:	180d883a 	mov	r6,r3
    d91c:	1880062e 	bgeu	r3,r2,d938 <__nedf2+0x70>
    d920:	d8800917 	ldw	r2,36(sp)
    d924:	8809883a 	mov	r4,r17
    d928:	800b883a 	mov	r5,r16
    d92c:	1880022e 	bgeu	r3,r2,d938 <__nedf2+0x70>
    d930:	00051540 	call	5154 <__fpcmp_parts_d>
    d934:	100d883a 	mov	r6,r2
    d938:	3005883a 	mov	r2,r6
    d93c:	dfc01017 	ldw	ra,64(sp)
    d940:	dc400f17 	ldw	r17,60(sp)
    d944:	dc000e17 	ldw	r16,56(sp)
    d948:	dec01104 	addi	sp,sp,68
    d94c:	f800283a 	ret

0000d950 <__ltdf2>:
    d950:	deffef04 	addi	sp,sp,-68
    d954:	dc400f15 	stw	r17,60(sp)
    d958:	dc400404 	addi	r17,sp,16
    d95c:	2005883a 	mov	r2,r4
    d960:	2807883a 	mov	r3,r5
    d964:	dc000e15 	stw	r16,56(sp)
    d968:	d809883a 	mov	r4,sp
    d96c:	880b883a 	mov	r5,r17
    d970:	dc000904 	addi	r16,sp,36
    d974:	d8c00115 	stw	r3,4(sp)
    d978:	d8800015 	stw	r2,0(sp)
    d97c:	d9800215 	stw	r6,8(sp)
    d980:	dfc01015 	stw	ra,64(sp)
    d984:	d9c00315 	stw	r7,12(sp)
    d988:	000501c0 	call	501c <__unpack_d>
    d98c:	d9000204 	addi	r4,sp,8
    d990:	800b883a 	mov	r5,r16
    d994:	000501c0 	call	501c <__unpack_d>
    d998:	d8800417 	ldw	r2,16(sp)
    d99c:	00c00044 	movi	r3,1
    d9a0:	180d883a 	mov	r6,r3
    d9a4:	1880062e 	bgeu	r3,r2,d9c0 <__ltdf2+0x70>
    d9a8:	d8800917 	ldw	r2,36(sp)
    d9ac:	8809883a 	mov	r4,r17
    d9b0:	800b883a 	mov	r5,r16
    d9b4:	1880022e 	bgeu	r3,r2,d9c0 <__ltdf2+0x70>
    d9b8:	00051540 	call	5154 <__fpcmp_parts_d>
    d9bc:	100d883a 	mov	r6,r2
    d9c0:	3005883a 	mov	r2,r6
    d9c4:	dfc01017 	ldw	ra,64(sp)
    d9c8:	dc400f17 	ldw	r17,60(sp)
    d9cc:	dc000e17 	ldw	r16,56(sp)
    d9d0:	dec01104 	addi	sp,sp,68
    d9d4:	f800283a 	ret

0000d9d8 <__floatunsidf>:
    d9d8:	defff204 	addi	sp,sp,-56
    d9dc:	dfc00d15 	stw	ra,52(sp)
    d9e0:	ddc00c15 	stw	r23,48(sp)
    d9e4:	dd800b15 	stw	r22,44(sp)
    d9e8:	dd400a15 	stw	r21,40(sp)
    d9ec:	dd000915 	stw	r20,36(sp)
    d9f0:	dcc00815 	stw	r19,32(sp)
    d9f4:	dc800715 	stw	r18,28(sp)
    d9f8:	dc400615 	stw	r17,24(sp)
    d9fc:	dc000515 	stw	r16,20(sp)
    da00:	d8000115 	stw	zero,4(sp)
    da04:	20000f1e 	bne	r4,zero,da44 <__floatunsidf+0x6c>
    da08:	00800084 	movi	r2,2
    da0c:	d8800015 	stw	r2,0(sp)
    da10:	d809883a 	mov	r4,sp
    da14:	0004d080 	call	4d08 <__pack_d>
    da18:	dfc00d17 	ldw	ra,52(sp)
    da1c:	ddc00c17 	ldw	r23,48(sp)
    da20:	dd800b17 	ldw	r22,44(sp)
    da24:	dd400a17 	ldw	r21,40(sp)
    da28:	dd000917 	ldw	r20,36(sp)
    da2c:	dcc00817 	ldw	r19,32(sp)
    da30:	dc800717 	ldw	r18,28(sp)
    da34:	dc400617 	ldw	r17,24(sp)
    da38:	dc000517 	ldw	r16,20(sp)
    da3c:	dec00e04 	addi	sp,sp,56
    da40:	f800283a 	ret
    da44:	008000c4 	movi	r2,3
    da48:	00c00f04 	movi	r3,60
    da4c:	002f883a 	mov	r23,zero
    da50:	202d883a 	mov	r22,r4
    da54:	d8800015 	stw	r2,0(sp)
    da58:	d8c00215 	stw	r3,8(sp)
    da5c:	d9000315 	stw	r4,12(sp)
    da60:	ddc00415 	stw	r23,16(sp)
    da64:	000498c0 	call	498c <__clzsi2>
    da68:	12400744 	addi	r9,r2,29
    da6c:	48000b16 	blt	r9,zero,da9c <__floatunsidf+0xc4>
    da70:	483fe726 	beq	r9,zero,da10 <__floatunsidf+0x38>
    da74:	10bfff44 	addi	r2,r2,-3
    da78:	10002e16 	blt	r2,zero,db34 <__floatunsidf+0x15c>
    da7c:	b0a2983a 	sll	r17,r22,r2
    da80:	0021883a 	mov	r16,zero
    da84:	d8800217 	ldw	r2,8(sp)
    da88:	dc400415 	stw	r17,16(sp)
    da8c:	dc000315 	stw	r16,12(sp)
    da90:	1245c83a 	sub	r2,r2,r9
    da94:	d8800215 	stw	r2,8(sp)
    da98:	003fdd06 	br	da10 <__floatunsidf+0x38>
    da9c:	0255c83a 	sub	r10,zero,r9
    daa0:	51bff804 	addi	r6,r10,-32
    daa4:	30001b16 	blt	r6,zero,db14 <__floatunsidf+0x13c>
    daa8:	b9a8d83a 	srl	r20,r23,r6
    daac:	002b883a 	mov	r21,zero
    dab0:	000f883a 	mov	r7,zero
    dab4:	01000044 	movi	r4,1
    dab8:	0011883a 	mov	r8,zero
    dabc:	30002516 	blt	r6,zero,db54 <__floatunsidf+0x17c>
    dac0:	21a6983a 	sll	r19,r4,r6
    dac4:	0025883a 	mov	r18,zero
    dac8:	00bfffc4 	movi	r2,-1
    dacc:	9089883a 	add	r4,r18,r2
    dad0:	988b883a 	add	r5,r19,r2
    dad4:	248d803a 	cmpltu	r6,r4,r18
    dad8:	314b883a 	add	r5,r6,r5
    dadc:	b104703a 	and	r2,r22,r4
    dae0:	b946703a 	and	r3,r23,r5
    dae4:	10c4b03a 	or	r2,r2,r3
    dae8:	10000226 	beq	r2,zero,daf4 <__floatunsidf+0x11c>
    daec:	01c00044 	movi	r7,1
    daf0:	0011883a 	mov	r8,zero
    daf4:	d9000217 	ldw	r4,8(sp)
    daf8:	a1c4b03a 	or	r2,r20,r7
    dafc:	aa06b03a 	or	r3,r21,r8
    db00:	2249c83a 	sub	r4,r4,r9
    db04:	d8c00415 	stw	r3,16(sp)
    db08:	d9000215 	stw	r4,8(sp)
    db0c:	d8800315 	stw	r2,12(sp)
    db10:	003fbf06 	br	da10 <__floatunsidf+0x38>
    db14:	bdc7883a 	add	r3,r23,r23
    db18:	008007c4 	movi	r2,31
    db1c:	1285c83a 	sub	r2,r2,r10
    db20:	1886983a 	sll	r3,r3,r2
    db24:	b2a8d83a 	srl	r20,r22,r10
    db28:	baaad83a 	srl	r21,r23,r10
    db2c:	1d28b03a 	or	r20,r3,r20
    db30:	003fdf06 	br	dab0 <__floatunsidf+0xd8>
    db34:	b006d07a 	srli	r3,r22,1
    db38:	008007c4 	movi	r2,31
    db3c:	1245c83a 	sub	r2,r2,r9
    db40:	1886d83a 	srl	r3,r3,r2
    db44:	ba62983a 	sll	r17,r23,r9
    db48:	b260983a 	sll	r16,r22,r9
    db4c:	1c62b03a 	or	r17,r3,r17
    db50:	003fcc06 	br	da84 <__floatunsidf+0xac>
    db54:	2006d07a 	srli	r3,r4,1
    db58:	008007c4 	movi	r2,31
    db5c:	1285c83a 	sub	r2,r2,r10
    db60:	18a6d83a 	srl	r19,r3,r2
    db64:	22a4983a 	sll	r18,r4,r10
    db68:	003fd706 	br	dac8 <__floatunsidf+0xf0>

0000db6c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    db6c:	defff804 	addi	sp,sp,-32
    db70:	dfc00715 	stw	ra,28(sp)
    db74:	df000615 	stw	fp,24(sp)
    db78:	df000604 	addi	fp,sp,24
    db7c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    db80:	e0bffc17 	ldw	r2,-16(fp)
    db84:	1004803a 	cmplt	r2,r2,zero
    db88:	1000091e 	bne	r2,zero,dbb0 <close+0x44>
    db8c:	e13ffc17 	ldw	r4,-16(fp)
    db90:	01400304 	movi	r5,12
    db94:	00049540 	call	4954 <__mulsi3>
    db98:	1007883a 	mov	r3,r2
    db9c:	00800074 	movhi	r2,1
    dba0:	108a0904 	addi	r2,r2,10276
    dba4:	1887883a 	add	r3,r3,r2
    dba8:	e0ffff15 	stw	r3,-4(fp)
    dbac:	00000106 	br	dbb4 <close+0x48>
    dbb0:	e03fff15 	stw	zero,-4(fp)
    dbb4:	e0bfff17 	ldw	r2,-4(fp)
    dbb8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    dbbc:	e0bffb17 	ldw	r2,-20(fp)
    dbc0:	1005003a 	cmpeq	r2,r2,zero
    dbc4:	10001d1e 	bne	r2,zero,dc3c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    dbc8:	e0bffb17 	ldw	r2,-20(fp)
    dbcc:	10800017 	ldw	r2,0(r2)
    dbd0:	10800417 	ldw	r2,16(r2)
    dbd4:	1005003a 	cmpeq	r2,r2,zero
    dbd8:	1000071e 	bne	r2,zero,dbf8 <close+0x8c>
    dbdc:	e0bffb17 	ldw	r2,-20(fp)
    dbe0:	10800017 	ldw	r2,0(r2)
    dbe4:	10800417 	ldw	r2,16(r2)
    dbe8:	e13ffb17 	ldw	r4,-20(fp)
    dbec:	103ee83a 	callr	r2
    dbf0:	e0bffe15 	stw	r2,-8(fp)
    dbf4:	00000106 	br	dbfc <close+0x90>
    dbf8:	e03ffe15 	stw	zero,-8(fp)
    dbfc:	e0bffe17 	ldw	r2,-8(fp)
    dc00:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    dc04:	e13ffc17 	ldw	r4,-16(fp)
    dc08:	000e3c40 	call	e3c4 <alt_release_fd>
    if (rval < 0)
    dc0c:	e0bffa17 	ldw	r2,-24(fp)
    dc10:	1004403a 	cmpge	r2,r2,zero
    dc14:	1000071e 	bne	r2,zero,dc34 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    dc18:	000dc6c0 	call	dc6c <alt_get_errno>
    dc1c:	e0fffa17 	ldw	r3,-24(fp)
    dc20:	00c7c83a 	sub	r3,zero,r3
    dc24:	10c00015 	stw	r3,0(r2)
      return -1;
    dc28:	00bfffc4 	movi	r2,-1
    dc2c:	e0bffd15 	stw	r2,-12(fp)
    dc30:	00000806 	br	dc54 <close+0xe8>
    }
    return 0;
    dc34:	e03ffd15 	stw	zero,-12(fp)
    dc38:	00000606 	br	dc54 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    dc3c:	000dc6c0 	call	dc6c <alt_get_errno>
    dc40:	1007883a 	mov	r3,r2
    dc44:	00801444 	movi	r2,81
    dc48:	18800015 	stw	r2,0(r3)
    return -1;
    dc4c:	00bfffc4 	movi	r2,-1
    dc50:	e0bffd15 	stw	r2,-12(fp)
    dc54:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    dc58:	e037883a 	mov	sp,fp
    dc5c:	dfc00117 	ldw	ra,4(sp)
    dc60:	df000017 	ldw	fp,0(sp)
    dc64:	dec00204 	addi	sp,sp,8
    dc68:	f800283a 	ret

0000dc6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dc6c:	defffd04 	addi	sp,sp,-12
    dc70:	dfc00215 	stw	ra,8(sp)
    dc74:	df000115 	stw	fp,4(sp)
    dc78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    dc7c:	00800074 	movhi	r2,1
    dc80:	108eb004 	addi	r2,r2,15040
    dc84:	10800017 	ldw	r2,0(r2)
    dc88:	1005003a 	cmpeq	r2,r2,zero
    dc8c:	1000061e 	bne	r2,zero,dca8 <alt_get_errno+0x3c>
    dc90:	00800074 	movhi	r2,1
    dc94:	108eb004 	addi	r2,r2,15040
    dc98:	10800017 	ldw	r2,0(r2)
    dc9c:	103ee83a 	callr	r2
    dca0:	e0bfff15 	stw	r2,-4(fp)
    dca4:	00000306 	br	dcb4 <alt_get_errno+0x48>
    dca8:	00800074 	movhi	r2,1
    dcac:	10957704 	addi	r2,r2,21980
    dcb0:	e0bfff15 	stw	r2,-4(fp)
    dcb4:	e0bfff17 	ldw	r2,-4(fp)
}
    dcb8:	e037883a 	mov	sp,fp
    dcbc:	dfc00117 	ldw	ra,4(sp)
    dcc0:	df000017 	ldw	fp,0(sp)
    dcc4:	dec00204 	addi	sp,sp,8
    dcc8:	f800283a 	ret

0000dccc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    dccc:	defffc04 	addi	sp,sp,-16
    dcd0:	df000315 	stw	fp,12(sp)
    dcd4:	df000304 	addi	fp,sp,12
    dcd8:	e13ffd15 	stw	r4,-12(fp)
    dcdc:	e17ffe15 	stw	r5,-8(fp)
    dce0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    dce4:	e0bfff17 	ldw	r2,-4(fp)
}
    dce8:	e037883a 	mov	sp,fp
    dcec:	df000017 	ldw	fp,0(sp)
    dcf0:	dec00104 	addi	sp,sp,4
    dcf4:	f800283a 	ret

0000dcf8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    dcf8:	defff904 	addi	sp,sp,-28
    dcfc:	dfc00615 	stw	ra,24(sp)
    dd00:	df000515 	stw	fp,20(sp)
    dd04:	df000504 	addi	fp,sp,20
    dd08:	e13ffc15 	stw	r4,-16(fp)
    dd0c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dd10:	e0bffc17 	ldw	r2,-16(fp)
    dd14:	1004803a 	cmplt	r2,r2,zero
    dd18:	1000091e 	bne	r2,zero,dd40 <fstat+0x48>
    dd1c:	e13ffc17 	ldw	r4,-16(fp)
    dd20:	01400304 	movi	r5,12
    dd24:	00049540 	call	4954 <__mulsi3>
    dd28:	1007883a 	mov	r3,r2
    dd2c:	00800074 	movhi	r2,1
    dd30:	108a0904 	addi	r2,r2,10276
    dd34:	1887883a 	add	r3,r3,r2
    dd38:	e0ffff15 	stw	r3,-4(fp)
    dd3c:	00000106 	br	dd44 <fstat+0x4c>
    dd40:	e03fff15 	stw	zero,-4(fp)
    dd44:	e0bfff17 	ldw	r2,-4(fp)
    dd48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dd4c:	e0bffb17 	ldw	r2,-20(fp)
    dd50:	1005003a 	cmpeq	r2,r2,zero
    dd54:	1000121e 	bne	r2,zero,dda0 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    dd58:	e0bffb17 	ldw	r2,-20(fp)
    dd5c:	10800017 	ldw	r2,0(r2)
    dd60:	10800817 	ldw	r2,32(r2)
    dd64:	1005003a 	cmpeq	r2,r2,zero
    dd68:	1000081e 	bne	r2,zero,dd8c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    dd6c:	e0bffb17 	ldw	r2,-20(fp)
    dd70:	10800017 	ldw	r2,0(r2)
    dd74:	10800817 	ldw	r2,32(r2)
    dd78:	e13ffb17 	ldw	r4,-20(fp)
    dd7c:	e17ffd17 	ldw	r5,-12(fp)
    dd80:	103ee83a 	callr	r2
    dd84:	e0bffe15 	stw	r2,-8(fp)
    dd88:	00000b06 	br	ddb8 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    dd8c:	e0fffd17 	ldw	r3,-12(fp)
    dd90:	00880004 	movi	r2,8192
    dd94:	18800115 	stw	r2,4(r3)
      return 0;
    dd98:	e03ffe15 	stw	zero,-8(fp)
    dd9c:	00000606 	br	ddb8 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    dda0:	000ddd00 	call	ddd0 <alt_get_errno>
    dda4:	1007883a 	mov	r3,r2
    dda8:	00801444 	movi	r2,81
    ddac:	18800015 	stw	r2,0(r3)
    return -1;
    ddb0:	00bfffc4 	movi	r2,-1
    ddb4:	e0bffe15 	stw	r2,-8(fp)
    ddb8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    ddbc:	e037883a 	mov	sp,fp
    ddc0:	dfc00117 	ldw	ra,4(sp)
    ddc4:	df000017 	ldw	fp,0(sp)
    ddc8:	dec00204 	addi	sp,sp,8
    ddcc:	f800283a 	ret

0000ddd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ddd0:	defffd04 	addi	sp,sp,-12
    ddd4:	dfc00215 	stw	ra,8(sp)
    ddd8:	df000115 	stw	fp,4(sp)
    dddc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    dde0:	00800074 	movhi	r2,1
    dde4:	108eb004 	addi	r2,r2,15040
    dde8:	10800017 	ldw	r2,0(r2)
    ddec:	1005003a 	cmpeq	r2,r2,zero
    ddf0:	1000061e 	bne	r2,zero,de0c <alt_get_errno+0x3c>
    ddf4:	00800074 	movhi	r2,1
    ddf8:	108eb004 	addi	r2,r2,15040
    ddfc:	10800017 	ldw	r2,0(r2)
    de00:	103ee83a 	callr	r2
    de04:	e0bfff15 	stw	r2,-4(fp)
    de08:	00000306 	br	de18 <alt_get_errno+0x48>
    de0c:	00800074 	movhi	r2,1
    de10:	10957704 	addi	r2,r2,21980
    de14:	e0bfff15 	stw	r2,-4(fp)
    de18:	e0bfff17 	ldw	r2,-4(fp)
}
    de1c:	e037883a 	mov	sp,fp
    de20:	dfc00117 	ldw	ra,4(sp)
    de24:	df000017 	ldw	fp,0(sp)
    de28:	dec00204 	addi	sp,sp,8
    de2c:	f800283a 	ret

0000de30 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    de30:	deffeb04 	addi	sp,sp,-84
    de34:	dfc01415 	stw	ra,80(sp)
    de38:	df001315 	stw	fp,76(sp)
    de3c:	df001304 	addi	fp,sp,76
    de40:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    de44:	e0bffd17 	ldw	r2,-12(fp)
    de48:	1004803a 	cmplt	r2,r2,zero
    de4c:	1000091e 	bne	r2,zero,de74 <isatty+0x44>
    de50:	e13ffd17 	ldw	r4,-12(fp)
    de54:	01400304 	movi	r5,12
    de58:	00049540 	call	4954 <__mulsi3>
    de5c:	1007883a 	mov	r3,r2
    de60:	00800074 	movhi	r2,1
    de64:	108a0904 	addi	r2,r2,10276
    de68:	1887883a 	add	r3,r3,r2
    de6c:	e0ffff15 	stw	r3,-4(fp)
    de70:	00000106 	br	de78 <isatty+0x48>
    de74:	e03fff15 	stw	zero,-4(fp)
    de78:	e0bfff17 	ldw	r2,-4(fp)
    de7c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    de80:	e0bfed17 	ldw	r2,-76(fp)
    de84:	1005003a 	cmpeq	r2,r2,zero
    de88:	10000f1e 	bne	r2,zero,dec8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    de8c:	e0bfed17 	ldw	r2,-76(fp)
    de90:	10800017 	ldw	r2,0(r2)
    de94:	10800817 	ldw	r2,32(r2)
    de98:	1004c03a 	cmpne	r2,r2,zero
    de9c:	1000031e 	bne	r2,zero,deac <isatty+0x7c>
    {
      return 1;
    dea0:	00800044 	movi	r2,1
    dea4:	e0bffe15 	stw	r2,-8(fp)
    dea8:	00000c06 	br	dedc <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    deac:	e17fee04 	addi	r5,fp,-72
    deb0:	e13ffd17 	ldw	r4,-12(fp)
    deb4:	000dcf80 	call	dcf8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    deb8:	e0bfef17 	ldw	r2,-68(fp)
    debc:	10880020 	cmpeqi	r2,r2,8192
    dec0:	e0bffe15 	stw	r2,-8(fp)
    dec4:	00000506 	br	dedc <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    dec8:	000def40 	call	def4 <alt_get_errno>
    decc:	1007883a 	mov	r3,r2
    ded0:	00801444 	movi	r2,81
    ded4:	18800015 	stw	r2,0(r3)
    return 0;
    ded8:	e03ffe15 	stw	zero,-8(fp)
    dedc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    dee0:	e037883a 	mov	sp,fp
    dee4:	dfc00117 	ldw	ra,4(sp)
    dee8:	df000017 	ldw	fp,0(sp)
    deec:	dec00204 	addi	sp,sp,8
    def0:	f800283a 	ret

0000def4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    def4:	defffd04 	addi	sp,sp,-12
    def8:	dfc00215 	stw	ra,8(sp)
    defc:	df000115 	stw	fp,4(sp)
    df00:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    df04:	00800074 	movhi	r2,1
    df08:	108eb004 	addi	r2,r2,15040
    df0c:	10800017 	ldw	r2,0(r2)
    df10:	1005003a 	cmpeq	r2,r2,zero
    df14:	1000061e 	bne	r2,zero,df30 <alt_get_errno+0x3c>
    df18:	00800074 	movhi	r2,1
    df1c:	108eb004 	addi	r2,r2,15040
    df20:	10800017 	ldw	r2,0(r2)
    df24:	103ee83a 	callr	r2
    df28:	e0bfff15 	stw	r2,-4(fp)
    df2c:	00000306 	br	df3c <alt_get_errno+0x48>
    df30:	00800074 	movhi	r2,1
    df34:	10957704 	addi	r2,r2,21980
    df38:	e0bfff15 	stw	r2,-4(fp)
    df3c:	e0bfff17 	ldw	r2,-4(fp)
}
    df40:	e037883a 	mov	sp,fp
    df44:	dfc00117 	ldw	ra,4(sp)
    df48:	df000017 	ldw	fp,0(sp)
    df4c:	dec00204 	addi	sp,sp,8
    df50:	f800283a 	ret

0000df54 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    df54:	defffe04 	addi	sp,sp,-8
    df58:	dfc00115 	stw	ra,4(sp)
    df5c:	df000015 	stw	fp,0(sp)
    df60:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    df64:	01000074 	movhi	r4,1
    df68:	210eb704 	addi	r4,r4,15068
    df6c:	01400074 	movhi	r5,1
    df70:	2947fa04 	addi	r5,r5,8168
    df74:	01800074 	movhi	r6,1
    df78:	318eb704 	addi	r6,r6,15068
    df7c:	000dfd40 	call	dfd4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    df80:	01000034 	movhi	r4,0
    df84:	21000804 	addi	r4,r4,32
    df88:	01400034 	movhi	r5,0
    df8c:	29400804 	addi	r5,r5,32
    df90:	01800034 	movhi	r6,0
    df94:	31806d04 	addi	r6,r6,436
    df98:	000dfd40 	call	dfd4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    df9c:	01000074 	movhi	r4,1
    dfa0:	21061e04 	addi	r4,r4,6264
    dfa4:	01400074 	movhi	r5,1
    dfa8:	29461e04 	addi	r5,r5,6264
    dfac:	01800074 	movhi	r6,1
    dfb0:	3187fa04 	addi	r6,r6,8168
    dfb4:	000dfd40 	call	dfd4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    dfb8:	00104300 	call	10430 <alt_dcache_flush_all>
  alt_icache_flush_all();
    dfbc:	00106bc0 	call	106bc <alt_icache_flush_all>
}
    dfc0:	e037883a 	mov	sp,fp
    dfc4:	dfc00117 	ldw	ra,4(sp)
    dfc8:	df000017 	ldw	fp,0(sp)
    dfcc:	dec00204 	addi	sp,sp,8
    dfd0:	f800283a 	ret

0000dfd4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    dfd4:	defffc04 	addi	sp,sp,-16
    dfd8:	df000315 	stw	fp,12(sp)
    dfdc:	df000304 	addi	fp,sp,12
    dfe0:	e13ffd15 	stw	r4,-12(fp)
    dfe4:	e17ffe15 	stw	r5,-8(fp)
    dfe8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    dfec:	e0fffe17 	ldw	r3,-8(fp)
    dff0:	e0bffd17 	ldw	r2,-12(fp)
    dff4:	18800e26 	beq	r3,r2,e030 <alt_load_section+0x5c>
  {
    while( to != end )
    dff8:	00000a06 	br	e024 <alt_load_section+0x50>
    {
      *to++ = *from++;
    dffc:	e0bffd17 	ldw	r2,-12(fp)
    e000:	10c00017 	ldw	r3,0(r2)
    e004:	e0bffe17 	ldw	r2,-8(fp)
    e008:	10c00015 	stw	r3,0(r2)
    e00c:	e0bffe17 	ldw	r2,-8(fp)
    e010:	10800104 	addi	r2,r2,4
    e014:	e0bffe15 	stw	r2,-8(fp)
    e018:	e0bffd17 	ldw	r2,-12(fp)
    e01c:	10800104 	addi	r2,r2,4
    e020:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e024:	e0fffe17 	ldw	r3,-8(fp)
    e028:	e0bfff17 	ldw	r2,-4(fp)
    e02c:	18bff31e 	bne	r3,r2,dffc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    e030:	e037883a 	mov	sp,fp
    e034:	df000017 	ldw	fp,0(sp)
    e038:	dec00104 	addi	sp,sp,4
    e03c:	f800283a 	ret

0000e040 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e040:	defff804 	addi	sp,sp,-32
    e044:	dfc00715 	stw	ra,28(sp)
    e048:	df000615 	stw	fp,24(sp)
    e04c:	df000604 	addi	fp,sp,24
    e050:	e13ffc15 	stw	r4,-16(fp)
    e054:	e17ffd15 	stw	r5,-12(fp)
    e058:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e05c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e060:	e0bffc17 	ldw	r2,-16(fp)
    e064:	1004803a 	cmplt	r2,r2,zero
    e068:	1000091e 	bne	r2,zero,e090 <lseek+0x50>
    e06c:	e13ffc17 	ldw	r4,-16(fp)
    e070:	01400304 	movi	r5,12
    e074:	00049540 	call	4954 <__mulsi3>
    e078:	1007883a 	mov	r3,r2
    e07c:	00800074 	movhi	r2,1
    e080:	108a0904 	addi	r2,r2,10276
    e084:	1887883a 	add	r3,r3,r2
    e088:	e0ffff15 	stw	r3,-4(fp)
    e08c:	00000106 	br	e094 <lseek+0x54>
    e090:	e03fff15 	stw	zero,-4(fp)
    e094:	e0bfff17 	ldw	r2,-4(fp)
    e098:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    e09c:	e0bffb17 	ldw	r2,-20(fp)
    e0a0:	1005003a 	cmpeq	r2,r2,zero
    e0a4:	1000111e 	bne	r2,zero,e0ec <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e0a8:	e0bffb17 	ldw	r2,-20(fp)
    e0ac:	10800017 	ldw	r2,0(r2)
    e0b0:	10800717 	ldw	r2,28(r2)
    e0b4:	1005003a 	cmpeq	r2,r2,zero
    e0b8:	1000091e 	bne	r2,zero,e0e0 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e0bc:	e0bffb17 	ldw	r2,-20(fp)
    e0c0:	10800017 	ldw	r2,0(r2)
    e0c4:	10800717 	ldw	r2,28(r2)
    e0c8:	e13ffb17 	ldw	r4,-20(fp)
    e0cc:	e17ffd17 	ldw	r5,-12(fp)
    e0d0:	e1bffe17 	ldw	r6,-8(fp)
    e0d4:	103ee83a 	callr	r2
    e0d8:	e0bffa15 	stw	r2,-24(fp)
    e0dc:	00000506 	br	e0f4 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e0e0:	00bfde84 	movi	r2,-134
    e0e4:	e0bffa15 	stw	r2,-24(fp)
    e0e8:	00000206 	br	e0f4 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    e0ec:	00bfebc4 	movi	r2,-81
    e0f0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    e0f4:	e0bffa17 	ldw	r2,-24(fp)
    e0f8:	1004403a 	cmpge	r2,r2,zero
    e0fc:	1000071e 	bne	r2,zero,e11c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    e100:	000e1340 	call	e134 <alt_get_errno>
    e104:	1007883a 	mov	r3,r2
    e108:	e0bffa17 	ldw	r2,-24(fp)
    e10c:	0085c83a 	sub	r2,zero,r2
    e110:	18800015 	stw	r2,0(r3)
    rc = -1;
    e114:	00bfffc4 	movi	r2,-1
    e118:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    e11c:	e0bffa17 	ldw	r2,-24(fp)
}
    e120:	e037883a 	mov	sp,fp
    e124:	dfc00117 	ldw	ra,4(sp)
    e128:	df000017 	ldw	fp,0(sp)
    e12c:	dec00204 	addi	sp,sp,8
    e130:	f800283a 	ret

0000e134 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e134:	defffd04 	addi	sp,sp,-12
    e138:	dfc00215 	stw	ra,8(sp)
    e13c:	df000115 	stw	fp,4(sp)
    e140:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    e144:	00800074 	movhi	r2,1
    e148:	108eb004 	addi	r2,r2,15040
    e14c:	10800017 	ldw	r2,0(r2)
    e150:	1005003a 	cmpeq	r2,r2,zero
    e154:	1000061e 	bne	r2,zero,e170 <alt_get_errno+0x3c>
    e158:	00800074 	movhi	r2,1
    e15c:	108eb004 	addi	r2,r2,15040
    e160:	10800017 	ldw	r2,0(r2)
    e164:	103ee83a 	callr	r2
    e168:	e0bfff15 	stw	r2,-4(fp)
    e16c:	00000306 	br	e17c <alt_get_errno+0x48>
    e170:	00800074 	movhi	r2,1
    e174:	10957704 	addi	r2,r2,21980
    e178:	e0bfff15 	stw	r2,-4(fp)
    e17c:	e0bfff17 	ldw	r2,-4(fp)
}
    e180:	e037883a 	mov	sp,fp
    e184:	dfc00117 	ldw	ra,4(sp)
    e188:	df000017 	ldw	fp,0(sp)
    e18c:	dec00204 	addi	sp,sp,8
    e190:	f800283a 	ret

0000e194 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e194:	defffd04 	addi	sp,sp,-12
    e198:	dfc00215 	stw	ra,8(sp)
    e19c:	df000115 	stw	fp,4(sp)
    e1a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e1a4:	0009883a 	mov	r4,zero
    e1a8:	000e67c0 	call	e67c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e1ac:	000e6b00 	call	e6b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e1b0:	01000074 	movhi	r4,1
    e1b4:	2107a604 	addi	r4,r4,7832
    e1b8:	01400074 	movhi	r5,1
    e1bc:	2947a604 	addi	r5,r5,7832
    e1c0:	01800074 	movhi	r6,1
    e1c4:	3187a604 	addi	r6,r6,7832
    e1c8:	0010a7c0 	call	10a7c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e1cc:	00105600 	call	10560 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e1d0:	01000074 	movhi	r4,1
    e1d4:	21017104 	addi	r4,r4,1476
    e1d8:	00113780 	call	11378 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e1dc:	d126d617 	ldw	r4,-25768(gp)
    e1e0:	d166d717 	ldw	r5,-25764(gp)
    e1e4:	d1a6d817 	ldw	r6,-25760(gp)
    e1e8:	00006500 	call	650 <main>
    e1ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    e1f0:	01000044 	movi	r4,1
    e1f4:	000db6c0 	call	db6c <close>
  exit (result);
    e1f8:	e13fff17 	ldw	r4,-4(fp)
    e1fc:	001138c0 	call	1138c <exit>

0000e200 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    e200:	defffe04 	addi	sp,sp,-8
    e204:	df000115 	stw	fp,4(sp)
    e208:	df000104 	addi	fp,sp,4
    e20c:	e13fff15 	stw	r4,-4(fp)
}
    e210:	e037883a 	mov	sp,fp
    e214:	df000017 	ldw	fp,0(sp)
    e218:	dec00104 	addi	sp,sp,4
    e21c:	f800283a 	ret

0000e220 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e220:	defffe04 	addi	sp,sp,-8
    e224:	df000115 	stw	fp,4(sp)
    e228:	df000104 	addi	fp,sp,4
    e22c:	e13fff15 	stw	r4,-4(fp)
}
    e230:	e037883a 	mov	sp,fp
    e234:	df000017 	ldw	fp,0(sp)
    e238:	dec00104 	addi	sp,sp,4
    e23c:	f800283a 	ret

0000e240 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e240:	defff704 	addi	sp,sp,-36
    e244:	dfc00815 	stw	ra,32(sp)
    e248:	df000715 	stw	fp,28(sp)
    e24c:	df000704 	addi	fp,sp,28
    e250:	e13ffb15 	stw	r4,-20(fp)
    e254:	e17ffc15 	stw	r5,-16(fp)
    e258:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e25c:	e0bffb17 	ldw	r2,-20(fp)
    e260:	1004803a 	cmplt	r2,r2,zero
    e264:	1000091e 	bne	r2,zero,e28c <read+0x4c>
    e268:	e13ffb17 	ldw	r4,-20(fp)
    e26c:	01400304 	movi	r5,12
    e270:	00049540 	call	4954 <__mulsi3>
    e274:	1007883a 	mov	r3,r2
    e278:	00800074 	movhi	r2,1
    e27c:	108a0904 	addi	r2,r2,10276
    e280:	1887883a 	add	r3,r3,r2
    e284:	e0ffff15 	stw	r3,-4(fp)
    e288:	00000106 	br	e290 <read+0x50>
    e28c:	e03fff15 	stw	zero,-4(fp)
    e290:	e0bfff17 	ldw	r2,-4(fp)
    e294:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    e298:	e0bffa17 	ldw	r2,-24(fp)
    e29c:	1005003a 	cmpeq	r2,r2,zero
    e2a0:	1000241e 	bne	r2,zero,e334 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e2a4:	e0bffa17 	ldw	r2,-24(fp)
    e2a8:	10800217 	ldw	r2,8(r2)
    e2ac:	108000cc 	andi	r2,r2,3
    e2b0:	10800060 	cmpeqi	r2,r2,1
    e2b4:	10001a1e 	bne	r2,zero,e320 <read+0xe0>
    e2b8:	e0bffa17 	ldw	r2,-24(fp)
    e2bc:	10800017 	ldw	r2,0(r2)
    e2c0:	10800517 	ldw	r2,20(r2)
    e2c4:	1005003a 	cmpeq	r2,r2,zero
    e2c8:	1000151e 	bne	r2,zero,e320 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e2cc:	e0bffa17 	ldw	r2,-24(fp)
    e2d0:	10800017 	ldw	r2,0(r2)
    e2d4:	10800517 	ldw	r2,20(r2)
    e2d8:	e17ffc17 	ldw	r5,-16(fp)
    e2dc:	e1bffd17 	ldw	r6,-12(fp)
    e2e0:	e13ffa17 	ldw	r4,-24(fp)
    e2e4:	103ee83a 	callr	r2
    e2e8:	e0bff915 	stw	r2,-28(fp)
    e2ec:	e0bff917 	ldw	r2,-28(fp)
    e2f0:	1004403a 	cmpge	r2,r2,zero
    e2f4:	1000071e 	bne	r2,zero,e314 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    e2f8:	000e3640 	call	e364 <alt_get_errno>
    e2fc:	e0fff917 	ldw	r3,-28(fp)
    e300:	00c7c83a 	sub	r3,zero,r3
    e304:	10c00015 	stw	r3,0(r2)
          return -1;
    e308:	00bfffc4 	movi	r2,-1
    e30c:	e0bffe15 	stw	r2,-8(fp)
    e310:	00000e06 	br	e34c <read+0x10c>
        }
        return rval;
    e314:	e0bff917 	ldw	r2,-28(fp)
    e318:	e0bffe15 	stw	r2,-8(fp)
    e31c:	00000b06 	br	e34c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e320:	000e3640 	call	e364 <alt_get_errno>
    e324:	1007883a 	mov	r3,r2
    e328:	00800344 	movi	r2,13
    e32c:	18800015 	stw	r2,0(r3)
    e330:	00000406 	br	e344 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e334:	000e3640 	call	e364 <alt_get_errno>
    e338:	1007883a 	mov	r3,r2
    e33c:	00801444 	movi	r2,81
    e340:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e344:	00bfffc4 	movi	r2,-1
    e348:	e0bffe15 	stw	r2,-8(fp)
    e34c:	e0bffe17 	ldw	r2,-8(fp)
}
    e350:	e037883a 	mov	sp,fp
    e354:	dfc00117 	ldw	ra,4(sp)
    e358:	df000017 	ldw	fp,0(sp)
    e35c:	dec00204 	addi	sp,sp,8
    e360:	f800283a 	ret

0000e364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e364:	defffd04 	addi	sp,sp,-12
    e368:	dfc00215 	stw	ra,8(sp)
    e36c:	df000115 	stw	fp,4(sp)
    e370:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    e374:	00800074 	movhi	r2,1
    e378:	108eb004 	addi	r2,r2,15040
    e37c:	10800017 	ldw	r2,0(r2)
    e380:	1005003a 	cmpeq	r2,r2,zero
    e384:	1000061e 	bne	r2,zero,e3a0 <alt_get_errno+0x3c>
    e388:	00800074 	movhi	r2,1
    e38c:	108eb004 	addi	r2,r2,15040
    e390:	10800017 	ldw	r2,0(r2)
    e394:	103ee83a 	callr	r2
    e398:	e0bfff15 	stw	r2,-4(fp)
    e39c:	00000306 	br	e3ac <alt_get_errno+0x48>
    e3a0:	00800074 	movhi	r2,1
    e3a4:	10957704 	addi	r2,r2,21980
    e3a8:	e0bfff15 	stw	r2,-4(fp)
    e3ac:	e0bfff17 	ldw	r2,-4(fp)
}
    e3b0:	e037883a 	mov	sp,fp
    e3b4:	dfc00117 	ldw	ra,4(sp)
    e3b8:	df000017 	ldw	fp,0(sp)
    e3bc:	dec00204 	addi	sp,sp,8
    e3c0:	f800283a 	ret

0000e3c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    e3c4:	defffc04 	addi	sp,sp,-16
    e3c8:	dfc00315 	stw	ra,12(sp)
    e3cc:	df000215 	stw	fp,8(sp)
    e3d0:	dc000115 	stw	r16,4(sp)
    e3d4:	df000104 	addi	fp,sp,4
    e3d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    e3dc:	e0bfff17 	ldw	r2,-4(fp)
    e3e0:	108000d0 	cmplti	r2,r2,3
    e3e4:	10000f1e 	bne	r2,zero,e424 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    e3e8:	e13fff17 	ldw	r4,-4(fp)
    e3ec:	04000074 	movhi	r16,1
    e3f0:	840a0904 	addi	r16,r16,10276
    e3f4:	01400304 	movi	r5,12
    e3f8:	00049540 	call	4954 <__mulsi3>
    e3fc:	1405883a 	add	r2,r2,r16
    e400:	10800204 	addi	r2,r2,8
    e404:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    e408:	e13fff17 	ldw	r4,-4(fp)
    e40c:	04000074 	movhi	r16,1
    e410:	840a0904 	addi	r16,r16,10276
    e414:	01400304 	movi	r5,12
    e418:	00049540 	call	4954 <__mulsi3>
    e41c:	1405883a 	add	r2,r2,r16
    e420:	10000015 	stw	zero,0(r2)
  }
}
    e424:	e037883a 	mov	sp,fp
    e428:	dfc00217 	ldw	ra,8(sp)
    e42c:	df000117 	ldw	fp,4(sp)
    e430:	dc000017 	ldw	r16,0(sp)
    e434:	dec00304 	addi	sp,sp,12
    e438:	f800283a 	ret

0000e43c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e43c:	defff804 	addi	sp,sp,-32
    e440:	df000715 	stw	fp,28(sp)
    e444:	df000704 	addi	fp,sp,28
    e448:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e44c:	0005303a 	rdctl	r2,status
    e450:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e454:	e0fffb17 	ldw	r3,-20(fp)
    e458:	00bfff84 	movi	r2,-2
    e45c:	1884703a 	and	r2,r3,r2
    e460:	1001703a 	wrctl	status,r2
  
  return context;
    e464:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e468:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e46c:	d0a00c17 	ldw	r2,-32720(gp)
    e470:	10c000c4 	addi	r3,r2,3
    e474:	00bfff04 	movi	r2,-4
    e478:	1884703a 	and	r2,r3,r2
    e47c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e480:	d0e00c17 	ldw	r3,-32720(gp)
    e484:	e0bffe17 	ldw	r2,-8(fp)
    e488:	1887883a 	add	r3,r3,r2
    e48c:	00808034 	movhi	r2,512
    e490:	10800004 	addi	r2,r2,0
    e494:	10c0072e 	bgeu	r2,r3,e4b4 <sbrk+0x78>
    e498:	e0bffd17 	ldw	r2,-12(fp)
    e49c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e4a0:	e0bffa17 	ldw	r2,-24(fp)
    e4a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e4a8:	00bfffc4 	movi	r2,-1
    e4ac:	e0bfff15 	stw	r2,-4(fp)
    e4b0:	00000c06 	br	e4e4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    e4b4:	d0a00c17 	ldw	r2,-32720(gp)
    e4b8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    e4bc:	d0e00c17 	ldw	r3,-32720(gp)
    e4c0:	e0bffe17 	ldw	r2,-8(fp)
    e4c4:	1885883a 	add	r2,r3,r2
    e4c8:	d0a00c15 	stw	r2,-32720(gp)
    e4cc:	e0bffd17 	ldw	r2,-12(fp)
    e4d0:	e0bff915 	stw	r2,-28(fp)
    e4d4:	e0bff917 	ldw	r2,-28(fp)
    e4d8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e4dc:	e0bffc17 	ldw	r2,-16(fp)
    e4e0:	e0bfff15 	stw	r2,-4(fp)
    e4e4:	e0bfff17 	ldw	r2,-4(fp)
} 
    e4e8:	e037883a 	mov	sp,fp
    e4ec:	df000017 	ldw	fp,0(sp)
    e4f0:	dec00104 	addi	sp,sp,4
    e4f4:	f800283a 	ret

0000e4f8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e4f8:	defff704 	addi	sp,sp,-36
    e4fc:	dfc00815 	stw	ra,32(sp)
    e500:	df000715 	stw	fp,28(sp)
    e504:	df000704 	addi	fp,sp,28
    e508:	e13ffb15 	stw	r4,-20(fp)
    e50c:	e17ffc15 	stw	r5,-16(fp)
    e510:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e514:	e0bffb17 	ldw	r2,-20(fp)
    e518:	1004803a 	cmplt	r2,r2,zero
    e51c:	1000091e 	bne	r2,zero,e544 <write+0x4c>
    e520:	e13ffb17 	ldw	r4,-20(fp)
    e524:	01400304 	movi	r5,12
    e528:	00049540 	call	4954 <__mulsi3>
    e52c:	1007883a 	mov	r3,r2
    e530:	00800074 	movhi	r2,1
    e534:	108a0904 	addi	r2,r2,10276
    e538:	1887883a 	add	r3,r3,r2
    e53c:	e0ffff15 	stw	r3,-4(fp)
    e540:	00000106 	br	e548 <write+0x50>
    e544:	e03fff15 	stw	zero,-4(fp)
    e548:	e0bfff17 	ldw	r2,-4(fp)
    e54c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    e550:	e0bffa17 	ldw	r2,-24(fp)
    e554:	1005003a 	cmpeq	r2,r2,zero
    e558:	1000241e 	bne	r2,zero,e5ec <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e55c:	e0bffa17 	ldw	r2,-24(fp)
    e560:	10800217 	ldw	r2,8(r2)
    e564:	108000cc 	andi	r2,r2,3
    e568:	1005003a 	cmpeq	r2,r2,zero
    e56c:	10001a1e 	bne	r2,zero,e5d8 <write+0xe0>
    e570:	e0bffa17 	ldw	r2,-24(fp)
    e574:	10800017 	ldw	r2,0(r2)
    e578:	10800617 	ldw	r2,24(r2)
    e57c:	1005003a 	cmpeq	r2,r2,zero
    e580:	1000151e 	bne	r2,zero,e5d8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e584:	e0bffa17 	ldw	r2,-24(fp)
    e588:	10800017 	ldw	r2,0(r2)
    e58c:	10800617 	ldw	r2,24(r2)
    e590:	e17ffc17 	ldw	r5,-16(fp)
    e594:	e1bffd17 	ldw	r6,-12(fp)
    e598:	e13ffa17 	ldw	r4,-24(fp)
    e59c:	103ee83a 	callr	r2
    e5a0:	e0bff915 	stw	r2,-28(fp)
    e5a4:	e0bff917 	ldw	r2,-28(fp)
    e5a8:	1004403a 	cmpge	r2,r2,zero
    e5ac:	1000071e 	bne	r2,zero,e5cc <write+0xd4>
      {
        ALT_ERRNO = -rval;
    e5b0:	000e61c0 	call	e61c <alt_get_errno>
    e5b4:	e0fff917 	ldw	r3,-28(fp)
    e5b8:	00c7c83a 	sub	r3,zero,r3
    e5bc:	10c00015 	stw	r3,0(r2)
        return -1;
    e5c0:	00bfffc4 	movi	r2,-1
    e5c4:	e0bffe15 	stw	r2,-8(fp)
    e5c8:	00000e06 	br	e604 <write+0x10c>
      }
      return rval;
    e5cc:	e0bff917 	ldw	r2,-28(fp)
    e5d0:	e0bffe15 	stw	r2,-8(fp)
    e5d4:	00000b06 	br	e604 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e5d8:	000e61c0 	call	e61c <alt_get_errno>
    e5dc:	1007883a 	mov	r3,r2
    e5e0:	00800344 	movi	r2,13
    e5e4:	18800015 	stw	r2,0(r3)
    e5e8:	00000406 	br	e5fc <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e5ec:	000e61c0 	call	e61c <alt_get_errno>
    e5f0:	1007883a 	mov	r3,r2
    e5f4:	00801444 	movi	r2,81
    e5f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e5fc:	00bfffc4 	movi	r2,-1
    e600:	e0bffe15 	stw	r2,-8(fp)
    e604:	e0bffe17 	ldw	r2,-8(fp)
}
    e608:	e037883a 	mov	sp,fp
    e60c:	dfc00117 	ldw	ra,4(sp)
    e610:	df000017 	ldw	fp,0(sp)
    e614:	dec00204 	addi	sp,sp,8
    e618:	f800283a 	ret

0000e61c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e61c:	defffd04 	addi	sp,sp,-12
    e620:	dfc00215 	stw	ra,8(sp)
    e624:	df000115 	stw	fp,4(sp)
    e628:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    e62c:	00800074 	movhi	r2,1
    e630:	108eb004 	addi	r2,r2,15040
    e634:	10800017 	ldw	r2,0(r2)
    e638:	1005003a 	cmpeq	r2,r2,zero
    e63c:	1000061e 	bne	r2,zero,e658 <alt_get_errno+0x3c>
    e640:	00800074 	movhi	r2,1
    e644:	108eb004 	addi	r2,r2,15040
    e648:	10800017 	ldw	r2,0(r2)
    e64c:	103ee83a 	callr	r2
    e650:	e0bfff15 	stw	r2,-4(fp)
    e654:	00000306 	br	e664 <alt_get_errno+0x48>
    e658:	00800074 	movhi	r2,1
    e65c:	10957704 	addi	r2,r2,21980
    e660:	e0bfff15 	stw	r2,-4(fp)
    e664:	e0bfff17 	ldw	r2,-4(fp)
}
    e668:	e037883a 	mov	sp,fp
    e66c:	dfc00117 	ldw	ra,4(sp)
    e670:	df000017 	ldw	fp,0(sp)
    e674:	dec00204 	addi	sp,sp,8
    e678:	f800283a 	ret

0000e67c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e67c:	defffd04 	addi	sp,sp,-12
    e680:	dfc00215 	stw	ra,8(sp)
    e684:	df000115 	stw	fp,4(sp)
    e688:	df000104 	addi	fp,sp,4
    e68c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPUNIOS, cpuNios);
    e690:	0010fbc0 	call	10fbc <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e694:	00800044 	movi	r2,1
    e698:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e69c:	e037883a 	mov	sp,fp
    e6a0:	dfc00117 	ldw	ra,4(sp)
    e6a4:	df000017 	ldw	fp,0(sp)
    e6a8:	dec00204 	addi	sp,sp,8
    e6ac:	f800283a 	ret

0000e6b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e6b0:	defffe04 	addi	sp,sp,-8
    e6b4:	dfc00115 	stw	ra,4(sp)
    e6b8:	df000015 	stw	fp,0(sp)
    e6bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    e6c0:	01010034 	movhi	r4,1024
    e6c4:	21118004 	addi	r4,r4,17920
    e6c8:	000b883a 	mov	r5,zero
    e6cc:	01800204 	movi	r6,8
    e6d0:	01c0fa04 	movi	r7,1000
    e6d4:	000ffb80 	call	ffb8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    e6d8:	01000074 	movhi	r4,1
    e6dc:	210a7304 	addi	r4,r4,10700
    e6e0:	000b883a 	mov	r5,zero
    e6e4:	000d883a 	mov	r6,zero
    e6e8:	000e8d80 	call	e8d8 <altera_avalon_jtag_uart_init>
    e6ec:	01000074 	movhi	r4,1
    e6f0:	210a6904 	addi	r4,r4,10660
    e6f4:	000e7580 	call	e758 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
    e6f8:	00c10034 	movhi	r3,1024
    e6fc:	18d10004 	addi	r3,r3,17408
    e700:	00800044 	movi	r2,1
    e704:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SGDMA_INIT ( LCD_SGDMA, lcd_sgdma);
    e708:	01000074 	movhi	r4,1
    e70c:	210e8104 	addi	r4,r4,14852
    e710:	000b883a 	mov	r5,zero
    e714:	01800084 	movi	r6,2
    e718:	000fe9c0 	call	fe9c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
    e71c:	01000074 	movhi	r4,1
    e720:	210e8d04 	addi	r4,r4,14900
    e724:	000b883a 	mov	r5,zero
    e728:	01800044 	movi	r6,1
    e72c:	000fe9c0 	call	fe9c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
    e730:	01000074 	movhi	r4,1
    e734:	210e9904 	addi	r4,r4,14948
    e738:	000b883a 	mov	r5,zero
    e73c:	018000c4 	movi	r6,3
    e740:	000fe9c0 	call	fe9c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    TRIPLE_SPEED_ETHERNET_INIT ( TSE_MAC, tse_mac);
}
    e744:	e037883a 	mov	sp,fp
    e748:	dfc00117 	ldw	ra,4(sp)
    e74c:	df000017 	ldw	fp,0(sp)
    e750:	dec00204 	addi	sp,sp,8
    e754:	f800283a 	ret

0000e758 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e758:	defffd04 	addi	sp,sp,-12
    e75c:	dfc00215 	stw	ra,8(sp)
    e760:	df000115 	stw	fp,4(sp)
    e764:	df000104 	addi	fp,sp,4
    e768:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e76c:	e13fff17 	ldw	r4,-4(fp)
    e770:	01400074 	movhi	r5,1
    e774:	294ead04 	addi	r5,r5,15028
    e778:	001044c0 	call	1044c <alt_dev_llist_insert>
}
    e77c:	e037883a 	mov	sp,fp
    e780:	dfc00117 	ldw	ra,4(sp)
    e784:	df000017 	ldw	fp,0(sp)
    e788:	dec00204 	addi	sp,sp,8
    e78c:	f800283a 	ret

0000e790 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e790:	defffa04 	addi	sp,sp,-24
    e794:	dfc00515 	stw	ra,20(sp)
    e798:	df000415 	stw	fp,16(sp)
    e79c:	df000404 	addi	fp,sp,16
    e7a0:	e13ffd15 	stw	r4,-12(fp)
    e7a4:	e17ffe15 	stw	r5,-8(fp)
    e7a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e7ac:	e0bffd17 	ldw	r2,-12(fp)
    e7b0:	10800017 	ldw	r2,0(r2)
    e7b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e7b8:	e0bffc17 	ldw	r2,-16(fp)
    e7bc:	11000a04 	addi	r4,r2,40
    e7c0:	e0bffd17 	ldw	r2,-12(fp)
    e7c4:	11c00217 	ldw	r7,8(r2)
    e7c8:	e17ffe17 	ldw	r5,-8(fp)
    e7cc:	e1bfff17 	ldw	r6,-4(fp)
    e7d0:	000edd80 	call	edd8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e7d4:	e037883a 	mov	sp,fp
    e7d8:	dfc00117 	ldw	ra,4(sp)
    e7dc:	df000017 	ldw	fp,0(sp)
    e7e0:	dec00204 	addi	sp,sp,8
    e7e4:	f800283a 	ret

0000e7e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e7e8:	defffa04 	addi	sp,sp,-24
    e7ec:	dfc00515 	stw	ra,20(sp)
    e7f0:	df000415 	stw	fp,16(sp)
    e7f4:	df000404 	addi	fp,sp,16
    e7f8:	e13ffd15 	stw	r4,-12(fp)
    e7fc:	e17ffe15 	stw	r5,-8(fp)
    e800:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e804:	e0bffd17 	ldw	r2,-12(fp)
    e808:	10800017 	ldw	r2,0(r2)
    e80c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e810:	e0bffc17 	ldw	r2,-16(fp)
    e814:	11000a04 	addi	r4,r2,40
    e818:	e0bffd17 	ldw	r2,-12(fp)
    e81c:	11c00217 	ldw	r7,8(r2)
    e820:	e17ffe17 	ldw	r5,-8(fp)
    e824:	e1bfff17 	ldw	r6,-4(fp)
    e828:	000effc0 	call	effc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e82c:	e037883a 	mov	sp,fp
    e830:	dfc00117 	ldw	ra,4(sp)
    e834:	df000017 	ldw	fp,0(sp)
    e838:	dec00204 	addi	sp,sp,8
    e83c:	f800283a 	ret

0000e840 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e840:	defffc04 	addi	sp,sp,-16
    e844:	dfc00315 	stw	ra,12(sp)
    e848:	df000215 	stw	fp,8(sp)
    e84c:	df000204 	addi	fp,sp,8
    e850:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e854:	e0bfff17 	ldw	r2,-4(fp)
    e858:	10800017 	ldw	r2,0(r2)
    e85c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e860:	e0bffe17 	ldw	r2,-8(fp)
    e864:	11000a04 	addi	r4,r2,40
    e868:	e0bfff17 	ldw	r2,-4(fp)
    e86c:	11400217 	ldw	r5,8(r2)
    e870:	000ec700 	call	ec70 <altera_avalon_jtag_uart_close>
}
    e874:	e037883a 	mov	sp,fp
    e878:	dfc00117 	ldw	ra,4(sp)
    e87c:	df000017 	ldw	fp,0(sp)
    e880:	dec00204 	addi	sp,sp,8
    e884:	f800283a 	ret

0000e888 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e888:	defffa04 	addi	sp,sp,-24
    e88c:	dfc00515 	stw	ra,20(sp)
    e890:	df000415 	stw	fp,16(sp)
    e894:	df000404 	addi	fp,sp,16
    e898:	e13ffd15 	stw	r4,-12(fp)
    e89c:	e17ffe15 	stw	r5,-8(fp)
    e8a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e8a4:	e0bffd17 	ldw	r2,-12(fp)
    e8a8:	10800017 	ldw	r2,0(r2)
    e8ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e8b0:	e0bffc17 	ldw	r2,-16(fp)
    e8b4:	11000a04 	addi	r4,r2,40
    e8b8:	e17ffe17 	ldw	r5,-8(fp)
    e8bc:	e1bfff17 	ldw	r6,-4(fp)
    e8c0:	000ece40 	call	ece4 <altera_avalon_jtag_uart_ioctl>
}
    e8c4:	e037883a 	mov	sp,fp
    e8c8:	dfc00117 	ldw	ra,4(sp)
    e8cc:	df000017 	ldw	fp,0(sp)
    e8d0:	dec00204 	addi	sp,sp,8
    e8d4:	f800283a 	ret

0000e8d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e8d8:	defffa04 	addi	sp,sp,-24
    e8dc:	dfc00515 	stw	ra,20(sp)
    e8e0:	df000415 	stw	fp,16(sp)
    e8e4:	df000404 	addi	fp,sp,16
    e8e8:	e13ffd15 	stw	r4,-12(fp)
    e8ec:	e17ffe15 	stw	r5,-8(fp)
    e8f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e8f4:	e0fffd17 	ldw	r3,-12(fp)
    e8f8:	00800044 	movi	r2,1
    e8fc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e900:	e0bffd17 	ldw	r2,-12(fp)
    e904:	10800017 	ldw	r2,0(r2)
    e908:	11000104 	addi	r4,r2,4
    e90c:	e0bffd17 	ldw	r2,-12(fp)
    e910:	10800817 	ldw	r2,32(r2)
    e914:	1007883a 	mov	r3,r2
    e918:	2005883a 	mov	r2,r4
    e91c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    e920:	e13ffe17 	ldw	r4,-8(fp)
    e924:	e17fff17 	ldw	r5,-4(fp)
    e928:	d8000015 	stw	zero,0(sp)
    e92c:	01800074 	movhi	r6,1
    e930:	31ba6604 	addi	r6,r6,-5736
    e934:	e1fffd17 	ldw	r7,-12(fp)
    e938:	00106d80 	call	106d8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e93c:	e0bffd17 	ldw	r2,-12(fp)
    e940:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e944:	e0bffd17 	ldw	r2,-12(fp)
    e948:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e94c:	00800074 	movhi	r2,1
    e950:	10957f04 	addi	r2,r2,22012
    e954:	10800017 	ldw	r2,0(r2)
    e958:	100b883a 	mov	r5,r2
    e95c:	01800074 	movhi	r6,1
    e960:	31baf004 	addi	r6,r6,-5184
    e964:	e1fffd17 	ldw	r7,-12(fp)
    e968:	00102dc0 	call	102dc <alt_alarm_start>
    e96c:	1004403a 	cmpge	r2,r2,zero
    e970:	1000041e 	bne	r2,zero,e984 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e974:	e0fffd17 	ldw	r3,-12(fp)
    e978:	00a00034 	movhi	r2,32768
    e97c:	10bfffc4 	addi	r2,r2,-1
    e980:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e984:	e037883a 	mov	sp,fp
    e988:	dfc00117 	ldw	ra,4(sp)
    e98c:	df000017 	ldw	fp,0(sp)
    e990:	dec00204 	addi	sp,sp,8
    e994:	f800283a 	ret

0000e998 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e998:	defff804 	addi	sp,sp,-32
    e99c:	df000715 	stw	fp,28(sp)
    e9a0:	df000704 	addi	fp,sp,28
    e9a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e9a8:	e0bfff17 	ldw	r2,-4(fp)
    e9ac:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    e9b0:	e0bffe17 	ldw	r2,-8(fp)
    e9b4:	10800017 	ldw	r2,0(r2)
    e9b8:	e0bffd15 	stw	r2,-12(fp)
    e9bc:	00000006 	br	e9c0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e9c0:	e0bffd17 	ldw	r2,-12(fp)
    e9c4:	10800104 	addi	r2,r2,4
    e9c8:	10800037 	ldwio	r2,0(r2)
    e9cc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e9d0:	e0bffc17 	ldw	r2,-16(fp)
    e9d4:	1080c00c 	andi	r2,r2,768
    e9d8:	1005003a 	cmpeq	r2,r2,zero
    e9dc:	1000741e 	bne	r2,zero,ebb0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e9e0:	e0bffc17 	ldw	r2,-16(fp)
    e9e4:	1080400c 	andi	r2,r2,256
    e9e8:	1005003a 	cmpeq	r2,r2,zero
    e9ec:	1000351e 	bne	r2,zero,eac4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e9f0:	00800074 	movhi	r2,1
    e9f4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e9f8:	e0bffe17 	ldw	r2,-8(fp)
    e9fc:	10800a17 	ldw	r2,40(r2)
    ea00:	10800044 	addi	r2,r2,1
    ea04:	1081ffcc 	andi	r2,r2,2047
    ea08:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    ea0c:	e0bffe17 	ldw	r2,-8(fp)
    ea10:	10c00b17 	ldw	r3,44(r2)
    ea14:	e0bffa17 	ldw	r2,-24(fp)
    ea18:	18801626 	beq	r3,r2,ea74 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ea1c:	e0bffd17 	ldw	r2,-12(fp)
    ea20:	10800037 	ldwio	r2,0(r2)
    ea24:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ea28:	e0bffb17 	ldw	r2,-20(fp)
    ea2c:	10a0000c 	andi	r2,r2,32768
    ea30:	1005003a 	cmpeq	r2,r2,zero
    ea34:	10000f1e 	bne	r2,zero,ea74 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ea38:	e0bffe17 	ldw	r2,-8(fp)
    ea3c:	10c00a17 	ldw	r3,40(r2)
    ea40:	e0bffb17 	ldw	r2,-20(fp)
    ea44:	1009883a 	mov	r4,r2
    ea48:	e0bffe17 	ldw	r2,-8(fp)
    ea4c:	1885883a 	add	r2,r3,r2
    ea50:	10800e04 	addi	r2,r2,56
    ea54:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ea58:	e0bffe17 	ldw	r2,-8(fp)
    ea5c:	10800a17 	ldw	r2,40(r2)
    ea60:	10800044 	addi	r2,r2,1
    ea64:	10c1ffcc 	andi	r3,r2,2047
    ea68:	e0bffe17 	ldw	r2,-8(fp)
    ea6c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    ea70:	003fe106 	br	e9f8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ea74:	e0bffb17 	ldw	r2,-20(fp)
    ea78:	10bfffec 	andhi	r2,r2,65535
    ea7c:	1005003a 	cmpeq	r2,r2,zero
    ea80:	1000101e 	bne	r2,zero,eac4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ea84:	e0bffe17 	ldw	r2,-8(fp)
    ea88:	10c00817 	ldw	r3,32(r2)
    ea8c:	00bfff84 	movi	r2,-2
    ea90:	1886703a 	and	r3,r3,r2
    ea94:	e0bffe17 	ldw	r2,-8(fp)
    ea98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ea9c:	e0bffd17 	ldw	r2,-12(fp)
    eaa0:	11000104 	addi	r4,r2,4
    eaa4:	e0bffe17 	ldw	r2,-8(fp)
    eaa8:	10800817 	ldw	r2,32(r2)
    eaac:	1007883a 	mov	r3,r2
    eab0:	2005883a 	mov	r2,r4
    eab4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eab8:	e0bffd17 	ldw	r2,-12(fp)
    eabc:	10800104 	addi	r2,r2,4
    eac0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    eac4:	e0bffc17 	ldw	r2,-16(fp)
    eac8:	1080800c 	andi	r2,r2,512
    eacc:	1005003a 	cmpeq	r2,r2,zero
    ead0:	103fbb1e 	bne	r2,zero,e9c0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ead4:	e0bffc17 	ldw	r2,-16(fp)
    ead8:	10bfffec 	andhi	r2,r2,65535
    eadc:	1004d43a 	srli	r2,r2,16
    eae0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    eae4:	00001506 	br	eb3c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    eae8:	e13ffd17 	ldw	r4,-12(fp)
    eaec:	e0bffe17 	ldw	r2,-8(fp)
    eaf0:	10c00d17 	ldw	r3,52(r2)
    eaf4:	e0bffe17 	ldw	r2,-8(fp)
    eaf8:	1885883a 	add	r2,r3,r2
    eafc:	10820e04 	addi	r2,r2,2104
    eb00:	10800003 	ldbu	r2,0(r2)
    eb04:	10c03fcc 	andi	r3,r2,255
    eb08:	18c0201c 	xori	r3,r3,128
    eb0c:	18ffe004 	addi	r3,r3,-128
    eb10:	2005883a 	mov	r2,r4
    eb14:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eb18:	e0bffe17 	ldw	r2,-8(fp)
    eb1c:	10800d17 	ldw	r2,52(r2)
    eb20:	10800044 	addi	r2,r2,1
    eb24:	10c1ffcc 	andi	r3,r2,2047
    eb28:	e0bffe17 	ldw	r2,-8(fp)
    eb2c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    eb30:	e0bff917 	ldw	r2,-28(fp)
    eb34:	10bfffc4 	addi	r2,r2,-1
    eb38:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    eb3c:	e0bff917 	ldw	r2,-28(fp)
    eb40:	1005003a 	cmpeq	r2,r2,zero
    eb44:	1000051e 	bne	r2,zero,eb5c <altera_avalon_jtag_uart_irq+0x1c4>
    eb48:	e0bffe17 	ldw	r2,-8(fp)
    eb4c:	10c00d17 	ldw	r3,52(r2)
    eb50:	e0bffe17 	ldw	r2,-8(fp)
    eb54:	10800c17 	ldw	r2,48(r2)
    eb58:	18bfe31e 	bne	r3,r2,eae8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    eb5c:	e0bff917 	ldw	r2,-28(fp)
    eb60:	1005003a 	cmpeq	r2,r2,zero
    eb64:	103f961e 	bne	r2,zero,e9c0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    eb68:	e0bffe17 	ldw	r2,-8(fp)
    eb6c:	10c00817 	ldw	r3,32(r2)
    eb70:	00bfff44 	movi	r2,-3
    eb74:	1886703a 	and	r3,r3,r2
    eb78:	e0bffe17 	ldw	r2,-8(fp)
    eb7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    eb80:	e0bffe17 	ldw	r2,-8(fp)
    eb84:	10800017 	ldw	r2,0(r2)
    eb88:	11000104 	addi	r4,r2,4
    eb8c:	e0bffe17 	ldw	r2,-8(fp)
    eb90:	10800817 	ldw	r2,32(r2)
    eb94:	1007883a 	mov	r3,r2
    eb98:	2005883a 	mov	r2,r4
    eb9c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eba0:	e0bffd17 	ldw	r2,-12(fp)
    eba4:	10800104 	addi	r2,r2,4
    eba8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    ebac:	003f8406 	br	e9c0 <altera_avalon_jtag_uart_irq+0x28>
}
    ebb0:	e037883a 	mov	sp,fp
    ebb4:	df000017 	ldw	fp,0(sp)
    ebb8:	dec00104 	addi	sp,sp,4
    ebbc:	f800283a 	ret

0000ebc0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ebc0:	defffc04 	addi	sp,sp,-16
    ebc4:	df000315 	stw	fp,12(sp)
    ebc8:	df000304 	addi	fp,sp,12
    ebcc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ebd0:	e0bfff17 	ldw	r2,-4(fp)
    ebd4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ebd8:	e0bffe17 	ldw	r2,-8(fp)
    ebdc:	10800017 	ldw	r2,0(r2)
    ebe0:	10800104 	addi	r2,r2,4
    ebe4:	10800037 	ldwio	r2,0(r2)
    ebe8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ebec:	e0bffd17 	ldw	r2,-12(fp)
    ebf0:	1081000c 	andi	r2,r2,1024
    ebf4:	1005003a 	cmpeq	r2,r2,zero
    ebf8:	10000c1e 	bne	r2,zero,ec2c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ebfc:	e0bffe17 	ldw	r2,-8(fp)
    ec00:	10800017 	ldw	r2,0(r2)
    ec04:	11000104 	addi	r4,r2,4
    ec08:	e0bffe17 	ldw	r2,-8(fp)
    ec0c:	10800817 	ldw	r2,32(r2)
    ec10:	10810014 	ori	r2,r2,1024
    ec14:	1007883a 	mov	r3,r2
    ec18:	2005883a 	mov	r2,r4
    ec1c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ec20:	e0bffe17 	ldw	r2,-8(fp)
    ec24:	10000915 	stw	zero,36(r2)
    ec28:	00000a06 	br	ec54 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ec2c:	e0bffe17 	ldw	r2,-8(fp)
    ec30:	10c00917 	ldw	r3,36(r2)
    ec34:	00a00034 	movhi	r2,32768
    ec38:	10bfff04 	addi	r2,r2,-4
    ec3c:	10c00536 	bltu	r2,r3,ec54 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    ec40:	e0bffe17 	ldw	r2,-8(fp)
    ec44:	10800917 	ldw	r2,36(r2)
    ec48:	10c00044 	addi	r3,r2,1
    ec4c:	e0bffe17 	ldw	r2,-8(fp)
    ec50:	10c00915 	stw	r3,36(r2)
    ec54:	00800074 	movhi	r2,1
    ec58:	10957f04 	addi	r2,r2,22012
    ec5c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ec60:	e037883a 	mov	sp,fp
    ec64:	df000017 	ldw	fp,0(sp)
    ec68:	dec00104 	addi	sp,sp,4
    ec6c:	f800283a 	ret

0000ec70 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    ec70:	defffc04 	addi	sp,sp,-16
    ec74:	df000315 	stw	fp,12(sp)
    ec78:	df000304 	addi	fp,sp,12
    ec7c:	e13ffd15 	stw	r4,-12(fp)
    ec80:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ec84:	00000706 	br	eca4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    ec88:	e0bffe17 	ldw	r2,-8(fp)
    ec8c:	1090000c 	andi	r2,r2,16384
    ec90:	1005003a 	cmpeq	r2,r2,zero
    ec94:	1000031e 	bne	r2,zero,eca4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    ec98:	00bffd44 	movi	r2,-11
    ec9c:	e0bfff15 	stw	r2,-4(fp)
    eca0:	00000b06 	br	ecd0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    eca4:	e0bffd17 	ldw	r2,-12(fp)
    eca8:	10c00d17 	ldw	r3,52(r2)
    ecac:	e0bffd17 	ldw	r2,-12(fp)
    ecb0:	10800c17 	ldw	r2,48(r2)
    ecb4:	18800526 	beq	r3,r2,eccc <altera_avalon_jtag_uart_close+0x5c>
    ecb8:	e0bffd17 	ldw	r2,-12(fp)
    ecbc:	10c00917 	ldw	r3,36(r2)
    ecc0:	e0bffd17 	ldw	r2,-12(fp)
    ecc4:	10800117 	ldw	r2,4(r2)
    ecc8:	18bfef36 	bltu	r3,r2,ec88 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    eccc:	e03fff15 	stw	zero,-4(fp)
    ecd0:	e0bfff17 	ldw	r2,-4(fp)
}
    ecd4:	e037883a 	mov	sp,fp
    ecd8:	df000017 	ldw	fp,0(sp)
    ecdc:	dec00104 	addi	sp,sp,4
    ece0:	f800283a 	ret

0000ece4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ece4:	defff804 	addi	sp,sp,-32
    ece8:	df000715 	stw	fp,28(sp)
    ecec:	df000704 	addi	fp,sp,28
    ecf0:	e13ffb15 	stw	r4,-20(fp)
    ecf4:	e17ffc15 	stw	r5,-16(fp)
    ecf8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    ecfc:	00bff9c4 	movi	r2,-25
    ed00:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    ed04:	e0bffc17 	ldw	r2,-16(fp)
    ed08:	e0bfff15 	stw	r2,-4(fp)
    ed0c:	e0ffff17 	ldw	r3,-4(fp)
    ed10:	189a8060 	cmpeqi	r2,r3,27137
    ed14:	1000041e 	bne	r2,zero,ed28 <altera_avalon_jtag_uart_ioctl+0x44>
    ed18:	e0ffff17 	ldw	r3,-4(fp)
    ed1c:	189a80a0 	cmpeqi	r2,r3,27138
    ed20:	10001b1e 	bne	r2,zero,ed90 <altera_avalon_jtag_uart_ioctl+0xac>
    ed24:	00002706 	br	edc4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ed28:	e0bffb17 	ldw	r2,-20(fp)
    ed2c:	10c00117 	ldw	r3,4(r2)
    ed30:	00a00034 	movhi	r2,32768
    ed34:	10bfffc4 	addi	r2,r2,-1
    ed38:	18802226 	beq	r3,r2,edc4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    ed3c:	e0bffd17 	ldw	r2,-12(fp)
    ed40:	10800017 	ldw	r2,0(r2)
    ed44:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ed48:	e0bff917 	ldw	r2,-28(fp)
    ed4c:	10800090 	cmplti	r2,r2,2
    ed50:	1000071e 	bne	r2,zero,ed70 <altera_avalon_jtag_uart_ioctl+0x8c>
    ed54:	e0fff917 	ldw	r3,-28(fp)
    ed58:	00a00034 	movhi	r2,32768
    ed5c:	10bfffc4 	addi	r2,r2,-1
    ed60:	18800326 	beq	r3,r2,ed70 <altera_avalon_jtag_uart_ioctl+0x8c>
    ed64:	e0bff917 	ldw	r2,-28(fp)
    ed68:	e0bffe15 	stw	r2,-8(fp)
    ed6c:	00000306 	br	ed7c <altera_avalon_jtag_uart_ioctl+0x98>
    ed70:	00e00034 	movhi	r3,32768
    ed74:	18ffff84 	addi	r3,r3,-2
    ed78:	e0fffe15 	stw	r3,-8(fp)
    ed7c:	e0bffb17 	ldw	r2,-20(fp)
    ed80:	e0fffe17 	ldw	r3,-8(fp)
    ed84:	10c00115 	stw	r3,4(r2)
      rc = 0;
    ed88:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    ed8c:	00000d06 	br	edc4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ed90:	e0bffb17 	ldw	r2,-20(fp)
    ed94:	10c00117 	ldw	r3,4(r2)
    ed98:	00a00034 	movhi	r2,32768
    ed9c:	10bfffc4 	addi	r2,r2,-1
    eda0:	18800826 	beq	r3,r2,edc4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    eda4:	e13ffd17 	ldw	r4,-12(fp)
    eda8:	e0bffb17 	ldw	r2,-20(fp)
    edac:	10c00917 	ldw	r3,36(r2)
    edb0:	e0bffb17 	ldw	r2,-20(fp)
    edb4:	10800117 	ldw	r2,4(r2)
    edb8:	1885803a 	cmpltu	r2,r3,r2
    edbc:	20800015 	stw	r2,0(r4)
      rc = 0;
    edc0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    edc4:	e0bffa17 	ldw	r2,-24(fp)
}
    edc8:	e037883a 	mov	sp,fp
    edcc:	df000017 	ldw	fp,0(sp)
    edd0:	dec00104 	addi	sp,sp,4
    edd4:	f800283a 	ret

0000edd8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    edd8:	defff204 	addi	sp,sp,-56
    eddc:	dfc00d15 	stw	ra,52(sp)
    ede0:	df000c15 	stw	fp,48(sp)
    ede4:	df000c04 	addi	fp,sp,48
    ede8:	e13ffb15 	stw	r4,-20(fp)
    edec:	e17ffc15 	stw	r5,-16(fp)
    edf0:	e1bffd15 	stw	r6,-12(fp)
    edf4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    edf8:	e0bffc17 	ldw	r2,-16(fp)
    edfc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ee00:	00004806 	br	ef24 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ee04:	e0bffb17 	ldw	r2,-20(fp)
    ee08:	10800a17 	ldw	r2,40(r2)
    ee0c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ee10:	e0bffb17 	ldw	r2,-20(fp)
    ee14:	10800b17 	ldw	r2,44(r2)
    ee18:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    ee1c:	e0fff717 	ldw	r3,-36(fp)
    ee20:	e0bff617 	ldw	r2,-40(fp)
    ee24:	18800536 	bltu	r3,r2,ee3c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    ee28:	e0bff717 	ldw	r2,-36(fp)
    ee2c:	e0fff617 	ldw	r3,-40(fp)
    ee30:	10c5c83a 	sub	r2,r2,r3
    ee34:	e0bff815 	stw	r2,-32(fp)
    ee38:	00000406 	br	ee4c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ee3c:	00820004 	movi	r2,2048
    ee40:	e0fff617 	ldw	r3,-40(fp)
    ee44:	10c5c83a 	sub	r2,r2,r3
    ee48:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    ee4c:	e0bff817 	ldw	r2,-32(fp)
    ee50:	1005003a 	cmpeq	r2,r2,zero
    ee54:	10001f1e 	bne	r2,zero,eed4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    ee58:	e0fffd17 	ldw	r3,-12(fp)
    ee5c:	e0bff817 	ldw	r2,-32(fp)
    ee60:	1880022e 	bgeu	r3,r2,ee6c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    ee64:	e0bffd17 	ldw	r2,-12(fp)
    ee68:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ee6c:	e0bffb17 	ldw	r2,-20(fp)
    ee70:	10c00e04 	addi	r3,r2,56
    ee74:	e0bff617 	ldw	r2,-40(fp)
    ee78:	1887883a 	add	r3,r3,r2
    ee7c:	e0bffa17 	ldw	r2,-24(fp)
    ee80:	1009883a 	mov	r4,r2
    ee84:	180b883a 	mov	r5,r3
    ee88:	e1bff817 	ldw	r6,-32(fp)
    ee8c:	00061480 	call	6148 <memcpy>
      ptr   += n;
    ee90:	e0fff817 	ldw	r3,-32(fp)
    ee94:	e0bffa17 	ldw	r2,-24(fp)
    ee98:	10c5883a 	add	r2,r2,r3
    ee9c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    eea0:	e0fffd17 	ldw	r3,-12(fp)
    eea4:	e0bff817 	ldw	r2,-32(fp)
    eea8:	1885c83a 	sub	r2,r3,r2
    eeac:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eeb0:	e0fff617 	ldw	r3,-40(fp)
    eeb4:	e0bff817 	ldw	r2,-32(fp)
    eeb8:	1885883a 	add	r2,r3,r2
    eebc:	10c1ffcc 	andi	r3,r2,2047
    eec0:	e0bffb17 	ldw	r2,-20(fp)
    eec4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    eec8:	e0bffd17 	ldw	r2,-12(fp)
    eecc:	10800048 	cmpgei	r2,r2,1
    eed0:	103fcc1e 	bne	r2,zero,ee04 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    eed4:	e0fffa17 	ldw	r3,-24(fp)
    eed8:	e0bffc17 	ldw	r2,-16(fp)
    eedc:	1880141e 	bne	r3,r2,ef30 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    eee0:	e0bffe17 	ldw	r2,-8(fp)
    eee4:	1090000c 	andi	r2,r2,16384
    eee8:	1004c03a 	cmpne	r2,r2,zero
    eeec:	1000101e 	bne	r2,zero,ef30 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    eef0:	e0bffb17 	ldw	r2,-20(fp)
    eef4:	10c00a17 	ldw	r3,40(r2)
    eef8:	e0bff717 	ldw	r2,-36(fp)
    eefc:	1880051e 	bne	r3,r2,ef14 <altera_avalon_jtag_uart_read+0x13c>
    ef00:	e0bffb17 	ldw	r2,-20(fp)
    ef04:	10c00917 	ldw	r3,36(r2)
    ef08:	e0bffb17 	ldw	r2,-20(fp)
    ef0c:	10800117 	ldw	r2,4(r2)
    ef10:	18bff736 	bltu	r3,r2,eef0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ef14:	e0bffb17 	ldw	r2,-20(fp)
    ef18:	10c00a17 	ldw	r3,40(r2)
    ef1c:	e0bff717 	ldw	r2,-36(fp)
    ef20:	18800326 	beq	r3,r2,ef30 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ef24:	e0bffd17 	ldw	r2,-12(fp)
    ef28:	10800048 	cmpgei	r2,r2,1
    ef2c:	103fb51e 	bne	r2,zero,ee04 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ef30:	e0fffa17 	ldw	r3,-24(fp)
    ef34:	e0bffc17 	ldw	r2,-16(fp)
    ef38:	18801926 	beq	r3,r2,efa0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef3c:	0005303a 	rdctl	r2,status
    ef40:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef44:	e0fff517 	ldw	r3,-44(fp)
    ef48:	00bfff84 	movi	r2,-2
    ef4c:	1884703a 	and	r2,r3,r2
    ef50:	1001703a 	wrctl	status,r2
  
  return context;
    ef54:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ef58:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ef5c:	e0bffb17 	ldw	r2,-20(fp)
    ef60:	10800817 	ldw	r2,32(r2)
    ef64:	10c00054 	ori	r3,r2,1
    ef68:	e0bffb17 	ldw	r2,-20(fp)
    ef6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ef70:	e0bffb17 	ldw	r2,-20(fp)
    ef74:	10800017 	ldw	r2,0(r2)
    ef78:	11000104 	addi	r4,r2,4
    ef7c:	e0bffb17 	ldw	r2,-20(fp)
    ef80:	10800817 	ldw	r2,32(r2)
    ef84:	1007883a 	mov	r3,r2
    ef88:	2005883a 	mov	r2,r4
    ef8c:	10c00035 	stwio	r3,0(r2)
    ef90:	e0bff917 	ldw	r2,-28(fp)
    ef94:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef98:	e0bff417 	ldw	r2,-48(fp)
    ef9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    efa0:	e0fffa17 	ldw	r3,-24(fp)
    efa4:	e0bffc17 	ldw	r2,-16(fp)
    efa8:	18800526 	beq	r3,r2,efc0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    efac:	e0fffa17 	ldw	r3,-24(fp)
    efb0:	e0bffc17 	ldw	r2,-16(fp)
    efb4:	1887c83a 	sub	r3,r3,r2
    efb8:	e0ffff15 	stw	r3,-4(fp)
    efbc:	00000906 	br	efe4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    efc0:	e0bffe17 	ldw	r2,-8(fp)
    efc4:	1090000c 	andi	r2,r2,16384
    efc8:	1005003a 	cmpeq	r2,r2,zero
    efcc:	1000031e 	bne	r2,zero,efdc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    efd0:	00bffd44 	movi	r2,-11
    efd4:	e0bfff15 	stw	r2,-4(fp)
    efd8:	00000206 	br	efe4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    efdc:	00bffec4 	movi	r2,-5
    efe0:	e0bfff15 	stw	r2,-4(fp)
    efe4:	e0bfff17 	ldw	r2,-4(fp)
}
    efe8:	e037883a 	mov	sp,fp
    efec:	dfc00117 	ldw	ra,4(sp)
    eff0:	df000017 	ldw	fp,0(sp)
    eff4:	dec00204 	addi	sp,sp,8
    eff8:	f800283a 	ret

0000effc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    effc:	defff204 	addi	sp,sp,-56
    f000:	dfc00d15 	stw	ra,52(sp)
    f004:	df000c15 	stw	fp,48(sp)
    f008:	df000c04 	addi	fp,sp,48
    f00c:	e13ffb15 	stw	r4,-20(fp)
    f010:	e17ffc15 	stw	r5,-16(fp)
    f014:	e1bffd15 	stw	r6,-12(fp)
    f018:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f01c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f020:	e0bffc17 	ldw	r2,-16(fp)
    f024:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f028:	00003a06 	br	f114 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f02c:	e0bffb17 	ldw	r2,-20(fp)
    f030:	10800c17 	ldw	r2,48(r2)
    f034:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    f038:	e0bffb17 	ldw	r2,-20(fp)
    f03c:	10800d17 	ldw	r2,52(r2)
    f040:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    f044:	e0fffa17 	ldw	r3,-24(fp)
    f048:	e0bff917 	ldw	r2,-28(fp)
    f04c:	1880062e 	bgeu	r3,r2,f068 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f050:	e0fff917 	ldw	r3,-28(fp)
    f054:	e0bffa17 	ldw	r2,-24(fp)
    f058:	1885c83a 	sub	r2,r3,r2
    f05c:	10bfffc4 	addi	r2,r2,-1
    f060:	e0bff815 	stw	r2,-32(fp)
    f064:	00000c06 	br	f098 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    f068:	e0bff917 	ldw	r2,-28(fp)
    f06c:	1005003a 	cmpeq	r2,r2,zero
    f070:	1000051e 	bne	r2,zero,f088 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f074:	00820004 	movi	r2,2048
    f078:	e0fffa17 	ldw	r3,-24(fp)
    f07c:	10c5c83a 	sub	r2,r2,r3
    f080:	e0bff815 	stw	r2,-32(fp)
    f084:	00000406 	br	f098 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f088:	0081ffc4 	movi	r2,2047
    f08c:	e0fffa17 	ldw	r3,-24(fp)
    f090:	10c5c83a 	sub	r2,r2,r3
    f094:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    f098:	e0bff817 	ldw	r2,-32(fp)
    f09c:	1005003a 	cmpeq	r2,r2,zero
    f0a0:	10001f1e 	bne	r2,zero,f120 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    f0a4:	e0fffd17 	ldw	r3,-12(fp)
    f0a8:	e0bff817 	ldw	r2,-32(fp)
    f0ac:	1880022e 	bgeu	r3,r2,f0b8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    f0b0:	e0bffd17 	ldw	r2,-12(fp)
    f0b4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f0b8:	e0bffb17 	ldw	r2,-20(fp)
    f0bc:	10c20e04 	addi	r3,r2,2104
    f0c0:	e0bffa17 	ldw	r2,-24(fp)
    f0c4:	1885883a 	add	r2,r3,r2
    f0c8:	e0fffc17 	ldw	r3,-16(fp)
    f0cc:	1009883a 	mov	r4,r2
    f0d0:	180b883a 	mov	r5,r3
    f0d4:	e1bff817 	ldw	r6,-32(fp)
    f0d8:	00061480 	call	6148 <memcpy>
      ptr   += n;
    f0dc:	e0fff817 	ldw	r3,-32(fp)
    f0e0:	e0bffc17 	ldw	r2,-16(fp)
    f0e4:	10c5883a 	add	r2,r2,r3
    f0e8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    f0ec:	e0fffd17 	ldw	r3,-12(fp)
    f0f0:	e0bff817 	ldw	r2,-32(fp)
    f0f4:	1885c83a 	sub	r2,r3,r2
    f0f8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f0fc:	e0fffa17 	ldw	r3,-24(fp)
    f100:	e0bff817 	ldw	r2,-32(fp)
    f104:	1885883a 	add	r2,r3,r2
    f108:	10c1ffcc 	andi	r3,r2,2047
    f10c:	e0bffb17 	ldw	r2,-20(fp)
    f110:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f114:	e0bffd17 	ldw	r2,-12(fp)
    f118:	10800048 	cmpgei	r2,r2,1
    f11c:	103fc31e 	bne	r2,zero,f02c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f120:	0005303a 	rdctl	r2,status
    f124:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f128:	e0fff517 	ldw	r3,-44(fp)
    f12c:	00bfff84 	movi	r2,-2
    f130:	1884703a 	and	r2,r3,r2
    f134:	1001703a 	wrctl	status,r2
  
  return context;
    f138:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f13c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f140:	e0bffb17 	ldw	r2,-20(fp)
    f144:	10800817 	ldw	r2,32(r2)
    f148:	10c00094 	ori	r3,r2,2
    f14c:	e0bffb17 	ldw	r2,-20(fp)
    f150:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f154:	e0bffb17 	ldw	r2,-20(fp)
    f158:	10800017 	ldw	r2,0(r2)
    f15c:	11000104 	addi	r4,r2,4
    f160:	e0bffb17 	ldw	r2,-20(fp)
    f164:	10800817 	ldw	r2,32(r2)
    f168:	1007883a 	mov	r3,r2
    f16c:	2005883a 	mov	r2,r4
    f170:	10c00035 	stwio	r3,0(r2)
    f174:	e0bff717 	ldw	r2,-36(fp)
    f178:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f17c:	e0bff417 	ldw	r2,-48(fp)
    f180:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f184:	e0bffd17 	ldw	r2,-12(fp)
    f188:	10800050 	cmplti	r2,r2,1
    f18c:	1000111e 	bne	r2,zero,f1d4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    f190:	e0bffe17 	ldw	r2,-8(fp)
    f194:	1090000c 	andi	r2,r2,16384
    f198:	1004c03a 	cmpne	r2,r2,zero
    f19c:	1000101e 	bne	r2,zero,f1e0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f1a0:	e0bffb17 	ldw	r2,-20(fp)
    f1a4:	10c00d17 	ldw	r3,52(r2)
    f1a8:	e0bff917 	ldw	r2,-28(fp)
    f1ac:	1880051e 	bne	r3,r2,f1c4 <altera_avalon_jtag_uart_write+0x1c8>
    f1b0:	e0bffb17 	ldw	r2,-20(fp)
    f1b4:	10c00917 	ldw	r3,36(r2)
    f1b8:	e0bffb17 	ldw	r2,-20(fp)
    f1bc:	10800117 	ldw	r2,4(r2)
    f1c0:	18bff736 	bltu	r3,r2,f1a0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    f1c4:	e0bffb17 	ldw	r2,-20(fp)
    f1c8:	10c00d17 	ldw	r3,52(r2)
    f1cc:	e0bff917 	ldw	r2,-28(fp)
    f1d0:	18800326 	beq	r3,r2,f1e0 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    f1d4:	e0bffd17 	ldw	r2,-12(fp)
    f1d8:	10800048 	cmpgei	r2,r2,1
    f1dc:	103fcd1e 	bne	r2,zero,f114 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f1e0:	e0fffc17 	ldw	r3,-16(fp)
    f1e4:	e0bff617 	ldw	r2,-40(fp)
    f1e8:	18800526 	beq	r3,r2,f200 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    f1ec:	e0fffc17 	ldw	r3,-16(fp)
    f1f0:	e0bff617 	ldw	r2,-40(fp)
    f1f4:	1887c83a 	sub	r3,r3,r2
    f1f8:	e0ffff15 	stw	r3,-4(fp)
    f1fc:	00000906 	br	f224 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    f200:	e0bffe17 	ldw	r2,-8(fp)
    f204:	1090000c 	andi	r2,r2,16384
    f208:	1005003a 	cmpeq	r2,r2,zero
    f20c:	1000031e 	bne	r2,zero,f21c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    f210:	00bffd44 	movi	r2,-11
    f214:	e0bfff15 	stw	r2,-4(fp)
    f218:	00000206 	br	f224 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    f21c:	00bffec4 	movi	r2,-5
    f220:	e0bfff15 	stw	r2,-4(fp)
    f224:	e0bfff17 	ldw	r2,-4(fp)
}
    f228:	e037883a 	mov	sp,fp
    f22c:	dfc00117 	ldw	ra,4(sp)
    f230:	df000017 	ldw	fp,0(sp)
    f234:	dec00204 	addi	sp,sp,8
    f238:	f800283a 	ret

0000f23c <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
    f23c:	defffb04 	addi	sp,sp,-20
    f240:	df000415 	stw	fp,16(sp)
    f244:	df000404 	addi	fp,sp,16
    f248:	e13ffd15 	stw	r4,-12(fp)
    f24c:	e17ffe15 	stw	r5,-8(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    f250:	e0bffd17 	ldw	r2,-12(fp)
    f254:	10800317 	ldw	r2,12(r2)
    f258:	10800037 	ldwio	r2,0(r2)
    f25c:	1080040c 	andi	r2,r2,16
    f260:	1005003a 	cmpeq	r2,r2,zero
    f264:	1000031e 	bne	r2,zero,f274 <alt_avalon_sgdma_do_async_transfer+0x38>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
    f268:	00bffc04 	movi	r2,-16
    f26c:	e0bfff15 	stw	r2,-4(fp)
    f270:	00003c06 	br	f364 <alt_avalon_sgdma_do_async_transfer+0x128>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    f274:	e0bffd17 	ldw	r2,-12(fp)
    f278:	10800317 	ldw	r2,12(r2)
    f27c:	11000404 	addi	r4,r2,16
    f280:	e0bffd17 	ldw	r2,-12(fp)
    f284:	10800317 	ldw	r2,12(r2)
    f288:	10800404 	addi	r2,r2,16
    f28c:	10c00037 	ldwio	r3,0(r2)
    f290:	00bff7c4 	movi	r2,-33
    f294:	1886703a 	and	r3,r3,r2
    f298:	2005883a 	mov	r2,r4
    f29c:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    f2a0:	e0bffd17 	ldw	r2,-12(fp)
    f2a4:	10800317 	ldw	r2,12(r2)
    f2a8:	1007883a 	mov	r3,r2
    f2ac:	00803fc4 	movi	r2,255
    f2b0:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
    f2b4:	e0bffd17 	ldw	r2,-12(fp)
    f2b8:	10800317 	ldw	r2,12(r2)
    f2bc:	10800804 	addi	r2,r2,32
    f2c0:	e0fffe17 	ldw	r3,-8(fp)
    f2c4:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
    f2c8:	e0bffd17 	ldw	r2,-12(fp)
    f2cc:	10800917 	ldw	r2,36(r2)
    f2d0:	1005003a 	cmpeq	r2,r2,zero
    f2d4:	1000111e 	bne	r2,zero,f31c <alt_avalon_sgdma_do_async_transfer+0xe0>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    f2d8:	e0bffd17 	ldw	r2,-12(fp)
    f2dc:	10800317 	ldw	r2,12(r2)
    f2e0:	10800404 	addi	r2,r2,16
    f2e4:	10800037 	ldwio	r2,0(r2)
    f2e8:	e0bffc15 	stw	r2,-16(fp)

    control |= (dev->chain_control                          |
    f2ec:	e0bffd17 	ldw	r2,-12(fp)
    f2f0:	10c00b17 	ldw	r3,44(r2)
    f2f4:	e0bffc17 	ldw	r2,-16(fp)
    f2f8:	1884b03a 	or	r2,r3,r2
    f2fc:	10801814 	ori	r2,r2,96
    f300:	e0bffc15 	stw	r2,-16(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    f304:	e0bffd17 	ldw	r2,-12(fp)
    f308:	10800317 	ldw	r2,12(r2)
    f30c:	10800404 	addi	r2,r2,16
    f310:	e0fffc17 	ldw	r3,-16(fp)
    f314:	10c00035 	stwio	r3,0(r2)
    f318:	00001106 	br	f360 <alt_avalon_sgdma_do_async_transfer+0x124>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    f31c:	e0bffd17 	ldw	r2,-12(fp)
    f320:	10800317 	ldw	r2,12(r2)
    f324:	10800404 	addi	r2,r2,16
    f328:	10800037 	ldwio	r2,0(r2)
    f32c:	e0bffc15 	stw	r2,-16(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
    f330:	e0bffc17 	ldw	r2,-16(fp)
    f334:	10801814 	ori	r2,r2,96
    f338:	e0bffc15 	stw	r2,-16(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
    f33c:	e0fffc17 	ldw	r3,-16(fp)
    f340:	00bffbc4 	movi	r2,-17
    f344:	1884703a 	and	r2,r3,r2
    f348:	e0bffc15 	stw	r2,-16(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    f34c:	e0bffd17 	ldw	r2,-12(fp)
    f350:	10800317 	ldw	r2,12(r2)
    f354:	10800404 	addi	r2,r2,16
    f358:	e0fffc17 	ldw	r3,-16(fp)
    f35c:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
    f360:	e03fff15 	stw	zero,-4(fp)
    f364:	e0bfff17 	ldw	r2,-4(fp)
}
    f368:	e037883a 	mov	sp,fp
    f36c:	df000017 	ldw	fp,0(sp)
    f370:	dec00104 	addi	sp,sp,4
    f374:	f800283a 	ret

0000f378 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
    f378:	defffc04 	addi	sp,sp,-16
    f37c:	df000315 	stw	fp,12(sp)
    f380:	df000304 	addi	fp,sp,12
    f384:	e13ffe15 	stw	r4,-8(fp)
    f388:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    f38c:	e0bffe17 	ldw	r2,-8(fp)
    f390:	10800317 	ldw	r2,12(r2)
    f394:	10800037 	ldwio	r2,0(r2)
    f398:	1080040c 	andi	r2,r2,16
    f39c:	1004c03a 	cmpne	r2,r2,zero
    f3a0:	103ffa1e 	bne	r2,zero,f38c <alt_avalon_sgdma_do_sync_transfer+0x14>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    f3a4:	e0bffe17 	ldw	r2,-8(fp)
    f3a8:	10800317 	ldw	r2,12(r2)
    f3ac:	11000404 	addi	r4,r2,16
    f3b0:	e0bffe17 	ldw	r2,-8(fp)
    f3b4:	10800317 	ldw	r2,12(r2)
    f3b8:	10800404 	addi	r2,r2,16
    f3bc:	10c00037 	ldwio	r3,0(r2)
    f3c0:	00bff7c4 	movi	r2,-33
    f3c4:	1886703a 	and	r3,r3,r2
    f3c8:	2005883a 	mov	r2,r4
    f3cc:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    f3d0:	e0bffe17 	ldw	r2,-8(fp)
    f3d4:	10800317 	ldw	r2,12(r2)
    f3d8:	1007883a 	mov	r3,r2
    f3dc:	00803fc4 	movi	r2,255
    f3e0:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
    f3e4:	e0bffe17 	ldw	r2,-8(fp)
    f3e8:	10800317 	ldw	r2,12(r2)
    f3ec:	10800804 	addi	r2,r2,32
    f3f0:	e0ffff17 	ldw	r3,-4(fp)
    f3f4:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    f3f8:	e0bffe17 	ldw	r2,-8(fp)
    f3fc:	10800317 	ldw	r2,12(r2)
    f400:	11000404 	addi	r4,r2,16
    f404:	e0bffe17 	ldw	r2,-8(fp)
    f408:	10800317 	ldw	r2,12(r2)
    f40c:	10800404 	addi	r2,r2,16
    f410:	10800037 	ldwio	r2,0(r2)
    f414:	10c01814 	ori	r3,r2,96
    f418:	2005883a 	mov	r2,r4
    f41c:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    f420:	e0bffe17 	ldw	r2,-8(fp)
    f424:	10800317 	ldw	r2,12(r2)
    f428:	10800037 	ldwio	r2,0(r2)
    f42c:	1080040c 	andi	r2,r2,16
    f430:	1004c03a 	cmpne	r2,r2,zero
    f434:	103ffa1e 	bne	r2,zero,f420 <alt_avalon_sgdma_do_sync_transfer+0xa8>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
    f438:	e0bffe17 	ldw	r2,-8(fp)
    f43c:	10800317 	ldw	r2,12(r2)
    f440:	11000404 	addi	r4,r2,16
    f444:	e0bffe17 	ldw	r2,-8(fp)
    f448:	10800317 	ldw	r2,12(r2)
    f44c:	10800404 	addi	r2,r2,16
    f450:	10c00037 	ldwio	r3,0(r2)
    f454:	00bff7c4 	movi	r2,-33
    f458:	1886703a 	and	r3,r3,r2
    f45c:	2005883a 	mov	r2,r4
    f460:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
    f464:	e0bffe17 	ldw	r2,-8(fp)
    f468:	10800317 	ldw	r2,12(r2)
    f46c:	10800037 	ldwio	r2,0(r2)
    f470:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    f474:	e0bffe17 	ldw	r2,-8(fp)
    f478:	10800317 	ldw	r2,12(r2)
    f47c:	1007883a 	mov	r3,r2
    f480:	00803fc4 	movi	r2,255
    f484:	18800035 	stwio	r2,0(r3)

  return status;
    f488:	e0bffd03 	ldbu	r2,-12(fp)
}
    f48c:	e037883a 	mov	sp,fp
    f490:	df000017 	ldw	fp,0(sp)
    f494:	dec00104 	addi	sp,sp,4
    f498:	f800283a 	ret

0000f49c <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
    f49c:	defff404 	addi	sp,sp,-48
    f4a0:	dfc00b15 	stw	ra,44(sp)
    f4a4:	df000a15 	stw	fp,40(sp)
    f4a8:	df000a04 	addi	fp,sp,40
    f4ac:	e13ffb15 	stw	r4,-20(fp)
    f4b0:	e17ffc15 	stw	r5,-16(fp)
    f4b4:	e1bffd15 	stw	r6,-12(fp)
    f4b8:	e1fffe15 	stw	r7,-8(fp)
    f4bc:	e0800217 	ldw	r2,8(fp)
    f4c0:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
    f4c4:	e0bfff0b 	ldhu	r2,-4(fp)
    f4c8:	d8800015 	stw	r2,0(sp)
    f4cc:	e0800317 	ldw	r2,12(fp)
    f4d0:	d8800115 	stw	r2,4(sp)
    f4d4:	e0800417 	ldw	r2,16(fp)
    f4d8:	d8800215 	stw	r2,8(sp)
    f4dc:	d8000315 	stw	zero,12(sp)
    f4e0:	d8000415 	stw	zero,16(sp)
    f4e4:	e13ffb17 	ldw	r4,-20(fp)
    f4e8:	e17ffc17 	ldw	r5,-16(fp)
    f4ec:	e1bffd17 	ldw	r6,-12(fp)
    f4f0:	e1fffe17 	ldw	r7,-8(fp)
    f4f4:	000f50c0 	call	f50c <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
    f4f8:	e037883a 	mov	sp,fp
    f4fc:	dfc00117 	ldw	ra,4(sp)
    f500:	df000017 	ldw	fp,0(sp)
    f504:	dec00204 	addi	sp,sp,8
    f508:	f800283a 	ret

0000f50c <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
    f50c:	defff204 	addi	sp,sp,-56
    f510:	dfc00d15 	stw	ra,52(sp)
    f514:	df000c15 	stw	fp,48(sp)
    f518:	df000c04 	addi	fp,sp,48
    f51c:	e13ffb15 	stw	r4,-20(fp)
    f520:	e17ffc15 	stw	r5,-16(fp)
    f524:	e1bffd15 	stw	r6,-12(fp)
    f528:	e1fffe15 	stw	r7,-8(fp)
    f52c:	e0800217 	ldw	r2,8(fp)
    f530:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
    f534:	e0bfff0b 	ldhu	r2,-4(fp)
    f538:	d8800015 	stw	r2,0(sp)
    f53c:	d8000115 	stw	zero,4(sp)
    f540:	e0800317 	ldw	r2,12(fp)
    f544:	d8800215 	stw	r2,8(sp)
    f548:	e0800417 	ldw	r2,16(fp)
    f54c:	d8800315 	stw	r2,12(sp)
    f550:	e0800517 	ldw	r2,20(fp)
    f554:	d8800415 	stw	r2,16(sp)
    f558:	e0800617 	ldw	r2,24(fp)
    f55c:	d8800515 	stw	r2,20(sp)
    f560:	d8000615 	stw	zero,24(sp)
    f564:	e13ffb17 	ldw	r4,-20(fp)
    f568:	e17ffc17 	ldw	r5,-16(fp)
    f56c:	e1bffd17 	ldw	r6,-12(fp)
    f570:	e1fffe17 	ldw	r7,-8(fp)
    f574:	000f9f40 	call	f9f4 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
    f578:	e037883a 	mov	sp,fp
    f57c:	dfc00117 	ldw	ra,4(sp)
    f580:	df000017 	ldw	fp,0(sp)
    f584:	dec00204 	addi	sp,sp,8
    f588:	f800283a 	ret

0000f58c <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
    f58c:	defff804 	addi	sp,sp,-32
    f590:	dfc00715 	stw	ra,28(sp)
    f594:	df000615 	stw	fp,24(sp)
    f598:	df000604 	addi	fp,sp,24
    f59c:	e13ffc15 	stw	r4,-16(fp)
    f5a0:	e17ffd15 	stw	r5,-12(fp)
    f5a4:	e1bffe15 	stw	r6,-8(fp)
    f5a8:	e1ffff0d 	sth	r7,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
    f5ac:	e1ffff0b 	ldhu	r7,-4(fp)
    f5b0:	e0800217 	ldw	r2,8(fp)
    f5b4:	d8800015 	stw	r2,0(sp)
    f5b8:	d8000115 	stw	zero,4(sp)
    f5bc:	e13ffc17 	ldw	r4,-16(fp)
    f5c0:	e17ffd17 	ldw	r5,-12(fp)
    f5c4:	e1bffe17 	ldw	r6,-8(fp)
    f5c8:	000f5e00 	call	f5e0 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
    f5cc:	e037883a 	mov	sp,fp
    f5d0:	dfc00117 	ldw	ra,4(sp)
    f5d4:	df000017 	ldw	fp,0(sp)
    f5d8:	dec00204 	addi	sp,sp,8
    f5dc:	f800283a 	ret

0000f5e0 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
    f5e0:	defff304 	addi	sp,sp,-52
    f5e4:	dfc00c15 	stw	ra,48(sp)
    f5e8:	df000b15 	stw	fp,44(sp)
    f5ec:	df000b04 	addi	fp,sp,44
    f5f0:	e13ffc15 	stw	r4,-16(fp)
    f5f4:	e17ffd15 	stw	r5,-12(fp)
    f5f8:	e1bffe15 	stw	r6,-8(fp)
    f5fc:	e1ffff0d 	sth	r7,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
    f600:	e0bfff0b 	ldhu	r2,-4(fp)
    f604:	d8800015 	stw	r2,0(sp)
    f608:	d8000115 	stw	zero,4(sp)
    f60c:	d8000215 	stw	zero,8(sp)
    f610:	e0800217 	ldw	r2,8(fp)
    f614:	d8800315 	stw	r2,12(sp)
    f618:	d8000415 	stw	zero,16(sp)
    f61c:	e0800317 	ldw	r2,12(fp)
    f620:	d8800515 	stw	r2,20(sp)
    f624:	d8000615 	stw	zero,24(sp)
    f628:	e13ffc17 	ldw	r4,-16(fp)
    f62c:	e17ffd17 	ldw	r5,-12(fp)
    f630:	000d883a 	mov	r6,zero
    f634:	e1fffe17 	ldw	r7,-8(fp)
    f638:	000f9f40 	call	f9f4 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
    f63c:	e037883a 	mov	sp,fp
    f640:	dfc00117 	ldw	ra,4(sp)
    f644:	df000017 	ldw	fp,0(sp)
    f648:	dec00204 	addi	sp,sp,8
    f64c:	f800283a 	ret

0000f650 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
    f650:	defff404 	addi	sp,sp,-48
    f654:	dfc00b15 	stw	ra,44(sp)
    f658:	df000a15 	stw	fp,40(sp)
    f65c:	df000a04 	addi	fp,sp,40
    f660:	e13ffb15 	stw	r4,-20(fp)
    f664:	e17ffc15 	stw	r5,-16(fp)
    f668:	e1bffd15 	stw	r6,-12(fp)
    f66c:	e0800517 	ldw	r2,20(fp)
    f670:	e1fffe0d 	sth	r7,-8(fp)
    f674:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
    f678:	e1fffe0b 	ldhu	r7,-8(fp)
    f67c:	e0ffff03 	ldbu	r3,-4(fp)
    f680:	e0800217 	ldw	r2,8(fp)
    f684:	d8800015 	stw	r2,0(sp)
    f688:	e0800317 	ldw	r2,12(fp)
    f68c:	d8800115 	stw	r2,4(sp)
    f690:	e0800417 	ldw	r2,16(fp)
    f694:	d8800215 	stw	r2,8(sp)
    f698:	d8000315 	stw	zero,12(sp)
    f69c:	d8c00415 	stw	r3,16(sp)
    f6a0:	e13ffb17 	ldw	r4,-20(fp)
    f6a4:	e17ffc17 	ldw	r5,-16(fp)
    f6a8:	e1bffd17 	ldw	r6,-12(fp)
    f6ac:	000f6c40 	call	f6c4 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
    f6b0:	e037883a 	mov	sp,fp
    f6b4:	dfc00117 	ldw	ra,4(sp)
    f6b8:	df000017 	ldw	fp,0(sp)
    f6bc:	dec00204 	addi	sp,sp,8
    f6c0:	f800283a 	ret

0000f6c4 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
    f6c4:	defff204 	addi	sp,sp,-56
    f6c8:	dfc00d15 	stw	ra,52(sp)
    f6cc:	df000c15 	stw	fp,48(sp)
    f6d0:	df000c04 	addi	fp,sp,48
    f6d4:	e13ffb15 	stw	r4,-20(fp)
    f6d8:	e17ffc15 	stw	r5,-16(fp)
    f6dc:	e1bffd15 	stw	r6,-12(fp)
    f6e0:	e0800617 	ldw	r2,24(fp)
    f6e4:	e1fffe0d 	sth	r7,-8(fp)
    f6e8:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
    f6ec:	e0bffe0b 	ldhu	r2,-8(fp)
    f6f0:	e0ffff03 	ldbu	r3,-4(fp)
    f6f4:	d8800015 	stw	r2,0(sp)
    f6f8:	e0800417 	ldw	r2,16(fp)
    f6fc:	d8800115 	stw	r2,4(sp)
    f700:	e0800217 	ldw	r2,8(fp)
    f704:	d8800215 	stw	r2,8(sp)
    f708:	e0800317 	ldw	r2,12(fp)
    f70c:	d8800315 	stw	r2,12(sp)
    f710:	e0800517 	ldw	r2,20(fp)
    f714:	d8800415 	stw	r2,16(sp)
    f718:	d8000515 	stw	zero,20(sp)
    f71c:	d8c00615 	stw	r3,24(sp)
    f720:	e13ffb17 	ldw	r4,-20(fp)
    f724:	e17ffc17 	ldw	r5,-16(fp)
    f728:	e1bffd17 	ldw	r6,-12(fp)
    f72c:	000f883a 	mov	r7,zero
    f730:	000f9f40 	call	f9f4 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
    f734:	e037883a 	mov	sp,fp
    f738:	dfc00117 	ldw	ra,4(sp)
    f73c:	df000017 	ldw	fp,0(sp)
    f740:	dec00204 	addi	sp,sp,8
    f744:	f800283a 	ret

0000f748 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
    f748:	defffb04 	addi	sp,sp,-20
    f74c:	df000415 	stw	fp,16(sp)
    f750:	df000404 	addi	fp,sp,16
    f754:	e13ffc15 	stw	r4,-16(fp)
    f758:	e17ffd15 	stw	r5,-12(fp)
    f75c:	e1bffe15 	stw	r6,-8(fp)
    f760:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
    f764:	e0fffc17 	ldw	r3,-16(fp)
    f768:	e0bffd17 	ldw	r2,-12(fp)
    f76c:	18800915 	stw	r2,36(r3)
  dev->callback_context = context;
    f770:	e0fffc17 	ldw	r3,-16(fp)
    f774:	e0bfff17 	ldw	r2,-4(fp)
    f778:	18800a15 	stw	r2,40(r3)
  dev->chain_control    = chain_control;
    f77c:	e0fffc17 	ldw	r3,-16(fp)
    f780:	e0bffe17 	ldw	r2,-8(fp)
    f784:	18800b15 	stw	r2,44(r3)
}
    f788:	e037883a 	mov	sp,fp
    f78c:	df000017 	ldw	fp,0(sp)
    f790:	dec00104 	addi	sp,sp,4
    f794:	f800283a 	ret

0000f798 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
    f798:	defffd04 	addi	sp,sp,-12
    f79c:	df000215 	stw	fp,8(sp)
    f7a0:	df000204 	addi	fp,sp,8
    f7a4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    f7a8:	e0bfff17 	ldw	r2,-4(fp)
    f7ac:	10800317 	ldw	r2,12(r2)
    f7b0:	10800404 	addi	r2,r2,16
    f7b4:	10800037 	ldwio	r2,0(r2)
    f7b8:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
    f7bc:	e0bffe17 	ldw	r2,-8(fp)
    f7c0:	10800814 	ori	r2,r2,32
    f7c4:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    f7c8:	e0bfff17 	ldw	r2,-4(fp)
    f7cc:	10800317 	ldw	r2,12(r2)
    f7d0:	10800404 	addi	r2,r2,16
    f7d4:	e0fffe17 	ldw	r3,-8(fp)
    f7d8:	10c00035 	stwio	r3,0(r2)
}
    f7dc:	e037883a 	mov	sp,fp
    f7e0:	df000017 	ldw	fp,0(sp)
    f7e4:	dec00104 	addi	sp,sp,4
    f7e8:	f800283a 	ret

0000f7ec <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
    f7ec:	defffd04 	addi	sp,sp,-12
    f7f0:	df000215 	stw	fp,8(sp)
    f7f4:	df000204 	addi	fp,sp,8
    f7f8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    f7fc:	e0bfff17 	ldw	r2,-4(fp)
    f800:	10800317 	ldw	r2,12(r2)
    f804:	10800404 	addi	r2,r2,16
    f808:	10800037 	ldwio	r2,0(r2)
    f80c:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
    f810:	e0fffe17 	ldw	r3,-8(fp)
    f814:	00bff7c4 	movi	r2,-33
    f818:	1884703a 	and	r2,r3,r2
    f81c:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    f820:	e0bfff17 	ldw	r2,-4(fp)
    f824:	10800317 	ldw	r2,12(r2)
    f828:	10800404 	addi	r2,r2,16
    f82c:	e0fffe17 	ldw	r3,-8(fp)
    f830:	10c00035 	stwio	r3,0(r2)
}
    f834:	e037883a 	mov	sp,fp
    f838:	df000017 	ldw	fp,0(sp)
    f83c:	dec00104 	addi	sp,sp,4
    f840:	f800283a 	ret

0000f844 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
    f844:	defffd04 	addi	sp,sp,-12
    f848:	df000215 	stw	fp,8(sp)
    f84c:	df000204 	addi	fp,sp,8
    f850:	e13ffe15 	stw	r4,-8(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
    f854:	e0bffe17 	ldw	r2,-8(fp)
    f858:	10800784 	addi	r2,r2,30
    f85c:	10800023 	ldbuio	r2,0(r2)
    f860:	10801fcc 	andi	r2,r2,127
    f864:	1005003a 	cmpeq	r2,r2,zero
    f868:	1000031e 	bne	r2,zero,f878 <alt_avalon_sgdma_check_descriptor_status+0x34>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
    f86c:	00bffec4 	movi	r2,-5
    f870:	e0bfff15 	stw	r2,-4(fp)
    f874:	00000a06 	br	f8a0 <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
    f878:	e0bffe17 	ldw	r2,-8(fp)
    f87c:	108007c4 	addi	r2,r2,31
    f880:	10800023 	ldbuio	r2,0(r2)
    f884:	1080200c 	andi	r2,r2,128
    f888:	1005003a 	cmpeq	r2,r2,zero
    f88c:	1000031e 	bne	r2,zero,f89c <alt_avalon_sgdma_check_descriptor_status+0x58>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
    f890:	00bfe244 	movi	r2,-119
    f894:	e0bfff15 	stw	r2,-4(fp)
    f898:	00000106 	br	f8a0 <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

    return 0;
    f89c:	e03fff15 	stw	zero,-4(fp)
    f8a0:	e0bfff17 	ldw	r2,-4(fp)
}
    f8a4:	e037883a 	mov	sp,fp
    f8a8:	df000017 	ldw	fp,0(sp)
    f8ac:	dec00104 	addi	sp,sp,4
    f8b0:	f800283a 	ret

0000f8b4 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
    f8b4:	defffc04 	addi	sp,sp,-16
    f8b8:	dfc00315 	stw	ra,12(sp)
    f8bc:	df000215 	stw	fp,8(sp)
    f8c0:	df000204 	addi	fp,sp,8
    f8c4:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
    f8c8:	e13fff17 	ldw	r4,-4(fp)
    f8cc:	d1600d04 	addi	r5,gp,-32716
    f8d0:	00106280 	call	10628 <alt_find_dev>
    f8d4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
    f8d8:	e0bffe17 	ldw	r2,-8(fp)
    f8dc:	1004c03a 	cmpne	r2,r2,zero
    f8e0:	1000041e 	bne	r2,zero,f8f4 <alt_avalon_sgdma_open+0x40>
    ALT_ERRNO = ENODEV;
    f8e4:	000f90c0 	call	f90c <alt_get_errno>
    f8e8:	1007883a 	mov	r3,r2
    f8ec:	008004c4 	movi	r2,19
    f8f0:	18800015 	stw	r2,0(r3)
  }

  return dev;
    f8f4:	e0bffe17 	ldw	r2,-8(fp)
}
    f8f8:	e037883a 	mov	sp,fp
    f8fc:	dfc00117 	ldw	ra,4(sp)
    f900:	df000017 	ldw	fp,0(sp)
    f904:	dec00204 	addi	sp,sp,8
    f908:	f800283a 	ret

0000f90c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f90c:	defffd04 	addi	sp,sp,-12
    f910:	dfc00215 	stw	ra,8(sp)
    f914:	df000115 	stw	fp,4(sp)
    f918:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    f91c:	00800074 	movhi	r2,1
    f920:	108eb004 	addi	r2,r2,15040
    f924:	10800017 	ldw	r2,0(r2)
    f928:	1005003a 	cmpeq	r2,r2,zero
    f92c:	1000061e 	bne	r2,zero,f948 <alt_get_errno+0x3c>
    f930:	00800074 	movhi	r2,1
    f934:	108eb004 	addi	r2,r2,15040
    f938:	10800017 	ldw	r2,0(r2)
    f93c:	103ee83a 	callr	r2
    f940:	e0bfff15 	stw	r2,-4(fp)
    f944:	00000306 	br	f954 <alt_get_errno+0x48>
    f948:	00800074 	movhi	r2,1
    f94c:	10957704 	addi	r2,r2,21980
    f950:	e0bfff15 	stw	r2,-4(fp)
    f954:	e0bfff17 	ldw	r2,-4(fp)
}
    f958:	e037883a 	mov	sp,fp
    f95c:	dfc00117 	ldw	ra,4(sp)
    f960:	df000017 	ldw	fp,0(sp)
    f964:	dec00204 	addi	sp,sp,8
    f968:	f800283a 	ret

0000f96c <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
    f96c:	defff104 	addi	sp,sp,-60
    f970:	dfc00e15 	stw	ra,56(sp)
    f974:	df000d15 	stw	fp,52(sp)
    f978:	df000d04 	addi	fp,sp,52
    f97c:	e13ffa15 	stw	r4,-24(fp)
    f980:	e17ffb15 	stw	r5,-20(fp)
    f984:	e1bffc15 	stw	r6,-16(fp)
    f988:	e1fffd15 	stw	r7,-12(fp)
    f98c:	e0800217 	ldw	r2,8(fp)
    f990:	e0c00617 	ldw	r3,24(fp)
    f994:	e0bffe0d 	sth	r2,-8(fp)
    f998:	e0ffff05 	stb	r3,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
    f99c:	e0bffe0b 	ldhu	r2,-8(fp)
    f9a0:	e0ffff03 	ldbu	r3,-4(fp)
    f9a4:	d8800015 	stw	r2,0(sp)
    f9a8:	e0800317 	ldw	r2,12(fp)
    f9ac:	d8800115 	stw	r2,4(sp)
    f9b0:	e0800417 	ldw	r2,16(fp)
    f9b4:	d8800215 	stw	r2,8(sp)
    f9b8:	e0800517 	ldw	r2,20(fp)
    f9bc:	d8800315 	stw	r2,12(sp)
    f9c0:	d8000415 	stw	zero,16(sp)
    f9c4:	d8000515 	stw	zero,20(sp)
    f9c8:	d8c00615 	stw	r3,24(sp)
    f9cc:	e13ffa17 	ldw	r4,-24(fp)
    f9d0:	e17ffb17 	ldw	r5,-20(fp)
    f9d4:	e1bffc17 	ldw	r6,-16(fp)
    f9d8:	e1fffd17 	ldw	r7,-12(fp)
    f9dc:	000f9f40 	call	f9f4 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
    f9e0:	e037883a 	mov	sp,fp
    f9e4:	dfc00117 	ldw	ra,4(sp)
    f9e8:	df000017 	ldw	fp,0(sp)
    f9ec:	dec00204 	addi	sp,sp,8
    f9f0:	f800283a 	ret

0000f9f4 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
    f9f4:	defff204 	addi	sp,sp,-56
    f9f8:	dfc00d15 	stw	ra,52(sp)
    f9fc:	df000c15 	stw	fp,48(sp)
    fa00:	df000c04 	addi	fp,sp,48
    fa04:	e13ff415 	stw	r4,-48(fp)
    fa08:	e17ff515 	stw	r5,-44(fp)
    fa0c:	e1bff615 	stw	r6,-40(fp)
    fa10:	e1fff715 	stw	r7,-36(fp)
    fa14:	e0800217 	ldw	r2,8(fp)
    fa18:	e0c00817 	ldw	r3,32(fp)
    fa1c:	e0bff80d 	sth	r2,-32(fp)
    fa20:	e0fff905 	stb	r3,-28(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    fa24:	e0bff517 	ldw	r2,-44(fp)
    fa28:	110007c4 	addi	r4,r2,31
    fa2c:	e0bff517 	ldw	r2,-44(fp)
    fa30:	108007c3 	ldbu	r2,31(r2)
    fa34:	10c03fcc 	andi	r3,r2,255
    fa38:	00bfdfc4 	movi	r2,-129
    fa3c:	1886703a 	and	r3,r3,r2
    fa40:	2005883a 	mov	r2,r4
    fa44:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
    fa48:	e13ff417 	ldw	r4,-48(fp)
    fa4c:	e0bff617 	ldw	r2,-40(fp)
    fa50:	11403fcc 	andi	r5,r2,255
    fa54:	20800003 	ldbu	r2,0(r4)
    fa58:	1004703a 	and	r2,r2,zero
    fa5c:	1007883a 	mov	r3,r2
    fa60:	2805883a 	mov	r2,r5
    fa64:	1884b03a 	or	r2,r3,r2
    fa68:	20800005 	stb	r2,0(r4)
    fa6c:	e0bff617 	ldw	r2,-40(fp)
    fa70:	1004d23a 	srli	r2,r2,8
    fa74:	11403fcc 	andi	r5,r2,255
    fa78:	20800043 	ldbu	r2,1(r4)
    fa7c:	1004703a 	and	r2,r2,zero
    fa80:	1007883a 	mov	r3,r2
    fa84:	2805883a 	mov	r2,r5
    fa88:	1884b03a 	or	r2,r3,r2
    fa8c:	20800045 	stb	r2,1(r4)
    fa90:	e0bff617 	ldw	r2,-40(fp)
    fa94:	1004d43a 	srli	r2,r2,16
    fa98:	11403fcc 	andi	r5,r2,255
    fa9c:	20800083 	ldbu	r2,2(r4)
    faa0:	1004703a 	and	r2,r2,zero
    faa4:	1007883a 	mov	r3,r2
    faa8:	2805883a 	mov	r2,r5
    faac:	1884b03a 	or	r2,r3,r2
    fab0:	20800085 	stb	r2,2(r4)
    fab4:	e0bff617 	ldw	r2,-40(fp)
    fab8:	100ad63a 	srli	r5,r2,24
    fabc:	208000c3 	ldbu	r2,3(r4)
    fac0:	1004703a 	and	r2,r2,zero
    fac4:	1007883a 	mov	r3,r2
    fac8:	2805883a 	mov	r2,r5
    facc:	1884b03a 	or	r2,r3,r2
    fad0:	208000c5 	stb	r2,3(r4)
  desc->write_addr               = write_addr;
    fad4:	e13ff417 	ldw	r4,-48(fp)
    fad8:	e0bff717 	ldw	r2,-36(fp)
    fadc:	11403fcc 	andi	r5,r2,255
    fae0:	20800203 	ldbu	r2,8(r4)
    fae4:	1004703a 	and	r2,r2,zero
    fae8:	1007883a 	mov	r3,r2
    faec:	2805883a 	mov	r2,r5
    faf0:	1884b03a 	or	r2,r3,r2
    faf4:	20800205 	stb	r2,8(r4)
    faf8:	e0bff717 	ldw	r2,-36(fp)
    fafc:	1004d23a 	srli	r2,r2,8
    fb00:	11403fcc 	andi	r5,r2,255
    fb04:	20800243 	ldbu	r2,9(r4)
    fb08:	1004703a 	and	r2,r2,zero
    fb0c:	1007883a 	mov	r3,r2
    fb10:	2805883a 	mov	r2,r5
    fb14:	1884b03a 	or	r2,r3,r2
    fb18:	20800245 	stb	r2,9(r4)
    fb1c:	e0bff717 	ldw	r2,-36(fp)
    fb20:	1004d43a 	srli	r2,r2,16
    fb24:	11403fcc 	andi	r5,r2,255
    fb28:	20800283 	ldbu	r2,10(r4)
    fb2c:	1004703a 	and	r2,r2,zero
    fb30:	1007883a 	mov	r3,r2
    fb34:	2805883a 	mov	r2,r5
    fb38:	1884b03a 	or	r2,r3,r2
    fb3c:	20800285 	stb	r2,10(r4)
    fb40:	e0bff717 	ldw	r2,-36(fp)
    fb44:	100ad63a 	srli	r5,r2,24
    fb48:	208002c3 	ldbu	r2,11(r4)
    fb4c:	1004703a 	and	r2,r2,zero
    fb50:	1007883a 	mov	r3,r2
    fb54:	2805883a 	mov	r2,r5
    fb58:	1884b03a 	or	r2,r3,r2
    fb5c:	208002c5 	stb	r2,11(r4)
  desc->next                     = (alt_u32 *) next;
    fb60:	e1bff517 	ldw	r6,-44(fp)
    fb64:	e13ff417 	ldw	r4,-48(fp)
    fb68:	31403fcc 	andi	r5,r6,255
    fb6c:	20800403 	ldbu	r2,16(r4)
    fb70:	1004703a 	and	r2,r2,zero
    fb74:	1007883a 	mov	r3,r2
    fb78:	2805883a 	mov	r2,r5
    fb7c:	1884b03a 	or	r2,r3,r2
    fb80:	20800405 	stb	r2,16(r4)
    fb84:	3004d23a 	srli	r2,r6,8
    fb88:	11403fcc 	andi	r5,r2,255
    fb8c:	20800443 	ldbu	r2,17(r4)
    fb90:	1004703a 	and	r2,r2,zero
    fb94:	1007883a 	mov	r3,r2
    fb98:	2805883a 	mov	r2,r5
    fb9c:	1884b03a 	or	r2,r3,r2
    fba0:	20800445 	stb	r2,17(r4)
    fba4:	3004d43a 	srli	r2,r6,16
    fba8:	11403fcc 	andi	r5,r2,255
    fbac:	20800483 	ldbu	r2,18(r4)
    fbb0:	1004703a 	and	r2,r2,zero
    fbb4:	1007883a 	mov	r3,r2
    fbb8:	2805883a 	mov	r2,r5
    fbbc:	1884b03a 	or	r2,r3,r2
    fbc0:	20800485 	stb	r2,18(r4)
    fbc4:	300ad63a 	srli	r5,r6,24
    fbc8:	208004c3 	ldbu	r2,19(r4)
    fbcc:	1004703a 	and	r2,r2,zero
    fbd0:	1007883a 	mov	r3,r2
    fbd4:	2805883a 	mov	r2,r5
    fbd8:	1884b03a 	or	r2,r3,r2
    fbdc:	208004c5 	stb	r2,19(r4)
  desc->read_addr_pad            = 0x0;
    fbe0:	e0fff417 	ldw	r3,-48(fp)
    fbe4:	18800103 	ldbu	r2,4(r3)
    fbe8:	1004703a 	and	r2,r2,zero
    fbec:	18800105 	stb	r2,4(r3)
    fbf0:	18800143 	ldbu	r2,5(r3)
    fbf4:	1004703a 	and	r2,r2,zero
    fbf8:	18800145 	stb	r2,5(r3)
    fbfc:	18800183 	ldbu	r2,6(r3)
    fc00:	1004703a 	and	r2,r2,zero
    fc04:	18800185 	stb	r2,6(r3)
    fc08:	188001c3 	ldbu	r2,7(r3)
    fc0c:	1004703a 	and	r2,r2,zero
    fc10:	188001c5 	stb	r2,7(r3)
  desc->write_addr_pad           = 0x0;
    fc14:	e0fff417 	ldw	r3,-48(fp)
    fc18:	18800303 	ldbu	r2,12(r3)
    fc1c:	1004703a 	and	r2,r2,zero
    fc20:	18800305 	stb	r2,12(r3)
    fc24:	18800343 	ldbu	r2,13(r3)
    fc28:	1004703a 	and	r2,r2,zero
    fc2c:	18800345 	stb	r2,13(r3)
    fc30:	18800383 	ldbu	r2,14(r3)
    fc34:	1004703a 	and	r2,r2,zero
    fc38:	18800385 	stb	r2,14(r3)
    fc3c:	188003c3 	ldbu	r2,15(r3)
    fc40:	1004703a 	and	r2,r2,zero
    fc44:	188003c5 	stb	r2,15(r3)
  desc->next_pad                 = 0x0;
    fc48:	e0fff417 	ldw	r3,-48(fp)
    fc4c:	18800503 	ldbu	r2,20(r3)
    fc50:	1004703a 	and	r2,r2,zero
    fc54:	18800505 	stb	r2,20(r3)
    fc58:	18800543 	ldbu	r2,21(r3)
    fc5c:	1004703a 	and	r2,r2,zero
    fc60:	18800545 	stb	r2,21(r3)
    fc64:	18800583 	ldbu	r2,22(r3)
    fc68:	1004703a 	and	r2,r2,zero
    fc6c:	18800585 	stb	r2,22(r3)
    fc70:	188005c3 	ldbu	r2,23(r3)
    fc74:	1004703a 	and	r2,r2,zero
    fc78:	188005c5 	stb	r2,23(r3)
  desc->bytes_to_transfer        = length_or_eop;
    fc7c:	e13ff417 	ldw	r4,-48(fp)
    fc80:	e0bff80b 	ldhu	r2,-32(fp)
    fc84:	11403fcc 	andi	r5,r2,255
    fc88:	20800603 	ldbu	r2,24(r4)
    fc8c:	1004703a 	and	r2,r2,zero
    fc90:	1007883a 	mov	r3,r2
    fc94:	2805883a 	mov	r2,r5
    fc98:	1884b03a 	or	r2,r3,r2
    fc9c:	20800605 	stb	r2,24(r4)
    fca0:	e0bff80b 	ldhu	r2,-32(fp)
    fca4:	1004d23a 	srli	r2,r2,8
    fca8:	117fffcc 	andi	r5,r2,65535
    fcac:	20800643 	ldbu	r2,25(r4)
    fcb0:	1004703a 	and	r2,r2,zero
    fcb4:	1007883a 	mov	r3,r2
    fcb8:	2805883a 	mov	r2,r5
    fcbc:	1884b03a 	or	r2,r3,r2
    fcc0:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
    fcc4:	e0fff417 	ldw	r3,-48(fp)
    fcc8:	18800703 	ldbu	r2,28(r3)
    fccc:	1004703a 	and	r2,r2,zero
    fcd0:	18800705 	stb	r2,28(r3)
    fcd4:	18800743 	ldbu	r2,29(r3)
    fcd8:	1004703a 	and	r2,r2,zero
    fcdc:	18800745 	stb	r2,29(r3)
  desc->status                   = 0x0;
    fce0:	e0bff417 	ldw	r2,-48(fp)
    fce4:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
    fce8:	e0800617 	ldw	r2,24(fp)
    fcec:	1007883a 	mov	r3,r2
    fcf0:	e0bff417 	ldw	r2,-48(fp)
    fcf4:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
    fcf8:	e0800717 	ldw	r2,28(fp)
    fcfc:	1007883a 	mov	r3,r2
    fd00:	e0bff417 	ldw	r2,-48(fp)
    fd04:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
    fd08:	e0800317 	ldw	r2,12(fp)
    fd0c:	1005003a 	cmpeq	r2,r2,zero
    fd10:	1000031e 	bne	r2,zero,fd20 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
    fd14:	00bfe044 	movi	r2,-127
    fd18:	e0bfff05 	stb	r2,-4(fp)
    fd1c:	00000206 	br	fd28 <alt_avalon_sgdma_construct_descriptor_burst+0x334>
    fd20:	00bfe004 	movi	r2,-128
    fd24:	e0bfff05 	stb	r2,-4(fp)
    fd28:	e0800417 	ldw	r2,16(fp)
    fd2c:	1005003a 	cmpeq	r2,r2,zero
    fd30:	1000031e 	bne	r2,zero,fd40 <alt_avalon_sgdma_construct_descriptor_burst+0x34c>
    fd34:	00800084 	movi	r2,2
    fd38:	e0bffe05 	stb	r2,-8(fp)
    fd3c:	00000106 	br	fd44 <alt_avalon_sgdma_construct_descriptor_burst+0x350>
    fd40:	e03ffe05 	stb	zero,-8(fp)
    fd44:	e0ffff03 	ldbu	r3,-4(fp)
    fd48:	e13ffe03 	ldbu	r4,-8(fp)
    fd4c:	1904b03a 	or	r2,r3,r4
    fd50:	e0bffd05 	stb	r2,-12(fp)
    fd54:	e0800517 	ldw	r2,20(fp)
    fd58:	1005003a 	cmpeq	r2,r2,zero
    fd5c:	1000031e 	bne	r2,zero,fd6c <alt_avalon_sgdma_construct_descriptor_burst+0x378>
    fd60:	00800104 	movi	r2,4
    fd64:	e0bffc05 	stb	r2,-16(fp)
    fd68:	00000106 	br	fd70 <alt_avalon_sgdma_construct_descriptor_burst+0x37c>
    fd6c:	e03ffc05 	stb	zero,-16(fp)
    fd70:	e0fffd03 	ldbu	r3,-12(fp)
    fd74:	e13ffc03 	ldbu	r4,-16(fp)
    fd78:	1904b03a 	or	r2,r3,r4
    fd7c:	e0bffb05 	stb	r2,-20(fp)
    fd80:	e0bff903 	ldbu	r2,-28(fp)
    fd84:	1005003a 	cmpeq	r2,r2,zero
    fd88:	1000051e 	bne	r2,zero,fda0 <alt_avalon_sgdma_construct_descriptor_burst+0x3ac>
    fd8c:	e0bff903 	ldbu	r2,-28(fp)
    fd90:	108003cc 	andi	r2,r2,15
    fd94:	100490fa 	slli	r2,r2,3
    fd98:	e0bffa05 	stb	r2,-24(fp)
    fd9c:	00000106 	br	fda4 <alt_avalon_sgdma_construct_descriptor_burst+0x3b0>
    fda0:	e03ffa05 	stb	zero,-24(fp)
    fda4:	e0fffb03 	ldbu	r3,-20(fp)
    fda8:	e13ffa03 	ldbu	r4,-24(fp)
    fdac:	1904b03a 	or	r2,r3,r4
    fdb0:	1007883a 	mov	r3,r2
    fdb4:	e0bff417 	ldw	r2,-48(fp)
    fdb8:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
    fdbc:	e13ff417 	ldw	r4,-48(fp)
    fdc0:	01400804 	movi	r5,32
    fdc4:	0010dd80 	call	10dd8 <alt_remap_uncached>
}
    fdc8:	e037883a 	mov	sp,fp
    fdcc:	dfc00117 	ldw	ra,4(sp)
    fdd0:	df000017 	ldw	fp,0(sp)
    fdd4:	dec00204 	addi	sp,sp,8
    fdd8:	f800283a 	ret

0000fddc <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
    fddc:	defff904 	addi	sp,sp,-28
    fde0:	dfc00615 	stw	ra,24(sp)
    fde4:	df000515 	stw	fp,20(sp)
    fde8:	df000504 	addi	fp,sp,20
    fdec:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
    fdf0:	e0bfff17 	ldw	r2,-4(fp)
    fdf4:	e0bffe15 	stw	r2,-8(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
    fdf8:	e0bffe17 	ldw	r2,-8(fp)
    fdfc:	10800317 	ldw	r2,12(r2)
    fe00:	11000404 	addi	r4,r2,16
    fe04:	e0bffe17 	ldw	r2,-8(fp)
    fe08:	10800317 	ldw	r2,12(r2)
    fe0c:	10800404 	addi	r2,r2,16
    fe10:	10800037 	ldwio	r2,0(r2)
    fe14:	10a00034 	orhi	r2,r2,32768
    fe18:	1007883a 	mov	r3,r2
    fe1c:	2005883a 	mov	r2,r4
    fe20:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    fe24:	e0bffe17 	ldw	r2,-8(fp)
    fe28:	10800317 	ldw	r2,12(r2)
    fe2c:	10800404 	addi	r2,r2,16
    fe30:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
    fe34:	e0bffe17 	ldw	r2,-8(fp)
    fe38:	10800917 	ldw	r2,36(r2)
    fe3c:	1005003a 	cmpeq	r2,r2,zero
    fe40:	1000111e 	bne	r2,zero,fe88 <alt_avalon_sgdma_irq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe44:	0005303a 	rdctl	r2,status
    fe48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe4c:	e0fffc17 	ldw	r3,-16(fp)
    fe50:	00bfff84 	movi	r2,-2
    fe54:	1884703a 	and	r2,r3,r2
    fe58:	1001703a 	wrctl	status,r2
  
  return context;
    fe5c:	e0bffc17 	ldw	r2,-16(fp)
    cpu_sr = alt_irq_disable_all();
    fe60:	e0bffd15 	stw	r2,-12(fp)
    (dev->callback)(dev->callback_context);
    fe64:	e0bffe17 	ldw	r2,-8(fp)
    fe68:	10c00917 	ldw	r3,36(r2)
    fe6c:	e0bffe17 	ldw	r2,-8(fp)
    fe70:	11000a17 	ldw	r4,40(r2)
    fe74:	183ee83a 	callr	r3
    fe78:	e0bffd17 	ldw	r2,-12(fp)
    fe7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fe80:	e0bffb17 	ldw	r2,-20(fp)
    fe84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
    fe88:	e037883a 	mov	sp,fp
    fe8c:	dfc00117 	ldw	ra,4(sp)
    fe90:	df000017 	ldw	fp,0(sp)
    fe94:	dec00204 	addi	sp,sp,8
    fe98:	f800283a 	ret

0000fe9c <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
    fe9c:	defffa04 	addi	sp,sp,-24
    fea0:	dfc00515 	stw	ra,20(sp)
    fea4:	df000415 	stw	fp,16(sp)
    fea8:	df000404 	addi	fp,sp,16
    feac:	e13ffd15 	stw	r4,-12(fp)
    feb0:	e17ffe15 	stw	r5,-8(fp)
    feb4:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    feb8:	e0bffd17 	ldw	r2,-12(fp)
    febc:	10800317 	ldw	r2,12(r2)
    fec0:	10800404 	addi	r2,r2,16
    fec4:	1007883a 	mov	r3,r2
    fec8:	00800074 	movhi	r2,1
    fecc:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    fed0:	e0bffd17 	ldw	r2,-12(fp)
    fed4:	10800317 	ldw	r2,12(r2)
    fed8:	10800404 	addi	r2,r2,16
    fedc:	1007883a 	mov	r3,r2
    fee0:	00800074 	movhi	r2,1
    fee4:	18800035 	stwio	r2,0(r3)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
    fee8:	e0bffd17 	ldw	r2,-12(fp)
    feec:	10800317 	ldw	r2,12(r2)
    fef0:	10800404 	addi	r2,r2,16
    fef4:	10000035 	stwio	zero,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    fef8:	e0bffd17 	ldw	r2,-12(fp)
    fefc:	10800317 	ldw	r2,12(r2)
    ff00:	1007883a 	mov	r3,r2
    ff04:	00803fc4 	movi	r2,255
    ff08:	18800035 	stwio	r2,0(r3)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
    ff0c:	e13ffd17 	ldw	r4,-12(fp)
    ff10:	d1600d04 	addi	r5,gp,-32716
    ff14:	001044c0 	call	1044c <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
    ff18:	d8000015 	stw	zero,0(sp)
    ff1c:	e13ffe17 	ldw	r4,-8(fp)
    ff20:	e17fff17 	ldw	r5,-4(fp)
    ff24:	01800074 	movhi	r6,1
    ff28:	31bf7704 	addi	r6,r6,-548
    ff2c:	e1fffd17 	ldw	r7,-12(fp)
    ff30:	00106d80 	call	106d8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
    ff34:	e037883a 	mov	sp,fp
    ff38:	dfc00117 	ldw	ra,4(sp)
    ff3c:	df000017 	ldw	fp,0(sp)
    ff40:	dec00204 	addi	sp,sp,8
    ff44:	f800283a 	ret

0000ff48 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    ff48:	defffa04 	addi	sp,sp,-24
    ff4c:	dfc00515 	stw	ra,20(sp)
    ff50:	df000415 	stw	fp,16(sp)
    ff54:	df000404 	addi	fp,sp,16
    ff58:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    ff5c:	e0bfff17 	ldw	r2,-4(fp)
    ff60:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    ff64:	e0bfff17 	ldw	r2,-4(fp)
    ff68:	10800104 	addi	r2,r2,4
    ff6c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff70:	0005303a 	rdctl	r2,status
    ff74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff78:	e0fffd17 	ldw	r3,-12(fp)
    ff7c:	00bfff84 	movi	r2,-2
    ff80:	1884703a 	and	r2,r3,r2
    ff84:	1001703a 	wrctl	status,r2
  
  return context;
    ff88:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    ff8c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    ff90:	0010eb00 	call	10eb0 <alt_tick>
    ff94:	e0bffe17 	ldw	r2,-8(fp)
    ff98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff9c:	e0bffc17 	ldw	r2,-16(fp)
    ffa0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    ffa4:	e037883a 	mov	sp,fp
    ffa8:	dfc00117 	ldw	ra,4(sp)
    ffac:	df000017 	ldw	fp,0(sp)
    ffb0:	dec00204 	addi	sp,sp,8
    ffb4:	f800283a 	ret

0000ffb8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    ffb8:	defff804 	addi	sp,sp,-32
    ffbc:	dfc00715 	stw	ra,28(sp)
    ffc0:	df000615 	stw	fp,24(sp)
    ffc4:	df000604 	addi	fp,sp,24
    ffc8:	e13ffc15 	stw	r4,-16(fp)
    ffcc:	e17ffd15 	stw	r5,-12(fp)
    ffd0:	e1bffe15 	stw	r6,-8(fp)
    ffd4:	e1ffff15 	stw	r7,-4(fp)
    ffd8:	e0bfff17 	ldw	r2,-4(fp)
    ffdc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    ffe0:	00800074 	movhi	r2,1
    ffe4:	10957f04 	addi	r2,r2,22012
    ffe8:	10800017 	ldw	r2,0(r2)
    ffec:	1004c03a 	cmpne	r2,r2,zero
    fff0:	1000041e 	bne	r2,zero,10004 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    fff4:	00c00074 	movhi	r3,1
    fff8:	18d57f04 	addi	r3,r3,22012
    fffc:	e0bffb17 	ldw	r2,-20(fp)
   10000:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10004:	e0bffc17 	ldw	r2,-16(fp)
   10008:	10800104 	addi	r2,r2,4
   1000c:	1007883a 	mov	r3,r2
   10010:	008001c4 	movi	r2,7
   10014:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10018:	d8000015 	stw	zero,0(sp)
   1001c:	e13ffd17 	ldw	r4,-12(fp)
   10020:	e17ffe17 	ldw	r5,-8(fp)
   10024:	01800074 	movhi	r6,1
   10028:	31bfd204 	addi	r6,r6,-184
   1002c:	e1fffc17 	ldw	r7,-16(fp)
   10030:	00106d80 	call	106d8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10034:	e037883a 	mov	sp,fp
   10038:	dfc00117 	ldw	ra,4(sp)
   1003c:	df000017 	ldw	fp,0(sp)
   10040:	dec00204 	addi	sp,sp,8
   10044:	f800283a 	ret

00010048 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
   10048:	deffe504 	addi	sp,sp,-108
   1004c:	dfc01915 	stw	ra,100(sp)
   10050:	df001815 	stw	fp,96(sp)
   10054:	dcc01715 	stw	r19,92(sp)
   10058:	dc801615 	stw	r18,88(sp)
   1005c:	dc401515 	stw	r17,84(sp)
   10060:	dc001415 	stw	r16,80(sp)
   10064:	df001404 	addi	fp,sp,80
   10068:	e13ffd15 	stw	r4,-12(fp)
   1006c:	e17ffe15 	stw	r5,-8(fp)
   10070:	e1c00615 	stw	r7,24(fp)
   10074:	e1bfff15 	stw	r6,-4(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
   10078:	00800044 	movi	r2,1
   1007c:	e0bff415 	stw	r2,-48(fp)

  const char* separator = 
    "+---------------+-----+-----------+---------------+-----------+\n";
   10080:	00800074 	movhi	r2,1
   10084:	1087ba04 	addi	r2,r2,7912
   10088:	e0bff315 	stw	r2,-52(fp)
  const char* column_header = 
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";
   1008c:	00800074 	movhi	r2,1
   10090:	1087cb04 	addi	r2,r2,7980
   10094:	e0bff215 	stw	r2,-56(fp)

  PERF_STOP_MEASURING (perf_base);
   10098:	e0bffd17 	ldw	r2,-12(fp)
   1009c:	10000035 	stwio	zero,0(r2)

  va_start (name_args, num_sections);
   100a0:	e0800604 	addi	r2,fp,24
   100a4:	e0bffc15 	stw	r2,-16(fp)

  total_clocks = perf_get_total_time (perf_base);
   100a8:	e13ffd17 	ldw	r4,-12(fp)
   100ac:	001108c0 	call	1108c <perf_get_total_time>
   100b0:	1009883a 	mov	r4,r2
   100b4:	180b883a 	mov	r5,r3
   100b8:	e13ff815 	stw	r4,-32(fp)
   100bc:	e17ff915 	stw	r5,-28(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
   100c0:	e13ff817 	ldw	r4,-32(fp)
   100c4:	e17ff917 	ldw	r5,-28(fp)
   100c8:	00117200 	call	11720 <__floatundidf>
   100cc:	1021883a 	mov	r16,r2
   100d0:	1823883a 	mov	r17,r3
   100d4:	e13ffe17 	ldw	r4,-8(fp)
   100d8:	000d9d80 	call	d9d8 <__floatunsidf>
   100dc:	100f883a 	mov	r7,r2
   100e0:	1811883a 	mov	r8,r3
   100e4:	8009883a 	mov	r4,r16
   100e8:	880b883a 	mov	r5,r17
   100ec:	380d883a 	mov	r6,r7
   100f0:	400f883a 	mov	r7,r8
   100f4:	000419c0 	call	419c <__divdf3>
   100f8:	1009883a 	mov	r4,r2
   100fc:	180b883a 	mov	r5,r3
   10100:	e13ffa15 	stw	r4,-24(fp)
   10104:	e17ffb15 	stw	r5,-20(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
   10108:	e0bff317 	ldw	r2,-52(fp)
   1010c:	d8800115 	stw	r2,4(sp)
   10110:	e0bff217 	ldw	r2,-56(fp)
   10114:	d8800215 	stw	r2,8(sp)
   10118:	e0bff317 	ldw	r2,-52(fp)
   1011c:	d8800315 	stw	r2,12(sp)
   10120:	e0bff917 	ldw	r2,-28(fp)
   10124:	d8800015 	stw	r2,0(sp)
   10128:	e1fff817 	ldw	r7,-32(fp)
   1012c:	01000074 	movhi	r4,1
   10130:	2107dc04 	addi	r4,r4,8048
   10134:	e17ffa17 	ldw	r5,-24(fp)
   10138:	e1bffb17 	ldw	r6,-20(fp)
   1013c:	00062800 	call	6280 <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
   10140:	e0fffc17 	ldw	r3,-16(fp)
   10144:	18800104 	addi	r2,r3,4
   10148:	e0bffc15 	stw	r2,-16(fp)
   1014c:	1805883a 	mov	r2,r3
   10150:	10800017 	ldw	r2,0(r2)
   10154:	e0bff515 	stw	r2,-44(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
   10158:	00800044 	movi	r2,1
   1015c:	e0bff415 	stw	r2,-48(fp)
   10160:	00005106 	br	102a8 <perf_print_formatted_report+0x260>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
   10164:	e13ffd17 	ldw	r4,-12(fp)
   10168:	e17ff417 	ldw	r5,-48(fp)
   1016c:	0010fdc0 	call	10fdc <perf_get_section_time>
   10170:	1009883a 	mov	r4,r2
   10174:	180b883a 	mov	r5,r3
   10178:	e13ff615 	stw	r4,-40(fp)
   1017c:	e17ff715 	stw	r5,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   10180:	e13ff617 	ldw	r4,-40(fp)
   10184:	e17ff717 	ldw	r5,-36(fp)
   10188:	00117200 	call	11720 <__floatundidf>
   1018c:	100b883a 	mov	r5,r2
   10190:	180d883a 	mov	r6,r3
   10194:	2809883a 	mov	r4,r5
   10198:	300b883a 	mov	r5,r6
   1019c:	000d883a 	mov	r6,zero
   101a0:	01d01674 	movhi	r7,16473
   101a4:	0003dd80 	call	3dd8 <__muldf3>
   101a8:	1009883a 	mov	r4,r2
   101ac:	180b883a 	mov	r5,r3
   101b0:	2021883a 	mov	r16,r4
   101b4:	2823883a 	mov	r17,r5
   101b8:	e13ff817 	ldw	r4,-32(fp)
   101bc:	e17ff917 	ldw	r5,-28(fp)
   101c0:	00117200 	call	11720 <__floatundidf>
   101c4:	100f883a 	mov	r7,r2
   101c8:	1811883a 	mov	r8,r3
   101cc:	8009883a 	mov	r4,r16
   101d0:	880b883a 	mov	r5,r17
   101d4:	380d883a 	mov	r6,r7
   101d8:	400f883a 	mov	r7,r8
   101dc:	000419c0 	call	419c <__divdf3>
   101e0:	1009883a 	mov	r4,r2
   101e4:	180b883a 	mov	r5,r3
   101e8:	2025883a 	mov	r18,r4
   101ec:	2827883a 	mov	r19,r5
   101f0:	e13ff617 	ldw	r4,-40(fp)
   101f4:	e17ff717 	ldw	r5,-36(fp)
   101f8:	00117200 	call	11720 <__floatundidf>
   101fc:	1021883a 	mov	r16,r2
   10200:	1823883a 	mov	r17,r3
   10204:	e13ffe17 	ldw	r4,-8(fp)
   10208:	000d9d80 	call	d9d8 <__floatunsidf>
   1020c:	100f883a 	mov	r7,r2
   10210:	1811883a 	mov	r8,r3
   10214:	8009883a 	mov	r4,r16
   10218:	880b883a 	mov	r5,r17
   1021c:	380d883a 	mov	r6,r7
   10220:	400f883a 	mov	r7,r8
   10224:	000419c0 	call	419c <__divdf3>
   10228:	1009883a 	mov	r4,r2
   1022c:	180b883a 	mov	r5,r3
   10230:	2021883a 	mov	r16,r4
   10234:	2823883a 	mov	r17,r5
   10238:	e13ffd17 	ldw	r4,-12(fp)
   1023c:	e17ff417 	ldw	r5,-48(fp)
   10240:	00110e00 	call	110e0 <perf_get_num_starts>
   10244:	1007883a 	mov	r3,r2
   10248:	dc000015 	stw	r16,0(sp)
   1024c:	dc400115 	stw	r17,4(sp)
   10250:	e0bff617 	ldw	r2,-40(fp)
   10254:	d8800215 	stw	r2,8(sp)
   10258:	e0bff717 	ldw	r2,-36(fp)
   1025c:	d8800315 	stw	r2,12(sp)
   10260:	d8c00415 	stw	r3,16(sp)
   10264:	e0bff317 	ldw	r2,-52(fp)
   10268:	d8800515 	stw	r2,20(sp)
   1026c:	01000074 	movhi	r4,1
   10270:	2107f104 	addi	r4,r4,8132
   10274:	e17ff517 	ldw	r5,-44(fp)
   10278:	900d883a 	mov	r6,r18
   1027c:	980f883a 	mov	r7,r19
   10280:	00062800 	call	6280 <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
   10284:	e0fffc17 	ldw	r3,-16(fp)
   10288:	18800104 	addi	r2,r3,4
   1028c:	e0bffc15 	stw	r2,-16(fp)
   10290:	1805883a 	mov	r2,r3
   10294:	10800017 	ldw	r2,0(r2)
   10298:	e0bff515 	stw	r2,-44(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
   1029c:	e0bff417 	ldw	r2,-48(fp)
   102a0:	10800044 	addi	r2,r2,1
   102a4:	e0bff415 	stw	r2,-48(fp)
   102a8:	e0fff417 	ldw	r3,-48(fp)
   102ac:	e0bfff17 	ldw	r2,-4(fp)
   102b0:	10ffac0e 	bge	r2,r3,10164 <perf_print_formatted_report+0x11c>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
   102b4:	0005883a 	mov	r2,zero
}
   102b8:	e037883a 	mov	sp,fp
   102bc:	dfc00517 	ldw	ra,20(sp)
   102c0:	df000417 	ldw	fp,16(sp)
   102c4:	dcc00317 	ldw	r19,12(sp)
   102c8:	dc800217 	ldw	r18,8(sp)
   102cc:	dc400117 	ldw	r17,4(sp)
   102d0:	dc000017 	ldw	r16,0(sp)
   102d4:	dec00704 	addi	sp,sp,28
   102d8:	f800283a 	ret

000102dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   102dc:	defff404 	addi	sp,sp,-48
   102e0:	df000b15 	stw	fp,44(sp)
   102e4:	df000b04 	addi	fp,sp,44
   102e8:	e13ffb15 	stw	r4,-20(fp)
   102ec:	e17ffc15 	stw	r5,-16(fp)
   102f0:	e1bffd15 	stw	r6,-12(fp)
   102f4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   102f8:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   102fc:	00800074 	movhi	r2,1
   10300:	10957f04 	addi	r2,r2,22012
   10304:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10308:	1005003a 	cmpeq	r2,r2,zero
   1030c:	1000411e 	bne	r2,zero,10414 <alt_alarm_start+0x138>
  {
    if (alarm)
   10310:	e0bffb17 	ldw	r2,-20(fp)
   10314:	1005003a 	cmpeq	r2,r2,zero
   10318:	10003b1e 	bne	r2,zero,10408 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   1031c:	e0fffb17 	ldw	r3,-20(fp)
   10320:	e0bffd17 	ldw	r2,-12(fp)
   10324:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   10328:	e0fffb17 	ldw	r3,-20(fp)
   1032c:	e0bffe17 	ldw	r2,-8(fp)
   10330:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10334:	0005303a 	rdctl	r2,status
   10338:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1033c:	e0fff817 	ldw	r3,-32(fp)
   10340:	00bfff84 	movi	r2,-2
   10344:	1884703a 	and	r2,r3,r2
   10348:	1001703a 	wrctl	status,r2
  
  return context;
   1034c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10350:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10354:	00800074 	movhi	r2,1
   10358:	10958004 	addi	r2,r2,22016
   1035c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10360:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10364:	e0fffc17 	ldw	r3,-16(fp)
   10368:	e0bff917 	ldw	r2,-28(fp)
   1036c:	1885883a 	add	r2,r3,r2
   10370:	10c00044 	addi	r3,r2,1
   10374:	e0bffb17 	ldw	r2,-20(fp)
   10378:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1037c:	e0bffb17 	ldw	r2,-20(fp)
   10380:	10c00217 	ldw	r3,8(r2)
   10384:	e0bff917 	ldw	r2,-28(fp)
   10388:	1880042e 	bgeu	r3,r2,1039c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   1038c:	e0fffb17 	ldw	r3,-20(fp)
   10390:	00800044 	movi	r2,1
   10394:	18800405 	stb	r2,16(r3)
   10398:	00000206 	br	103a4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   1039c:	e0bffb17 	ldw	r2,-20(fp)
   103a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   103a4:	e0fffb17 	ldw	r3,-20(fp)
   103a8:	00800074 	movhi	r2,1
   103ac:	108eb504 	addi	r2,r2,15060
   103b0:	e0bff615 	stw	r2,-40(fp)
   103b4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   103b8:	e0fff717 	ldw	r3,-36(fp)
   103bc:	e0bff617 	ldw	r2,-40(fp)
   103c0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   103c4:	e0bff617 	ldw	r2,-40(fp)
   103c8:	10c00017 	ldw	r3,0(r2)
   103cc:	e0bff717 	ldw	r2,-36(fp)
   103d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   103d4:	e0bff617 	ldw	r2,-40(fp)
   103d8:	10c00017 	ldw	r3,0(r2)
   103dc:	e0bff717 	ldw	r2,-36(fp)
   103e0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   103e4:	e0fff617 	ldw	r3,-40(fp)
   103e8:	e0bff717 	ldw	r2,-36(fp)
   103ec:	18800015 	stw	r2,0(r3)
   103f0:	e0bffa17 	ldw	r2,-24(fp)
   103f4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103f8:	e0bff517 	ldw	r2,-44(fp)
   103fc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10400:	e03fff15 	stw	zero,-4(fp)
   10404:	00000506 	br	1041c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   10408:	00bffa84 	movi	r2,-22
   1040c:	e0bfff15 	stw	r2,-4(fp)
   10410:	00000206 	br	1041c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   10414:	00bfde84 	movi	r2,-134
   10418:	e0bfff15 	stw	r2,-4(fp)
   1041c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   10420:	e037883a 	mov	sp,fp
   10424:	df000017 	ldw	fp,0(sp)
   10428:	dec00104 	addi	sp,sp,4
   1042c:	f800283a 	ret

00010430 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10430:	deffff04 	addi	sp,sp,-4
   10434:	df000015 	stw	fp,0(sp)
   10438:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1043c:	e037883a 	mov	sp,fp
   10440:	df000017 	ldw	fp,0(sp)
   10444:	dec00104 	addi	sp,sp,4
   10448:	f800283a 	ret

0001044c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1044c:	defff904 	addi	sp,sp,-28
   10450:	dfc00615 	stw	ra,24(sp)
   10454:	df000515 	stw	fp,20(sp)
   10458:	df000504 	addi	fp,sp,20
   1045c:	e13ffd15 	stw	r4,-12(fp)
   10460:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10464:	e0bffd17 	ldw	r2,-12(fp)
   10468:	1005003a 	cmpeq	r2,r2,zero
   1046c:	1000041e 	bne	r2,zero,10480 <alt_dev_llist_insert+0x34>
   10470:	e0bffd17 	ldw	r2,-12(fp)
   10474:	10800217 	ldw	r2,8(r2)
   10478:	1004c03a 	cmpne	r2,r2,zero
   1047c:	1000071e 	bne	r2,zero,1049c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   10480:	00105000 	call	10500 <alt_get_errno>
   10484:	1007883a 	mov	r3,r2
   10488:	00800584 	movi	r2,22
   1048c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10490:	00bffa84 	movi	r2,-22
   10494:	e0bfff15 	stw	r2,-4(fp)
   10498:	00001306 	br	104e8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1049c:	e0fffd17 	ldw	r3,-12(fp)
   104a0:	e0bffe17 	ldw	r2,-8(fp)
   104a4:	e0bffb15 	stw	r2,-20(fp)
   104a8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   104ac:	e0fffc17 	ldw	r3,-16(fp)
   104b0:	e0bffb17 	ldw	r2,-20(fp)
   104b4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   104b8:	e0bffb17 	ldw	r2,-20(fp)
   104bc:	10c00017 	ldw	r3,0(r2)
   104c0:	e0bffc17 	ldw	r2,-16(fp)
   104c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   104c8:	e0bffb17 	ldw	r2,-20(fp)
   104cc:	10c00017 	ldw	r3,0(r2)
   104d0:	e0bffc17 	ldw	r2,-16(fp)
   104d4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   104d8:	e0fffb17 	ldw	r3,-20(fp)
   104dc:	e0bffc17 	ldw	r2,-16(fp)
   104e0:	18800015 	stw	r2,0(r3)

  return 0;  
   104e4:	e03fff15 	stw	zero,-4(fp)
   104e8:	e0bfff17 	ldw	r2,-4(fp)
}
   104ec:	e037883a 	mov	sp,fp
   104f0:	dfc00117 	ldw	ra,4(sp)
   104f4:	df000017 	ldw	fp,0(sp)
   104f8:	dec00204 	addi	sp,sp,8
   104fc:	f800283a 	ret

00010500 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10500:	defffd04 	addi	sp,sp,-12
   10504:	dfc00215 	stw	ra,8(sp)
   10508:	df000115 	stw	fp,4(sp)
   1050c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10510:	00800074 	movhi	r2,1
   10514:	108eb004 	addi	r2,r2,15040
   10518:	10800017 	ldw	r2,0(r2)
   1051c:	1005003a 	cmpeq	r2,r2,zero
   10520:	1000061e 	bne	r2,zero,1053c <alt_get_errno+0x3c>
   10524:	00800074 	movhi	r2,1
   10528:	108eb004 	addi	r2,r2,15040
   1052c:	10800017 	ldw	r2,0(r2)
   10530:	103ee83a 	callr	r2
   10534:	e0bfff15 	stw	r2,-4(fp)
   10538:	00000306 	br	10548 <alt_get_errno+0x48>
   1053c:	00800074 	movhi	r2,1
   10540:	10957704 	addi	r2,r2,21980
   10544:	e0bfff15 	stw	r2,-4(fp)
   10548:	e0bfff17 	ldw	r2,-4(fp)
}
   1054c:	e037883a 	mov	sp,fp
   10550:	dfc00117 	ldw	ra,4(sp)
   10554:	df000017 	ldw	fp,0(sp)
   10558:	dec00204 	addi	sp,sp,8
   1055c:	f800283a 	ret

00010560 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10560:	defffd04 	addi	sp,sp,-12
   10564:	dfc00215 	stw	ra,8(sp)
   10568:	df000115 	stw	fp,4(sp)
   1056c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10570:	00bfff04 	movi	r2,-4
   10574:	00c00074 	movhi	r3,1
   10578:	18c61e04 	addi	r3,r3,6264
   1057c:	1885883a 	add	r2,r3,r2
   10580:	e0bfff15 	stw	r2,-4(fp)
   10584:	00000606 	br	105a0 <_do_ctors+0x40>
        (*ctor) (); 
   10588:	e0bfff17 	ldw	r2,-4(fp)
   1058c:	10800017 	ldw	r2,0(r2)
   10590:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10594:	e0bfff17 	ldw	r2,-4(fp)
   10598:	10bfff04 	addi	r2,r2,-4
   1059c:	e0bfff15 	stw	r2,-4(fp)
   105a0:	e0ffff17 	ldw	r3,-4(fp)
   105a4:	00800074 	movhi	r2,1
   105a8:	10861d04 	addi	r2,r2,6260
   105ac:	18bff62e 	bgeu	r3,r2,10588 <_do_ctors+0x28>
        (*ctor) (); 
}
   105b0:	e037883a 	mov	sp,fp
   105b4:	dfc00117 	ldw	ra,4(sp)
   105b8:	df000017 	ldw	fp,0(sp)
   105bc:	dec00204 	addi	sp,sp,8
   105c0:	f800283a 	ret

000105c4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   105c4:	defffd04 	addi	sp,sp,-12
   105c8:	dfc00215 	stw	ra,8(sp)
   105cc:	df000115 	stw	fp,4(sp)
   105d0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   105d4:	00bfff04 	movi	r2,-4
   105d8:	00c00074 	movhi	r3,1
   105dc:	18c61e04 	addi	r3,r3,6264
   105e0:	1885883a 	add	r2,r3,r2
   105e4:	e0bfff15 	stw	r2,-4(fp)
   105e8:	00000606 	br	10604 <_do_dtors+0x40>
        (*dtor) (); 
   105ec:	e0bfff17 	ldw	r2,-4(fp)
   105f0:	10800017 	ldw	r2,0(r2)
   105f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   105f8:	e0bfff17 	ldw	r2,-4(fp)
   105fc:	10bfff04 	addi	r2,r2,-4
   10600:	e0bfff15 	stw	r2,-4(fp)
   10604:	e0ffff17 	ldw	r3,-4(fp)
   10608:	00800074 	movhi	r2,1
   1060c:	10861e04 	addi	r2,r2,6264
   10610:	18bff62e 	bgeu	r3,r2,105ec <_do_dtors+0x28>
        (*dtor) (); 
}
   10614:	e037883a 	mov	sp,fp
   10618:	dfc00117 	ldw	ra,4(sp)
   1061c:	df000017 	ldw	fp,0(sp)
   10620:	dec00204 	addi	sp,sp,8
   10624:	f800283a 	ret

00010628 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10628:	defff904 	addi	sp,sp,-28
   1062c:	dfc00615 	stw	ra,24(sp)
   10630:	df000515 	stw	fp,20(sp)
   10634:	df000504 	addi	fp,sp,20
   10638:	e13ffd15 	stw	r4,-12(fp)
   1063c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10640:	e0bffe17 	ldw	r2,-8(fp)
   10644:	10800017 	ldw	r2,0(r2)
   10648:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1064c:	e13ffd17 	ldw	r4,-12(fp)
   10650:	000687c0 	call	687c <strlen>
   10654:	10800044 	addi	r2,r2,1
   10658:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1065c:	00000d06 	br	10694 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10660:	e0bffc17 	ldw	r2,-16(fp)
   10664:	11000217 	ldw	r4,8(r2)
   10668:	e1bffb17 	ldw	r6,-20(fp)
   1066c:	e17ffd17 	ldw	r5,-12(fp)
   10670:	00113c40 	call	113c4 <memcmp>
   10674:	1004c03a 	cmpne	r2,r2,zero
   10678:	1000031e 	bne	r2,zero,10688 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1067c:	e0bffc17 	ldw	r2,-16(fp)
   10680:	e0bfff15 	stw	r2,-4(fp)
   10684:	00000706 	br	106a4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10688:	e0bffc17 	ldw	r2,-16(fp)
   1068c:	10800017 	ldw	r2,0(r2)
   10690:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10694:	e0fffe17 	ldw	r3,-8(fp)
   10698:	e0bffc17 	ldw	r2,-16(fp)
   1069c:	10fff01e 	bne	r2,r3,10660 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   106a0:	e03fff15 	stw	zero,-4(fp)
   106a4:	e0bfff17 	ldw	r2,-4(fp)
}
   106a8:	e037883a 	mov	sp,fp
   106ac:	dfc00117 	ldw	ra,4(sp)
   106b0:	df000017 	ldw	fp,0(sp)
   106b4:	dec00204 	addi	sp,sp,8
   106b8:	f800283a 	ret

000106bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   106bc:	deffff04 	addi	sp,sp,-4
   106c0:	df000015 	stw	fp,0(sp)
   106c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   106c8:	e037883a 	mov	sp,fp
   106cc:	df000017 	ldw	fp,0(sp)
   106d0:	dec00104 	addi	sp,sp,4
   106d4:	f800283a 	ret

000106d8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   106d8:	defff904 	addi	sp,sp,-28
   106dc:	dfc00615 	stw	ra,24(sp)
   106e0:	df000515 	stw	fp,20(sp)
   106e4:	df000504 	addi	fp,sp,20
   106e8:	e13ffc15 	stw	r4,-16(fp)
   106ec:	e17ffd15 	stw	r5,-12(fp)
   106f0:	e1bffe15 	stw	r6,-8(fp)
   106f4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   106f8:	e0800217 	ldw	r2,8(fp)
   106fc:	d8800015 	stw	r2,0(sp)
   10700:	e13ffc17 	ldw	r4,-16(fp)
   10704:	e17ffd17 	ldw	r5,-12(fp)
   10708:	e1bffe17 	ldw	r6,-8(fp)
   1070c:	e1ffff17 	ldw	r7,-4(fp)
   10710:	00108ac0 	call	108ac <alt_iic_isr_register>
}  
   10714:	e037883a 	mov	sp,fp
   10718:	dfc00117 	ldw	ra,4(sp)
   1071c:	df000017 	ldw	fp,0(sp)
   10720:	dec00204 	addi	sp,sp,8
   10724:	f800283a 	ret

00010728 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10728:	defff904 	addi	sp,sp,-28
   1072c:	df000615 	stw	fp,24(sp)
   10730:	df000604 	addi	fp,sp,24
   10734:	e13ffe15 	stw	r4,-8(fp)
   10738:	e17fff15 	stw	r5,-4(fp)
   1073c:	e0bfff17 	ldw	r2,-4(fp)
   10740:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10744:	0005303a 	rdctl	r2,status
   10748:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1074c:	e0fffb17 	ldw	r3,-20(fp)
   10750:	00bfff84 	movi	r2,-2
   10754:	1884703a 	and	r2,r3,r2
   10758:	1001703a 	wrctl	status,r2
  
  return context;
   1075c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10760:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   10764:	e0fffc17 	ldw	r3,-16(fp)
   10768:	00800044 	movi	r2,1
   1076c:	10c4983a 	sll	r2,r2,r3
   10770:	1007883a 	mov	r3,r2
   10774:	00800074 	movhi	r2,1
   10778:	10957e04 	addi	r2,r2,22008
   1077c:	10800017 	ldw	r2,0(r2)
   10780:	1886b03a 	or	r3,r3,r2
   10784:	00800074 	movhi	r2,1
   10788:	10957e04 	addi	r2,r2,22008
   1078c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10790:	00800074 	movhi	r2,1
   10794:	10957e04 	addi	r2,r2,22008
   10798:	10800017 	ldw	r2,0(r2)
   1079c:	100170fa 	wrctl	ienable,r2
   107a0:	e0bffd17 	ldw	r2,-12(fp)
   107a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107a8:	e0bffa17 	ldw	r2,-24(fp)
   107ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   107b0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   107b4:	e037883a 	mov	sp,fp
   107b8:	df000017 	ldw	fp,0(sp)
   107bc:	dec00104 	addi	sp,sp,4
   107c0:	f800283a 	ret

000107c4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   107c4:	defff904 	addi	sp,sp,-28
   107c8:	df000615 	stw	fp,24(sp)
   107cc:	df000604 	addi	fp,sp,24
   107d0:	e13ffe15 	stw	r4,-8(fp)
   107d4:	e17fff15 	stw	r5,-4(fp)
   107d8:	e0bfff17 	ldw	r2,-4(fp)
   107dc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107e0:	0005303a 	rdctl	r2,status
   107e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107e8:	e0fffb17 	ldw	r3,-20(fp)
   107ec:	00bfff84 	movi	r2,-2
   107f0:	1884703a 	and	r2,r3,r2
   107f4:	1001703a 	wrctl	status,r2
  
  return context;
   107f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   107fc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   10800:	e0fffc17 	ldw	r3,-16(fp)
   10804:	00800044 	movi	r2,1
   10808:	10c4983a 	sll	r2,r2,r3
   1080c:	0084303a 	nor	r2,zero,r2
   10810:	1007883a 	mov	r3,r2
   10814:	00800074 	movhi	r2,1
   10818:	10957e04 	addi	r2,r2,22008
   1081c:	10800017 	ldw	r2,0(r2)
   10820:	1886703a 	and	r3,r3,r2
   10824:	00800074 	movhi	r2,1
   10828:	10957e04 	addi	r2,r2,22008
   1082c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10830:	00800074 	movhi	r2,1
   10834:	10957e04 	addi	r2,r2,22008
   10838:	10800017 	ldw	r2,0(r2)
   1083c:	100170fa 	wrctl	ienable,r2
   10840:	e0bffd17 	ldw	r2,-12(fp)
   10844:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10848:	e0bffa17 	ldw	r2,-24(fp)
   1084c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10850:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   10854:	e037883a 	mov	sp,fp
   10858:	df000017 	ldw	fp,0(sp)
   1085c:	dec00104 	addi	sp,sp,4
   10860:	f800283a 	ret

00010864 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10864:	defffc04 	addi	sp,sp,-16
   10868:	df000315 	stw	fp,12(sp)
   1086c:	df000304 	addi	fp,sp,12
   10870:	e13ffe15 	stw	r4,-8(fp)
   10874:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10878:	000530fa 	rdctl	r2,ienable
   1087c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10880:	e0ffff17 	ldw	r3,-4(fp)
   10884:	00800044 	movi	r2,1
   10888:	10c4983a 	sll	r2,r2,r3
   1088c:	1007883a 	mov	r3,r2
   10890:	e0bffd17 	ldw	r2,-12(fp)
   10894:	1884703a 	and	r2,r3,r2
   10898:	1004c03a 	cmpne	r2,r2,zero
}
   1089c:	e037883a 	mov	sp,fp
   108a0:	df000017 	ldw	fp,0(sp)
   108a4:	dec00104 	addi	sp,sp,4
   108a8:	f800283a 	ret

000108ac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   108ac:	defff404 	addi	sp,sp,-48
   108b0:	dfc00b15 	stw	ra,44(sp)
   108b4:	df000a15 	stw	fp,40(sp)
   108b8:	df000a04 	addi	fp,sp,40
   108bc:	e13ffb15 	stw	r4,-20(fp)
   108c0:	e17ffc15 	stw	r5,-16(fp)
   108c4:	e1bffd15 	stw	r6,-12(fp)
   108c8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   108cc:	00bffa84 	movi	r2,-22
   108d0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   108d4:	e0bffc17 	ldw	r2,-16(fp)
   108d8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   108dc:	e0bff917 	ldw	r2,-28(fp)
   108e0:	10800808 	cmpgei	r2,r2,32
   108e4:	1000291e 	bne	r2,zero,1098c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108e8:	0005303a 	rdctl	r2,status
   108ec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108f0:	e0fff717 	ldw	r3,-36(fp)
   108f4:	00bfff84 	movi	r2,-2
   108f8:	1884703a 	and	r2,r3,r2
   108fc:	1001703a 	wrctl	status,r2
  
  return context;
   10900:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10904:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   10908:	e0bff917 	ldw	r2,-28(fp)
   1090c:	00c00074 	movhi	r3,1
   10910:	18d98b04 	addi	r3,r3,26156
   10914:	100490fa 	slli	r2,r2,3
   10918:	10c7883a 	add	r3,r2,r3
   1091c:	e0bffd17 	ldw	r2,-12(fp)
   10920:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   10924:	e0bff917 	ldw	r2,-28(fp)
   10928:	00c00074 	movhi	r3,1
   1092c:	18d98b04 	addi	r3,r3,26156
   10930:	100490fa 	slli	r2,r2,3
   10934:	10c5883a 	add	r2,r2,r3
   10938:	10c00104 	addi	r3,r2,4
   1093c:	e0bffe17 	ldw	r2,-8(fp)
   10940:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10944:	e0bffd17 	ldw	r2,-12(fp)
   10948:	1005003a 	cmpeq	r2,r2,zero
   1094c:	1000051e 	bne	r2,zero,10964 <alt_iic_isr_register+0xb8>
   10950:	e17ff917 	ldw	r5,-28(fp)
   10954:	e13ffb17 	ldw	r4,-20(fp)
   10958:	00107280 	call	10728 <alt_ic_irq_enable>
   1095c:	e0bfff15 	stw	r2,-4(fp)
   10960:	00000406 	br	10974 <alt_iic_isr_register+0xc8>
   10964:	e17ff917 	ldw	r5,-28(fp)
   10968:	e13ffb17 	ldw	r4,-20(fp)
   1096c:	00107c40 	call	107c4 <alt_ic_irq_disable>
   10970:	e0bfff15 	stw	r2,-4(fp)
   10974:	e0bfff17 	ldw	r2,-4(fp)
   10978:	e0bffa15 	stw	r2,-24(fp)
   1097c:	e0bff817 	ldw	r2,-32(fp)
   10980:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10984:	e0bff617 	ldw	r2,-40(fp)
   10988:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1098c:	e0bffa17 	ldw	r2,-24(fp)
}
   10990:	e037883a 	mov	sp,fp
   10994:	dfc00117 	ldw	ra,4(sp)
   10998:	df000017 	ldw	fp,0(sp)
   1099c:	dec00204 	addi	sp,sp,8
   109a0:	f800283a 	ret

000109a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   109a4:	defff804 	addi	sp,sp,-32
   109a8:	dfc00715 	stw	ra,28(sp)
   109ac:	df000615 	stw	fp,24(sp)
   109b0:	dc000515 	stw	r16,20(sp)
   109b4:	df000504 	addi	fp,sp,20
   109b8:	e13ffc15 	stw	r4,-16(fp)
   109bc:	e17ffd15 	stw	r5,-12(fp)
   109c0:	e1bffe15 	stw	r6,-8(fp)
   109c4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   109c8:	e13ffd17 	ldw	r4,-12(fp)
   109cc:	e17ffe17 	ldw	r5,-8(fp)
   109d0:	e1bfff17 	ldw	r6,-4(fp)
   109d4:	0010bec0 	call	10bec <open>
   109d8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   109dc:	e0bffb17 	ldw	r2,-20(fp)
   109e0:	1004803a 	cmplt	r2,r2,zero
   109e4:	10001f1e 	bne	r2,zero,10a64 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   109e8:	e13ffb17 	ldw	r4,-20(fp)
   109ec:	04000074 	movhi	r16,1
   109f0:	840a0904 	addi	r16,r16,10276
   109f4:	01400304 	movi	r5,12
   109f8:	00049540 	call	4954 <__mulsi3>
   109fc:	1405883a 	add	r2,r2,r16
   10a00:	10c00017 	ldw	r3,0(r2)
   10a04:	e0bffc17 	ldw	r2,-16(fp)
   10a08:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10a0c:	e13ffb17 	ldw	r4,-20(fp)
   10a10:	04000074 	movhi	r16,1
   10a14:	840a0904 	addi	r16,r16,10276
   10a18:	01400304 	movi	r5,12
   10a1c:	00049540 	call	4954 <__mulsi3>
   10a20:	1405883a 	add	r2,r2,r16
   10a24:	10800104 	addi	r2,r2,4
   10a28:	10c00017 	ldw	r3,0(r2)
   10a2c:	e0bffc17 	ldw	r2,-16(fp)
   10a30:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10a34:	e13ffb17 	ldw	r4,-20(fp)
   10a38:	04000074 	movhi	r16,1
   10a3c:	840a0904 	addi	r16,r16,10276
   10a40:	01400304 	movi	r5,12
   10a44:	00049540 	call	4954 <__mulsi3>
   10a48:	1405883a 	add	r2,r2,r16
   10a4c:	10800204 	addi	r2,r2,8
   10a50:	10c00017 	ldw	r3,0(r2)
   10a54:	e0bffc17 	ldw	r2,-16(fp)
   10a58:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10a5c:	e13ffb17 	ldw	r4,-20(fp)
   10a60:	000e3c40 	call	e3c4 <alt_release_fd>
  }
} 
   10a64:	e037883a 	mov	sp,fp
   10a68:	dfc00217 	ldw	ra,8(sp)
   10a6c:	df000117 	ldw	fp,4(sp)
   10a70:	dc000017 	ldw	r16,0(sp)
   10a74:	dec00304 	addi	sp,sp,12
   10a78:	f800283a 	ret

00010a7c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10a7c:	defffb04 	addi	sp,sp,-20
   10a80:	dfc00415 	stw	ra,16(sp)
   10a84:	df000315 	stw	fp,12(sp)
   10a88:	df000304 	addi	fp,sp,12
   10a8c:	e13ffd15 	stw	r4,-12(fp)
   10a90:	e17ffe15 	stw	r5,-8(fp)
   10a94:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10a98:	01000074 	movhi	r4,1
   10a9c:	210a0c04 	addi	r4,r4,10288
   10aa0:	e17ffd17 	ldw	r5,-12(fp)
   10aa4:	01800044 	movi	r6,1
   10aa8:	01c07fc4 	movi	r7,511
   10aac:	00109a40 	call	109a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10ab0:	01000074 	movhi	r4,1
   10ab4:	210a0904 	addi	r4,r4,10276
   10ab8:	e17ffe17 	ldw	r5,-8(fp)
   10abc:	000d883a 	mov	r6,zero
   10ac0:	01c07fc4 	movi	r7,511
   10ac4:	00109a40 	call	109a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10ac8:	01000074 	movhi	r4,1
   10acc:	210a0f04 	addi	r4,r4,10300
   10ad0:	e17fff17 	ldw	r5,-4(fp)
   10ad4:	01800044 	movi	r6,1
   10ad8:	01c07fc4 	movi	r7,511
   10adc:	00109a40 	call	109a4 <alt_open_fd>
}  
   10ae0:	e037883a 	mov	sp,fp
   10ae4:	dfc00117 	ldw	ra,4(sp)
   10ae8:	df000017 	ldw	fp,0(sp)
   10aec:	dec00204 	addi	sp,sp,8
   10af0:	f800283a 	ret

00010af4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10af4:	defffa04 	addi	sp,sp,-24
   10af8:	dfc00515 	stw	ra,20(sp)
   10afc:	df000415 	stw	fp,16(sp)
   10b00:	dc000315 	stw	r16,12(sp)
   10b04:	df000304 	addi	fp,sp,12
   10b08:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10b0c:	e0bffe17 	ldw	r2,-8(fp)
   10b10:	10800217 	ldw	r2,8(r2)
   10b14:	10d00034 	orhi	r3,r2,16384
   10b18:	e0bffe17 	ldw	r2,-8(fp)
   10b1c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10b20:	e03ffd15 	stw	zero,-12(fp)
   10b24:	00002306 	br	10bb4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10b28:	e13ffd17 	ldw	r4,-12(fp)
   10b2c:	04000074 	movhi	r16,1
   10b30:	840a0904 	addi	r16,r16,10276
   10b34:	01400304 	movi	r5,12
   10b38:	00049540 	call	4954 <__mulsi3>
   10b3c:	1405883a 	add	r2,r2,r16
   10b40:	10c00017 	ldw	r3,0(r2)
   10b44:	e0bffe17 	ldw	r2,-8(fp)
   10b48:	10800017 	ldw	r2,0(r2)
   10b4c:	1880161e 	bne	r3,r2,10ba8 <alt_file_locked+0xb4>
   10b50:	e13ffd17 	ldw	r4,-12(fp)
   10b54:	04000074 	movhi	r16,1
   10b58:	840a0904 	addi	r16,r16,10276
   10b5c:	01400304 	movi	r5,12
   10b60:	00049540 	call	4954 <__mulsi3>
   10b64:	1405883a 	add	r2,r2,r16
   10b68:	10800204 	addi	r2,r2,8
   10b6c:	10800017 	ldw	r2,0(r2)
   10b70:	1004403a 	cmpge	r2,r2,zero
   10b74:	10000c1e 	bne	r2,zero,10ba8 <alt_file_locked+0xb4>
   10b78:	e13ffd17 	ldw	r4,-12(fp)
   10b7c:	01400304 	movi	r5,12
   10b80:	00049540 	call	4954 <__mulsi3>
   10b84:	1007883a 	mov	r3,r2
   10b88:	00800074 	movhi	r2,1
   10b8c:	108a0904 	addi	r2,r2,10276
   10b90:	1887883a 	add	r3,r3,r2
   10b94:	e0bffe17 	ldw	r2,-8(fp)
   10b98:	18800326 	beq	r3,r2,10ba8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10b9c:	00bffcc4 	movi	r2,-13
   10ba0:	e0bfff15 	stw	r2,-4(fp)
   10ba4:	00000a06 	br	10bd0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10ba8:	e0bffd17 	ldw	r2,-12(fp)
   10bac:	10800044 	addi	r2,r2,1
   10bb0:	e0bffd15 	stw	r2,-12(fp)
   10bb4:	00800074 	movhi	r2,1
   10bb8:	108eaf04 	addi	r2,r2,15036
   10bbc:	10800017 	ldw	r2,0(r2)
   10bc0:	1007883a 	mov	r3,r2
   10bc4:	e0bffd17 	ldw	r2,-12(fp)
   10bc8:	18bfd72e 	bgeu	r3,r2,10b28 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10bcc:	e03fff15 	stw	zero,-4(fp)
   10bd0:	e0bfff17 	ldw	r2,-4(fp)
}
   10bd4:	e037883a 	mov	sp,fp
   10bd8:	dfc00217 	ldw	ra,8(sp)
   10bdc:	df000117 	ldw	fp,4(sp)
   10be0:	dc000017 	ldw	r16,0(sp)
   10be4:	dec00304 	addi	sp,sp,12
   10be8:	f800283a 	ret

00010bec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10bec:	defff404 	addi	sp,sp,-48
   10bf0:	dfc00b15 	stw	ra,44(sp)
   10bf4:	df000a15 	stw	fp,40(sp)
   10bf8:	df000a04 	addi	fp,sp,40
   10bfc:	e13ffb15 	stw	r4,-20(fp)
   10c00:	e17ffc15 	stw	r5,-16(fp)
   10c04:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10c08:	00bfffc4 	movi	r2,-1
   10c0c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   10c10:	00bffb44 	movi	r2,-19
   10c14:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   10c18:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10c1c:	e13ffb17 	ldw	r4,-20(fp)
   10c20:	01400074 	movhi	r5,1
   10c24:	294ead04 	addi	r5,r5,15028
   10c28:	00106280 	call	10628 <alt_find_dev>
   10c2c:	e0bffa15 	stw	r2,-24(fp)
   10c30:	e0bffa17 	ldw	r2,-24(fp)
   10c34:	1004c03a 	cmpne	r2,r2,zero
   10c38:	1000051e 	bne	r2,zero,10c50 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10c3c:	e13ffb17 	ldw	r4,-20(fp)
   10c40:	00111880 	call	11188 <alt_find_file>
   10c44:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   10c48:	00800044 	movi	r2,1
   10c4c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10c50:	e0bffa17 	ldw	r2,-24(fp)
   10c54:	1005003a 	cmpeq	r2,r2,zero
   10c58:	1000311e 	bne	r2,zero,10d20 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10c5c:	e13ffa17 	ldw	r4,-24(fp)
   10c60:	00112a80 	call	112a8 <alt_get_fd>
   10c64:	e0bff815 	stw	r2,-32(fp)
   10c68:	e0bff817 	ldw	r2,-32(fp)
   10c6c:	1004403a 	cmpge	r2,r2,zero
   10c70:	1000031e 	bne	r2,zero,10c80 <open+0x94>
    {
      status = index;
   10c74:	e0bff817 	ldw	r2,-32(fp)
   10c78:	e0bff715 	stw	r2,-36(fp)
   10c7c:	00002a06 	br	10d28 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   10c80:	e13ff817 	ldw	r4,-32(fp)
   10c84:	01400304 	movi	r5,12
   10c88:	00049540 	call	4954 <__mulsi3>
   10c8c:	1007883a 	mov	r3,r2
   10c90:	00800074 	movhi	r2,1
   10c94:	108a0904 	addi	r2,r2,10276
   10c98:	1885883a 	add	r2,r3,r2
   10c9c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10ca0:	e0fffc17 	ldw	r3,-16(fp)
   10ca4:	00900034 	movhi	r2,16384
   10ca8:	10bfffc4 	addi	r2,r2,-1
   10cac:	1886703a 	and	r3,r3,r2
   10cb0:	e0bff917 	ldw	r2,-28(fp)
   10cb4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10cb8:	e0bff617 	ldw	r2,-40(fp)
   10cbc:	1004c03a 	cmpne	r2,r2,zero
   10cc0:	1000061e 	bne	r2,zero,10cdc <open+0xf0>
   10cc4:	e13ff917 	ldw	r4,-28(fp)
   10cc8:	0010af40 	call	10af4 <alt_file_locked>
   10ccc:	e0bff715 	stw	r2,-36(fp)
   10cd0:	e0bff717 	ldw	r2,-36(fp)
   10cd4:	1004803a 	cmplt	r2,r2,zero
   10cd8:	1000131e 	bne	r2,zero,10d28 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10cdc:	e0bffa17 	ldw	r2,-24(fp)
   10ce0:	10800317 	ldw	r2,12(r2)
   10ce4:	1005003a 	cmpeq	r2,r2,zero
   10ce8:	1000091e 	bne	r2,zero,10d10 <open+0x124>
   10cec:	e0bffa17 	ldw	r2,-24(fp)
   10cf0:	10800317 	ldw	r2,12(r2)
   10cf4:	e13ff917 	ldw	r4,-28(fp)
   10cf8:	e17ffb17 	ldw	r5,-20(fp)
   10cfc:	e1bffc17 	ldw	r6,-16(fp)
   10d00:	e1fffd17 	ldw	r7,-12(fp)
   10d04:	103ee83a 	callr	r2
   10d08:	e0bfff15 	stw	r2,-4(fp)
   10d0c:	00000106 	br	10d14 <open+0x128>
   10d10:	e03fff15 	stw	zero,-4(fp)
   10d14:	e0bfff17 	ldw	r2,-4(fp)
   10d18:	e0bff715 	stw	r2,-36(fp)
   10d1c:	00000206 	br	10d28 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10d20:	00bffb44 	movi	r2,-19
   10d24:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10d28:	e0bff717 	ldw	r2,-36(fp)
   10d2c:	1004403a 	cmpge	r2,r2,zero
   10d30:	1000091e 	bne	r2,zero,10d58 <open+0x16c>
  {
    alt_release_fd (index);  
   10d34:	e13ff817 	ldw	r4,-32(fp)
   10d38:	000e3c40 	call	e3c4 <alt_release_fd>
    ALT_ERRNO = -status;
   10d3c:	0010d780 	call	10d78 <alt_get_errno>
   10d40:	e0fff717 	ldw	r3,-36(fp)
   10d44:	00c7c83a 	sub	r3,zero,r3
   10d48:	10c00015 	stw	r3,0(r2)
    return -1;
   10d4c:	00bfffc4 	movi	r2,-1
   10d50:	e0bffe15 	stw	r2,-8(fp)
   10d54:	00000206 	br	10d60 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   10d58:	e0bff817 	ldw	r2,-32(fp)
   10d5c:	e0bffe15 	stw	r2,-8(fp)
   10d60:	e0bffe17 	ldw	r2,-8(fp)
}
   10d64:	e037883a 	mov	sp,fp
   10d68:	dfc00117 	ldw	ra,4(sp)
   10d6c:	df000017 	ldw	fp,0(sp)
   10d70:	dec00204 	addi	sp,sp,8
   10d74:	f800283a 	ret

00010d78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10d78:	defffd04 	addi	sp,sp,-12
   10d7c:	dfc00215 	stw	ra,8(sp)
   10d80:	df000115 	stw	fp,4(sp)
   10d84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10d88:	00800074 	movhi	r2,1
   10d8c:	108eb004 	addi	r2,r2,15040
   10d90:	10800017 	ldw	r2,0(r2)
   10d94:	1005003a 	cmpeq	r2,r2,zero
   10d98:	1000061e 	bne	r2,zero,10db4 <alt_get_errno+0x3c>
   10d9c:	00800074 	movhi	r2,1
   10da0:	108eb004 	addi	r2,r2,15040
   10da4:	10800017 	ldw	r2,0(r2)
   10da8:	103ee83a 	callr	r2
   10dac:	e0bfff15 	stw	r2,-4(fp)
   10db0:	00000306 	br	10dc0 <alt_get_errno+0x48>
   10db4:	00800074 	movhi	r2,1
   10db8:	10957704 	addi	r2,r2,21980
   10dbc:	e0bfff15 	stw	r2,-4(fp)
   10dc0:	e0bfff17 	ldw	r2,-4(fp)
}
   10dc4:	e037883a 	mov	sp,fp
   10dc8:	dfc00117 	ldw	ra,4(sp)
   10dcc:	df000017 	ldw	fp,0(sp)
   10dd0:	dec00204 	addi	sp,sp,8
   10dd4:	f800283a 	ret

00010dd8 <alt_remap_uncached>:
 * Convert a pointer to a block of cached memory, into a block of
 * uncached memory.
 */

volatile void* alt_remap_uncached (void* ptr, alt_u32 len)
{
   10dd8:	defffc04 	addi	sp,sp,-16
   10ddc:	dfc00315 	stw	ra,12(sp)
   10de0:	df000215 	stw	fp,8(sp)
   10de4:	df000204 	addi	fp,sp,8
   10de8:	e13ffe15 	stw	r4,-8(fp)
   10dec:	e17fff15 	stw	r5,-4(fp)
  alt_dcache_flush (ptr, len);
   10df0:	e13ffe17 	ldw	r4,-8(fp)
   10df4:	e17fff17 	ldw	r5,-4(fp)
   10df8:	00111640 	call	11164 <alt_dcache_flush>
  return (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK);
   10dfc:	e0bffe17 	ldw	r2,-8(fp)
   10e00:	10a00034 	orhi	r2,r2,32768
}
   10e04:	e037883a 	mov	sp,fp
   10e08:	dfc00117 	ldw	ra,4(sp)
   10e0c:	df000017 	ldw	fp,0(sp)
   10e10:	dec00204 	addi	sp,sp,8
   10e14:	f800283a 	ret

00010e18 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10e18:	defffa04 	addi	sp,sp,-24
   10e1c:	df000515 	stw	fp,20(sp)
   10e20:	df000504 	addi	fp,sp,20
   10e24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e28:	0005303a 	rdctl	r2,status
   10e2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e30:	e0fffd17 	ldw	r3,-12(fp)
   10e34:	00bfff84 	movi	r2,-2
   10e38:	1884703a 	and	r2,r3,r2
   10e3c:	1001703a 	wrctl	status,r2
  
  return context;
   10e40:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10e44:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   10e48:	e0bfff17 	ldw	r2,-4(fp)
   10e4c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10e50:	e0bffc17 	ldw	r2,-16(fp)
   10e54:	10c00017 	ldw	r3,0(r2)
   10e58:	e0bffc17 	ldw	r2,-16(fp)
   10e5c:	10800117 	ldw	r2,4(r2)
   10e60:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   10e64:	e0bffc17 	ldw	r2,-16(fp)
   10e68:	10c00117 	ldw	r3,4(r2)
   10e6c:	e0bffc17 	ldw	r2,-16(fp)
   10e70:	10800017 	ldw	r2,0(r2)
   10e74:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10e78:	e0fffc17 	ldw	r3,-16(fp)
   10e7c:	e0bffc17 	ldw	r2,-16(fp)
   10e80:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   10e84:	e0fffc17 	ldw	r3,-16(fp)
   10e88:	e0bffc17 	ldw	r2,-16(fp)
   10e8c:	18800015 	stw	r2,0(r3)
   10e90:	e0bffe17 	ldw	r2,-8(fp)
   10e94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e98:	e0bffb17 	ldw	r2,-20(fp)
   10e9c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10ea0:	e037883a 	mov	sp,fp
   10ea4:	df000017 	ldw	fp,0(sp)
   10ea8:	dec00104 	addi	sp,sp,4
   10eac:	f800283a 	ret

00010eb0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10eb0:	defffb04 	addi	sp,sp,-20
   10eb4:	dfc00415 	stw	ra,16(sp)
   10eb8:	df000315 	stw	fp,12(sp)
   10ebc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10ec0:	d0a01017 	ldw	r2,-32704(gp)
   10ec4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10ec8:	d0a6db17 	ldw	r2,-25748(gp)
   10ecc:	10800044 	addi	r2,r2,1
   10ed0:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10ed4:	00003106 	br	10f9c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   10ed8:	e0bffe17 	ldw	r2,-8(fp)
   10edc:	10800017 	ldw	r2,0(r2)
   10ee0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10ee4:	e0bffe17 	ldw	r2,-8(fp)
   10ee8:	10800403 	ldbu	r2,16(r2)
   10eec:	10803fcc 	andi	r2,r2,255
   10ef0:	1005003a 	cmpeq	r2,r2,zero
   10ef4:	1000051e 	bne	r2,zero,10f0c <alt_tick+0x5c>
   10ef8:	d0a6db17 	ldw	r2,-25748(gp)
   10efc:	1004c03a 	cmpne	r2,r2,zero
   10f00:	1000021e 	bne	r2,zero,10f0c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   10f04:	e0bffe17 	ldw	r2,-8(fp)
   10f08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10f0c:	e0bffe17 	ldw	r2,-8(fp)
   10f10:	10c00217 	ldw	r3,8(r2)
   10f14:	d0a6db17 	ldw	r2,-25748(gp)
   10f18:	10c01e36 	bltu	r2,r3,10f94 <alt_tick+0xe4>
   10f1c:	e0bffe17 	ldw	r2,-8(fp)
   10f20:	10800403 	ldbu	r2,16(r2)
   10f24:	10803fcc 	andi	r2,r2,255
   10f28:	1004c03a 	cmpne	r2,r2,zero
   10f2c:	1000191e 	bne	r2,zero,10f94 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   10f30:	e0bffe17 	ldw	r2,-8(fp)
   10f34:	10c00317 	ldw	r3,12(r2)
   10f38:	e0bffe17 	ldw	r2,-8(fp)
   10f3c:	11000517 	ldw	r4,20(r2)
   10f40:	183ee83a 	callr	r3
   10f44:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10f48:	e0bffd17 	ldw	r2,-12(fp)
   10f4c:	1004c03a 	cmpne	r2,r2,zero
   10f50:	1000031e 	bne	r2,zero,10f60 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   10f54:	e13ffe17 	ldw	r4,-8(fp)
   10f58:	0010e180 	call	10e18 <alt_alarm_stop>
   10f5c:	00000d06 	br	10f94 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   10f60:	e0bffe17 	ldw	r2,-8(fp)
   10f64:	10c00217 	ldw	r3,8(r2)
   10f68:	e0bffd17 	ldw	r2,-12(fp)
   10f6c:	1887883a 	add	r3,r3,r2
   10f70:	e0bffe17 	ldw	r2,-8(fp)
   10f74:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10f78:	e0bffe17 	ldw	r2,-8(fp)
   10f7c:	10c00217 	ldw	r3,8(r2)
   10f80:	d0a6db17 	ldw	r2,-25748(gp)
   10f84:	1880032e 	bgeu	r3,r2,10f94 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   10f88:	e0fffe17 	ldw	r3,-8(fp)
   10f8c:	00800044 	movi	r2,1
   10f90:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   10f94:	e0bfff17 	ldw	r2,-4(fp)
   10f98:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10f9c:	d0e01004 	addi	r3,gp,-32704
   10fa0:	e0bffe17 	ldw	r2,-8(fp)
   10fa4:	10ffcc1e 	bne	r2,r3,10ed8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   10fa8:	e037883a 	mov	sp,fp
   10fac:	dfc00117 	ldw	ra,4(sp)
   10fb0:	df000017 	ldw	fp,0(sp)
   10fb4:	dec00204 	addi	sp,sp,8
   10fb8:	f800283a 	ret

00010fbc <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
   10fbc:	deffff04 	addi	sp,sp,-4
   10fc0:	df000015 	stw	fp,0(sp)
   10fc4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10fc8:	000170fa 	wrctl	ienable,zero
}
   10fcc:	e037883a 	mov	sp,fp
   10fd0:	df000017 	ldw	fp,0(sp)
   10fd4:	dec00104 	addi	sp,sp,4
   10fd8:	f800283a 	ret

00010fdc <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
   10fdc:	defff904 	addi	sp,sp,-28
   10fe0:	df000615 	stw	fp,24(sp)
   10fe4:	df000604 	addi	fp,sp,24
   10fe8:	e13ffe15 	stw	r4,-8(fp)
   10fec:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
   10ff0:	e03ffa15 	stw	zero,-24(fp)
   10ff4:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
   10ff8:	e0bffe17 	ldw	r2,-8(fp)
   10ffc:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
   11000:	e0bfff17 	ldw	r2,-4(fp)
   11004:	1004913a 	slli	r2,r2,4
   11008:	1007883a 	mov	r3,r2
   1100c:	e0bffe17 	ldw	r2,-8(fp)
   11010:	1885883a 	add	r2,r3,r2
   11014:	10800037 	ldwio	r2,0(r2)
   11018:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
   1101c:	e0bfff17 	ldw	r2,-4(fp)
   11020:	1004913a 	slli	r2,r2,4
   11024:	1007883a 	mov	r3,r2
   11028:	e0bffe17 	ldw	r2,-8(fp)
   1102c:	1885883a 	add	r2,r3,r2
   11030:	10800104 	addi	r2,r2,4
   11034:	10800037 	ldwio	r2,0(r2)
   11038:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   1103c:	e0bffc17 	ldw	r2,-16(fp)
   11040:	0007883a 	mov	r3,zero
   11044:	100a983a 	sll	r5,r2,zero
   11048:	0009883a 	mov	r4,zero
   1104c:	e0bffd17 	ldw	r2,-12(fp)
   11050:	0007883a 	mov	r3,zero
   11054:	208cb03a 	or	r6,r4,r2
   11058:	e1bffa15 	stw	r6,-24(fp)
   1105c:	28c4b03a 	or	r2,r5,r3
   11060:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
   11064:	e17ffa17 	ldw	r5,-24(fp)
   11068:	e1bffb17 	ldw	r6,-20(fp)
   1106c:	2807883a 	mov	r3,r5
   11070:	3009883a 	mov	r4,r6
}
   11074:	1805883a 	mov	r2,r3
   11078:	2007883a 	mov	r3,r4
   1107c:	e037883a 	mov	sp,fp
   11080:	df000017 	ldw	fp,0(sp)
   11084:	dec00104 	addi	sp,sp,4
   11088:	f800283a 	ret

0001108c <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
   1108c:	defffd04 	addi	sp,sp,-12
   11090:	dfc00215 	stw	ra,8(sp)
   11094:	df000115 	stw	fp,4(sp)
   11098:	df000104 	addi	fp,sp,4
   1109c:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
   110a0:	e13fff17 	ldw	r4,-4(fp)
   110a4:	000b883a 	mov	r5,zero
   110a8:	0010fdc0 	call	10fdc <perf_get_section_time>
   110ac:	1009883a 	mov	r4,r2
   110b0:	180b883a 	mov	r5,r3
   110b4:	200d883a 	mov	r6,r4
   110b8:	280f883a 	mov	r7,r5
   110bc:	3007883a 	mov	r3,r6
   110c0:	3809883a 	mov	r4,r7
}
   110c4:	1805883a 	mov	r2,r3
   110c8:	2007883a 	mov	r3,r4
   110cc:	e037883a 	mov	sp,fp
   110d0:	dfc00117 	ldw	ra,4(sp)
   110d4:	df000017 	ldw	fp,0(sp)
   110d8:	dec00204 	addi	sp,sp,8
   110dc:	f800283a 	ret

000110e0 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
   110e0:	defffd04 	addi	sp,sp,-12
   110e4:	df000215 	stw	fp,8(sp)
   110e8:	df000204 	addi	fp,sp,8
   110ec:	e13ffe15 	stw	r4,-8(fp)
   110f0:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
   110f4:	e0bfff17 	ldw	r2,-4(fp)
   110f8:	1004913a 	slli	r2,r2,4
   110fc:	1007883a 	mov	r3,r2
   11100:	e0bffe17 	ldw	r2,-8(fp)
   11104:	1885883a 	add	r2,r3,r2
   11108:	10800204 	addi	r2,r2,8
   1110c:	10800037 	ldwio	r2,0(r2)
}
   11110:	e037883a 	mov	sp,fp
   11114:	df000017 	ldw	fp,0(sp)
   11118:	dec00104 	addi	sp,sp,4
   1111c:	f800283a 	ret

00011120 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
   11120:	deffff04 	addi	sp,sp,-4
   11124:	df000015 	stw	fp,0(sp)
   11128:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
   1112c:	0005883a 	mov	r2,zero
#endif
}
   11130:	e037883a 	mov	sp,fp
   11134:	df000017 	ldw	fp,0(sp)
   11138:	dec00104 	addi	sp,sp,4
   1113c:	f800283a 	ret

00011140 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
   11140:	deffff04 	addi	sp,sp,-4
   11144:	df000015 	stw	fp,0(sp)
   11148:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
   1114c:	00817db4 	movhi	r2,1526
   11150:	10b84004 	addi	r2,r2,-7936
}
   11154:	e037883a 	mov	sp,fp
   11158:	df000017 	ldw	fp,0(sp)
   1115c:	dec00104 	addi	sp,sp,4
   11160:	f800283a 	ret

00011164 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   11164:	defffd04 	addi	sp,sp,-12
   11168:	df000215 	stw	fp,8(sp)
   1116c:	df000204 	addi	fp,sp,8
   11170:	e13ffe15 	stw	r4,-8(fp)
   11174:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11178:	e037883a 	mov	sp,fp
   1117c:	df000017 	ldw	fp,0(sp)
   11180:	dec00104 	addi	sp,sp,4
   11184:	f800283a 	ret

00011188 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11188:	defffa04 	addi	sp,sp,-24
   1118c:	dfc00515 	stw	ra,20(sp)
   11190:	df000415 	stw	fp,16(sp)
   11194:	df000404 	addi	fp,sp,16
   11198:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1119c:	00800074 	movhi	r2,1
   111a0:	108eab04 	addi	r2,r2,15020
   111a4:	10800017 	ldw	r2,0(r2)
   111a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   111ac:	00003306 	br	1127c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   111b0:	e0bffd17 	ldw	r2,-12(fp)
   111b4:	11000217 	ldw	r4,8(r2)
   111b8:	000687c0 	call	687c <strlen>
   111bc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   111c0:	e0bffd17 	ldw	r2,-12(fp)
   111c4:	10c00217 	ldw	r3,8(r2)
   111c8:	e0bffc17 	ldw	r2,-16(fp)
   111cc:	1885883a 	add	r2,r3,r2
   111d0:	10bfffc4 	addi	r2,r2,-1
   111d4:	10800003 	ldbu	r2,0(r2)
   111d8:	10803fcc 	andi	r2,r2,255
   111dc:	1080201c 	xori	r2,r2,128
   111e0:	10bfe004 	addi	r2,r2,-128
   111e4:	10800bd8 	cmpnei	r2,r2,47
   111e8:	1000031e 	bne	r2,zero,111f8 <alt_find_file+0x70>
    {
      len -= 1;
   111ec:	e0bffc17 	ldw	r2,-16(fp)
   111f0:	10bfffc4 	addi	r2,r2,-1
   111f4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   111f8:	e0bffc17 	ldw	r2,-16(fp)
   111fc:	1007883a 	mov	r3,r2
   11200:	e0bffe17 	ldw	r2,-8(fp)
   11204:	1885883a 	add	r2,r3,r2
   11208:	10800003 	ldbu	r2,0(r2)
   1120c:	10803fcc 	andi	r2,r2,255
   11210:	1080201c 	xori	r2,r2,128
   11214:	10bfe004 	addi	r2,r2,-128
   11218:	10800be0 	cmpeqi	r2,r2,47
   1121c:	10000a1e 	bne	r2,zero,11248 <alt_find_file+0xc0>
   11220:	e0bffc17 	ldw	r2,-16(fp)
   11224:	1007883a 	mov	r3,r2
   11228:	e0bffe17 	ldw	r2,-8(fp)
   1122c:	1885883a 	add	r2,r3,r2
   11230:	10800003 	ldbu	r2,0(r2)
   11234:	10803fcc 	andi	r2,r2,255
   11238:	1080201c 	xori	r2,r2,128
   1123c:	10bfe004 	addi	r2,r2,-128
   11240:	1004c03a 	cmpne	r2,r2,zero
   11244:	10000a1e 	bne	r2,zero,11270 <alt_find_file+0xe8>
   11248:	e0bffd17 	ldw	r2,-12(fp)
   1124c:	11000217 	ldw	r4,8(r2)
   11250:	e1bffc17 	ldw	r6,-16(fp)
   11254:	e17ffe17 	ldw	r5,-8(fp)
   11258:	00113c40 	call	113c4 <memcmp>
   1125c:	1004c03a 	cmpne	r2,r2,zero
   11260:	1000031e 	bne	r2,zero,11270 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11264:	e0bffd17 	ldw	r2,-12(fp)
   11268:	e0bfff15 	stw	r2,-4(fp)
   1126c:	00000806 	br	11290 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   11270:	e0bffd17 	ldw	r2,-12(fp)
   11274:	10800017 	ldw	r2,0(r2)
   11278:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1127c:	00c00074 	movhi	r3,1
   11280:	18ceab04 	addi	r3,r3,15020
   11284:	e0bffd17 	ldw	r2,-12(fp)
   11288:	10ffc91e 	bne	r2,r3,111b0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1128c:	e03fff15 	stw	zero,-4(fp)
   11290:	e0bfff17 	ldw	r2,-4(fp)
}
   11294:	e037883a 	mov	sp,fp
   11298:	dfc00117 	ldw	ra,4(sp)
   1129c:	df000017 	ldw	fp,0(sp)
   112a0:	dec00204 	addi	sp,sp,8
   112a4:	f800283a 	ret

000112a8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   112a8:	defffa04 	addi	sp,sp,-24
   112ac:	dfc00515 	stw	ra,20(sp)
   112b0:	df000415 	stw	fp,16(sp)
   112b4:	dc000315 	stw	r16,12(sp)
   112b8:	df000304 	addi	fp,sp,12
   112bc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   112c0:	00bffa04 	movi	r2,-24
   112c4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   112c8:	e03ffe15 	stw	zero,-8(fp)
   112cc:	00002006 	br	11350 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   112d0:	e13ffe17 	ldw	r4,-8(fp)
   112d4:	04000074 	movhi	r16,1
   112d8:	840a0904 	addi	r16,r16,10276
   112dc:	01400304 	movi	r5,12
   112e0:	00049540 	call	4954 <__mulsi3>
   112e4:	1405883a 	add	r2,r2,r16
   112e8:	10800017 	ldw	r2,0(r2)
   112ec:	1004c03a 	cmpne	r2,r2,zero
   112f0:	1000141e 	bne	r2,zero,11344 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   112f4:	e13ffe17 	ldw	r4,-8(fp)
   112f8:	04000074 	movhi	r16,1
   112fc:	840a0904 	addi	r16,r16,10276
   11300:	01400304 	movi	r5,12
   11304:	00049540 	call	4954 <__mulsi3>
   11308:	1407883a 	add	r3,r2,r16
   1130c:	e0bfff17 	ldw	r2,-4(fp)
   11310:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   11314:	00800074 	movhi	r2,1
   11318:	108eaf04 	addi	r2,r2,15036
   1131c:	10c00017 	ldw	r3,0(r2)
   11320:	e0bffe17 	ldw	r2,-8(fp)
   11324:	1880040e 	bge	r3,r2,11338 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   11328:	00c00074 	movhi	r3,1
   1132c:	18ceaf04 	addi	r3,r3,15036
   11330:	e0bffe17 	ldw	r2,-8(fp)
   11334:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   11338:	e0bffe17 	ldw	r2,-8(fp)
   1133c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11340:	00000606 	br	1135c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11344:	e0bffe17 	ldw	r2,-8(fp)
   11348:	10800044 	addi	r2,r2,1
   1134c:	e0bffe15 	stw	r2,-8(fp)
   11350:	e0bffe17 	ldw	r2,-8(fp)
   11354:	10800810 	cmplti	r2,r2,32
   11358:	103fdd1e 	bne	r2,zero,112d0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1135c:	e0bffd17 	ldw	r2,-12(fp)
}
   11360:	e037883a 	mov	sp,fp
   11364:	dfc00217 	ldw	ra,8(sp)
   11368:	df000117 	ldw	fp,4(sp)
   1136c:	dc000017 	ldw	r16,0(sp)
   11370:	dec00304 	addi	sp,sp,12
   11374:	f800283a 	ret

00011378 <atexit>:
   11378:	200b883a 	mov	r5,r4
   1137c:	000d883a 	mov	r6,zero
   11380:	0009883a 	mov	r4,zero
   11384:	000f883a 	mov	r7,zero
   11388:	00114381 	jmpi	11438 <__register_exitproc>

0001138c <exit>:
   1138c:	defffe04 	addi	sp,sp,-8
   11390:	000b883a 	mov	r5,zero
   11394:	dc000015 	stw	r16,0(sp)
   11398:	dfc00115 	stw	ra,4(sp)
   1139c:	2021883a 	mov	r16,r4
   113a0:	00115700 	call	11570 <__call_exitprocs>
   113a4:	00800074 	movhi	r2,1
   113a8:	108ea604 	addi	r2,r2,15000
   113ac:	11000017 	ldw	r4,0(r2)
   113b0:	20800f17 	ldw	r2,60(r4)
   113b4:	10000126 	beq	r2,zero,113bc <exit+0x30>
   113b8:	103ee83a 	callr	r2
   113bc:	8009883a 	mov	r4,r16
   113c0:	00117e80 	call	117e8 <_exit>

000113c4 <memcmp>:
   113c4:	00c000c4 	movi	r3,3
   113c8:	1980032e 	bgeu	r3,r6,113d8 <memcmp+0x14>
   113cc:	2144b03a 	or	r2,r4,r5
   113d0:	10c4703a 	and	r2,r2,r3
   113d4:	10000f26 	beq	r2,zero,11414 <memcmp+0x50>
   113d8:	31ffffc4 	addi	r7,r6,-1
   113dc:	3000061e 	bne	r6,zero,113f8 <memcmp+0x34>
   113e0:	00000a06 	br	1140c <memcmp+0x48>
   113e4:	39ffffc4 	addi	r7,r7,-1
   113e8:	00bfffc4 	movi	r2,-1
   113ec:	21000044 	addi	r4,r4,1
   113f0:	29400044 	addi	r5,r5,1
   113f4:	38800526 	beq	r7,r2,1140c <memcmp+0x48>
   113f8:	20c00003 	ldbu	r3,0(r4)
   113fc:	28800003 	ldbu	r2,0(r5)
   11400:	18bff826 	beq	r3,r2,113e4 <memcmp+0x20>
   11404:	1885c83a 	sub	r2,r3,r2
   11408:	f800283a 	ret
   1140c:	0005883a 	mov	r2,zero
   11410:	f800283a 	ret
   11414:	180f883a 	mov	r7,r3
   11418:	20c00017 	ldw	r3,0(r4)
   1141c:	28800017 	ldw	r2,0(r5)
   11420:	18bfed1e 	bne	r3,r2,113d8 <memcmp+0x14>
   11424:	31bfff04 	addi	r6,r6,-4
   11428:	21000104 	addi	r4,r4,4
   1142c:	29400104 	addi	r5,r5,4
   11430:	39bff936 	bltu	r7,r6,11418 <memcmp+0x54>
   11434:	003fe806 	br	113d8 <memcmp+0x14>

00011438 <__register_exitproc>:
   11438:	defffa04 	addi	sp,sp,-24
   1143c:	00800074 	movhi	r2,1
   11440:	108ea604 	addi	r2,r2,15000
   11444:	dc000015 	stw	r16,0(sp)
   11448:	14000017 	ldw	r16,0(r2)
   1144c:	dd000415 	stw	r20,16(sp)
   11450:	2829883a 	mov	r20,r5
   11454:	81405217 	ldw	r5,328(r16)
   11458:	dcc00315 	stw	r19,12(sp)
   1145c:	dc800215 	stw	r18,8(sp)
   11460:	dc400115 	stw	r17,4(sp)
   11464:	dfc00515 	stw	ra,20(sp)
   11468:	2023883a 	mov	r17,r4
   1146c:	3027883a 	mov	r19,r6
   11470:	3825883a 	mov	r18,r7
   11474:	28002526 	beq	r5,zero,1150c <__register_exitproc+0xd4>
   11478:	29000117 	ldw	r4,4(r5)
   1147c:	008007c4 	movi	r2,31
   11480:	11002716 	blt	r2,r4,11520 <__register_exitproc+0xe8>
   11484:	8800101e 	bne	r17,zero,114c8 <__register_exitproc+0x90>
   11488:	2105883a 	add	r2,r4,r4
   1148c:	1085883a 	add	r2,r2,r2
   11490:	20c00044 	addi	r3,r4,1
   11494:	1145883a 	add	r2,r2,r5
   11498:	0009883a 	mov	r4,zero
   1149c:	15000215 	stw	r20,8(r2)
   114a0:	28c00115 	stw	r3,4(r5)
   114a4:	2005883a 	mov	r2,r4
   114a8:	dfc00517 	ldw	ra,20(sp)
   114ac:	dd000417 	ldw	r20,16(sp)
   114b0:	dcc00317 	ldw	r19,12(sp)
   114b4:	dc800217 	ldw	r18,8(sp)
   114b8:	dc400117 	ldw	r17,4(sp)
   114bc:	dc000017 	ldw	r16,0(sp)
   114c0:	dec00604 	addi	sp,sp,24
   114c4:	f800283a 	ret
   114c8:	29802204 	addi	r6,r5,136
   114cc:	00800044 	movi	r2,1
   114d0:	110e983a 	sll	r7,r2,r4
   114d4:	30c04017 	ldw	r3,256(r6)
   114d8:	2105883a 	add	r2,r4,r4
   114dc:	1085883a 	add	r2,r2,r2
   114e0:	1185883a 	add	r2,r2,r6
   114e4:	19c6b03a 	or	r3,r3,r7
   114e8:	14802015 	stw	r18,128(r2)
   114ec:	14c00015 	stw	r19,0(r2)
   114f0:	00800084 	movi	r2,2
   114f4:	30c04015 	stw	r3,256(r6)
   114f8:	88bfe31e 	bne	r17,r2,11488 <__register_exitproc+0x50>
   114fc:	30804117 	ldw	r2,260(r6)
   11500:	11c4b03a 	or	r2,r2,r7
   11504:	30804115 	stw	r2,260(r6)
   11508:	003fdf06 	br	11488 <__register_exitproc+0x50>
   1150c:	00800074 	movhi	r2,1
   11510:	1099cb04 	addi	r2,r2,26412
   11514:	100b883a 	mov	r5,r2
   11518:	80805215 	stw	r2,328(r16)
   1151c:	003fd606 	br	11478 <__register_exitproc+0x40>
   11520:	00800034 	movhi	r2,0
   11524:	10800004 	addi	r2,r2,0
   11528:	1000021e 	bne	r2,zero,11534 <__register_exitproc+0xfc>
   1152c:	013fffc4 	movi	r4,-1
   11530:	003fdc06 	br	114a4 <__register_exitproc+0x6c>
   11534:	01006404 	movi	r4,400
   11538:	103ee83a 	callr	r2
   1153c:	1007883a 	mov	r3,r2
   11540:	103ffa26 	beq	r2,zero,1152c <__register_exitproc+0xf4>
   11544:	80805217 	ldw	r2,328(r16)
   11548:	180b883a 	mov	r5,r3
   1154c:	18000115 	stw	zero,4(r3)
   11550:	18800015 	stw	r2,0(r3)
   11554:	80c05215 	stw	r3,328(r16)
   11558:	18006215 	stw	zero,392(r3)
   1155c:	18006315 	stw	zero,396(r3)
   11560:	0009883a 	mov	r4,zero
   11564:	883fc826 	beq	r17,zero,11488 <__register_exitproc+0x50>
   11568:	003fd706 	br	114c8 <__register_exitproc+0x90>

0001156c <register_fini>:
   1156c:	f800283a 	ret

00011570 <__call_exitprocs>:
   11570:	00800074 	movhi	r2,1
   11574:	108ea604 	addi	r2,r2,15000
   11578:	10800017 	ldw	r2,0(r2)
   1157c:	defff304 	addi	sp,sp,-52
   11580:	df000b15 	stw	fp,44(sp)
   11584:	d8800115 	stw	r2,4(sp)
   11588:	00800034 	movhi	r2,0
   1158c:	10800004 	addi	r2,r2,0
   11590:	1005003a 	cmpeq	r2,r2,zero
   11594:	d8800215 	stw	r2,8(sp)
   11598:	d8800117 	ldw	r2,4(sp)
   1159c:	dd400815 	stw	r21,32(sp)
   115a0:	dd000715 	stw	r20,28(sp)
   115a4:	10805204 	addi	r2,r2,328
   115a8:	dfc00c15 	stw	ra,48(sp)
   115ac:	ddc00a15 	stw	r23,40(sp)
   115b0:	dd800915 	stw	r22,36(sp)
   115b4:	dcc00615 	stw	r19,24(sp)
   115b8:	dc800515 	stw	r18,20(sp)
   115bc:	dc400415 	stw	r17,16(sp)
   115c0:	dc000315 	stw	r16,12(sp)
   115c4:	282b883a 	mov	r21,r5
   115c8:	2039883a 	mov	fp,r4
   115cc:	d8800015 	stw	r2,0(sp)
   115d0:	2829003a 	cmpeq	r20,r5,zero
   115d4:	d8800117 	ldw	r2,4(sp)
   115d8:	14405217 	ldw	r17,328(r2)
   115dc:	88001026 	beq	r17,zero,11620 <__call_exitprocs+0xb0>
   115e0:	ddc00017 	ldw	r23,0(sp)
   115e4:	88800117 	ldw	r2,4(r17)
   115e8:	8c802204 	addi	r18,r17,136
   115ec:	143fffc4 	addi	r16,r2,-1
   115f0:	80000916 	blt	r16,zero,11618 <__call_exitprocs+0xa8>
   115f4:	05bfffc4 	movi	r22,-1
   115f8:	a000151e 	bne	r20,zero,11650 <__call_exitprocs+0xe0>
   115fc:	8409883a 	add	r4,r16,r16
   11600:	2105883a 	add	r2,r4,r4
   11604:	1485883a 	add	r2,r2,r18
   11608:	10c02017 	ldw	r3,128(r2)
   1160c:	a8c01126 	beq	r21,r3,11654 <__call_exitprocs+0xe4>
   11610:	843fffc4 	addi	r16,r16,-1
   11614:	85bff81e 	bne	r16,r22,115f8 <__call_exitprocs+0x88>
   11618:	d8800217 	ldw	r2,8(sp)
   1161c:	10003126 	beq	r2,zero,116e4 <__call_exitprocs+0x174>
   11620:	dfc00c17 	ldw	ra,48(sp)
   11624:	df000b17 	ldw	fp,44(sp)
   11628:	ddc00a17 	ldw	r23,40(sp)
   1162c:	dd800917 	ldw	r22,36(sp)
   11630:	dd400817 	ldw	r21,32(sp)
   11634:	dd000717 	ldw	r20,28(sp)
   11638:	dcc00617 	ldw	r19,24(sp)
   1163c:	dc800517 	ldw	r18,20(sp)
   11640:	dc400417 	ldw	r17,16(sp)
   11644:	dc000317 	ldw	r16,12(sp)
   11648:	dec00d04 	addi	sp,sp,52
   1164c:	f800283a 	ret
   11650:	8409883a 	add	r4,r16,r16
   11654:	88c00117 	ldw	r3,4(r17)
   11658:	2105883a 	add	r2,r4,r4
   1165c:	1445883a 	add	r2,r2,r17
   11660:	18ffffc4 	addi	r3,r3,-1
   11664:	11800217 	ldw	r6,8(r2)
   11668:	1c001526 	beq	r3,r16,116c0 <__call_exitprocs+0x150>
   1166c:	10000215 	stw	zero,8(r2)
   11670:	303fe726 	beq	r6,zero,11610 <__call_exitprocs+0xa0>
   11674:	00c00044 	movi	r3,1
   11678:	1c06983a 	sll	r3,r3,r16
   1167c:	90804017 	ldw	r2,256(r18)
   11680:	8cc00117 	ldw	r19,4(r17)
   11684:	1884703a 	and	r2,r3,r2
   11688:	10001426 	beq	r2,zero,116dc <__call_exitprocs+0x16c>
   1168c:	90804117 	ldw	r2,260(r18)
   11690:	1884703a 	and	r2,r3,r2
   11694:	10000c1e 	bne	r2,zero,116c8 <__call_exitprocs+0x158>
   11698:	2105883a 	add	r2,r4,r4
   1169c:	1485883a 	add	r2,r2,r18
   116a0:	11400017 	ldw	r5,0(r2)
   116a4:	e009883a 	mov	r4,fp
   116a8:	303ee83a 	callr	r6
   116ac:	88800117 	ldw	r2,4(r17)
   116b0:	98bfc81e 	bne	r19,r2,115d4 <__call_exitprocs+0x64>
   116b4:	b8800017 	ldw	r2,0(r23)
   116b8:	147fd526 	beq	r2,r17,11610 <__call_exitprocs+0xa0>
   116bc:	003fc506 	br	115d4 <__call_exitprocs+0x64>
   116c0:	8c000115 	stw	r16,4(r17)
   116c4:	003fea06 	br	11670 <__call_exitprocs+0x100>
   116c8:	2105883a 	add	r2,r4,r4
   116cc:	1485883a 	add	r2,r2,r18
   116d0:	11000017 	ldw	r4,0(r2)
   116d4:	303ee83a 	callr	r6
   116d8:	003ff406 	br	116ac <__call_exitprocs+0x13c>
   116dc:	303ee83a 	callr	r6
   116e0:	003ff206 	br	116ac <__call_exitprocs+0x13c>
   116e4:	88800117 	ldw	r2,4(r17)
   116e8:	1000081e 	bne	r2,zero,1170c <__call_exitprocs+0x19c>
   116ec:	89000017 	ldw	r4,0(r17)
   116f0:	20000726 	beq	r4,zero,11710 <__call_exitprocs+0x1a0>
   116f4:	b9000015 	stw	r4,0(r23)
   116f8:	8809883a 	mov	r4,r17
   116fc:	00000000 	call	0 <__reset>
   11700:	bc400017 	ldw	r17,0(r23)
   11704:	883fb71e 	bne	r17,zero,115e4 <__call_exitprocs+0x74>
   11708:	003fc506 	br	11620 <__call_exitprocs+0xb0>
   1170c:	89000017 	ldw	r4,0(r17)
   11710:	882f883a 	mov	r23,r17
   11714:	2023883a 	mov	r17,r4
   11718:	883fb21e 	bne	r17,zero,115e4 <__call_exitprocs+0x74>
   1171c:	003fc006 	br	11620 <__call_exitprocs+0xb0>

00011720 <__floatundidf>:
   11720:	defffb04 	addi	sp,sp,-20
   11724:	dc800215 	stw	r18,8(sp)
   11728:	2025883a 	mov	r18,r4
   1172c:	2809883a 	mov	r4,r5
   11730:	dfc00415 	stw	ra,16(sp)
   11734:	dc400115 	stw	r17,4(sp)
   11738:	dc000015 	stw	r16,0(sp)
   1173c:	dcc00315 	stw	r19,12(sp)
   11740:	000d9d80 	call	d9d8 <__floatunsidf>
   11744:	100d883a 	mov	r6,r2
   11748:	180f883a 	mov	r7,r3
   1174c:	0005883a 	mov	r2,zero
   11750:	00d07c34 	movhi	r3,16880
   11754:	380b883a 	mov	r5,r7
   11758:	3009883a 	mov	r4,r6
   1175c:	180f883a 	mov	r7,r3
   11760:	100d883a 	mov	r6,r2
   11764:	0003dd80 	call	3dd8 <__muldf3>
   11768:	9009883a 	mov	r4,r18
   1176c:	1021883a 	mov	r16,r2
   11770:	1823883a 	mov	r17,r3
   11774:	000d9d80 	call	d9d8 <__floatunsidf>
   11778:	880b883a 	mov	r5,r17
   1177c:	8009883a 	mov	r4,r16
   11780:	180f883a 	mov	r7,r3
   11784:	100d883a 	mov	r6,r2
   11788:	0003d640 	call	3d64 <__adddf3>
   1178c:	dfc00417 	ldw	ra,16(sp)
   11790:	dcc00317 	ldw	r19,12(sp)
   11794:	dc800217 	ldw	r18,8(sp)
   11798:	dc400117 	ldw	r17,4(sp)
   1179c:	dc000017 	ldw	r16,0(sp)
   117a0:	dec00504 	addi	sp,sp,20
   117a4:	f800283a 	ret

000117a8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   117a8:	defffd04 	addi	sp,sp,-12
   117ac:	df000215 	stw	fp,8(sp)
   117b0:	df000204 	addi	fp,sp,8
   117b4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   117b8:	e0bfff17 	ldw	r2,-4(fp)
   117bc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   117c0:	e0bffe17 	ldw	r2,-8(fp)
   117c4:	1005003a 	cmpeq	r2,r2,zero
   117c8:	1000021e 	bne	r2,zero,117d4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   117cc:	002af070 	cmpltui	zero,zero,43969
   117d0:	00000106 	br	117d8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   117d4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   117d8:	e037883a 	mov	sp,fp
   117dc:	df000017 	ldw	fp,0(sp)
   117e0:	dec00104 	addi	sp,sp,4
   117e4:	f800283a 	ret

000117e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   117e8:	defffd04 	addi	sp,sp,-12
   117ec:	dfc00215 	stw	ra,8(sp)
   117f0:	df000115 	stw	fp,4(sp)
   117f4:	df000104 	addi	fp,sp,4
   117f8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   117fc:	e13fff17 	ldw	r4,-4(fp)
   11800:	00117a80 	call	117a8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11804:	003fff06 	br	11804 <_exit+0x1c>
   11808:	00000010 	cmplti	zero,zero,0
   1180c:	00000000 	call	0 <__reset>
   11810:	00527a01 	jmpi	527a0 <_gp+0x36d0c>
   11814:	011f7c01 	jmpi	11f7c0 <_gp+0x103d2c>
   11818:	001b0c0b 	ldhu	zero,27696(zero)
   1181c:	00000028 	cmpgeui	zero,zero,0
   11820:	00000018 	cmpnei	zero,zero,0
   11824:	0000cbfc 	xorhi	zero,zero,815
   11828:	0000066c 	andhi	zero,zero,25
   1182c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x1c0e440>
   11830:	910a9074 	orhi	r4,r18,10817
   11834:	94089209 	0x94089209
   11838:	97049606 	br	12a94 <jtag_uart+0xf0>
   1183c:	93019f03 	ldbu	r12,1660(r18)
   11840:	9c059507 	ldb	r16,5716(r19)
   11844:	00000002 	0x2
   11848:	00000028 	cmpgeui	zero,zero,0
   1184c:	00000044 	movi	zero,1
   11850:	0000d268 	cmpgeui	zero,zero,841
   11854:	00000660 	cmpeqi	zero,zero,25
   11858:	400e4400 	call	400e440 <__alt_mem_descriptor_memory+0xc440>
   1185c:	92099170 	cmpltui	r8,r18,9797
   11860:	96069408 	cmpgei	et,r18,6736
   11864:	9c039704 	addi	r16,r19,3676
   11868:	90019f02 	0x90019f02
   1186c:	9507930a 	0x9507930a
   11870:	00000005 	stb	zero,0(zero)
   11874:	0001156c 	andhi	zero,zero,1109
